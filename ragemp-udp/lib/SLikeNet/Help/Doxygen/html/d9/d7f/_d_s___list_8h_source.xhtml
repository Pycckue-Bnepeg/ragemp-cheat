<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>SLikeNet: Source/include/slikenet/DS_List.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SLikeNet
   &#160;<span id="projectnumber">0.1.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../modules.xhtml"><span>Modules</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="../../files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="../../globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('d9/d7f/_d_s___list_8h_source.xhtml','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">DS_List.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d9/d7f/_d_s___list_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *  Original work: Copyright (c) 2014, Oculus VR, Inc.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  All rights reserved.</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  This source code is licensed under the BSD-style license found in the</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *  RakNet License.txt file in the licenses directory of this source tree. An additional grant </span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  of patent rights can be found in the RakNet Patents.txt file in the same directory.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *  Modified work: Copyright (c) 2017, SLikeSoft UG (haftungsbeschr√§nkt)</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  This source code was modified by SLikeSoft. Modifications are licensed under the MIT-style</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  license found in the license.txt file in the root directory of this source tree.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#ifndef __LIST_H</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define __LIST_H </span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../dc/da7/assert_8h.xhtml">assert.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="../../da/d66/string_8h.xhtml">string.h</a>&gt;</span> <span class="comment">// memmove</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../db/dbd/_export_8h.xhtml">Export.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../dd/dc5/memoryoverride_8h.xhtml" title="If _USE_RAK_MEMORY_OVERRIDE is defined, memory allocations go through rakMalloc, rakRealloc, and rakFree.">memoryoverride.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div>
<div class="line"><a name="l00032"></a><span class="lineno"><a class="code" href="../../d9/d7f/_d_s___list_8h.xhtml#afc42e3d98c21b07bd24b47aeb8ef2561">   32</a></span>&#160;<span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="../../d9/d7f/_d_s___list_8h.xhtml#afc42e3d98c21b07bd24b47aeb8ef2561" title="Maximum unsigned long.">MAX_UNSIGNED_LONG</a> = 4294967295U;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span>DataStructures</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> list_type&gt;</div>
<div class="line"><a name="l00041"></a><span class="lineno"><a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml">   41</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../db/dbd/_export_8h.xhtml#ab0579394e418800d5c85e46ad6fcd61d">RAK_DLL_EXPORT</a> <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml" title="Array based implementation of a list.">List</a></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    {   </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml" title="Array based implementation of a list.">List</a>();</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="comment">// Destructor</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        ~<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml" title="Array based implementation of a list.">List</a>();</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml" title="Array based implementation of a list.">List</a>( <span class="keyword">const</span> <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml" title="Array based implementation of a list.">List</a>&amp; original_copy );</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml" title="Array based implementation of a list.">List</a>&amp; operator= ( <span class="keyword">const</span> <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml" title="Array based implementation of a list.">List</a>&amp; original_copy );</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        list_type&amp; operator[] ( <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> position ) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        list_type&amp; Get ( <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> position ) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordtype">void</span> Push(<span class="keyword">const</span> list_type &amp;input, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line );</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        list_type&amp; Pop(<span class="keywordtype">void</span>);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keywordtype">void</span> Insert( <span class="keyword">const</span> list_type &amp;input, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> position, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line );</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordtype">void</span> Insert( <span class="keyword">const</span> list_type &amp;input, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line );</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keywordtype">void</span> Replace( <span class="keyword">const</span> list_type &amp;input, <span class="keyword">const</span> list_type filler, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> position, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line );</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        </div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordtype">void</span> Replace( <span class="keyword">const</span> list_type &amp;input );</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordtype">void</span> RemoveAtIndex( <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> position );</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordtype">void</span> RemoveAtIndexFast( <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> position );</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordtype">void</span> RemoveFromEnd(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> num=1);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        </div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetIndexOf( <span class="keyword">const</span> list_type &amp;input ) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Size( <span class="keywordtype">void</span> ) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordtype">void</span> Clear( <span class="keywordtype">bool</span> doNotDeallocateSmallBlocks, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line );</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keywordtype">void</span> Preallocate( <span class="keywordtype">unsigned</span> countNeeded, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line );</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keywordtype">void</span> Compress( <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line );</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        list_type* listArray;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> list_size;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        </div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> allocation_size;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    };</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> list_type&gt;</div>
<div class="line"><a name="l00141"></a><span class="lineno"><a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#aa063066442a5e28b3c40d0b1206ace35">  141</a></span>&#160;        <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#aa063066442a5e28b3c40d0b1206ace35" title="Default constructor.">List&lt;list_type&gt;::List</a>()</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        allocation_size = 0;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        listArray = 0;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        list_size = 0;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    }</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> list_type&gt;</div>
<div class="line"><a name="l00149"></a><span class="lineno"><a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a42e396ab4ea4c92197b6a86e74a65f3f">  149</a></span>&#160;        <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a42e396ab4ea4c92197b6a86e74a65f3f">List&lt;list_type&gt;::~List</a>()</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    {</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">if</span> (allocation_size&gt;0)</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#acd53258ab2c0b731df325c91b2e85c9b">SLNet::OP_DELETE_ARRAY</a>(listArray, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    }</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> list_type&gt;</div>
<div class="line"><a name="l00157"></a><span class="lineno"><a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#abafec4707d1b0b452539afb5acabe1da">  157</a></span>&#160;        <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#aa063066442a5e28b3c40d0b1206ace35" title="Default constructor.">List&lt;list_type&gt;::List</a>( <span class="keyword">const</span> <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml" title="Array based implementation of a list.">List</a>&amp; original_copy )</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="comment">// Allocate memory for copy</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordflow">if</span> ( original_copy.list_size == 0 )</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            list_size = 0;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            allocation_size = 0;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        }</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        {</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            listArray = SLNet::OP_NEW_ARRAY&lt;list_type &gt;( original_copy.list_size , <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keywordflow">for</span> ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> counter = 0; counter &lt; original_copy.list_size; ++counter )</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                listArray[ counter ] = original_copy.listArray[ counter ];</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            <span class="comment">// Don&#39;t call constructors, assignment operators, etc.</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="comment">//memcpy(listArray, original_copy.listArray, original_copy.list_size*sizeof(list_type));</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            list_size = allocation_size = original_copy.list_size;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        }</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    }</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> list_type&gt;</div>
<div class="line"><a name="l00181"></a><span class="lineno"><a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a7faf28804c9d17c301ee072c7dce005b">  181</a></span>&#160;        <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml" title="Array based implementation of a list.">List&lt;list_type&gt;</a>&amp; <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a7faf28804c9d17c301ee072c7dce005b" title="Assign one list to another.">List&lt;list_type&gt;::operator= </a>( <span class="keyword">const</span> <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml" title="Array based implementation of a list.">List</a>&amp; original_copy )</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    {</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keywordflow">if</span> ( ( &amp;original_copy ) != <span class="keyword">this</span> )</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        {</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            Clear( <span class="keyword">false</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <span class="comment">// Allocate memory for copy</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <span class="keywordflow">if</span> ( original_copy.list_size == 0 )</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            {</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                list_size = 0;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                allocation_size = 0;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            }</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            {</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                listArray = SLNet::OP_NEW_ARRAY&lt;list_type &gt;( original_copy.list_size , <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                <span class="keywordflow">for</span> ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> counter = 0; counter &lt; original_copy.list_size; ++counter )</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                    listArray[ counter ] = original_copy.listArray[ counter ];</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                <span class="comment">// Don&#39;t call constructors, assignment operators, etc.</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                <span class="comment">//memcpy(listArray, original_copy.listArray, original_copy.list_size*sizeof(list_type));</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                list_size = allocation_size = original_copy.list_size;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            }</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        }</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    }</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> list_type&gt;</div>
<div class="line"><a name="l00213"></a><span class="lineno"><a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a028d64be4f2c6945be0f31a48b80823a">  213</a></span>&#160;            <span class="keyword">inline</span> list_type&amp; <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a028d64be4f2c6945be0f31a48b80823a" title="Access an element by its index in the array.">List&lt;list_type&gt;::operator[] </a>( <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> position )<span class="keyword"> const</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="preprocessor">        #ifdef _DEBUG</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="preprocessor"></span>            <span class="keywordflow">if</span> (position&gt;=list_size)</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            {</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a> ( position &lt; list_size );</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            }</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="preprocessor">        #endif</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="preprocessor"></span>            <span class="keywordflow">return</span> listArray[ position ];</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        }</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="comment">// Just here for debugging</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> list_type&gt;</div>
<div class="line"><a name="l00226"></a><span class="lineno"><a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a46ce8d0ed396b4de4cc3d4af3e6965db">  226</a></span>&#160;        <span class="keyword">inline</span> list_type&amp; <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a46ce8d0ed396b4de4cc3d4af3e6965db" title="Access an element by its index in the array.">List&lt;list_type&gt;::Get</a> ( <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> position )<span class="keyword"> const</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            <span class="keywordflow">return</span> listArray[ position ];</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        }</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> list_type&gt;</div>
<div class="line"><a name="l00232"></a><span class="lineno"><a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a771fc63e3b0d892fbb605a379a78bacb">  232</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a771fc63e3b0d892fbb605a379a78bacb" title="Push an element at the end of the stack.">List&lt;list_type&gt;::Push</a>(<span class="keyword">const</span> list_type &amp;input, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line)</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        {</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            Insert(input, file, line);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        }</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> list_type&gt;</div>
<div class="line"><a name="l00238"></a><span class="lineno"><a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a9be46e78d21543bf28bd473807160024">  238</a></span>&#160;        <span class="keyword">inline</span> list_type&amp; <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a9be46e78d21543bf28bd473807160024" title="Pop an element from the end of the stack.">List&lt;list_type&gt;::Pop</a>(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="preprocessor">#ifdef _DEBUG</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="preprocessor"></span>            <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(list_size&gt;0);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="preprocessor"></span>            --list_size;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            <span class="keywordflow">return</span> listArray[list_size];</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        }</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> list_type&gt;</div>
<div class="line"><a name="l00248"></a><span class="lineno"><a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a5cb7d8b68d8d020a34f2186ea8d5b1c6">  248</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a5cb7d8b68d8d020a34f2186ea8d5b1c6" title="Insert an element at position position in the list.">List&lt;list_type&gt;::Insert</a>( <span class="keyword">const</span> list_type &amp;input, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> position, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line )</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    {</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="preprocessor">#ifdef _DEBUG</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="preprocessor"></span>        <span class="keywordflow">if</span> (position&gt;list_size)</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        {</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>( position &lt;= list_size );</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        }</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <span class="comment">// Reallocate list if necessary</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="keywordflow">if</span> ( list_size == allocation_size )</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        {</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            <span class="comment">// allocate twice the currently allocated memory</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            list_type * new_array;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            <span class="keywordflow">if</span> ( allocation_size == 0 )</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                allocation_size = 16;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                allocation_size *= 2;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            new_array = SLNet::OP_NEW_ARRAY&lt;list_type &gt;( allocation_size , file, line );</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            <span class="comment">// copy old array over</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            <span class="keywordflow">for</span> ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> counter = 0; counter &lt; list_size; ++counter )</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                new_array[ counter ] = listArray[ counter ];</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            <span class="comment">// Don&#39;t call constructors, assignment operators, etc.</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            <span class="comment">//memcpy(new_array, listArray, list_size*sizeof(list_type));</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            <span class="comment">// set old array to point to the newly allocated and twice as large array</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#acd53258ab2c0b731df325c91b2e85c9b">SLNet::OP_DELETE_ARRAY</a>(listArray, file, line);</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            listArray = new_array;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        }</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="comment">// Move the elements in the list to make room</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        <span class="keywordflow">for</span> ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> counter = list_size; counter != position; counter-- )</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            listArray[ counter ] = listArray[ counter - 1 ];</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        <span class="comment">// Don&#39;t call constructors, assignment operators, etc.</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        <span class="comment">//memmove(listArray+position+1, listArray+position, (list_size-position)*sizeof(list_type));</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        <span class="comment">// Insert the new item at the correct spot</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        listArray[ position ] = input;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        ++list_size;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    }</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> list_type&gt;</div>
<div class="line"><a name="l00299"></a><span class="lineno"><a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#adfe61ff53151ab61ecba6f8506a4662f">  299</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a5cb7d8b68d8d020a34f2186ea8d5b1c6" title="Insert an element at position position in the list.">List&lt;list_type&gt;::Insert</a>( <span class="keyword">const</span> list_type &amp;input, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line )</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    {</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <span class="comment">// Reallocate list if necessary</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <span class="keywordflow">if</span> ( list_size == allocation_size )</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        {</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            <span class="comment">// allocate twice the currently allocated memory</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            list_type * new_array;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            <span class="keywordflow">if</span> ( allocation_size == 0 )</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                allocation_size = 16;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                allocation_size *= 2;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            new_array = SLNet::OP_NEW_ARRAY&lt;list_type &gt;( allocation_size , file, line );</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            <span class="keywordflow">if</span> (listArray)</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;            {</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                <span class="comment">// copy old array over</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                    <span class="keywordflow">for</span> ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> counter = 0; counter &lt; list_size; ++counter )</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                        new_array[ counter ] = listArray[ counter ];</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                <span class="comment">// Don&#39;t call constructors, assignment operators, etc.</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                <span class="comment">//memcpy(new_array, listArray, list_size*sizeof(list_type));</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                <span class="comment">// set old array to point to the newly allocated and twice as large array</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                    <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#acd53258ab2c0b731df325c91b2e85c9b">SLNet::OP_DELETE_ARRAY</a>(listArray, file, line);</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            }</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            </div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            listArray = new_array;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        }</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        <span class="comment">// Insert the new item at the correct spot</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        listArray[ list_size ] = input;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        ++list_size;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    }</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> list_type&gt;</div>
<div class="line"><a name="l00338"></a><span class="lineno"><a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a953b497c5f51b0b4f98089c08ad15696">  338</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a953b497c5f51b0b4f98089c08ad15696" title="Replace the value at position by input.">List&lt;list_type&gt;::Replace</a>( <span class="keyword">const</span> list_type &amp;input, <span class="keyword">const</span> list_type filler, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> position, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line )</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    {</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        <span class="keywordflow">if</span> ( ( list_size &gt; 0 ) &amp;&amp; ( position &lt; list_size ) )</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        {</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            <span class="comment">// Direct replacement</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            listArray[ position ] = input;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        }</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        {</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            <span class="keywordflow">if</span> ( position &gt;= allocation_size )</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            {</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                <span class="comment">// Reallocate the list to size position and fill in blanks with filler</span></div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                list_type * new_array;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                allocation_size = position + 1;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                new_array = SLNet::OP_NEW_ARRAY&lt;list_type &gt;( allocation_size , file, line );</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                <span class="comment">// copy old array over</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                <span class="keywordflow">for</span> ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> counter = 0; counter &lt; list_size; ++counter )</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                    new_array[ counter ] = listArray[ counter ];</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                <span class="comment">// Don&#39;t call constructors, assignment operators, etc.</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                <span class="comment">//memcpy(new_array, listArray, list_size*sizeof(list_type));</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                <span class="comment">// set old array to point to the newly allocated array</span></div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#acd53258ab2c0b731df325c91b2e85c9b">SLNet::OP_DELETE_ARRAY</a>(listArray, file, line);</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                listArray = new_array;</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            }</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            <span class="comment">// Fill in holes with filler</span></div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            <span class="keywordflow">while</span> ( list_size &lt; position )</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                listArray[ list_size++ ] = filler;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            <span class="comment">// Fill in the last element with the new item</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            listArray[ list_size++ ] = input;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="preprocessor">#ifdef _DEBUG</span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>( list_size == position + 1 );</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        }</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    }</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> list_type&gt;</div>
<div class="line"><a name="l00386"></a><span class="lineno"><a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a3eb0624d2bd176d1cc85f2ff45264eb9">  386</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a953b497c5f51b0b4f98089c08ad15696" title="Replace the value at position by input.">List&lt;list_type&gt;::Replace</a>( <span class="keyword">const</span> list_type &amp;input )</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    {</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        <span class="keywordflow">if</span> ( list_size &gt; 0 )</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            listArray[ list_size - 1 ] = input;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    }</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> list_type&gt;</div>
<div class="line"><a name="l00393"></a><span class="lineno"><a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a79621376e92b605c4dbdb77aafbb6b60">  393</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a79621376e92b605c4dbdb77aafbb6b60" title="Delete the element at position position.">List&lt;list_type&gt;::RemoveAtIndex</a>( <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> position )</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    {</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="preprocessor">#ifdef _DEBUG</span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="preprocessor"></span>        <span class="keywordflow">if</span> (position &gt;= list_size)</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        {</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>( position &lt; list_size );</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        }</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        <span class="keywordflow">if</span> ( position &lt; list_size )</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        {</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            <span class="comment">// Compress the array</span></div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            <span class="keywordflow">for</span> ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> counter = position; counter &lt; list_size - 1 ; ++counter )</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            listArray[ counter ] = listArray[ counter + 1 ];</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;            <span class="comment">// Don&#39;t call constructors, assignment operators, etc.</span></div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;            <span class="comment">// memmove(listArray+position, listArray+position+1, (list_size-1-position) * sizeof(list_type));</span></div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;            RemoveFromEnd();</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        }</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    }</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> list_type&gt;</div>
<div class="line"><a name="l00416"></a><span class="lineno"><a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a351a647150169c71cc3f758dbb312096">  416</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a351a647150169c71cc3f758dbb312096" title="Delete the element at position position.">List&lt;list_type&gt;::RemoveAtIndexFast</a>( <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> position )</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        {</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="preprocessor">#ifdef _DEBUG</span></div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="preprocessor"></span>            <span class="keywordflow">if</span> (position &gt;= list_size)</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;            {</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>( position &lt; list_size );</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;            }</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="preprocessor"></span>            --list_size;</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;            listArray[position]=listArray[list_size];</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        }</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> list_type&gt;</div>
<div class="line"><a name="l00430"></a><span class="lineno"><a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#aeed32cd1075569515bb825f874dca24e">  430</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#aeed32cd1075569515bb825f874dca24e" title="Delete the element at the end of the list.">List&lt;list_type&gt;::RemoveFromEnd</a>( <span class="keyword">const</span> <span class="keywordtype">unsigned</span> num )</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    {</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        <span class="comment">// Delete the last elements on the list.  No compression needed</span></div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="preprocessor">#ifdef _DEBUG</span></div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="preprocessor"></span>        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(list_size&gt;=num);</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="preprocessor"></span>        list_size-=num;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    }</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> list_type&gt;</div>
<div class="line"><a name="l00440"></a><span class="lineno"><a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#aae4e608a6f4cc3560ee3b3b20eda67fe">  440</a></span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#aae4e608a6f4cc3560ee3b3b20eda67fe" title="Returns the index of the specified item or MAX_UNSIGNED_LONG if not found.">List&lt;list_type&gt;::GetIndexOf</a>( <span class="keyword">const</span> list_type &amp;input )<span class="keyword"> const</span></div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        <span class="keywordflow">for</span> ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; list_size; ++i )</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            <span class="keywordflow">if</span> ( listArray[ i ] == input )</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="../../d9/d7f/_d_s___list_8h.xhtml#afc42e3d98c21b07bd24b47aeb8ef2561" title="Maximum unsigned long.">MAX_UNSIGNED_LONG</a>;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    }</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> list_type&gt;</div>
<div class="line"><a name="l00450"></a><span class="lineno"><a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">  450</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">List&lt;list_type&gt;::Size</a>( <span class="keywordtype">void</span> )<span class="keyword"> const</span></div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        <span class="keywordflow">return</span> list_size;</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    }</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> list_type&gt;</div>
<div class="line"><a name="l00456"></a><span class="lineno"><a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a34219a5ce92981102d06fb1da7842a6b">  456</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a34219a5ce92981102d06fb1da7842a6b" title="Clear the list.">List&lt;list_type&gt;::Clear</a>( <span class="keywordtype">bool</span> doNotDeallocateSmallBlocks, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line )</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    {</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        <span class="keywordflow">if</span> ( allocation_size == 0 )</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        <span class="keywordflow">if</span> (allocation_size&gt;512 || doNotDeallocateSmallBlocks==<span class="keyword">false</span>)</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        {</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;            <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#acd53258ab2c0b731df325c91b2e85c9b">SLNet::OP_DELETE_ARRAY</a>(listArray, file, line);</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;            allocation_size = 0;</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;            listArray = 0;</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        }</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        list_size = 0;</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    }</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> list_type&gt;</div>
<div class="line"><a name="l00471"></a><span class="lineno"><a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a1dd30a84afeb655784dae4351777dce5">  471</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a1dd30a84afeb655784dae4351777dce5" title="Frees overallocated members, to use the minimum memory necessary.">List&lt;list_type&gt;::Compress</a>( <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line )</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    {</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        list_type * new_array;</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        <span class="keywordflow">if</span> ( allocation_size == 0 )</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;            <a class="code" href="../../dc/d0b/_thread_pool_8h.xhtml#a9717e7bbecb906637e86cef6da3d83c2">return</a> ;</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        new_array = SLNet::OP_NEW_ARRAY&lt;list_type &gt;( allocation_size , file, line );</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        <span class="comment">// copy old array over</span></div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        <span class="keywordflow">for</span> ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> counter = 0; counter &lt; list_size; ++counter )</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;            new_array[ counter ] = listArray[ counter ];</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        <span class="comment">// Don&#39;t call constructors, assignment operators, etc.</span></div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        <span class="comment">//memcpy(new_array, listArray, list_size*sizeof(list_type));</span></div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        <span class="comment">// set old array to point to the newly allocated array</span></div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;        <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#acd53258ab2c0b731df325c91b2e85c9b">SLNet::OP_DELETE_ARRAY</a>(listArray, file, line);</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;        listArray = new_array;</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    }</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> list_type&gt;</div>
<div class="line"><a name="l00494"></a><span class="lineno"><a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a3ccff322ccbf8eca0214d2c39693abc0">  494</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a3ccff322ccbf8eca0214d2c39693abc0" title="Preallocate the list, so it needs fewer reallocations at runtime.">List&lt;list_type&gt;::Preallocate</a>( <span class="keywordtype">unsigned</span> countNeeded, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line )</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    {</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;        <span class="keywordtype">unsigned</span> amountToAllocate = allocation_size;</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        <span class="keywordflow">if</span> (allocation_size==0)</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            amountToAllocate=16;</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        <span class="keywordflow">while</span> (amountToAllocate &lt; countNeeded)</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            amountToAllocate&lt;&lt;=1;</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        <span class="keywordflow">if</span> ( allocation_size &lt; amountToAllocate)</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        {</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;            <span class="comment">// allocate twice the currently allocated memory</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            list_type * new_array;</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;            allocation_size=amountToAllocate;</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;            new_array = SLNet::OP_NEW_ARRAY&lt; list_type &gt;( allocation_size , file, line );</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;            <span class="keywordflow">if</span> (listArray)</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;            {</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                <span class="comment">// copy old array over</span></div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                <span class="keywordflow">for</span> ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> counter = 0; counter &lt; list_size; ++counter )</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                    new_array[ counter ] = listArray[ counter ];</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                <span class="comment">// Don&#39;t call constructors, assignment operators, etc.</span></div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                <span class="comment">//memcpy(new_array, listArray, list_size*sizeof(list_type));</span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                <span class="comment">// set old array to point to the newly allocated and twice as large array</span></div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#acd53258ab2c0b731df325c91b2e85c9b">SLNet::OP_DELETE_ARRAY</a>(listArray, file, line);</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;            }</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;            listArray = new_array;</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        }</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    }</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    </div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;} <span class="comment">// End namespace</span></div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="preprocessor">#endif</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_74389ed8173ad57b461b9d623a1f3867.xhtml">Source</a></li><li class="navelem"><a class="el" href="../../dir_bbb90e3ef9167a594ae33323139a2595.xhtml">include</a></li><li class="navelem"><a class="el" href="../../dir_88467e66686deb9d3756fe4fc298e321.xhtml">slikenet</a></li><li class="navelem"><a class="el" href="../../d9/d7f/_d_s___list_8h.xhtml">DS_List.h</a></li>
    <li class="footer">Generated on Wed Aug 14 2019 22:09:46 for SLikeNet by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.2 </li>
  </ul>
</div>
</body>
</html>
