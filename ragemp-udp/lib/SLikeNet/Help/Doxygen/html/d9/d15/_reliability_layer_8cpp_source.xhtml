<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>SLikeNet: Source/src/ReliabilityLayer.cpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SLikeNet
   &#160;<span id="projectnumber">0.1.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../modules.xhtml"><span>Modules</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="../../files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="../../globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('d9/d15/_reliability_layer_8cpp_source.xhtml','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ReliabilityLayer.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d9/d15/_reliability_layer_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *  Original work: Copyright (c) 2014, Oculus VR, Inc.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  All rights reserved.</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  This source code is licensed under the BSD-style license found in the</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *  RakNet License.txt file in the licenses directory of this source tree. An additional grant </span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  of patent rights can be found in the RakNet Patents.txt file in the same directory.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *  Modified work: Copyright (c) 2016-2018, SLikeSoft UG (haftungsbeschr√§nkt)</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  This source code was modified by SLikeSoft. Modifications are licensed under the MIT-style</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  license found in the license.txt file in the root directory of this source tree.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../dd/dba/_reliability_layer_8h.xhtml" title="[Internal] Datagram reliable, ordered, unordered and sequenced sends. Flow control. Message splitting, reassembly, and coalescence.">slikenet/ReliabilityLayer.h</a>&quot;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d6/d76/_get_time_8h.xhtml" title="Returns the value from QueryPerformanceCounter. This is the function RakNet uses to represent time...">slikenet/GetTime.h</a>&quot;</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d8/da4/_socket_layer_8h.xhtml" title="SocketLayer class implementation.">slikenet/SocketLayer.h</a>&quot;</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d7/ddd/_plugin_interface2_8h.xhtml" title="RakNet&#39;s plugin functionality system, version 2. You can derive from this to create your own plugins...">slikenet/PluginInterface2.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../dc/da7/assert_8h.xhtml">slikenet/assert.h</a>&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d7/d10/_rand_8h.xhtml" title="[Internal] Random number generator">slikenet/Rand.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d6/d83/_message_identifiers_8h.xhtml" title="All the message identifiers used by RakNet. Message identifiers comprise the first byte of any messag...">slikenet/MessageIdentifiers.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#ifdef USE_THREADED_SEND</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;<a class="code" href="../../d9/dbf/_send_to_thread_8h.xhtml">slikenet/SendToThread.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;math.h&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d7/db2/linux__adapter_8h.xhtml">slikenet/linux_adapter.h</a>&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../da/dff/osx__adapter_8h.xhtml">slikenet/osx_adapter.h</a>&quot;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">using namespace </span>SLNet;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">// Can&#39;t figure out which library has this function on the PS3</span></div>
<div class="line"><a name="l00038"></a><span class="lineno"><a class="code" href="../../d9/d15/_reliability_layer_8cpp.xhtml#ad4fc12d284880f25441149ec051a6e71">   38</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="../../d9/d15/_reliability_layer_8cpp.xhtml#ad4fc12d284880f25441149ec051a6e71">Ceil</a>(<span class="keywordtype">double</span> d) {<span class="keywordflow">if</span> (((<span class="keywordtype">double</span>)((<span class="keywordtype">int</span>)d))==d) <span class="keywordflow">return</span> d; <span class="keywordflow">return</span> (<span class="keywordtype">int</span>) (d+1.0);}</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">// #if defined(new)</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">// #pragma push_macro(&quot;new&quot;)</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">// #undef new</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">// #define RELIABILITY_LAYER_NEW_UNDEF_ALLOCATING_QUEUE</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">// #endif</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">//#define _DEBUG_LOGGER</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#if CC_TIME_TYPE_BYTES==4</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor"></span><span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> <a class="code" href="../../d9/d15/_reliability_layer_8cpp.xhtml#ab71ae4ff858c0448f3e3c2258ffb7a59">MAX_TIME_BETWEEN_PACKETS</a>= 350; <span class="comment">// 350 milliseconds</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> HISTOGRAM_RESTART_CYCLE=10000; <span class="comment">// Every 10 seconds reset the histogram</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00053"></a><span class="lineno"><a class="code" href="../../d9/d15/_reliability_layer_8cpp.xhtml#ab71ae4ff858c0448f3e3c2258ffb7a59">   53</a></span>&#160;<span class="preprocessor"></span><span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> <a class="code" href="../../d9/d15/_reliability_layer_8cpp.xhtml#ab71ae4ff858c0448f3e3c2258ffb7a59">MAX_TIME_BETWEEN_PACKETS</a>= 350000; <span class="comment">// 350 milliseconds</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">//static const CCTimeType HISTOGRAM_RESTART_CYCLE=10000000; // Every 10 seconds reset the histogram</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00056"></a><span class="lineno"><a class="code" href="../../d9/d15/_reliability_layer_8cpp.xhtml#ae70493628411f07443fec90b99b988c6">   56</a></span>&#160;<span class="preprocessor"></span><span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="../../d9/d15/_reliability_layer_8cpp.xhtml#ae70493628411f07443fec90b99b988c6">DEFAULT_HAS_RECEIVED_PACKET_QUEUE_SIZE</a>=512;</div>
<div class="line"><a name="l00057"></a><span class="lineno"><a class="code" href="../../d9/d15/_reliability_layer_8cpp.xhtml#a21d7466dd4fc30691074c33b1adbe324">   57</a></span>&#160;<span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> <a class="code" href="../../d9/d15/_reliability_layer_8cpp.xhtml#a21d7466dd4fc30691074c33b1adbe324">STARTING_TIME_BETWEEN_PACKETS</a>=<a class="code" href="../../d9/d15/_reliability_layer_8cpp.xhtml#ab71ae4ff858c0448f3e3c2258ffb7a59">MAX_TIME_BETWEEN_PACKETS</a>;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">//static const long double TIME_BETWEEN_PACKETS_INCREASE_MULTIPLIER_DEFAULT=.02;</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">//static const long double TIME_BETWEEN_PACKETS_DECREASE_MULTIPLIER_DEFAULT=1.0 / 9.0;</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div>
<div class="line"><a name="l00061"></a><span class="lineno"><a class="code" href="../../d9/d15/_reliability_layer_8cpp.xhtml#a876a7fcb38b382f026f24d72759c49c9">   61</a></span>&#160;<span class="keyword">typedef</span> <a class="code" href="../../df/df2/_native_types_8h.xhtml#a6eb1e68cc391dd753bc8ce896dbb8315">uint32_t</a> <a class="code" href="../../d9/d15/_reliability_layer_8cpp.xhtml#a876a7fcb38b382f026f24d72759c49c9">BitstreamLengthEncoding</a>;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">//#define PRINT_TO_FILE_RELIABLE_ORDERED_TEST</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="preprocessor">#ifdef PRINT_TO_FILE_RELIABLE_ORDERED_TEST</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="preprocessor"></span><span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> packetNumber=0;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="keyword">static</span> FILE *fp=0;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">//#define FLIP_SEND_ORDER_TEST</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">//#define LOG_TRIVIAL_NOTIFICATIONS</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div>
<div class="line"><a name="l00072"></a><span class="lineno"><a class="code" href="../../d7/dae/struct_s_l_net_1_1_b_p_s_tracker_1_1_time_and_value2.xhtml#a16c1b2d3351e8a6e96e6527c8946c8e2">   72</a></span>&#160;<a class="code" href="../../d7/dae/struct_s_l_net_1_1_b_p_s_tracker_1_1_time_and_value2.xhtml#a16c1b2d3351e8a6e96e6527c8946c8e2">BPSTracker::TimeAndValue2::TimeAndValue2</a>() {}</div>
<div class="line"><a name="l00073"></a><span class="lineno"><a class="code" href="../../d7/dae/struct_s_l_net_1_1_b_p_s_tracker_1_1_time_and_value2.xhtml#af36c33fa797bdfa942eb7e2693aeeb6b">   73</a></span>&#160;<a class="code" href="../../d7/dae/struct_s_l_net_1_1_b_p_s_tracker_1_1_time_and_value2.xhtml#af36c33fa797bdfa942eb7e2693aeeb6b">BPSTracker::TimeAndValue2::~TimeAndValue2</a>() {}</div>
<div class="line"><a name="l00074"></a><span class="lineno"><a class="code" href="../../d7/dae/struct_s_l_net_1_1_b_p_s_tracker_1_1_time_and_value2.xhtml#a2a11fc817a8858d2c52c4f1d0e980fd4">   74</a></span>&#160;<a class="code" href="../../d7/dae/struct_s_l_net_1_1_b_p_s_tracker_1_1_time_and_value2.xhtml#a16c1b2d3351e8a6e96e6527c8946c8e2">BPSTracker::TimeAndValue2::TimeAndValue2</a>(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a3d01a3c6dcc3c11f0cc5359fe290edc7">SLNet::TimeUS</a> t, <a class="code" href="../../df/df2/_native_types_8h.xhtml#ad27ed092432b64ff558d2254c278720f">uint64_t</a> v1) : value1(v1), time(t) {}</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">//BPSTracker::TimeAndValue2::TimeAndValue2(SLNet::TimeUS t, uint64_t v1, uint64_t v2) : time(t), value1(v1), value2(v2) {}</span></div>
<div class="line"><a name="l00076"></a><span class="lineno"><a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a577f62adbe5e6507d3172a7964c1e5e7">   76</a></span>&#160;<a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a577f62adbe5e6507d3172a7964c1e5e7">BPSTracker::BPSTracker</a>() {<a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a893c6162e238bc5d52a5aedf2904674e">Reset</a>(<a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);}</div>
<div class="line"><a name="l00077"></a><span class="lineno"><a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a2f39dabcf78d40daddc6bb2b8912ae63">   77</a></span>&#160;<a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a2f39dabcf78d40daddc6bb2b8912ae63">BPSTracker::~BPSTracker</a>() {}</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">//void BPSTracker::Reset(const char *file, unsigned int line) {total1=total2=lastSec1=lastSec2=0; dataQueue.Clear(file,line);}</span></div>
<div class="line"><a name="l00079"></a><span class="lineno"><a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a893c6162e238bc5d52a5aedf2904674e">   79</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a893c6162e238bc5d52a5aedf2904674e">BPSTracker::Reset</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line) {<a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a75dcc5c5d092c3e4c03daac9e54a5014">total1</a>=<a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a2bd272c1064abc677babb86962d0baa7">lastSec1</a>=0; <a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a1b7e6a8a2703820c660247ed1b812ad7">dataQueue</a>.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#a481276f70b05ecba8138cd67e51509ec">Clear</a>(file,line);}</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">//void BPSTracker::Push2(RakNetTimeUS time, uint64_t value1, uint64_t value2) {dataQueue.Push(TimeAndValue2(time,value1,value2),_FILE_AND_LINE_); total1+=value1; lastSec1+=value1;  total2+=value2; lastSec2+=value2;}</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">//uint64_t BPSTracker::GetBPS2(RakNetTimeUS time) {ClearExpired2(time); return lastSec2;}</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">//void BPSTracker::GetBPS1And2(RakNetTimeUS time, uint64_t &amp;out1, uint64_t &amp;out2) {ClearExpired2(time); out1=lastSec1; out2=lastSec2;}</span></div>
<div class="line"><a name="l00083"></a><span class="lineno"><a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#af85602e246ad0b39e607b5de0780de89">   83</a></span>&#160;<a class="code" href="../../df/df2/_native_types_8h.xhtml#ad27ed092432b64ff558d2254c278720f">uint64_t</a> <a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#af85602e246ad0b39e607b5de0780de89">BPSTracker::GetTotal1</a>(<span class="keywordtype">void</span>)<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a75dcc5c5d092c3e4c03daac9e54a5014">total1</a>;}</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">//uint64_t BPSTracker::GetTotal2(void) const {return total2;}</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">// void BPSTracker::ClearExpired2(SLNet::TimeUS time) {</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">//  SLNet::TimeUS threshold=time;</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">//  if (threshold &lt; 1000000)</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">//      return;</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">//  threshold-=1000000;</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">//  while (dataQueue.IsEmpty()==false &amp;&amp; dataQueue.Peek().time &lt; threshold)</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">//  {</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">//      lastSec1-=dataQueue.Peek().value1;</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">//      lastSec2-=dataQueue.Peek().value2;</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">//      dataQueue.Pop();</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">//  }</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">// }</span></div>
<div class="line"><a name="l00098"></a><span class="lineno"><a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#af02dc84975d6c85f163df7d616785c02">   98</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#af02dc84975d6c85f163df7d616785c02">BPSTracker::ClearExpired1</a>(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a3d01a3c6dcc3c11f0cc5359fe290edc7">SLNet::TimeUS</a> time)</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;{</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">while</span> (<a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a1b7e6a8a2703820c660247ed1b812ad7">dataQueue</a>.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#a8a535ff9f0dceecedf31401490da3a31">IsEmpty</a>()==<span class="keyword">false</span> &amp;&amp;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="preprocessor">#if CC_TIME_TYPE_BYTES==8</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="preprocessor"></span>        <a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a1b7e6a8a2703820c660247ed1b812ad7">dataQueue</a>.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#a5e9c9de11d2dd84320d2f7c9408b80b1">Peek</a>().<a class="code" href="../../d7/dae/struct_s_l_net_1_1_b_p_s_tracker_1_1_time_and_value2.xhtml#ab81df7e775d590903069e2aaa957e58a">time</a>+1000000 &lt; time</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="preprocessor"></span>        <a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a1b7e6a8a2703820c660247ed1b812ad7">dataQueue</a>.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#a5e9c9de11d2dd84320d2f7c9408b80b1">Peek</a>().<a class="code" href="../../d7/dae/struct_s_l_net_1_1_b_p_s_tracker_1_1_time_and_value2.xhtml#ab81df7e775d590903069e2aaa957e58a">time</a>+1000 &lt; time</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="preprocessor"></span>        )</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    {</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a2bd272c1064abc677babb86962d0baa7">lastSec1</a>-=<a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a1b7e6a8a2703820c660247ed1b812ad7">dataQueue</a>.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#a5e9c9de11d2dd84320d2f7c9408b80b1">Peek</a>().<a class="code" href="../../d7/dae/struct_s_l_net_1_1_b_p_s_tracker_1_1_time_and_value2.xhtml#a08ab99e9edea27cfeca5a5024007221b">value1</a>;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a1b7e6a8a2703820c660247ed1b812ad7">dataQueue</a>.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#a25272370e684388afd807c5369e4ef87">Pop</a>();</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;}</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="keyword">struct </span>DatagramHeaderFormat</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;{</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="preprocessor">#if INCLUDE_TIMESTAMP_WITH_DATAGRAMS==1</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="preprocessor"></span>    <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> sourceSystemTime;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="preprocessor"></span>    <a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">DatagramSequenceNumberType</a> datagramNumber;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="comment">// Use floats to save bandwidth</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="comment">//  float B; // Link capacity</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordtype">float</span> AS; <span class="comment">// Data arrival rate</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordtype">bool</span> isACK;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordtype">bool</span> isNAK;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordtype">bool</span> isPacketPair;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordtype">bool</span> hasBAndAS;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordtype">bool</span> isContinuousSend;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordtype">bool</span> needsBAndAs;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordtype">bool</span> isValid; <span class="comment">// To differentiate between what I serialized, and offline data</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keyword">static</span> <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> GetDataHeaderBitLength()</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(GetDataHeaderByteLength());</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetDataHeaderByteLength()</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="comment">//return 2 + 3 + sizeof(SLNet::TimeMS) + sizeof(float)*2;</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">return</span> 2 + 3 +</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="preprocessor">#if INCLUDE_TIMESTAMP_WITH_DATAGRAMS==1</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="preprocessor"></span>            <span class="keyword">sizeof</span>(RakNetTimeMS) +</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;#endif</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keyword">sizeof</span>(<span class="keywordtype">float</span>)*1;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordtype">void</span> Serialize(<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *b)</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    {</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="comment">// Not endian safe</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="comment">//      RakAssert(GetDataHeaderByteLength()==sizeof(DatagramHeaderFormat));</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="comment">//      b-&gt;WriteAlignedBytes((const unsigned char*) this, sizeof(DatagramHeaderFormat));</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="comment">//      return;</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(<span class="keyword">true</span>); <span class="comment">// IsValid</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keywordflow">if</span> (isACK)</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        {</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(<span class="keyword">true</span>);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(hasBAndAS);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a1083ab999b52c839709eab5cff65a68d" title="Align the next write and/or read to a byte boundary.">AlignWriteToByteBoundary</a>();</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="preprocessor">#if INCLUDE_TIMESTAMP_WITH_DATAGRAMS==1</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="preprocessor"></span>            <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a> timeMSLow=(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a>) sourceSystemTime&amp;0xFFFFFFFF; b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(timeMSLow);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="preprocessor"></span>            <span class="keywordflow">if</span> (hasBAndAS)</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            {</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                <span class="comment">//      b-&gt;Write(B);</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(AS);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            }</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (isNAK)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        {</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(<span class="keyword">false</span>);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(<span class="keyword">true</span>);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        }</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        {</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(<span class="keyword">false</span>);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(<span class="keyword">false</span>);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(isPacketPair);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(isContinuousSend);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(needsBAndAs);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a1083ab999b52c839709eab5cff65a68d" title="Align the next write and/or read to a byte boundary.">AlignWriteToByteBoundary</a>();</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="preprocessor">#if INCLUDE_TIMESTAMP_WITH_DATAGRAMS==1</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="preprocessor"></span>            <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a> timeMSLow=(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a>) sourceSystemTime&amp;0xFFFFFFFF; b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(timeMSLow);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="preprocessor"></span>            b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(datagramNumber);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        }</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    }</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordtype">void</span> Deserialize(<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *b)</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    {</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="comment">// Not endian safe</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="comment">//      b-&gt;ReadAlignedBytes((unsigned char*) this, sizeof(DatagramHeaderFormat));</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="comment">//      return;</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(isValid);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(isACK);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keywordflow">if</span> (isACK)</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        {</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            isNAK=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            isPacketPair=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(hasBAndAS);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#af64b3663a865840e013f5aef490d891e" title="Align the next write and/or read to a byte boundary.">AlignReadToByteBoundary</a>();</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="preprocessor">#if INCLUDE_TIMESTAMP_WITH_DATAGRAMS==1</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="preprocessor"></span>            <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a> timeMS; b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(timeMS); sourceSystemTime=(<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a>) timeMS;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="preprocessor"></span>            <span class="keywordflow">if</span> (hasBAndAS)</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            {</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                <span class="comment">//          b-&gt;Read(B);</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(AS);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            }</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        }</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        {</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(isNAK);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            <span class="keywordflow">if</span> (isNAK)</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            {</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                isPacketPair=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            }</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            {</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(isPacketPair);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(isContinuousSend);</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(needsBAndAs);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#af64b3663a865840e013f5aef490d891e" title="Align the next write and/or read to a byte boundary.">AlignReadToByteBoundary</a>();</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="preprocessor">#if INCLUDE_TIMESTAMP_WITH_DATAGRAMS==1</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="preprocessor"></span>                <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a> timeMS; b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(timeMS); sourceSystemTime=(<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a>) timeMS;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="preprocessor"></span>                b-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(datagramNumber);</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            }</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        }</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    }</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;};</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="preprocessor">#ifdef _WIN32</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="preprocessor"></span><span class="comment">//#define _DEBUG_LOGGER</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="preprocessor">#ifdef _DEBUG_LOGGER</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;<a class="code" href="../../db/d43/_windows_includes_8h.xhtml">slikenet/WindowsIncludes.h</a>&quot;</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">//#define DEBUG_SPLIT_PACKET_PROBLEMS</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="preprocessor">#if defined (DEBUG_SPLIT_PACKET_PROBLEMS)</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="preprocessor"></span><span class="keyword">static</span> <span class="keywordtype">int</span> waitFlag=-1;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="keyword">using namespace </span>SLNet;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div>
<div class="line"><a name="l00246"></a><span class="lineno"><a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a1c22290a0596cb8af3287a15de728f10">  246</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a1c22290a0596cb8af3287a15de728f10">SLNet::SplitPacketChannelComp</a>( <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#ada9d06cc4d3df50fbf844c6725cd7230">SplitPacketIdType</a> <span class="keyword">const</span> &amp;key, <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#d6/d4d/struct_s_l_net_1_1_split_packet_channel">SplitPacketChannel</a>* <span class="keyword">const</span> &amp;data )</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;{</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="preprocessor">#if PREALLOCATE_LARGE_MESSAGES==1</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">if</span> (key &lt; data-&gt;returnedPacket-&gt;splitPacketId)</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordflow">if</span> (key == data-&gt;returnedPacket-&gt;splitPacketId)</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">if</span> (key &lt; data-&gt;splitPacketList[0]-&gt;splitPacketId)</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keywordflow">if</span> (key == data-&gt;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4103677c8e4a800964837b6449f27e2b">splitPacketList</a>[0]-&gt;splitPacketId)</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;}</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment">// DEFINE_MULTILIST_PTR_TO_MEMBER_COMPARISONS( InternalPacket, SplitPacketIndexType, splitPacketIndex )</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment">bool operator&lt;( const DataStructures::MLKeyRef&lt;SplitPacketIndexType&gt; &amp;inputKey, const InternalPacket *cls )</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment">{</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment">    return inputKey.Get() &lt; cls-&gt;splitPacketIndex;</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">}</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment">bool operator&gt;( const DataStructures::MLKeyRef&lt;SplitPacketIndexType&gt; &amp;inputKey, const InternalPacket *cls )</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment">{</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">    return inputKey.Get() &gt; cls-&gt;splitPacketIndex;</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment">}</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment">bool operator==( const DataStructures::MLKeyRef&lt;SplitPacketIndexType&gt; &amp;inputKey, const InternalPacket *cls )</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment">{</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment">    return inputKey.Get() == cls-&gt;splitPacketIndex;</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment">}</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">bool operator&lt;( const DataStructures::MLKeyRef&lt;InternalPacket *&gt; &amp;inputKey, const InternalPacket *cls )</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment">{</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment">    return inputKey.Get()-&gt;splitPacketIndex &lt; cls-&gt;splitPacketIndex;</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment">}</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment">bool operator&gt;( const DataStructures::MLKeyRef&lt;InternalPacket *&gt; &amp;inputKey, const InternalPacket *cls )</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment">{</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment">    return inputKey.Get()-&gt;splitPacketIndex &gt; cls-&gt;splitPacketIndex;</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment">}</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment">bool operator==( const DataStructures::MLKeyRef&lt;InternalPacket *&gt; &amp;inputKey, const InternalPacket *cls )</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment">{</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment">    return inputKey.Get()-&gt;splitPacketIndex == cls-&gt;splitPacketIndex;</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment">}</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div>
<div class="line"><a name="l00291"></a><span class="lineno"><a class="code" href="../../d9/d15/_reliability_layer_8cpp.xhtml#a3cf791a96cc3d754697e64ede1f0c34c">  291</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="../../d9/d15/_reliability_layer_8cpp.xhtml#a3cf791a96cc3d754697e64ede1f0c34c">SplitPacketIndexComp</a>( <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#afe219620b084e1150e61e8ff98f7c855">SplitPacketIndexType</a> <span class="keyword">const</span> &amp;key, <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a>* <span class="keyword">const</span> &amp;data )</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;{</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="keywordflow">if</span> (key &lt; data-&gt;splitPacketIndex)</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="keywordflow">if</span> (key == data-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af1e3b0024f2cbbd08d9217457c6721f3" title="If this is a split packet, the index into the array of subsplit packets.">splitPacketIndex</a>)</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;}</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment">// Constructor</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment">// Add 21 to the default MTU so if we encrypt it can hold potentially 21 more bytes of extra data + padding.</span></div>
<div class="line"><a name="l00304"></a><span class="lineno"><a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a89390d5e9ab186666fa10858cef08dda">  304</a></span>&#160;<a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a89390d5e9ab186666fa10858cef08dda">ReliabilityLayer::ReliabilityLayer</a>()</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;{</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="preprocessor">#ifdef _DEBUG</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="preprocessor"></span>    <span class="comment">// Wait longer to disconnect in debug so I don&#39;t get disconnected while tracing</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    timeoutTime=30000;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="preprocessor"></span>    timeoutTime=10000;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="preprocessor">#ifdef _DEBUG</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="preprocessor"></span>    minExtraPing=extraPingVariance=0;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    packetloss=(double) minExtraPing;   </div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="preprocessor">#ifdef PRINT_TO_FILE_RELIABLE_ORDERED_TEST</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">if</span> (fp==0 &amp;&amp; 0)</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    {</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        fopen_s(&amp;fp, <span class="stringliteral">&quot;reliableorderedoutput.txt&quot;</span>, <span class="stringliteral">&quot;wt&quot;</span>);</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    }</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    InitializeVariables();</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment">//int i = sizeof(InternalPacket);</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    datagramHistoryMessagePool.SetPageSize(<span class="keyword">sizeof</span>(MessageNumberNode)*128);</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    internalPacketPool.SetPageSize(<span class="keyword">sizeof</span>(<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a>)*<a class="code" href="../../d8/db0/defines_8h.xhtml#a39dc00e80eb120ac177e55f2f509758d">INTERNAL_PACKET_PAGE_SIZE</a>);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    refCountedDataPool.SetPageSize(<span class="keyword">sizeof</span>(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#d4/d28/struct_s_l_net_1_1_internal_packet_ref_counted_data" title="Used in InternalPacket when pointing to sharedDataBlock, rather than allocating itself.">InternalPacketRefCountedData</a>)*32);</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;}</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment">// Destructor</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00337"></a><span class="lineno"><a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a1678708f263777fd34b4e86d40f75a32">  337</a></span>&#160;<a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a1678708f263777fd34b4e86d40f75a32">ReliabilityLayer::~ReliabilityLayer</a>()</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;{</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    FreeMemory( <span class="keyword">true</span> ); <span class="comment">// Free all memory immediately</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;}</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment">// Resets the layer for reuse</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00344"></a><span class="lineno"><a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a82a18156ee862239ce046aa4fb5acc79">  344</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a82a18156ee862239ce046aa4fb5acc79" title="Resets the layer for reuse.">ReliabilityLayer::Reset</a>( <span class="keywordtype">bool</span> resetVariables, <span class="keywordtype">int</span> MTUSize, <span class="keywordtype">bool</span> _useSecurity )</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;{</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    FreeMemory( <span class="keyword">true</span> ); <span class="comment">// true because making a memory reset pending in the update cycle causes resets after reconnects.  Instead, just call Reset from a single thread</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keywordflow">if</span> (resetVariables)</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    {</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        InitializeVariables();</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="preprocessor">#if LIBCAT_SECURITY==1</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="preprocessor"></span>        useSecurity = _useSecurity;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        <span class="keywordflow">if</span> (_useSecurity)</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            MTUSize -= cat::AuthenticatedEncryption::OVERHEAD_BYTES;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="preprocessor"></span>        (void) _useSecurity;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="preprocessor">#endif // LIBCAT_SECURITY</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="preprocessor"></span>        congestionManager.Init(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#aaf7a5da6c601ae66963471d55a476dff">SLNet::GetTimeUS</a>(), MTUSize - <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#a8a0fae83e487dc04b3cd774b3d4ee637" title="Sizeof an UDP header in byte.">UDP_HEADER_SIZE</a>);</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    }</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;}</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="comment">// Set the time, in MS, to use before considering ourselves disconnected after not being able to deliver a reliable packet</span></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00367"></a><span class="lineno"><a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a48ebdf0f6521fca292535480c2f54906">  367</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a48ebdf0f6521fca292535480c2f54906">ReliabilityLayer::SetTimeoutTime</a>(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a> time )</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;{</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    timeoutTime=time;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;}</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment">// Returns the value passed to SetTimeoutTime. or the default if it was never called</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00375"></a><span class="lineno"><a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#ad7ae8c962a75dee167d2ba844bf571e1">  375</a></span>&#160;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a> <a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#ad7ae8c962a75dee167d2ba844bf571e1">ReliabilityLayer::GetTimeoutTime</a>(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;{</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="keywordflow">return</span> timeoutTime;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;}</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment">// Initialize the variables</span></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::InitializeVariables( <span class="keywordtype">void</span> )</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;{</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    memset( orderedWriteIndex, 0, <a class="code" href="../../dd/dba/_reliability_layer_8h.xhtml#aaabd5ed6e95299bf0ae89b0a972f5071" title="Number of ordered streams available. You can use up to 32 ordered streams.">NUMBER_OF_ORDERED_STREAMS</a> * <span class="keyword">sizeof</span>(<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">OrderingIndexType</a>));</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    memset( sequencedWriteIndex, 0, <a class="code" href="../../dd/dba/_reliability_layer_8h.xhtml#aaabd5ed6e95299bf0ae89b0a972f5071" title="Number of ordered streams available. You can use up to 32 ordered streams.">NUMBER_OF_ORDERED_STREAMS</a> * <span class="keyword">sizeof</span>(<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">OrderingIndexType</a>) );</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    memset( orderedReadIndex, 0, <a class="code" href="../../dd/dba/_reliability_layer_8h.xhtml#aaabd5ed6e95299bf0ae89b0a972f5071" title="Number of ordered streams available. You can use up to 32 ordered streams.">NUMBER_OF_ORDERED_STREAMS</a> * <span class="keyword">sizeof</span>(<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">OrderingIndexType</a>) );</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    memset( highestSequencedReadIndex, 0, <a class="code" href="../../dd/dba/_reliability_layer_8h.xhtml#aaabd5ed6e95299bf0ae89b0a972f5071" title="Number of ordered streams available. You can use up to 32 ordered streams.">NUMBER_OF_ORDERED_STREAMS</a> * <span class="keyword">sizeof</span>(<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">OrderingIndexType</a>) );</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    memset( &amp;statistics, 0, <span class="keyword">sizeof</span>( statistics ) );</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    memset( &amp;heapIndexOffsets, 0, <span class="keyword">sizeof</span>( heapIndexOffsets ) );</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    </div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    statistics.connectionStartTime = <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#aaf7a5da6c601ae66963471d55a476dff">SLNet::GetTimeUS</a>();</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    splitPacketId = 0;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    elapsedTimeSinceLastUpdate=0;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    throughputCapCountdown=0;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    sendReliableMessageNumberIndex = 0;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    internalOrderIndex=0;</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    timeToNextUnreliableCull=0;</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    unreliableLinkedListHead=0;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    lastUpdateTime= <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#aaf7a5da6c601ae66963471d55a476dff">SLNet::GetTimeUS</a>();</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    bandwidthExceededStatistic=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    remoteSystemTime=0;</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    unreliableTimeout=0;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    lastBpsClear=0;</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="comment">// Disable packet pairs</span></div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    countdownToNextPacketPair=15;</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    nextAllowedThroughputSample=0;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    deadConnection = cheater = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    timeOfLastContinualSend=0;</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="comment">// timeResendQueueNonEmpty = 0;</span></div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    timeLastDatagramArrived= <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4772a177cb3fcb5d9e699a6670c3fb8a">SLNet::GetTimeMS</a>();</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="comment">//  packetlossThisSample=false;</span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="comment">//  backoffThisSample=0;</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="comment">//  packetlossThisSampleResendCount=0;</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="comment">//  lastPacketlossTime=0;</span></div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    statistics.messagesInResendBuffer=0;</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    statistics.bytesInResendBuffer=0;</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    receivedPacketsBaseIndex=0;</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    resetReceivedPackets=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    receivePacketCount=0; </div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="comment">//  SetPing( 1000 );</span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    timeBetweenPackets=<a class="code" href="../../d9/d15/_reliability_layer_8cpp.xhtml#a21d7466dd4fc30691074c33b1adbe324">STARTING_TIME_BETWEEN_PACKETS</a>;</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    ackPingIndex=0;</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    ackPingSum=(<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a>)0;</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    nextSendTime=lastUpdateTime;</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="comment">//nextLowestPingReset=(CCTimeType)0;</span></div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="comment">//  continuousSend=false;</span></div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="comment">//  histogramStart=(CCTimeType)0;</span></div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="comment">//  histogramBitsSent=0;</span></div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    unacknowledgedBytes=0;</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    resendLinkedListHead=0;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    totalUserDataBytesAcked=0;</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    datagramHistoryPopCount=0;</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    InitHeapWeights();</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i &lt; <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#a659378374e516180f93640c79f59705ca619c0d06913ad9d663b086aca30f7cdc">NUMBER_OF_PRIORITIES</a>; i++)</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    {</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        statistics.messageInSendBuffer[i]=0;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        statistics.bytesInSendBuffer[i]=0.0;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    }</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i &lt; <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca766e442d17c52434750d2c2208555237">RNS_PER_SECOND_METRICS_COUNT</a>; i++)</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    {</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        bpsMetrics[i].Reset(<a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    }</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;}</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="comment">// Frees all allocated memory</span></div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::FreeMemory( <span class="keywordtype">bool</span> freeAllImmediately )</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;{</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    (void) freeAllImmediately;</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    FreeThreadSafeMemory();</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;}</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::FreeThreadSafeMemory( <span class="keywordtype">void</span> )</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;{</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="keywordtype">unsigned</span> i,j;</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *internalPacket;</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    ClearPacketsAndDatagrams();</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="keywordflow">for</span> (i=0; i &lt; splitPacketChannelList.Size(); i++)</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    {</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        <span class="keywordflow">for</span> (j=0; j &lt; splitPacketChannelList[i]-&gt;splitPacketList.Size(); j++)</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        {</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;            FreeInternalPacketData(splitPacketChannelList[i]-&gt;splitPacketList[j], <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;            ReleaseToInternalPacketPool( splitPacketChannelList[i]-&gt;splitPacketList[j] );</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        }</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="preprocessor">#if PREALLOCATE_LARGE_MESSAGES==1</span></div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="preprocessor"></span>        <span class="keywordflow">if</span> (splitPacketChannelList[i]-&gt;returnedPacket)</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        {</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            FreeInternalPacketData(splitPacketChannelList[i]-&gt;returnedPacket, __FILE__, __LINE__ );</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;            ReleaseToInternalPacketPool( splitPacketChannelList[i]-&gt;returnedPacket );</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;        }</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="preprocessor"></span>        <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a79772d09451f784e87bec85694fad1ed">SLNet::OP_DELETE</a>(splitPacketChannelList[i], __FILE__, __LINE__);</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    }</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    splitPacketChannelList.Clear(<span class="keyword">false</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    <span class="keywordflow">while</span> ( outputQueue.Size() &gt; 0 )</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    {</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;        internalPacket = outputQueue.Pop();</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        FreeInternalPacketData(internalPacket, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;        ReleaseToInternalPacketPool( internalPacket );</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    }</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    outputQueue.ClearAndForceAllocation( 32, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <span class="comment">/*</span></div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="comment">    for ( i = 0; i &lt; orderingList.Size(); i++ )</span></div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="comment">    {</span></div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="comment">        if ( orderingList[ i ] )</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="comment">        {</span></div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="comment">            DataStructures::LinkedList&lt;InternalPacket*&gt;* theList = orderingList[ i ];</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;<span class="comment">            if ( theList )</span></div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="comment">            {</span></div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;<span class="comment">                while ( theList-&gt;Size() )</span></div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;<span class="comment">                {</span></div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="comment">                    internalPacket = orderingList[ i ]-&gt;Pop();</span></div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="comment">                    FreeInternalPacketData(internalPacket, _FILE_AND_LINE_ );</span></div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="comment">                    ReleaseToInternalPacketPool( internalPacket );</span></div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="comment">                }</span></div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="comment">                SLNet::OP_DELETE(theList, _FILE_AND_LINE_);</span></div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;<span class="comment">            }</span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="comment">        }</span></div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;<span class="comment">    }</span></div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;<span class="comment">    orderingList.Clear(false, _FILE_AND_LINE_);</span></div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;<span class="comment">    */</span></div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <span class="keywordflow">for</span> (i=0; i &lt; <a class="code" href="../../dd/dba/_reliability_layer_8h.xhtml#aaabd5ed6e95299bf0ae89b0a972f5071" title="Number of ordered streams available. You can use up to 32 ordered streams.">NUMBER_OF_ORDERED_STREAMS</a>; i++)</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    {</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        <span class="keywordflow">for</span> (j=0; j &lt; orderingHeaps[i].Size(); j++)</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        {</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;            FreeInternalPacketData(orderingHeaps[i][j], <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;            ReleaseToInternalPacketPool( orderingHeaps[i][j] );</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        }</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        orderingHeaps[i].Clear(<span class="keyword">true</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    }</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <span class="comment">//resendList.ForEachData(DeleteInternalPacket);</span></div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <span class="comment">//  resendTree.Clear(_FILE_AND_LINE_);</span></div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    memset(resendBuffer, 0, <span class="keyword">sizeof</span>(resendBuffer));</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    statistics.messagesInResendBuffer=0;</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    statistics.bytesInResendBuffer=0;</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <span class="keywordflow">if</span> (resendLinkedListHead)</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    {</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *prev;</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *iter = resendLinkedListHead;</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        <span class="keywordflow">for</span>(;;)</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;        {</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;            <span class="keywordflow">if</span> (iter-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>)</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                FreeInternalPacketData(iter, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;            prev=iter;</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;            iter=iter-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a9f1943940d66b55f3fe19dd9d8751a0b">resendNext</a>;</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;            <span class="keywordflow">if</span> (iter==resendLinkedListHead)</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;            {</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                ReleaseToInternalPacketPool(prev);</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;            }</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;            ReleaseToInternalPacketPool(prev);</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        }</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        resendLinkedListHead=0;</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    }</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    unacknowledgedBytes=0;</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    <span class="comment">//  acknowlegements.Clear(_FILE_AND_LINE_);</span></div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <span class="keywordflow">for</span> ( j=0 ; j &lt; outgoingPacketBuffer.Size(); j++ )</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    {</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        <span class="keywordflow">if</span> ( outgoingPacketBuffer[ j ]-&gt;data)</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;            FreeInternalPacketData( outgoingPacketBuffer[ j ], <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        ReleaseToInternalPacketPool( outgoingPacketBuffer[ j ] );</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    }</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    outgoingPacketBuffer.Clear(<span class="keyword">true</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;<span class="preprocessor">#ifdef _DEBUG</span></div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">for</span> (i = 0; i &lt; delayList.Size(); i++ )</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a79772d09451f784e87bec85694fad1ed">SLNet::OP_DELETE</a>(delayList[ i ], __FILE__, __LINE__);</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    delayList.Clear(__FILE__, __LINE__);</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    unreliableWithAckReceiptHistory.Clear(<span class="keyword">false</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    packetsToSendThisUpdate.Clear(<span class="keyword">false</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    packetsToSendThisUpdate.Preallocate(512, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    packetsToDeallocThisUpdate.Clear(<span class="keyword">false</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    packetsToDeallocThisUpdate.Preallocate(512, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    packetsToSendThisUpdateDatagramBoundaries.Clear(<span class="keyword">false</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    packetsToSendThisUpdateDatagramBoundaries.Preallocate(128, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    datagramSizesInBytes.Clear(<span class="keyword">false</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    datagramSizesInBytes.Preallocate(128, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    internalPacketPool.Clear(<a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    refCountedDataPool.Clear(<a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <span class="comment">/*</span></div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;<span class="comment">    DataStructures::Page&lt;DatagramSequenceNumberType, DatagramMessageIDList*, RESEND_TREE_ORDER&gt; *cur = datagramMessageIDTree.GetListHead();</span></div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;<span class="comment">    while (cur)</span></div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;<span class="comment">    {</span></div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;<span class="comment">    int treeIndex;</span></div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;<span class="comment">    for (treeIndex=0; treeIndex &lt; cur-&gt;size; treeIndex++)</span></div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;<span class="comment">    ReleaseToDatagramMessageIDPool(cur-&gt;data[treeIndex]);</span></div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;<span class="comment">    cur=cur-&gt;resendNext;</span></div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;<span class="comment">    }</span></div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;<span class="comment">    datagramMessageIDTree.Clear(_FILE_AND_LINE_);</span></div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;<span class="comment">    datagramMessageIDPool.Clear(_FILE_AND_LINE_);</span></div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;<span class="comment">    */</span></div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="keywordflow">while</span> (datagramHistory.Size())</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    {</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        RemoveFromDatagramHistory(datagramHistoryPopCount);</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        datagramHistory.Pop();</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        datagramHistoryPopCount++;</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    }</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    datagramHistoryMessagePool.Clear(<a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    datagramHistoryPopCount=0;</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    acknowlegements.Clear();</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    NAKs.Clear();</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    unreliableLinkedListHead=0;</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;}</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<span class="comment">// Packets are read directly from the socket layer and skip the reliability</span></div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;<span class="comment">//layer  because unconnected players do not use the reliability layer</span></div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;<span class="comment">// This function takes packet data after a player has been confirmed as</span></div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;<span class="comment">//connected.  The game should not use that data directly</span></div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;<span class="comment">// because some data is used internally, such as packet acknowledgment and</span></div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;<span class="comment">//split packets</span></div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00631"></a><span class="lineno"><a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a1eae2ad1b87cabfb7e7367f0e40f1a30">  631</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a1eae2ad1b87cabfb7e7367f0e40f1a30">ReliabilityLayer::HandleSocketReceiveFromConnectedPlayer</a>(</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span> *buffer, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> length, <a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml" title="Network address for a system.">SystemAddress</a> &amp;systemAddress, <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List&lt;PluginInterface2*&gt;</a> &amp;messageHandlerList, <span class="keywordtype">int</span> MTUSize,</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    <a class="code" href="../../d1/dde/class_s_l_net_1_1_rak_net_socket2.xhtml">RakNetSocket2</a> *s, <a class="code" href="../../df/dd4/class_s_l_net_1_1_rak_net_random.xhtml">RakNetRandom</a> *<a class="code" href="../../d5/d55/_rak_peer_8cpp.xhtml#ad813a0f3eb2b1e317d9307dde627778a">rnr</a>, <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> timeRead,</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a> &amp;updateBitStream)</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;{</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;<span class="preprocessor">#ifdef _DEBUG</span></div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="preprocessor"></span>    <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>( !( buffer == 0 ) );</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<span class="preprocessor">#if CC_TIME_TYPE_BYTES==4</span></div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;<span class="preprocessor"></span>    timeRead/=1000;</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    bpsMetrics[(int) <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca17bea4f08c3fc293454388eacfbd192f" title="How many actual bytes were received, including overead and acks.">ACTUAL_BYTES_RECEIVED</a>].<a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a096d41a893d9115781eac7620e975ee6">Push1</a>(timeRead,length);</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    (void) MTUSize;</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    <span class="keywordflow">if</span> ( length &lt;= 2 || buffer == 0 )   <span class="comment">// Length of 1 is a connection request resend that we just ignore</span></div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    {</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> messageHandlerIndex=0; messageHandlerIndex &lt; messageHandlerList.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); messageHandlerIndex++)</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;            messageHandlerList[messageHandlerIndex]-&gt;OnReliabilityLayerNotification(<span class="stringliteral">&quot;length &lt;= 2 || buffer == 0&quot;</span>, <a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(length), systemAddress, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    }</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    timeLastDatagramArrived= <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4772a177cb3fcb5d9e699a6670c3fb8a">SLNet::GetTimeMS</a>();</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    <span class="comment">//  CCTimeType time;</span></div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;<span class="comment">//  bool indexFound;</span></div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;<span class="comment">//  int count, size;</span></div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    <a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">DatagramSequenceNumberType</a> holeCount;</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <span class="keywordtype">unsigned</span> i;</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;<span class="preprocessor">#if LIBCAT_SECURITY==1</span></div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">if</span> (useSecurity)</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    {</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> received = length;</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;        <span class="keywordflow">if</span> (!auth_enc.Decrypt((cat::u8*)buffer, received))</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;        length = received;</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    }</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> socketData( (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*) buffer, length, <span class="keyword">false</span> ); <span class="comment">// Convert the incoming data to a bitstream for easy parsing</span></div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    <span class="comment">//  time = SLNet::GetTimeUS();</span></div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    <span class="comment">// Set to the current time if it is not zero, and we get incoming data</span></div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    <span class="comment">//  if (timeResendQueueNonEmpty!=0)</span></div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <span class="comment">//      timeResendQueueNonEmpty=timeRead;</span></div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    DatagramHeaderFormat dhf;</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    dhf.Deserialize(&amp;socketData);</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    <span class="keywordflow">if</span> (dhf.isValid==<span class="keyword">false</span>)</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    {</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> messageHandlerIndex=0; messageHandlerIndex &lt; messageHandlerList.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); messageHandlerIndex++)</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;            messageHandlerList[messageHandlerIndex]-&gt;OnReliabilityLayerNotification(<span class="stringliteral">&quot;dhf.isValid==false&quot;</span>, <a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(length), systemAddress, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    }</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    <span class="keywordflow">if</span> (dhf.isACK)</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    {</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        <a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">DatagramSequenceNumberType</a> datagramNumber;</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;        <span class="comment">// datagramNumber=dhf.datagramNumber;</span></div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;<span class="preprocessor">#if INCLUDE_TIMESTAMP_WITH_DATAGRAMS==1</span></div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;<span class="preprocessor"></span>        <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a> timeMSLow=(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a>) timeRead&amp;0xFFFFFFFF;</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;        <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> rtt = timeMSLow-dhf.sourceSystemTime;</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;<span class="preprocessor">#if CC_TIME_TYPE_BYTES==4</span></div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;<span class="preprocessor"></span>        <span class="keywordflow">if</span> (rtt &gt; 10000)</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;<span class="preprocessor"></span>        <span class="keywordflow">if</span> (rtt &gt; 10000000)</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;<span class="preprocessor"></span>        {</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;            <span class="comment">// Sanity check. This could happen due to type overflow, especially since I only send the low 4 bytes to reduce bandwidth</span></div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;            rtt=(<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a>) congestionManager.GetRTT();</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;        }</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;        <span class="comment">//  RakAssert(rtt &lt; 500000);</span></div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;        <span class="comment">//  printf(&quot;%i &quot;, (SLNet::TimeMS)(rtt/1000));</span></div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;        ackPing=rtt;</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;<span class="preprocessor">#ifdef _DEBUG</span></div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;<span class="preprocessor"></span>        <span class="keywordflow">if</span> (dhf.hasBAndAS==<span class="keyword">false</span>)</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;        {</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;            <span class="comment">//          dhf.B=0;</span></div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;            dhf.AS=0;</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;        }</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;<span class="preprocessor"></span>        <span class="comment">//      congestionManager.OnAck(timeRead, rtt, dhf.hasBAndAS, dhf.B, dhf.AS, totalUserDataBytesAcked );</span></div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;        incomingAcks.Clear();</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;        <span class="keywordflow">if</span> (incomingAcks.Deserialize(&amp;socketData)==<span class="keyword">false</span>)</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;        {</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> messageHandlerIndex=0; messageHandlerIndex &lt; messageHandlerList.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); messageHandlerIndex++)</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;                messageHandlerList[messageHandlerIndex]-&gt;OnReliabilityLayerNotification(<span class="stringliteral">&quot;incomingAcks.Deserialize failed&quot;</span>, <a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(length), systemAddress, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;        }</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k = 0;</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;        <span class="keywordflow">while</span> (k &lt; unreliableWithAckReceiptHistory.Size()) {</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;            <span class="keywordflow">if</span> (incomingAcks.IsWithinRange(unreliableWithAckReceiptHistory[k].datagramNumber)) {</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;                <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *ackReceipt = AllocateFromInternalPacketPool();</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;                AllocInternalPacketData(ackReceipt, 5, <span class="keyword">false</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;                ackReceipt-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a> = <a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(5);</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;                ackReceipt-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>[0] = (<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a5b5b9eb3be9ad636af02da44b718a75f" title="First byte of a network message.">MessageID</a>)<a class="code" href="../../d6/d83/_message_identifiers_8h.xhtml#ac1b471af280629f5ace02e586d5bcfd3aea254aecc756b8f68b9b0b75ebefa246">ID_SND_RECEIPT_ACKED</a>;</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;                memcpy(ackReceipt-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a> + <span class="keyword">sizeof</span>(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a5b5b9eb3be9ad636af02da44b718a75f" title="First byte of a network message.">MessageID</a>), &amp;unreliableWithAckReceiptHistory[k].sendReceiptSerial, <span class="keyword">sizeof</span>(<a class="code" href="../../df/df2/_native_types_8h.xhtml#a6eb1e68cc391dd753bc8ce896dbb8315">uint32_t</a>));</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;                outputQueue.Push(ackReceipt, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;                <span class="comment">// Remove, swap with last</span></div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;                unreliableWithAckReceiptHistory.RemoveAtIndex(k);</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;                k++;</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;            }</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;        }</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;        <span class="comment">// early out, if we&#39;ve got no outstanding datagramHistory entries</span></div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;        <span class="keywordflow">if</span> (datagramHistory.IsEmpty()) {</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;            receivePacketCount++;</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;        }</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;        <span class="keywordflow">for</span> (i = 0; i &lt; incomingAcks.ranges.Size(); i++) {</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;            <span class="comment">// note: minIndex is ensured to be always &lt;= maxIndex - otherwise Deserialize() would have failed</span></div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;            <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(incomingAcks.ranges[i].minIndex &lt;= incomingAcks.ranges[i].maxIndex);</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;            <span class="keywordflow">if</span> (incomingAcks.ranges[i].maxIndex == (<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">uint24_t</a>)(0xFFFFFFFF)) {</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> messageHandlerIndex=0; messageHandlerIndex &lt; messageHandlerList.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); messageHandlerIndex++)</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;                    messageHandlerList[messageHandlerIndex]-&gt;OnReliabilityLayerNotification(<span class="stringliteral">&quot;incomingAcks maxIndex is max value&quot;</span>, <a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(length), systemAddress, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;            }</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;            <span class="keywordflow">for</span> (datagramNumber = incomingAcks.ranges[i].minIndex; datagramNumber &lt;= incomingAcks.ranges[i].maxIndex; datagramNumber++) {</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;                <span class="keyword">const</span> <a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">DatagramSequenceNumberType</a> offsetIntoList = datagramNumber - datagramHistoryPopCount;</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;                <span class="keywordflow">if</span> (offsetIntoList &gt;= datagramHistory.Size()) {</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;                    <span class="comment">// reached the end of the datagramHistory list - hence, we are done</span></div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;                    receivePacketCount++;</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;                    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;                }</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;                <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> whenSent;</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;                MessageNumberNode *messageNumberNode = GetMessageNumberNodeByDatagramIndex(datagramNumber, &amp;whenSent);</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;                <span class="keywordflow">if</span> (messageNumberNode)</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;                {</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;                <span class="comment">//  printf(&quot;%p Got ack for %i\n&quot;, this, datagramNumber.val);</span></div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;<span class="preprocessor">#if INCLUDE_TIMESTAMP_WITH_DATAGRAMS==1</span></div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;<span class="preprocessor"></span>                    congestionManager.OnAck(timeRead, rtt, dhf.hasBAndAS, 0, dhf.AS, totalUserDataBytesAcked, bandwidthExceededStatistic, datagramNumber );</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;<span class="preprocessor"></span>                    <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> ping;</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;                    <span class="keywordflow">if</span> (timeRead&gt;whenSent)</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;                        ping=timeRead-whenSent;</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;                        ping=0;</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;                    congestionManager.OnAck(timeRead, ping, dhf.hasBAndAS, 0, dhf.AS, totalUserDataBytesAcked, bandwidthExceededStatistic, datagramNumber );</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;<span class="preprocessor"></span>                    <span class="keywordflow">while</span> (messageNumberNode)</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;                    {</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;                        <span class="comment">// TESTING1</span></div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;<span class="comment">//                      printf(&quot;Remove %i on ack for datagramNumber=%i.\n&quot;, messageNumberNode-&gt;messageNumber.val, datagramNumber.val);</span></div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;                        RemovePacketFromResendListAndDeleteOlderReliableSequenced( messageNumberNode-&gt;messageNumber, timeRead, messageHandlerList, systemAddress );</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;                        messageNumberNode=messageNumberNode-&gt;next;</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;                    }</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;                    RemoveFromDatagramHistory(datagramNumber);</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;                }</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;<span class="comment">//              else if (isReliable)</span></div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;<span class="comment">//              {</span></div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;<span class="comment">//                  // Previously used slot, rather than empty unreliable slot</span></div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;<span class="comment">//                  printf(&quot;%p Ack %i is duplicate\n&quot;, this, datagramNumber.val);</span></div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;<span class="comment">//                      congestionManager.OnDuplicateAck(timeRead, datagramNumber);</span></div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;<span class="comment">//              }</span></div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;            }</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;        }</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;    }</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (dhf.isNAK)</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;    {</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;        <span class="comment">// early out, if we&#39;ve got no outstanding datagramHistory entries</span></div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;        <span class="keywordflow">if</span> (datagramHistory.IsEmpty()) {</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;            receivePacketCount++;</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;        }</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;        <a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">DatagramSequenceNumberType</a> messageNumber;</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;        <a class="code" href="../../d4/df2/class_data_structures_1_1_range_list.xhtml">DataStructures::RangeList&lt;DatagramSequenceNumberType&gt;</a> incomingNAKs;</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;        <span class="keywordflow">if</span> (incomingNAKs.<a class="code" href="../../d4/df2/class_data_structures_1_1_range_list.xhtml#af825d2ae8b5490f5a102b1255624c1fb">Deserialize</a>(&amp;socketData)==<span class="keyword">false</span>)</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;        {</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> messageHandlerIndex=0; messageHandlerIndex &lt; messageHandlerList.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); messageHandlerIndex++)</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;                messageHandlerList[messageHandlerIndex]-&gt;OnReliabilityLayerNotification(<span class="stringliteral">&quot;incomingNAKs.Deserialize failed&quot;</span>, <a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(length), systemAddress, <span class="keyword">true</span>);         </div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;        }</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;        <span class="keywordflow">for</span> (i=0; i&lt;incomingNAKs.<a class="code" href="../../d4/df2/class_data_structures_1_1_range_list.xhtml#a01e3478712140cf3d891da0f865bddd1">ranges</a>.<a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#ad64cf6af46df6a5e68747740ee2c1fec">Size</a>();i++)</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;        {</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;            <span class="comment">// note: minIndex is ensured to be always &lt;= maxIndex - otherwise Deserialize() would have failed</span></div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;            <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(incomingNAKs.<a class="code" href="../../d4/df2/class_data_structures_1_1_range_list.xhtml#a01e3478712140cf3d891da0f865bddd1">ranges</a>[i].minIndex &lt;= incomingNAKs.<a class="code" href="../../d4/df2/class_data_structures_1_1_range_list.xhtml#a01e3478712140cf3d891da0f865bddd1">ranges</a>[i].maxIndex);</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;            <span class="keywordflow">if</span> (incomingNAKs.<a class="code" href="../../d4/df2/class_data_structures_1_1_range_list.xhtml#a01e3478712140cf3d891da0f865bddd1">ranges</a>[i].maxIndex == (<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">uint24_t</a>)(0xFFFFFFFF)) {</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> messageHandlerIndex=0; messageHandlerIndex &lt; messageHandlerList.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); messageHandlerIndex++)</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;                    messageHandlerList[messageHandlerIndex]-&gt;OnReliabilityLayerNotification(<span class="stringliteral">&quot;incomingNAKs maxIndex is max value&quot;</span>, <a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(length), systemAddress, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;            }</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;            <span class="comment">// Sanity check</span></div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;            <span class="comment">//RakAssert(incomingNAKs.ranges[i].maxIndex.val-incomingNAKs.ranges[i].minIndex.val&lt;1000);</span></div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;            <span class="keywordflow">for</span> (messageNumber = incomingNAKs.<a class="code" href="../../d4/df2/class_data_structures_1_1_range_list.xhtml#a01e3478712140cf3d891da0f865bddd1">ranges</a>[i].minIndex; messageNumber &lt;= incomingNAKs.<a class="code" href="../../d4/df2/class_data_structures_1_1_range_list.xhtml#a01e3478712140cf3d891da0f865bddd1">ranges</a>[i].maxIndex; messageNumber++)</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;            {</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;                congestionManager.OnNAK(timeRead, messageNumber);</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;                <span class="comment">// REMOVEME</span></div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;                <span class="comment">//              printf(&quot;%p NAK %i\n&quot;, this, dhf.datagramNumber.val);</span></div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;                <span class="keyword">const</span> <a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">DatagramSequenceNumberType</a> offsetIntoList = messageNumber - datagramHistoryPopCount;</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;                <span class="keywordflow">if</span> (offsetIntoList &gt;= datagramHistory.Size()) {</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;                    <span class="comment">// reached the end of the datagramHistory list - hence, we are done</span></div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;                    receivePacketCount++;</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;                    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;                }</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;                <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> timeSent;</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;                MessageNumberNode *messageNumberNode = GetMessageNumberNodeByDatagramIndex(messageNumber, &amp;timeSent);</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;                <span class="keywordflow">while</span> (messageNumberNode)</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;                {</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;                    <span class="comment">// Update timers so resends occur immediately</span></div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;                    <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *internalPacket = resendBuffer[messageNumberNode-&gt;messageNumber &amp; (<a class="code" href="../../df/df2/_native_types_8h.xhtml#a6eb1e68cc391dd753bc8ce896dbb8315">uint32_t</a>) <a class="code" href="../../d8/db0/defines_8h.xhtml#a3abde4cfe6a8c3a20ce719c1cad27a07">RESEND_BUFFER_ARRAY_MASK</a>];</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;                    <span class="keywordflow">if</span> (internalPacket)</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;                    {</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;                        <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a6793b6c44191952078c40545e227c4f0" title="The resendNext time to take action on this packet.">nextActionTime</a>!=0)</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;                        {</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;                            internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a6793b6c44191952078c40545e227c4f0" title="The resendNext time to take action on this packet.">nextActionTime</a>=timeRead;</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;                        }</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;                    }               </div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;                    messageNumberNode=messageNumberNode-&gt;next;</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;                }</div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;            }</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;        }</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    }</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;    {</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;        <a class="code" href="../../df/df2/_native_types_8h.xhtml#a6eb1e68cc391dd753bc8ce896dbb8315">uint32_t</a> skippedMessageCount;</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;        <span class="keywordflow">if</span> (!congestionManager.OnGotPacket(dhf.datagramNumber, dhf.isContinuousSend, timeRead, length, &amp;skippedMessageCount))</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;        {</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> messageHandlerIndex=0; messageHandlerIndex &lt; messageHandlerList.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); messageHandlerIndex++)</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;                messageHandlerList[messageHandlerIndex]-&gt;OnReliabilityLayerNotification(<span class="stringliteral">&quot;congestionManager.OnGotPacket failed&quot;</span>, <a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(length), systemAddress, <span class="keyword">true</span>);            </div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;        }</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;        <span class="keywordflow">if</span> (dhf.isPacketPair)</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;            congestionManager.OnGotPacketPair(dhf.datagramNumber, length, timeRead);</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;        DatagramHeaderFormat dhfNAK;</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;        dhfNAK.isNAK=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;        <a class="code" href="../../df/df2/_native_types_8h.xhtml#a6eb1e68cc391dd753bc8ce896dbb8315">uint32_t</a> skippedMessageOffset;</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;        <span class="keywordflow">for</span> (skippedMessageOffset=skippedMessageCount; skippedMessageOffset &gt; 0; skippedMessageOffset--)</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;        {</div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;            NAKs.Insert(dhf.datagramNumber-skippedMessageOffset);</div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;        }</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;        remoteSystemNeedsBAndAS=dhf.needsBAndAs;</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;        <span class="comment">// Ack dhf.datagramNumber</span></div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;        <span class="comment">// Ack even unreliable messages for congestion control, just don&#39;t resend them on no ack</span></div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;<span class="preprocessor">#if INCLUDE_TIMESTAMP_WITH_DATAGRAMS==1</span></div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;<span class="preprocessor"></span>        SendAcknowledgementPacket( dhf.datagramNumber, dhf.sourceSystemTime);</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;<span class="preprocessor"></span>        SendAcknowledgementPacket( dhf.datagramNumber, 0);</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;        <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a>* internalPacket = CreateInternalPacketFromBitStream( &amp;socketData, timeRead );</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;        <span class="keywordflow">if</span> (internalPacket==0)</div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;        {</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> messageHandlerIndex=0; messageHandlerIndex &lt; messageHandlerList.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); messageHandlerIndex++)</div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;                messageHandlerList[messageHandlerIndex]-&gt;OnReliabilityLayerNotification(<span class="stringliteral">&quot;CreateInternalPacketFromBitStream failed&quot;</span>, <a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(length), systemAddress, <span class="keyword">true</span>);            </div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;        }</div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;</div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;        <span class="keywordflow">while</span> ( internalPacket )</div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;        {</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> messageHandlerIndex=0; messageHandlerIndex &lt; messageHandlerList.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); messageHandlerIndex++)</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;            {</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;<span class="preprocessor">#if CC_TIME_TYPE_BYTES==4</span></div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;<span class="preprocessor"></span>                messageHandlerList[messageHandlerIndex]-&gt;OnInternalPacket(internalPacket, receivePacketCount, systemAddress, timeRead, <span class="keyword">false</span>);</div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;<span class="preprocessor"></span>                messageHandlerList[messageHandlerIndex]-&gt;OnInternalPacket(internalPacket, receivePacketCount, systemAddress, (<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a>)(timeRead/(<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a>)1000), <span class="keyword">false</span>);</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;<span class="preprocessor"></span>            }</div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;</div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;            {</div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;                <span class="comment">// resetReceivedPackets is set from a non-threadsafe function.</span></div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;                <span class="comment">// We do the actual reset in this function so the data is not modified by multiple threads</span></div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;                <span class="keywordflow">if</span> (resetReceivedPackets)</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;                {</div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;                    hasReceivedPacketQueue.ClearAndForceAllocation(<a class="code" href="../../d9/d15/_reliability_layer_8cpp.xhtml#ae70493628411f07443fec90b99b988c6">DEFAULT_HAS_RECEIVED_PACKET_QUEUE_SIZE</a>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;                    receivedPacketsBaseIndex=0;</div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;                    resetReceivedPackets=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;                }</div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;</div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;                <span class="comment">// Check for corrupt orderingChannel</span></div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;                <span class="keywordflow">if</span> ( </div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;                    internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae1fc3633b353730ff448e5b6675f7085">RELIABLE_SEQUENCED</a> ||</div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;                    internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eab6a8eb609ec1adbd5af421cf2acbedf5">UNRELIABLE_SEQUENCED</a> ||</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;                    internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eaff2d39b163bcf3e142744962bfb0849f">RELIABLE_ORDERED</a></div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;                    )</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;                {</div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;                    <span class="keywordflow">if</span> ( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a> &gt;= NUMBER_OF_ORDERED_STREAMS )</div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;                    {</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> messageHandlerIndex=0; messageHandlerIndex &lt; messageHandlerList.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); messageHandlerIndex++)</div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;                            messageHandlerList[messageHandlerIndex]-&gt;OnReliabilityLayerNotification(<span class="stringliteral">&quot;internalPacket-&gt;orderingChannel &gt;= NUMBER_OF_ORDERED_STREAMS&quot;</span>, <a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(length), systemAddress, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;</div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;                        bpsMetrics[(int) <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca578ae638e847eea96bc8b72bca19bb47" title="How many user message bytes were received, but ignored due to data format errors. This will usually b...">USER_MESSAGE_BYTES_RECEIVED_IGNORED</a>].<a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a096d41a893d9115781eac7620e975ee6">Push1</a>(timeRead,<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>));</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;                        FreeInternalPacketData(internalPacket, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;                        ReleaseToInternalPacketPool( internalPacket );</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;                        <span class="keywordflow">goto</span> CONTINUE_SOCKET_DATA_PARSE_LOOP;</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;                    }</div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;                }</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;</div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;                <span class="comment">// 8/12/09 was previously not checking if the message was reliable. However, on packetloss this would mean you&#39;d eventually exceed the</span></div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;                <span class="comment">// hole count because unreliable messages were never resent, and you&#39;d stop getting messages</span></div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;                <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eabc6ba98e9404532481e43eea39731929" title="The message is sent reliably, but not necessarily in any order. Same overhead as UNRELIABLE.">RELIABLE</a> || internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae1fc3633b353730ff448e5b6675f7085">RELIABLE_SEQUENCED</a> || internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eaff2d39b163bcf3e142744962bfb0849f">RELIABLE_ORDERED</a> )</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;                {</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;                    <span class="comment">// If the following conditional is true then this either a duplicate packet</span></div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;                    <span class="comment">// or an older out of order packet</span></div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;                    <span class="comment">// The subtraction unsigned overflow is intentional</span></div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;                    holeCount = (<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#ae16c16e7f0604671c945b768e0532da7">DatagramSequenceNumberType</a>)(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1ba0071a22897a0b50f5a414735dc542" title="A unique numerical identifier given to this user message. Used to identify reliable messages on the n...">reliableMessageNumber</a>-receivedPacketsBaseIndex);</div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;                    <span class="keyword">const</span> <a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">DatagramSequenceNumberType</a> typeRange = (<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#ae16c16e7f0604671c945b768e0532da7">DatagramSequenceNumberType</a>)(<span class="keyword">const</span> <a class="code" href="../../df/df2/_native_types_8h.xhtml#a6eb1e68cc391dd753bc8ce896dbb8315">uint32_t</a>)-1;</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;                    <span class="comment">// TESTING1</span></div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;<span class="comment">//                  printf(&quot;waiting on reliableMessageNumber=%i holeCount=%i datagramNumber=%i\n&quot;, receivedPacketsBaseIndex.val, holeCount.val, dhf.datagramNumber.val);</span></div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;</div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;                    <span class="keywordflow">if</span> (holeCount==(<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">DatagramSequenceNumberType</a>) 0)</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;                    {</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;                        <span class="comment">// Got what we were expecting</span></div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;                        <span class="keywordflow">if</span> (hasReceivedPacketQueue.Size())</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;                            hasReceivedPacketQueue.Pop();</div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;                        ++receivedPacketsBaseIndex;</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;                    }</div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;                    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (holeCount &gt; typeRange/(<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">DatagramSequenceNumberType</a>) 2)</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;                    {</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;                        bpsMetrics[(int) <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca578ae638e847eea96bc8b72bca19bb47" title="How many user message bytes were received, but ignored due to data format errors. This will usually b...">USER_MESSAGE_BYTES_RECEIVED_IGNORED</a>].<a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a096d41a893d9115781eac7620e975ee6">Push1</a>(timeRead,<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>));</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> messageHandlerIndex=0; messageHandlerIndex &lt; messageHandlerList.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); messageHandlerIndex++)</div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;                            messageHandlerList[messageHandlerIndex]-&gt;OnReliabilityLayerNotification(<span class="stringliteral">&quot;holeCount &gt; typeRange/(DatagramSequenceNumberType) 2&quot;</span>, <a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(length), systemAddress, <span class="keyword">false</span>);</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;                        <span class="comment">// Duplicate packet</span></div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;                        FreeInternalPacketData(internalPacket, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;                        ReleaseToInternalPacketPool( internalPacket );</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;</div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;                        <span class="keywordflow">goto</span> CONTINUE_SOCKET_DATA_PARSE_LOOP;</div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;                    }</div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;                    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>) holeCount&lt;hasReceivedPacketQueue.Size())</div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;                    {</div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;                        <span class="comment">// Got a higher count out of order packet that was missing in the sequence or we already got</span></div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;                        <span class="keywordflow">if</span> (hasReceivedPacketQueue[holeCount]!=<span class="keyword">false</span>) <span class="comment">// non-zero means this is a hole</span></div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;                        {</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;<span class="preprocessor">#ifdef LOG_TRIVIAL_NOTIFICATIONS</span></div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;<span class="preprocessor"></span>                            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> messageHandlerIndex=0; messageHandlerIndex &lt; messageHandlerList.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); messageHandlerIndex++)</div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;                                messageHandlerList[messageHandlerIndex]-&gt;OnReliabilityLayerNotification(<span class="stringliteral">&quot;Higher count pushed to hasReceivedPacketQueue&quot;</span>, <a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(length), systemAddress, <span class="keyword">false</span>);</div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;                            <span class="comment">// Fill in the hole</span></div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;                            hasReceivedPacketQueue[holeCount]=<span class="keyword">false</span>; <span class="comment">// We got the packet at holeCount</span></div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;                        }</div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;                        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;                        {</div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;                            bpsMetrics[(int) <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca578ae638e847eea96bc8b72bca19bb47" title="How many user message bytes were received, but ignored due to data format errors. This will usually b...">USER_MESSAGE_BYTES_RECEIVED_IGNORED</a>].<a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a096d41a893d9115781eac7620e975ee6">Push1</a>(timeRead,<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>));</div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;</div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;<span class="preprocessor">#ifdef LOG_TRIVIAL_NOTIFICATIONS</span></div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;<span class="preprocessor"></span>                            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> messageHandlerIndex=0; messageHandlerIndex &lt; messageHandlerList.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); messageHandlerIndex++)</div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;                                messageHandlerList[messageHandlerIndex]-&gt;OnReliabilityLayerNotification(<span class="stringliteral">&quot;Duplicate packet ignored&quot;</span>, <a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(length), systemAddress, <span class="keyword">false</span>);</div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;                            <span class="comment">// Duplicate packet</span></div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;                            FreeInternalPacketData(internalPacket, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;                            ReleaseToInternalPacketPool( internalPacket );</div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;</div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;                            <span class="keywordflow">goto</span> CONTINUE_SOCKET_DATA_PARSE_LOOP;</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;                        }</div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;                    }</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;                    <span class="keywordflow">else</span> <span class="comment">// holeCount&gt;=receivedPackets.Size()</span></div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;                    {</div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;                        <span class="keywordflow">if</span> (holeCount &gt; (<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">DatagramSequenceNumberType</a>) 1000000)</div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;                        {</div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;                            <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(<span class="stringliteral">&quot;Hole count too high. See ReliabilityLayer.h&quot;</span> &amp;&amp; 0);</div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;</div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> messageHandlerIndex=0; messageHandlerIndex &lt; messageHandlerList.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); messageHandlerIndex++)</div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;                                messageHandlerList[messageHandlerIndex]-&gt;OnReliabilityLayerNotification(<span class="stringliteral">&quot;holeCount &gt; 1000000&quot;</span>, <a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(length), systemAddress, <span class="keyword">true</span>);</div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;                            bpsMetrics[(int) <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca578ae638e847eea96bc8b72bca19bb47" title="How many user message bytes were received, but ignored due to data format errors. This will usually b...">USER_MESSAGE_BYTES_RECEIVED_IGNORED</a>].<a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a096d41a893d9115781eac7620e975ee6">Push1</a>(timeRead,<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>));</div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;</div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;                            <span class="comment">// Would crash due to out of memory!</span></div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;                            FreeInternalPacketData(internalPacket, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;                            ReleaseToInternalPacketPool( internalPacket );</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;</div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;                            <span class="keywordflow">goto</span> CONTINUE_SOCKET_DATA_PARSE_LOOP;</div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;                        }</div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;</div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;<span class="preprocessor">#ifdef LOG_TRIVIAL_NOTIFICATIONS</span></div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;<span class="preprocessor"></span>                        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> messageHandlerIndex=0; messageHandlerIndex &lt; messageHandlerList.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); messageHandlerIndex++)</div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;                            messageHandlerList[messageHandlerIndex]-&gt;OnReliabilityLayerNotification(<span class="stringliteral">&quot;Adding to hasReceivedPacketQueue later ordered message&quot;</span>, <a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(length), systemAddress, <span class="keyword">false</span>);</div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;                        <span class="comment">// Fix - sending on a higher priority gives us a very very high received packets base index if we formerly had pre-split a lot of messages and</span></div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;                        <span class="comment">// used that as the message number.  Because of this, a lot of time is spent in this linear loop and the timeout time expires because not</span></div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;                        <span class="comment">// all of the message is sent in time.</span></div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;                        <span class="comment">// Fixed by late assigning message IDs on the sender</span></div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;</div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;                        <span class="comment">// Add 0 times to the queue until (reliableMessageNumber - baseIndex) &lt; queue size.</span></div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;                        <span class="keywordflow">while</span> ((<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)(holeCount) &gt; hasReceivedPacketQueue.Size())</div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;                            hasReceivedPacketQueue.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a771fc63e3b0d892fbb605a379a78bacb" title="Push an element at the end of the stack.">Push</a>(<span class="keyword">true</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> ); <span class="comment">// time+(CCTimeType)60 * (CCTimeType)1000 * (CCTimeType)1000); // Didn&#39;t get this packet - set the time to give up waiting</span></div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;                        hasReceivedPacketQueue.Push(<span class="keyword">false</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> ); <span class="comment">// Got the packet</span></div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;<span class="preprocessor">#ifdef _DEBUG</span></div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;<span class="preprocessor"></span>                        <span class="comment">// If this assert hits then DatagramSequenceNumberType has overflowed</span></div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;                        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(hasReceivedPacketQueue.Size() &lt; (<span class="keywordtype">unsigned</span> int)((<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">DatagramSequenceNumberType</a>)(<span class="keyword">const</span> <a class="code" href="../../df/df2/_native_types_8h.xhtml#a6eb1e68cc391dd753bc8ce896dbb8315">uint32_t</a>)(-1)));</div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;<span class="preprocessor"></span>                    }</div>
<div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;</div>
<div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;                    <span class="keywordflow">while</span> ( hasReceivedPacketQueue.Size()&gt;0 &amp;&amp; hasReceivedPacketQueue.Peek()==false )</div>
<div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;                    {</div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;                        hasReceivedPacketQueue.Pop();</div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;                        ++receivedPacketsBaseIndex;</div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;                    }</div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;                }</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;</div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;                <span class="comment">// If the allocated buffer is &gt; DEFAULT_HAS_RECEIVED_PACKET_QUEUE_SIZE and it is 3x greater than the number of elements actually being used</span></div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;                <span class="keywordflow">if</span> (hasReceivedPacketQueue.AllocationSize() &gt; (<span class="keywordtype">unsigned</span> int) <a class="code" href="../../d9/d15/_reliability_layer_8cpp.xhtml#ae70493628411f07443fec90b99b988c6">DEFAULT_HAS_RECEIVED_PACKET_QUEUE_SIZE</a> &amp;&amp; hasReceivedPacketQueue.AllocationSize() &gt; hasReceivedPacketQueue.Size() * 3)</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;                    hasReceivedPacketQueue.Compress(<a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;</div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;</div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;                <span class="comment">/*</span></div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;<span class="comment">                if ( internalPacket-&gt;reliability == RELIABLE_SEQUENCED || internalPacket-&gt;reliability == UNRELIABLE_SEQUENCED )</span></div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;<span class="comment">                {</span></div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;<span class="comment">#ifdef _DEBUG</span></div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;<span class="comment">                    RakAssert( internalPacket-&gt;orderingChannel &lt; NUMBER_OF_ORDERED_STREAMS );</span></div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;<span class="comment">#endif</span></div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;<span class="comment">                    if ( internalPacket-&gt;orderingChannel &gt;= NUMBER_OF_ORDERED_STREAMS )</span></div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;<span class="comment">                    {</span></div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;<span class="comment">                        FreeInternalPacketData(internalPacket, _FILE_AND_LINE_ );</span></div>
<div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;<span class="comment">                        ReleaseToInternalPacketPool( internalPacket );</span></div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;<span class="comment">                        for (unsigned int messageHandlerIndex=0; messageHandlerIndex &lt; messageHandlerList.Size(); messageHandlerIndex++)</span></div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;<span class="comment">                            messageHandlerList[messageHandlerIndex]-&gt;OnReliabilityLayerNotification(&quot;internalPacket-&gt;orderingChannel &gt;= NUMBER_OF_ORDERED_STREAMS&quot;, BYTES_TO_BITS(length), systemAddress);          </span></div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;<span class="comment">                        bpsMetrics[(int) USER_MESSAGE_BYTES_RECEIVED_IGNORED].Push1(timeRead,BITS_TO_BYTES(internalPacket-&gt;dataBitLength));</span></div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;<span class="comment">                        goto CONTINUE_SOCKET_DATA_PARSE_LOOP;</span></div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;<span class="comment">                    }</span></div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;<span class="comment">                    if ( IsOlderOrderedPacket( internalPacket-&gt;orderingIndex, waitingForSequencedPacketReadIndex[ internalPacket-&gt;orderingChannel ] ) == false )</span></div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;<span class="comment">                    {</span></div>
<div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;<span class="comment">                        // Is this a split packet?</span></div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;<span class="comment">                        if ( internalPacket-&gt;splitPacketCount &gt; 0 )</span></div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;<span class="comment">                        {</span></div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;<span class="comment">                            // Generate the split</span></div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;<span class="comment">                            // Verify some parameters to make sure we don&#39;t get junk data</span></div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;<span class="comment">                            // Check for a rebuilt packet</span></div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;<span class="comment">                            InsertIntoSplitPacketList( internalPacket, timeRead );</span></div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;<span class="comment">                            bpsMetrics[(int) USER_MESSAGE_BYTES_RECEIVED_PROCESSED].Push1(timeRead,BITS_TO_BYTES(internalPacket-&gt;dataBitLength));</span></div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;<span class="comment">                            // Sequenced</span></div>
<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;<span class="comment">                            internalPacket = BuildPacketFromSplitPacketList( internalPacket-&gt;splitPacketId, timeRead,</span></div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;<span class="comment">                                s, systemAddress, rnr, remotePortRakNetWasStartedOn_PS3, extraSocketOptions);</span></div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;<span class="comment">                            if ( internalPacket )</span></div>
<div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;<span class="comment">                            {</span></div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;<span class="comment">                                // Update our index to the newest packet</span></div>
<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;<span class="comment">                                waitingForSequencedPacketReadIndex[ internalPacket-&gt;orderingChannel ] = internalPacket-&gt;orderingIndex + (OrderingIndexType)1;</span></div>
<div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;<span class="comment">                                // If there is a rebuilt packet, add it to the output queue</span></div>
<div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;<span class="comment">                                outputQueue.Push( internalPacket, _FILE_AND_LINE_  );</span></div>
<div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;<span class="comment">                                internalPacket = 0;</span></div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;<span class="comment">                            }</span></div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;<span class="comment">                            // else don&#39;t have all the parts yet</span></div>
<div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;<span class="comment">                        }</span></div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;<span class="comment">                        else</span></div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;<span class="comment">                        {</span></div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;<span class="comment">                            // Update our index to the newest packet</span></div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;<span class="comment">                            waitingForSequencedPacketReadIndex[ internalPacket-&gt;orderingChannel ] = internalPacket-&gt;orderingIndex + (OrderingIndexType)1;</span></div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;<span class="comment">                            // Not a split packet. Add the packet to the output queue</span></div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;<span class="comment">                            bpsMetrics[(int) USER_MESSAGE_BYTES_RECEIVED_PROCESSED].Push1(timeRead,BITS_TO_BYTES(internalPacket-&gt;dataBitLength));</span></div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;<span class="comment">                            outputQueue.Push( internalPacket, _FILE_AND_LINE_  );</span></div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;<span class="comment">                            internalPacket = 0;</span></div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;<span class="comment">                        }</span></div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;<span class="comment">                    }</span></div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;<span class="comment">                    else</span></div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;<span class="comment">                    {</span></div>
<div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;<span class="comment">                        // Older sequenced packet. Discard it</span></div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;<span class="comment">                        FreeInternalPacketData(internalPacket, _FILE_AND_LINE_ );</span></div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;<span class="comment">                        ReleaseToInternalPacketPool( internalPacket );</span></div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;<span class="comment">                        bpsMetrics[(int) USER_MESSAGE_BYTES_RECEIVED_IGNORED].Push1(timeRead,BITS_TO_BYTES(internalPacket-&gt;dataBitLength));</span></div>
<div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;<span class="comment">                    }</span></div>
<div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;<span class="comment">                    goto CONTINUE_SOCKET_DATA_PARSE_LOOP;</span></div>
<div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;<span class="comment">                    }</span></div>
<div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;<span class="comment">                // Is this an unsequenced split packet?</span></div>
<div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;<span class="comment">                if ( internalPacket-&gt;splitPacketCount &gt; 0 )</span></div>
<div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;<span class="comment">                {</span></div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;<span class="comment">                    // Check for a rebuilt packet</span></div>
<div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;<span class="comment">                    if ( internalPacket-&gt;reliability != RELIABLE_ORDERED )</span></div>
<div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;<span class="comment">                        internalPacket-&gt;orderingChannel = 255; // Use 255 to designate not sequenced and not ordered</span></div>
<div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;<span class="comment">                    InsertIntoSplitPacketList( internalPacket, timeRead );</span></div>
<div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;<span class="comment">                    internalPacket = BuildPacketFromSplitPacketList( internalPacket-&gt;splitPacketId, timeRead,</span></div>
<div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;<span class="comment">                        s, systemAddress, rnr, remotePortRakNetWasStartedOn_PS3, extraSocketOptions);</span></div>
<div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;<span class="comment">                    if ( internalPacket == 0 )</span></div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;<span class="comment">                    {</span></div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;<span class="comment">                        // Don&#39;t have all the parts yet</span></div>
<div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;<span class="comment">                        goto CONTINUE_SOCKET_DATA_PARSE_LOOP;</span></div>
<div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;<span class="comment">                    }</span></div>
<div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;<span class="comment">                }</span></div>
<div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;<span class="comment">                */</span></div>
<div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;</div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;                <span class="comment">/*</span></div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;<span class="comment">                if ( internalPacket-&gt;reliability == RELIABLE_ORDERED )</span></div>
<div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;<span class="comment">                {</span></div>
<div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;<span class="comment">#ifdef _DEBUG</span></div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;<span class="comment">                    RakAssert( internalPacket-&gt;orderingChannel &lt; NUMBER_OF_ORDERED_STREAMS );</span></div>
<div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;<span class="comment">#endif</span></div>
<div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;<span class="comment">                    if ( internalPacket-&gt;orderingChannel &gt;= NUMBER_OF_ORDERED_STREAMS )</span></div>
<div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;<span class="comment">                    {</span></div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;<span class="comment">                        // Invalid packet</span></div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;<span class="comment">                        FreeInternalPacketData(internalPacket, _FILE_AND_LINE_ );</span></div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;<span class="comment">                        ReleaseToInternalPacketPool( internalPacket );</span></div>
<div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;<span class="comment">                        bpsMetrics[(int) USER_MESSAGE_BYTES_RECEIVED_IGNORED].Push1(timeRead,BITS_TO_BYTES(internalPacket-&gt;dataBitLength));</span></div>
<div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;<span class="comment">                        goto CONTINUE_SOCKET_DATA_PARSE_LOOP;</span></div>
<div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;<span class="comment">                    }</span></div>
<div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;<span class="comment">                    bpsMetrics[(int) USER_MESSAGE_BYTES_RECEIVED_PROCESSED].Push1(timeRead,BITS_TO_BYTES(internalPacket-&gt;dataBitLength));</span></div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;<span class="comment">                    if ( waitingForOrderedPacketReadIndex[ internalPacket-&gt;orderingChannel ] == internalPacket-&gt;orderingIndex )</span></div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;<span class="comment">                    {</span></div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;<span class="comment">                        // Get the list to hold ordered packets for this stream</span></div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;<span class="comment">                        DataStructures::LinkedList&lt;InternalPacket*&gt; *orderingListAtOrderingStream;</span></div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;<span class="comment">                        unsigned char orderingChannelCopy = internalPacket-&gt;orderingChannel;</span></div>
<div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;<span class="comment">                        // Push the packet for the user to read</span></div>
<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;<span class="comment">                        outputQueue.Push( internalPacket, _FILE_AND_LINE_  );</span></div>
<div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;<span class="comment">                        internalPacket = 0; // Don&#39;t reference this any longer since other threads access it</span></div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;<span class="comment">                        // Wait for the resendNext ordered packet in sequence</span></div>
<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;<span class="comment">                        waitingForOrderedPacketReadIndex[ orderingChannelCopy ] ++; // This wraps</span></div>
<div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;<span class="comment">                        orderingListAtOrderingStream = GetOrderingListAtOrderingStream( orderingChannelCopy );</span></div>
<div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;<span class="comment">                        if ( orderingListAtOrderingStream != 0)</span></div>
<div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;<span class="comment">                        {</span></div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;<span class="comment">                            while ( orderingListAtOrderingStream-&gt;Size() &gt; 0 )</span></div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;<span class="comment">                            {</span></div>
<div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;<span class="comment">                                // Cycle through the list until nothing is found</span></div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;<span class="comment">                                orderingListAtOrderingStream-&gt;Beginning();</span></div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;<span class="comment">                                indexFound=false;</span></div>
<div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;<span class="comment">                                size=orderingListAtOrderingStream-&gt;Size();</span></div>
<div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;<span class="comment">                                count=0;</span></div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;<span class="comment">                                while (count++ &lt; size)</span></div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;<span class="comment">                                {</span></div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;<span class="comment">                                    if ( orderingListAtOrderingStream-&gt;Peek()-&gt;orderingIndex == waitingForOrderedPacketReadIndex[ orderingChannelCopy ] )</span></div>
<div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;<span class="comment">                                    {</span></div>
<div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;<span class="comment">                                        outputQueue.Push( orderingListAtOrderingStream-&gt;Pop(), _FILE_AND_LINE_  );</span></div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;<span class="comment">                                        waitingForOrderedPacketReadIndex[ orderingChannelCopy ]++;</span></div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;<span class="comment">                                        indexFound=true;</span></div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;<span class="comment">                                    }</span></div>
<div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;<span class="comment">                                    else</span></div>
<div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;<span class="comment">                                        (*orderingListAtOrderingStream)++;</span></div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;<span class="comment">                                }</span></div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;<span class="comment">                                if (indexFound==false)</span></div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;<span class="comment">                                    break;</span></div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;<span class="comment">                            }</span></div>
<div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;<span class="comment">                        }</span></div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;<span class="comment">                        internalPacket = 0;</span></div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;<span class="comment">                    }</span></div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;<span class="comment">                    else</span></div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;<span class="comment">                    {</span></div>
<div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;<span class="comment">                        // This is a newer ordered packet than we are waiting for. Store it for future use</span></div>
<div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;<span class="comment">                        AddToOrderingList( internalPacket );</span></div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;<span class="comment">                    }</span></div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;<span class="comment">                    goto CONTINUE_SOCKET_DATA_PARSE_LOOP;</span></div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;<span class="comment">                }</span></div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;<span class="comment">                */</span></div>
<div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;</div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;                <span class="comment">// Is this a split packet? If so then reassemble</span></div>
<div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;                <span class="keywordflow">if</span> ( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a> &gt; 0 )</div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;                {</div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;                    <span class="comment">// Check for a rebuilt packet</span></div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;                    <span class="keywordflow">if</span> ( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> != <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eaff2d39b163bcf3e142744962bfb0849f">RELIABLE_ORDERED</a> &amp;&amp; internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a>!=<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae1fc3633b353730ff448e5b6675f7085">RELIABLE_SEQUENCED</a> &amp;&amp; internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a>!=<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eab6a8eb609ec1adbd5af421cf2acbedf5">UNRELIABLE_SEQUENCED</a>)</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;                        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a> = 255; <span class="comment">// Use 255 to designate not sequenced and not ordered</span></div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;</div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;                    InsertIntoSplitPacketList( internalPacket, timeRead );</div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;</div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;                    internalPacket = BuildPacketFromSplitPacketList( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a01f5ff1a7b5cec5925f0ec5703bfae13" title="The ID of the split packet, if we have split packets. This is the maximum number of split messages we...">splitPacketId</a>, timeRead,</div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;                        s, systemAddress, rnr, updateBitStream);</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;</div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;                    <span class="keywordflow">if</span> ( internalPacket == 0 )</div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;                    {</div>
<div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;<span class="preprocessor">#ifdef LOG_TRIVIAL_NOTIFICATIONS</span></div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;<span class="preprocessor"></span>                        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> messageHandlerIndex=0; messageHandlerIndex &lt; messageHandlerList.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); messageHandlerIndex++)</div>
<div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;                            messageHandlerList[messageHandlerIndex]-&gt;OnReliabilityLayerNotification(<span class="stringliteral">&quot;BuildPacketFromSplitPacketList did not return anything.&quot;</span>, <a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(length), systemAddress, <span class="keyword">false</span>);</div>
<div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;                        <span class="comment">// Don&#39;t have all the parts yet</span></div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;                        <span class="keywordflow">goto</span> CONTINUE_SOCKET_DATA_PARSE_LOOP;</div>
<div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;                    }</div>
<div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;                }</div>
<div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;</div>
<div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;<span class="preprocessor">#ifdef PRINT_TO_FILE_RELIABLE_ORDERED_TEST</span></div>
<div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;<span class="preprocessor"></span>                <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> packetId;</div>
<div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;                <span class="keywordtype">char</span> *type=<span class="stringliteral">&quot;UNDEFINED&quot;</span>;</div>
<div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;<span class="preprocessor"></span>                <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae1fc3633b353730ff448e5b6675f7085">RELIABLE_SEQUENCED</a> ||</div>
<div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;                    internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eab6a8eb609ec1adbd5af421cf2acbedf5">UNRELIABLE_SEQUENCED</a> ||</div>
<div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;                    internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eaff2d39b163bcf3e142744962bfb0849f">RELIABLE_ORDERED</a>)</div>
<div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;                {</div>
<div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;<span class="preprocessor">#ifdef PRINT_TO_FILE_RELIABLE_ORDERED_TEST</span></div>
<div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;                    <span class="comment">// ___________________</span></div>
<div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;                    <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a> bitStream(internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>, <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>), <span class="keyword">false</span>);</div>
<div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> receivedPacketNumber;</div>
<div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;                    <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">SLNet::Time</a> receivedTime;</div>
<div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> streamNumber;</div>
<div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;                    <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7e">PacketReliability</a> reliability;</div>
<div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;                    <span class="comment">// ___________________</span></div>
<div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;</div>
<div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;</div>
<div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;                    bitStream.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ab527c7971fb48bd480842166736e1fa9" title="Ignore data we don&#39;t intend to read.">IgnoreBits</a>(8); <span class="comment">// Ignore ID_TIMESTAMP</span></div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;                    bitStream.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(receivedTime);</div>
<div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;                    bitStream.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(packetId);</div>
<div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;                    bitStream.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(receivedPacketNumber);</div>
<div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;                    bitStream.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(streamNumber);</div>
<div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;                    bitStream.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(reliability);</div>
<div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;                    <span class="keywordflow">if</span> (packetId==<a class="code" href="../../d6/d83/_message_identifiers_8h.xhtml#ac1b471af280629f5ace02e586d5bcfd3a80a7c744ac0bd08b983c6e1fffa38f3a">ID_USER_PACKET_ENUM</a>+1)</div>
<div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;                    {</div>
<div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;</div>
<div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;                        <span class="keywordflow">if</span> (reliability==<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eab6a8eb609ec1adbd5af421cf2acbedf5">UNRELIABLE_SEQUENCED</a>)</div>
<div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;                            type=<span class="stringliteral">&quot;UNRELIABLE_SEQUENCED&quot;</span>;</div>
<div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;                        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (reliability==<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eaff2d39b163bcf3e142744962bfb0849f">RELIABLE_ORDERED</a>)</div>
<div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;                            type=<span class="stringliteral">&quot;RELIABLE_ORDERED&quot;</span>;</div>
<div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;                        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;                            type=<span class="stringliteral">&quot;RELIABLE_SEQUENCED&quot;</span>;</div>
<div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;                    }</div>
<div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;                    <span class="comment">// ___________________</span></div>
<div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;</div>
<div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;                    <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1fabcef98ca0b6e15d6aca4c8ebe862b" title="The ID used as identification for ordering messages. Also included in sequenced messages.">orderingIndex</a>==orderedReadIndex[internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a>])</div>
<div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;                    {</div>
<div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;                        <span class="comment">// Has current ordering index</span></div>
<div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;                        <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae1fc3633b353730ff448e5b6675f7085">RELIABLE_SEQUENCED</a> ||</div>
<div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;                            internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eab6a8eb609ec1adbd5af421cf2acbedf5">UNRELIABLE_SEQUENCED</a>)</div>
<div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;                        {</div>
<div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;                            <span class="comment">// Is sequenced</span></div>
<div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;                            <span class="keywordflow">if</span> (IsOlderOrderedPacket(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a29568680a39b237528fbbf775b1f99e0">sequencingIndex</a>,highestSequencedReadIndex[internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a>])==<span class="keyword">false</span>)</div>
<div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;                            {</div>
<div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;                                <span class="comment">// Expected or highest known value</span></div>
<div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;</div>
<div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;<span class="preprocessor">#ifdef PRINT_TO_FILE_RELIABLE_ORDERED_TEST</span></div>
<div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;<span class="preprocessor"></span>                                <span class="keywordflow">if</span> (packetId==<a class="code" href="../../d6/d83/_message_identifiers_8h.xhtml#ac1b471af280629f5ace02e586d5bcfd3a80a7c744ac0bd08b983c6e1fffa38f3a">ID_USER_PACKET_ENUM</a>+1 &amp;&amp; fp)</div>
<div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;                                {</div>
<div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;                                    fprintf(fp, <span class="stringliteral">&quot;Returning %i, %s by fallthrough. OI=%i. SI=%i.\n&quot;</span>, receivedPacketNumber, type, internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1fabcef98ca0b6e15d6aca4c8ebe862b" title="The ID used as identification for ordering messages. Also included in sequenced messages.">orderingIndex</a>.<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml#a2e06899a191560e2a2f45b1508f3f571">val</a>, internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a29568680a39b237528fbbf775b1f99e0">sequencingIndex</a>);</div>
<div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;                                    fflush(fp);</div>
<div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;                                }</div>
<div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;</div>
<div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;                                <span class="keywordflow">if</span> (packetId==<a class="code" href="../../d6/d83/_message_identifiers_8h.xhtml#ac1b471af280629f5ace02e586d5bcfd3a80a7c744ac0bd08b983c6e1fffa38f3a">ID_USER_PACKET_ENUM</a>+1)</div>
<div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;                                {</div>
<div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;                                    <span class="keywordflow">if</span> (receivedPacketNumber&lt;packetNumber)</div>
<div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;                                    {</div>
<div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;                                        <span class="keywordflow">if</span> (fp)</div>
<div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;                                        {</div>
<div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;                                            fprintf(fp, <span class="stringliteral">&quot;Out of order packet from fallthrough! Expecting %i got %i\n&quot;</span>, receivedPacketNumber, packetNumber);</div>
<div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;                                            fflush(fp);</div>
<div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;                                        }</div>
<div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;                                    }</div>
<div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;                                    packetNumber=receivedPacketNumber+1;</div>
<div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;                                }</div>
<div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;<span class="preprocessor"></span>                                <span class="comment">// Update highest sequence</span></div>
<div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;                                <span class="comment">// 6/26/2012 - Did not have the +1 in the next statement</span></div>
<div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;                                <span class="comment">// Means a duplicated RELIABLE_SEQUENCED or UNRELIABLE_SEQUENCED packet would be returned to the user</span></div>
<div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;                                highestSequencedReadIndex[internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a>] = internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a29568680a39b237528fbbf775b1f99e0">sequencingIndex</a>+(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a6fa1eeef8ba656471611c0b68595fbb4">OrderingIndexType</a>)1;</div>
<div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;</div>
<div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;                                <span class="comment">// Fallthrough, returned to user below</span></div>
<div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;                            }</div>
<div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;                            <span class="keywordflow">else</span></div>
<div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;                            {</div>
<div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;<span class="preprocessor">#ifdef PRINT_TO_FILE_RELIABLE_ORDERED_TEST</span></div>
<div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;<span class="preprocessor"></span>                                <span class="keywordflow">if</span> (packetId==<a class="code" href="../../d6/d83/_message_identifiers_8h.xhtml#ac1b471af280629f5ace02e586d5bcfd3a80a7c744ac0bd08b983c6e1fffa38f3a">ID_USER_PACKET_ENUM</a>+1 &amp;&amp; fp)</div>
<div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;                                {</div>
<div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;                                fprintf(fp, <span class="stringliteral">&quot;Discarding %i, %s late sequenced. OI=%i. SI=%i.\n&quot;</span>, receivedPacketNumber, type, internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1fabcef98ca0b6e15d6aca4c8ebe862b" title="The ID used as identification for ordering messages. Also included in sequenced messages.">orderingIndex</a>.<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml#a2e06899a191560e2a2f45b1508f3f571">val</a>, internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a29568680a39b237528fbbf775b1f99e0">sequencingIndex</a>);</div>
<div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;                                fflush(fp);</div>
<div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;                                }</div>
<div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;<span class="preprocessor">#ifdef LOG_TRIVIAL_NOTIFICATIONS</span></div>
<div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;<span class="preprocessor"></span>                                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> messageHandlerIndex=0; messageHandlerIndex &lt; messageHandlerList.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); messageHandlerIndex++)</div>
<div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;                                    messageHandlerList[messageHandlerIndex]-&gt;OnReliabilityLayerNotification(<span class="stringliteral">&quot;Sequenced rejected: lower than highest known value&quot;</span>, <a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(length), systemAddress, <span class="keyword">false</span>);</div>
<div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;                                <span class="comment">// Lower than highest known value</span></div>
<div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;                                FreeInternalPacketData(internalPacket, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;                                ReleaseToInternalPacketPool( internalPacket );</div>
<div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;</div>
<div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;                                <span class="keywordflow">goto</span> CONTINUE_SOCKET_DATA_PARSE_LOOP;</div>
<div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;                            }</div>
<div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;                        }</div>
<div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;                        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;                        {</div>
<div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;                            <span class="comment">// Push to output buffer immediately</span></div>
<div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;                            bpsMetrics[(int) <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca41472c29531c4b5e02220b63cc55cf94" title="How many user message bytes were received, and returned to the user successfully.">USER_MESSAGE_BYTES_RECEIVED_PROCESSED</a>].<a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a096d41a893d9115781eac7620e975ee6">Push1</a>(timeRead,<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>));</div>
<div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;                            outputQueue.Push( internalPacket, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>  );</div>
<div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;</div>
<div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;<span class="preprocessor">#ifdef PRINT_TO_FILE_RELIABLE_ORDERED_TEST</span></div>
<div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;<span class="preprocessor"></span>                            <span class="keywordflow">if</span> (packetId==<a class="code" href="../../d6/d83/_message_identifiers_8h.xhtml#ac1b471af280629f5ace02e586d5bcfd3a80a7c744ac0bd08b983c6e1fffa38f3a">ID_USER_PACKET_ENUM</a>+1 &amp;&amp; fp)</div>
<div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;                            {</div>
<div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;                                fprintf(fp, <span class="stringliteral">&quot;outputting immediate %i, %s. OI=%i. SI=%i.&quot;</span>, receivedPacketNumber, type, internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1fabcef98ca0b6e15d6aca4c8ebe862b" title="The ID used as identification for ordering messages. Also included in sequenced messages.">orderingIndex</a>.<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml#a2e06899a191560e2a2f45b1508f3f571">val</a>, internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a29568680a39b237528fbbf775b1f99e0">sequencingIndex</a>);</div>
<div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;                                <span class="keywordflow">if</span> (orderingHeaps[internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a>].Size()==0)</div>
<div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;                                    fprintf(fp, <span class="stringliteral">&quot;heap empty\n&quot;</span>);</div>
<div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;                                <span class="keywordflow">else</span></div>
<div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;                                    fprintf(fp, <span class="stringliteral">&quot;heap head=%i\n&quot;</span>, orderingHeaps[internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a>].Peek()-&gt;orderingIndex.val);</div>
<div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;</div>
<div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;                                <span class="keywordflow">if</span> (receivedPacketNumber&lt;packetNumber)</div>
<div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;                                {</div>
<div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;                                    <span class="keywordflow">if</span> (packetId==<a class="code" href="../../d6/d83/_message_identifiers_8h.xhtml#ac1b471af280629f5ace02e586d5bcfd3a80a7c744ac0bd08b983c6e1fffa38f3a">ID_USER_PACKET_ENUM</a>+1 &amp;&amp; fp)</div>
<div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;                                    {</div>
<div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;                                        fprintf(fp, <span class="stringliteral">&quot;Out of order packet arrived! Expecting %i got %i\n&quot;</span>, receivedPacketNumber, packetNumber);</div>
<div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;                                        fflush(fp);</div>
<div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;                                    }</div>
<div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;                                }</div>
<div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;                                packetNumber=receivedPacketNumber+1;</div>
<div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;</div>
<div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;                                fflush(fp);</div>
<div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;                            }</div>
<div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;                            orderedReadIndex[internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a>]++;</div>
<div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;                            highestSequencedReadIndex[internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a>] = 0;</div>
<div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;</div>
<div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;                            <span class="comment">// Return off heap until order lost</span></div>
<div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;                            <span class="keywordflow">while</span> (orderingHeaps[internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a>].Size()&gt;0 &amp;&amp;</div>
<div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;                                orderingHeaps[internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a>].Peek()-&gt;orderingIndex==orderedReadIndex[internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a>])</div>
<div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;                            {</div>
<div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;                                internalPacket = orderingHeaps[internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a>].Pop(0);</div>
<div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;</div>
<div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;<span class="preprocessor">#ifdef PRINT_TO_FILE_RELIABLE_ORDERED_TEST</span></div>
<div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;<span class="preprocessor"></span>                                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a> bitStream2(internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>, <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>), <span class="keyword">false</span>);</div>
<div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;                                bitStream2.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ab527c7971fb48bd480842166736e1fa9" title="Ignore data we don&#39;t intend to read.">IgnoreBits</a>(8); <span class="comment">// Ignore ID_TIMESTAMP</span></div>
<div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;                                bitStream2.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(receivedTime);</div>
<div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;                                bitStream2.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ab527c7971fb48bd480842166736e1fa9" title="Ignore data we don&#39;t intend to read.">IgnoreBits</a>(8); <span class="comment">// Ignore ID_USER_ENUM+1</span></div>
<div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;                                bitStream2.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(receivedPacketNumber);</div>
<div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;                                bitStream2.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(streamNumber);</div>
<div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;                                bitStream2.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(reliability);</div>
<div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;                                <span class="keywordtype">char</span> *type=<span class="stringliteral">&quot;UNDEFINED&quot;</span>;</div>
<div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;                                <span class="keywordflow">if</span> (reliability==<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eab6a8eb609ec1adbd5af421cf2acbedf5">UNRELIABLE_SEQUENCED</a>)</div>
<div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;                                    type=<span class="stringliteral">&quot;UNRELIABLE_SEQUENCED&quot;</span>;</div>
<div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;                                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (reliability==<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eaff2d39b163bcf3e142744962bfb0849f">RELIABLE_ORDERED</a>)</div>
<div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;                                    type=<span class="stringliteral">&quot;RELIABLE_ORDERED&quot;</span>;</div>
<div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;</div>
<div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;                                <span class="keywordflow">if</span> (packetId==<a class="code" href="../../d6/d83/_message_identifiers_8h.xhtml#ac1b471af280629f5ace02e586d5bcfd3a80a7c744ac0bd08b983c6e1fffa38f3a">ID_USER_PACKET_ENUM</a>+1 &amp;&amp; fp)</div>
<div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;                                {</div>
<div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;                                    fprintf(fp, <span class="stringliteral">&quot;Heap pop %i, %s. OI=%i. SI=%i.\n&quot;</span>, receivedPacketNumber, type, internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1fabcef98ca0b6e15d6aca4c8ebe862b" title="The ID used as identification for ordering messages. Also included in sequenced messages.">orderingIndex</a>.<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml#a2e06899a191560e2a2f45b1508f3f571">val</a>, internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a29568680a39b237528fbbf775b1f99e0">sequencingIndex</a>);</div>
<div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;                                    fflush(fp);</div>
<div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;</div>
<div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;                                    <span class="keywordflow">if</span> (receivedPacketNumber&lt;packetNumber)</div>
<div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;                                    {</div>
<div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;                                        <span class="keywordflow">if</span> (packetId==<a class="code" href="../../d6/d83/_message_identifiers_8h.xhtml#ac1b471af280629f5ace02e586d5bcfd3a80a7c744ac0bd08b983c6e1fffa38f3a">ID_USER_PACKET_ENUM</a>+1 &amp;&amp; fp)</div>
<div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;                                        {</div>
<div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;                                            fprintf(fp, <span class="stringliteral">&quot;Out of order packet from heap! Expecting %i got %i\n&quot;</span>, receivedPacketNumber, packetNumber);</div>
<div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;                                            fflush(fp);</div>
<div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;                                        }</div>
<div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;                                    }</div>
<div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;                                    packetNumber=receivedPacketNumber+1;</div>
<div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;                                }</div>
<div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;                                bpsMetrics[(int) <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca41472c29531c4b5e02220b63cc55cf94" title="How many user message bytes were received, and returned to the user successfully.">USER_MESSAGE_BYTES_RECEIVED_PROCESSED</a>].<a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a096d41a893d9115781eac7620e975ee6">Push1</a>(timeRead,<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>));</div>
<div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;                                outputQueue.Push( internalPacket, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>  );</div>
<div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;</div>
<div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;                                <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eaff2d39b163bcf3e142744962bfb0849f">RELIABLE_ORDERED</a>)</div>
<div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;                                {</div>
<div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;                                    orderedReadIndex[internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a>]++;</div>
<div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;                                }</div>
<div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;                                <span class="keywordflow">else</span></div>
<div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;                                {</div>
<div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;                                    highestSequencedReadIndex[internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a>] = internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a29568680a39b237528fbbf775b1f99e0">sequencingIndex</a>;</div>
<div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;                                }</div>
<div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;                            }</div>
<div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;</div>
<div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;                            <span class="comment">// Done</span></div>
<div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;                            <span class="keywordflow">goto</span> CONTINUE_SOCKET_DATA_PARSE_LOOP;</div>
<div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;                        }</div>
<div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;                    }</div>
<div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;                    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (IsOlderOrderedPacket(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1fabcef98ca0b6e15d6aca4c8ebe862b" title="The ID used as identification for ordering messages. Also included in sequenced messages.">orderingIndex</a>,orderedReadIndex[internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a>])==<span class="keyword">false</span>)</div>
<div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;                    {</div>
<div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;                        <span class="comment">// internalPacket-&gt;_orderingIndex is greater</span></div>
<div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;                        <span class="comment">// If a message has a greater ordering index, and is sequenced or ordered, buffer it</span></div>
<div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;                        <span class="comment">// Sequenced has a lower heap weight, ordered has max sequenced weight</span></div>
<div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;</div>
<div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;                        <span class="comment">// Keep orderedHoleCount count small</span></div>
<div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;                        <span class="keywordflow">if</span> (orderingHeaps[internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a>].Size()==0)</div>
<div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;                            heapIndexOffsets[internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a>]=orderedReadIndex[internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a>];</div>
<div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;</div>
<div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;                        <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#ab27f4cdc690fb1fc6d083601b79d5e99">reliabilityHeapWeightType</a> orderedHoleCount = internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1fabcef98ca0b6e15d6aca4c8ebe862b" title="The ID used as identification for ordering messages. Also included in sequenced messages.">orderingIndex</a>-heapIndexOffsets[internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a>];</div>
<div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;                        <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#ab27f4cdc690fb1fc6d083601b79d5e99">reliabilityHeapWeightType</a> weight = orderedHoleCount*1048576;</div>
<div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;                        <a class="code" href="../../dc/d0b/_thread_pool_8h.xhtml#a35e6652907f33d8d77bdbdfbbddac127">if</a> (internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae1fc3633b353730ff448e5b6675f7085">RELIABLE_SEQUENCED</a> ||</div>
<div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;                            internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eab6a8eb609ec1adbd5af421cf2acbedf5">UNRELIABLE_SEQUENCED</a>)</div>
<div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;                            weight+=internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a29568680a39b237528fbbf775b1f99e0">sequencingIndex</a>;</div>
<div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;                        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;                            weight+=(1048576-1);</div>
<div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;                        orderingHeaps[internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a>].Push(weight, internalPacket, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;</div>
<div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;<span class="preprocessor">#ifdef PRINT_TO_FILE_RELIABLE_ORDERED_TEST</span></div>
<div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;<span class="preprocessor"></span>                        <span class="keywordflow">if</span> (packetId==<a class="code" href="../../d6/d83/_message_identifiers_8h.xhtml#ac1b471af280629f5ace02e586d5bcfd3a80a7c744ac0bd08b983c6e1fffa38f3a">ID_USER_PACKET_ENUM</a>+1 &amp;&amp; fp)</div>
<div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;                        {</div>
<div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;                        fprintf(fp, <span class="stringliteral">&quot;Heap push %i, %s, weight=%&quot;</span> <a class="code" href="../../d9/d49/types_8h.xhtml#a123f55e39d7666a55ea7bae5b2beaf7c">PRINTF_64_BIT_MODIFIER</a> <span class="stringliteral">&quot;u. OI=%i. waiting on %i. SI=%i.\n&quot;</span>, receivedPacketNumber, type, weight, internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1fabcef98ca0b6e15d6aca4c8ebe862b" title="The ID used as identification for ordering messages. Also included in sequenced messages.">orderingIndex</a>.<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml#a2e06899a191560e2a2f45b1508f3f571">val</a>, orderedReadIndex[internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a>].val, internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a29568680a39b237528fbbf775b1f99e0">sequencingIndex</a>);</div>
<div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;                        fflush(fp);</div>
<div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;                        }</div>
<div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;<span class="preprocessor">#ifdef LOG_TRIVIAL_NOTIFICATIONS</span></div>
<div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;<span class="preprocessor"></span>                        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> messageHandlerIndex=0; messageHandlerIndex &lt; messageHandlerList.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); messageHandlerIndex++)</div>
<div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;                            messageHandlerList[messageHandlerIndex]-&gt;OnReliabilityLayerNotification(<span class="stringliteral">&quot;Larger number ordered packet leaving holes&quot;</span>, <a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(length), systemAddress, <span class="keyword">false</span>);</div>
<div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;                        <span class="comment">// Buffered, nothing to do</span></div>
<div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;                        <span class="keywordflow">goto</span> CONTINUE_SOCKET_DATA_PARSE_LOOP;</div>
<div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;                    }</div>
<div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;                    {</div>
<div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;                        <span class="comment">// Out of order</span></div>
<div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;                        FreeInternalPacketData(internalPacket, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;                        ReleaseToInternalPacketPool( internalPacket );</div>
<div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;</div>
<div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;<span class="preprocessor">#ifdef LOG_TRIVIAL_NOTIFICATIONS</span></div>
<div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;<span class="preprocessor"></span>                        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> messageHandlerIndex=0; messageHandlerIndex &lt; messageHandlerList.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); messageHandlerIndex++)</div>
<div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;                            messageHandlerList[messageHandlerIndex]-&gt;OnReliabilityLayerNotification(<span class="stringliteral">&quot;Rejected older resend&quot;</span>, <a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(length), systemAddress, <span class="keyword">false</span>);</div>
<div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;                        <span class="comment">// Ignored, nothing to do</span></div>
<div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;                        <span class="keywordflow">goto</span> CONTINUE_SOCKET_DATA_PARSE_LOOP;</div>
<div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;                    }</div>
<div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;                    </div>
<div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;                }</div>
<div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;</div>
<div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;                bpsMetrics[(int) <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca41472c29531c4b5e02220b63cc55cf94" title="How many user message bytes were received, and returned to the user successfully.">USER_MESSAGE_BYTES_RECEIVED_PROCESSED</a>].<a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a096d41a893d9115781eac7620e975ee6">Push1</a>(timeRead,<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>));</div>
<div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;</div>
<div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;                <span class="comment">// Nothing special about this packet.  Add it to the output queue</span></div>
<div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;                outputQueue.Push( internalPacket, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>  );</div>
<div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;</div>
<div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;                internalPacket = 0;</div>
<div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;            }</div>
<div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;</div>
<div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;            <span class="comment">// Used for a goto to jump to the resendNext packet immediately</span></div>
<div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;</div>
<div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;CONTINUE_SOCKET_DATA_PARSE_LOOP:</div>
<div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;            <span class="comment">// Parse the bitstream to create an internal packet</span></div>
<div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;            internalPacket = CreateInternalPacketFromBitStream( &amp;socketData, timeRead );</div>
<div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;        }</div>
<div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;</div>
<div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;    }</div>
<div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;</div>
<div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;</div>
<div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;    receivePacketCount++;</div>
<div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;</div>
<div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;}</div>
<div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;</div>
<div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;<span class="comment">// This gets an end-user packet already parsed out. Returns number of BITS put into the buffer</span></div>
<div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l01523"></a><span class="lineno"><a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#abcc7d50f16310d422dcdb3eaee55c7db"> 1523</a></span>&#160;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> <a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#abcc7d50f16310d422dcdb3eaee55c7db">ReliabilityLayer::Receive</a>( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> **data )</div>
<div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;{</div>
<div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;    <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> * internalPacket;</div>
<div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;</div>
<div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;    <span class="keywordflow">if</span> ( outputQueue.Size() &gt; 0 )</div>
<div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;    {</div>
<div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;        <span class="comment">//  #ifdef _DEBUG</span></div>
<div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;        <span class="comment">//  RakAssert(bitStream-&gt;GetNumberOfBitsUsed()==0);</span></div>
<div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;        <span class="comment">//  #endif</span></div>
<div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;        internalPacket = outputQueue.Pop();</div>
<div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;</div>
<div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;        <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> bitLength;</div>
<div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;        *data = internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>;</div>
<div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;        bitLength = internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>;</div>
<div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;        ReleaseToInternalPacketPool( internalPacket );</div>
<div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;        <span class="keywordflow">return</span> bitLength;</div>
<div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;    }</div>
<div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;</div>
<div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;    {</div>
<div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;        <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;    }</div>
<div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;</div>
<div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;}</div>
<div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;</div>
<div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;<span class="comment">// Puts data on the send queue</span></div>
<div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;<span class="comment">// bitStream contains the data to send</span></div>
<div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;<span class="comment">// priority is what priority to send the data at</span></div>
<div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;<span class="comment">// reliability is what reliability to use</span></div>
<div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;<span class="comment">// ordering channel is from 0 to 255 and specifies what stream to use</span></div>
<div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l01555"></a><span class="lineno"><a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a443507154f9a5f99353a32a45ccc9e9d"> 1555</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a443507154f9a5f99353a32a45ccc9e9d">ReliabilityLayer::Send</a>( <span class="keywordtype">char</span> *data, <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> numberOfBitsToSend, <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#a659378374e516180f93640c79f59705c" title="These enumerations are used to describe when packets are delivered.">PacketPriority</a> priority, <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7e">PacketReliability</a> reliability, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> orderingChannel, <span class="keywordtype">bool</span> makeDataCopy, <span class="keywordtype">int</span> MTUSize, <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> currentTime, <a class="code" href="../../df/df2/_native_types_8h.xhtml#a6eb1e68cc391dd753bc8ce896dbb8315">uint32_t</a> receipt )</div>
<div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;{</div>
<div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;<span class="preprocessor">#ifdef _DEBUG</span></div>
<div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;<span class="preprocessor"></span>    <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>( !( reliability &gt;= <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eaf49e4584ca35290efd854922f4cad6be">NUMBER_OF_RELIABILITIES</a> || reliability &lt; 0 ) );</div>
<div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;    <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>( !( priority &gt; NUMBER_OF_PRIORITIES || priority &lt; 0 ) );</div>
<div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;    <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>( !( orderingChannel &gt;= NUMBER_OF_ORDERED_STREAMS ) );</div>
<div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;    <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>( numberOfBitsToSend &gt; 0 );</div>
<div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;<span class="preprocessor">#if CC_TIME_TYPE_BYTES==4</span></div>
<div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;<span class="preprocessor"></span>    currentTime/=1000;</div>
<div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;    (void) MTUSize;</div>
<div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;</div>
<div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;    <span class="comment">//  int a = BITS_TO_BYTES(numberOfBitsToSend);</span></div>
<div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;</div>
<div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;    <span class="comment">// Fix any bad parameters</span></div>
<div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;    <span class="keywordflow">if</span> ( reliability &gt; <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae94727e3abc9217e16c1c19f1e8f850a" title="Same as RELIABLE_ORDERED_ACK_RECEIPT. The user will also get ID_SND_RECEIPT_ACKED after the message i...">RELIABLE_ORDERED_WITH_ACK_RECEIPT</a> || reliability &lt; 0 )</div>
<div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;        reliability = <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eabc6ba98e9404532481e43eea39731929" title="The message is sent reliably, but not necessarily in any order. Same overhead as UNRELIABLE.">RELIABLE</a>;</div>
<div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;</div>
<div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;    <span class="keywordflow">if</span> ( priority &gt; NUMBER_OF_PRIORITIES || priority &lt; 0 )</div>
<div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;        priority = <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#a659378374e516180f93640c79f59705cacb1785f11dd02aa7f5d164fb314c594e">HIGH_PRIORITY</a>;</div>
<div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;</div>
<div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;    <span class="keywordflow">if</span> ( orderingChannel &gt;= NUMBER_OF_ORDERED_STREAMS )</div>
<div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;        orderingChannel = 0;</div>
<div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;</div>
<div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numberOfBytesToSend=(<span class="keywordtype">unsigned</span> int) <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(numberOfBitsToSend);</div>
<div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;    <span class="keywordflow">if</span> ( numberOfBitsToSend == 0 )</div>
<div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;    {</div>
<div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;    }</div>
<div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;    <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> * internalPacket = AllocateFromInternalPacketPool();</div>
<div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;    <span class="keywordflow">if</span> (internalPacket==0)</div>
<div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;    {</div>
<div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;        <a class="code" href="../../d9/d4c/_rak_memory_override_8cpp.xhtml#aa4ec18d5e86e162b63d9b2ded4df5596">notifyOutOfMemory</a>(<a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>; <span class="comment">// Out of memory</span></div>
<div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;    }</div>
<div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;</div>
<div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;    bpsMetrics[(int) <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40acafaa8c0be40e6ed5777d80527fb211d68" title="How many bytes per pushed via a call to RakPeerInterface::Send()">USER_MESSAGE_BYTES_PUSHED</a>].<a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a096d41a893d9115781eac7620e975ee6">Push1</a>(currentTime,numberOfBytesToSend);</div>
<div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;</div>
<div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;    internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a917f67e20c8cf4b48deb98beba7fbf2c" title="Was this packet number used this update to track windowing drops or increases? Each packet number is ...">creationTime</a> = currentTime;</div>
<div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;</div>
<div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;    <span class="keywordflow">if</span> ( makeDataCopy )</div>
<div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;    {</div>
<div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;        AllocInternalPacketData(internalPacket, numberOfBytesToSend, <span class="keyword">true</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;        <span class="comment">//internalPacket-&gt;data = (unsigned char*) rakMalloc_Ex( numberOfBytesToSend, _FILE_AND_LINE_ );</span></div>
<div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;        memcpy( internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>, data, numberOfBytesToSend );</div>
<div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;    }</div>
<div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;    {</div>
<div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;        <span class="comment">// Allocated the data elsewhere, delete it in here</span></div>
<div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;        <span class="comment">//internalPacket-&gt;data = ( unsigned char* ) data;</span></div>
<div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;        AllocInternalPacketData(internalPacket, (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*) data );</div>
<div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;    }</div>
<div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;</div>
<div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;    internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a> = numberOfBitsToSend;</div>
<div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;    internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a399a8e9109710d94c36c3dca946ce8a2" title="Identifies the order in which this number was sent. Used locally.">messageInternalOrder</a> = internalOrderIndex++;</div>
<div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;    internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a47e8d1384096dcfbc7925b41e3e7c84e" title="The priority level of this packet.">priority</a> = priority;</div>
<div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;    internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> = reliability;</div>
<div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;    internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a218b725d7cfd3577195f5c14a401694c" title="If the reliability type requires a receipt, then return this number with it.">sendReceiptSerial</a>=receipt;</div>
<div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;</div>
<div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;    <span class="comment">// Calculate if I need to split the packet</span></div>
<div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;    <span class="comment">//  int headerLength = BITS_TO_BYTES( GetMessageHeaderLengthBits( internalPacket, true ) );</span></div>
<div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;</div>
<div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> maxDataSizeBytes = GetMaxDatagramSizeExcludingMessageHeaderBytes() - <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(GetMaxMessageHeaderLengthBits());</div>
<div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;</div>
<div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;    <span class="keywordtype">bool</span> splitPacket = numberOfBytesToSend &gt; maxDataSizeBytes;</div>
<div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;</div>
<div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;    <span class="comment">// If a split packet, we might have to upgrade the reliability</span></div>
<div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;    <span class="keywordflow">if</span> ( splitPacket )</div>
<div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;    {</div>
<div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;        <span class="comment">// Split packets cannot be unreliable, in case that one part doesn&#39;t arrive and the whole cannot be reassembled.</span></div>
<div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;        <span class="comment">// One part could not arrive either due to packetloss or due to unreliable discard</span></div>
<div class="line"><a name="l01629"></a><span class="lineno"> 1629</span>&#160;        <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a>==<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eaeb409c363ddaeb3201fd95e9bee56696" title="Same as regular UDP, except that it will also discard duplicate datagrams. RakNet adds (6 to 17) + 21...">UNRELIABLE</a>)</div>
<div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160;            internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a>=<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eabc6ba98e9404532481e43eea39731929" title="The message is sent reliably, but not necessarily in any order. Same overhead as UNRELIABLE.">RELIABLE</a>;</div>
<div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a>==<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7ea4a623962051043733acde3e595e1cce0" title="Same as UNRELIABLE, however the user will get either ID_SND_RECEIPT_ACKED or ID_SND_RECEIPT_LOSS base...">UNRELIABLE_WITH_ACK_RECEIPT</a>)</div>
<div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;            internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a>=<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eacd15d4c4a2cea8b4c4459f1d3c09d95f" title="Same as RELIABLE. The user will also get ID_SND_RECEIPT_ACKED after the message is delivered when cal...">RELIABLE_WITH_ACK_RECEIPT</a>;</div>
<div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a>==<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eab6a8eb609ec1adbd5af421cf2acbedf5">UNRELIABLE_SEQUENCED</a>)</div>
<div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160;            internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a>=<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae1fc3633b353730ff448e5b6675f7085">RELIABLE_SEQUENCED</a>;</div>
<div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;<span class="comment">//      else if (internalPacket-&gt;reliability==UNRELIABLE_SEQUENCED_WITH_ACK_RECEIPT)</span></div>
<div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;<span class="comment">//          internalPacket-&gt;reliability=RELIABLE_SEQUENCED_WITH_ACK_RECEIPT;</span></div>
<div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;    }</div>
<div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;</div>
<div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;    <span class="comment">//  ++sendMessageNumberIndex;</span></div>
<div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;</div>
<div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;    <span class="keywordflow">if</span> ( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae1fc3633b353730ff448e5b6675f7085">RELIABLE_SEQUENCED</a> ||</div>
<div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eab6a8eb609ec1adbd5af421cf2acbedf5">UNRELIABLE_SEQUENCED</a></div>
<div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;<span class="comment">//      ||</span></div>
<div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;<span class="comment">//      internalPacket-&gt;reliability == RELIABLE_SEQUENCED_WITH_ACK_RECEIPT ||</span></div>
<div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;<span class="comment">//      internalPacket-&gt;reliability == UNRELIABLE_SEQUENCED_WITH_ACK_RECEIPT</span></div>
<div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;        )</div>
<div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;    {</div>
<div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;        <span class="comment">// Assign the sequence stream and index</span></div>
<div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a> = orderingChannel;</div>
<div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1fabcef98ca0b6e15d6aca4c8ebe862b" title="The ID used as identification for ordering messages. Also included in sequenced messages.">orderingIndex</a> = orderedWriteIndex[ orderingChannel ];</div>
<div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a29568680a39b237528fbbf775b1f99e0">sequencingIndex</a> = sequencedWriteIndex[ orderingChannel ]++;</div>
<div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;</div>
<div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;        <span class="comment">// This packet supersedes all other sequenced packets on the same ordering channel</span></div>
<div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;        <span class="comment">// Delete all packets in all send lists that are sequenced and on the same ordering channel</span></div>
<div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;        <span class="comment">// UPDATE:</span></div>
<div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;        <span class="comment">// Disabled.  We don&#39;t have enough info to consistently do this.  Sometimes newer data does supercede</span></div>
<div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160;        <span class="comment">// older data such as with constantly declining health, but not in all cases.</span></div>
<div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;        <span class="comment">// For example, with sequenced unreliable sound packets just because you send a newer one doesn&#39;t mean you</span></div>
<div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;        <span class="comment">// don&#39;t need the older ones because the odds are they will still arrive in order</span></div>
<div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160;        <span class="comment">/*</span></div>
<div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;<span class="comment">        for (int i=0; i &lt; NUMBER_OF_PRIORITIES; i++)</span></div>
<div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160;<span class="comment">        {</span></div>
<div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;<span class="comment">        DeleteSequencedPacketsInList(orderingChannel, sendQueue[i]);</span></div>
<div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160;<span class="comment">        }</span></div>
<div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;<span class="comment">        */</span></div>
<div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;    }</div>
<div class="line"><a name="l01667"></a><span class="lineno"> 1667</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eaff2d39b163bcf3e142744962bfb0849f">RELIABLE_ORDERED</a> || internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae94727e3abc9217e16c1c19f1e8f850a" title="Same as RELIABLE_ORDERED_ACK_RECEIPT. The user will also get ID_SND_RECEIPT_ACKED after the message i...">RELIABLE_ORDERED_WITH_ACK_RECEIPT</a> )</div>
<div class="line"><a name="l01668"></a><span class="lineno"> 1668</span>&#160;    {</div>
<div class="line"><a name="l01669"></a><span class="lineno"> 1669</span>&#160;        <span class="comment">// Assign the ordering channel and index</span></div>
<div class="line"><a name="l01670"></a><span class="lineno"> 1670</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a> = orderingChannel;</div>
<div class="line"><a name="l01671"></a><span class="lineno"> 1671</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1fabcef98ca0b6e15d6aca4c8ebe862b" title="The ID used as identification for ordering messages. Also included in sequenced messages.">orderingIndex</a> = orderedWriteIndex[ orderingChannel ] ++;</div>
<div class="line"><a name="l01672"></a><span class="lineno"> 1672</span>&#160;        sequencedWriteIndex[ orderingChannel ]=0;</div>
<div class="line"><a name="l01673"></a><span class="lineno"> 1673</span>&#160;    }</div>
<div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160;</div>
<div class="line"><a name="l01675"></a><span class="lineno"> 1675</span>&#160;    <span class="keywordflow">if</span> ( splitPacket )   <span class="comment">// If it uses a secure header it will be generated here</span></div>
<div class="line"><a name="l01676"></a><span class="lineno"> 1676</span>&#160;    {</div>
<div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;        <span class="comment">// Must split the packet.  This will also generate the SHA1 if it is required. It also adds it to the send list.</span></div>
<div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;        <span class="comment">//InternalPacket packetCopy;</span></div>
<div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;        <span class="comment">//memcpy(&amp;packetCopy, internalPacket, sizeof(InternalPacket));</span></div>
<div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;        <span class="comment">//sendPacketSet[priority].CancelWriteLock(internalPacket);</span></div>
<div class="line"><a name="l01681"></a><span class="lineno"> 1681</span>&#160;        <span class="comment">//SplitPacket( &amp;packetCopy, MTUSize );</span></div>
<div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;        SplitPacket( internalPacket );</div>
<div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160;        <span class="comment">//SLNet::OP_DELETE_ARRAY(packetCopy.data, _FILE_AND_LINE_);</span></div>
<div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;    }</div>
<div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160;</div>
<div class="line"><a name="l01687"></a><span class="lineno"> 1687</span>&#160;    <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>&lt;<a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(<a class="code" href="../../d2/d24/_m_t_u_size_8h.xhtml#a39d9da73f39bf9acabfc9e0ad2ae97c5">MAXIMUM_MTU_SIZE</a>));</div>
<div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160;    AddToUnreliableLinkedList(internalPacket);</div>
<div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;</div>
<div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;    <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>&lt;<a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(<a class="code" href="../../d2/d24/_m_t_u_size_8h.xhtml#a39d9da73f39bf9acabfc9e0ad2ae97c5">MAXIMUM_MTU_SIZE</a>));</div>
<div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;    <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a4f7fcca56594cded46930e105e175339">messageNumberAssigned</a>==<span class="keyword">false</span>);</div>
<div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;    outgoingPacketBuffer.Push( GetNextWeight(internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a47e8d1384096dcfbc7925b41e3e7c84e" title="The priority level of this packet.">priority</a>), internalPacket, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>  );</div>
<div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160;    <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(outgoingPacketBuffer.Size()==0 || outgoingPacketBuffer.Peek()-&gt;dataBitLength&lt;<a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(<a class="code" href="../../d2/d24/_m_t_u_size_8h.xhtml#a39d9da73f39bf9acabfc9e0ad2ae97c5">MAXIMUM_MTU_SIZE</a>));</div>
<div class="line"><a name="l01694"></a><span class="lineno"> 1694</span>&#160;    statistics.messageInSendBuffer[(int)internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a47e8d1384096dcfbc7925b41e3e7c84e" title="The priority level of this packet.">priority</a>]++;</div>
<div class="line"><a name="l01695"></a><span class="lineno"> 1695</span>&#160;    statistics.bytesInSendBuffer[(<span class="keywordtype">int</span>)internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a47e8d1384096dcfbc7925b41e3e7c84e" title="The priority level of this packet.">priority</a>]+=(double) <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>);</div>
<div class="line"><a name="l01696"></a><span class="lineno"> 1696</span>&#160;</div>
<div class="line"><a name="l01697"></a><span class="lineno"> 1697</span>&#160;    <span class="comment">//  sendPacketSet[priority].WriteUnlock();</span></div>
<div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l01699"></a><span class="lineno"> 1699</span>&#160;}</div>
<div class="line"><a name="l01700"></a><span class="lineno"> 1700</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l01701"></a><span class="lineno"> 1701</span>&#160;<span class="comment">// Run this once per game cycle.  Handles internal lists and actually does the send</span></div>
<div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l01703"></a><span class="lineno"><a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a787ea286c82a0855ce28f82e7a8a904e"> 1703</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a787ea286c82a0855ce28f82e7a8a904e">ReliabilityLayer::Update</a>( <a class="code" href="../../d1/dde/class_s_l_net_1_1_rak_net_socket2.xhtml">RakNetSocket2</a> *s, <a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml" title="Network address for a system.">SystemAddress</a> &amp;systemAddress, <span class="keywordtype">int</span> MTUSize, <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> time,</div>
<div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;                              <span class="keywordtype">unsigned</span> bitsPerSecondLimit,</div>
<div class="line"><a name="l01705"></a><span class="lineno"> 1705</span>&#160;                              <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List&lt;PluginInterface2*&gt;</a> &amp;messageHandlerList,</div>
<div class="line"><a name="l01706"></a><span class="lineno"> 1706</span>&#160;                              <a class="code" href="../../df/dd4/class_s_l_net_1_1_rak_net_random.xhtml">RakNetRandom</a> *<a class="code" href="../../d5/d55/_rak_peer_8cpp.xhtml#ad813a0f3eb2b1e317d9307dde627778a">rnr</a>,</div>
<div class="line"><a name="l01707"></a><span class="lineno"> 1707</span>&#160;                              <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a> &amp;updateBitStream)</div>
<div class="line"><a name="l01708"></a><span class="lineno"> 1708</span>&#160;</div>
<div class="line"><a name="l01709"></a><span class="lineno"> 1709</span>&#160;{</div>
<div class="line"><a name="l01710"></a><span class="lineno"> 1710</span>&#160;    (void) MTUSize;</div>
<div class="line"><a name="l01711"></a><span class="lineno"> 1711</span>&#160;</div>
<div class="line"><a name="l01712"></a><span class="lineno"> 1712</span>&#160;    <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a> timeMs;</div>
<div class="line"><a name="l01713"></a><span class="lineno"> 1713</span>&#160;<span class="preprocessor">#if CC_TIME_TYPE_BYTES==4</span></div>
<div class="line"><a name="l01714"></a><span class="lineno"> 1714</span>&#160;<span class="preprocessor"></span>    time/=1000;</div>
<div class="line"><a name="l01715"></a><span class="lineno"> 1715</span>&#160;    timeMs=time;</div>
<div class="line"><a name="l01716"></a><span class="lineno"> 1716</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l01717"></a><span class="lineno"> 1717</span>&#160;<span class="preprocessor"></span>    timeMs=(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a>) (time/(<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a>)1000);</div>
<div class="line"><a name="l01718"></a><span class="lineno"> 1718</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01719"></a><span class="lineno"> 1719</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160;<span class="preprocessor">#ifdef _DEBUG</span></div>
<div class="line"><a name="l01721"></a><span class="lineno"> 1721</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">while</span> (delayList.Size())</div>
<div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;    {</div>
<div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160;        <span class="keywordflow">if</span> (delayList.Peek()-&gt;sendTime &lt;= timeMs)</div>
<div class="line"><a name="l01724"></a><span class="lineno"> 1724</span>&#160;        {</div>
<div class="line"><a name="l01725"></a><span class="lineno"> 1725</span>&#160;            DataAndTime *dat = delayList.Pop();</div>
<div class="line"><a name="l01726"></a><span class="lineno"> 1726</span>&#160;<span class="comment">//          SocketLayer::SendTo( dat-&gt;s, dat-&gt;data, dat-&gt;length, systemAddress, __FILE__, __LINE__  );</span></div>
<div class="line"><a name="l01727"></a><span class="lineno"> 1727</span>&#160;</div>
<div class="line"><a name="l01728"></a><span class="lineno"> 1728</span>&#160;            <a class="code" href="../../df/dc3/struct_s_l_net_1_1_r_n_s2___send_parameters.xhtml">RNS2_SendParameters</a> bsp;</div>
<div class="line"><a name="l01729"></a><span class="lineno"> 1729</span>&#160;            bsp.<a class="code" href="../../df/dc3/struct_s_l_net_1_1_r_n_s2___send_parameters.xhtml#a223cad191bf08d288c46750e75c5f959">data</a> = (<span class="keywordtype">char</span>*) dat-&gt;data;</div>
<div class="line"><a name="l01730"></a><span class="lineno"> 1730</span>&#160;            bsp.<a class="code" href="../../df/dc3/struct_s_l_net_1_1_r_n_s2___send_parameters.xhtml#a23d46d4d1bf564a8873f477af6a29bd9">length</a> = dat-&gt;length;</div>
<div class="line"><a name="l01731"></a><span class="lineno"> 1731</span>&#160;            bsp.<a class="code" href="../../df/dc3/struct_s_l_net_1_1_r_n_s2___send_parameters.xhtml#a7e9bd3e902cda195cdeff08db0ddfd8c">systemAddress</a> = systemAddress;</div>
<div class="line"><a name="l01732"></a><span class="lineno"> 1732</span>&#160;            dat-&gt;s-&gt;Send(&amp;bsp, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160;</div>
<div class="line"><a name="l01734"></a><span class="lineno"> 1734</span>&#160;            <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a79772d09451f784e87bec85694fad1ed">SLNet::OP_DELETE</a>(dat,__FILE__,__LINE__);</div>
<div class="line"><a name="l01735"></a><span class="lineno"> 1735</span>&#160;        }</div>
<div class="line"><a name="l01736"></a><span class="lineno"> 1736</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01737"></a><span class="lineno"> 1737</span>&#160;        {</div>
<div class="line"><a name="l01738"></a><span class="lineno"> 1738</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01739"></a><span class="lineno"> 1739</span>&#160;        }</div>
<div class="line"><a name="l01740"></a><span class="lineno"> 1740</span>&#160;    }</div>
<div class="line"><a name="l01741"></a><span class="lineno"> 1741</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01742"></a><span class="lineno"> 1742</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01743"></a><span class="lineno"> 1743</span>&#160;    <span class="comment">// This line is necessary because the timer isn&#39;t accurate</span></div>
<div class="line"><a name="l01744"></a><span class="lineno"> 1744</span>&#160;    <span class="keywordflow">if</span> (time &lt;= lastUpdateTime)</div>
<div class="line"><a name="l01745"></a><span class="lineno"> 1745</span>&#160;    {</div>
<div class="line"><a name="l01746"></a><span class="lineno"> 1746</span>&#160;        <span class="comment">// Always set the last time in case of overflow</span></div>
<div class="line"><a name="l01747"></a><span class="lineno"> 1747</span>&#160;        lastUpdateTime=time;</div>
<div class="line"><a name="l01748"></a><span class="lineno"> 1748</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l01749"></a><span class="lineno"> 1749</span>&#160;    }</div>
<div class="line"><a name="l01750"></a><span class="lineno"> 1750</span>&#160;</div>
<div class="line"><a name="l01751"></a><span class="lineno"> 1751</span>&#160;    <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> timeSinceLastTick = time - lastUpdateTime;</div>
<div class="line"><a name="l01752"></a><span class="lineno"> 1752</span>&#160;    lastUpdateTime=time;</div>
<div class="line"><a name="l01753"></a><span class="lineno"> 1753</span>&#160;<span class="preprocessor">#if CC_TIME_TYPE_BYTES==4</span></div>
<div class="line"><a name="l01754"></a><span class="lineno"> 1754</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">if</span> (timeSinceLastTick&gt;100)</div>
<div class="line"><a name="l01755"></a><span class="lineno"> 1755</span>&#160;        timeSinceLastTick=100;</div>
<div class="line"><a name="l01756"></a><span class="lineno"> 1756</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l01757"></a><span class="lineno"> 1757</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">if</span> (timeSinceLastTick&gt;100000)</div>
<div class="line"><a name="l01758"></a><span class="lineno"> 1758</span>&#160;        timeSinceLastTick=100000;</div>
<div class="line"><a name="l01759"></a><span class="lineno"> 1759</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01760"></a><span class="lineno"> 1760</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01761"></a><span class="lineno"> 1761</span>&#160;    <span class="keywordflow">if</span> (unreliableTimeout&gt;0)</div>
<div class="line"><a name="l01762"></a><span class="lineno"> 1762</span>&#160;    {</div>
<div class="line"><a name="l01763"></a><span class="lineno"> 1763</span>&#160;        <span class="keywordflow">if</span> (timeSinceLastTick&gt;=timeToNextUnreliableCull)</div>
<div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;        {</div>
<div class="line"><a name="l01765"></a><span class="lineno"> 1765</span>&#160;            <span class="keywordflow">if</span> (unreliableLinkedListHead)</div>
<div class="line"><a name="l01766"></a><span class="lineno"> 1766</span>&#160;            {</div>
<div class="line"><a name="l01767"></a><span class="lineno"> 1767</span>&#160;                <span class="comment">// Cull out all unreliable messages that have exceeded the timeout</span></div>
<div class="line"><a name="l01768"></a><span class="lineno"> 1768</span>&#160;                <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *cur = unreliableLinkedListHead;</div>
<div class="line"><a name="l01769"></a><span class="lineno"> 1769</span>&#160;                <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *end = unreliableLinkedListHead-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a41632b2e9cd4069d8e1920dd5d53705c">unreliablePrev</a>;</div>
<div class="line"><a name="l01770"></a><span class="lineno"> 1770</span>&#160;</div>
<div class="line"><a name="l01771"></a><span class="lineno"> 1771</span>&#160;                <span class="keywordflow">for</span>(;;)</div>
<div class="line"><a name="l01772"></a><span class="lineno"> 1772</span>&#160;                {</div>
<div class="line"><a name="l01773"></a><span class="lineno"> 1773</span>&#160;                    <span class="keywordflow">if</span> (time &gt; cur-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a917f67e20c8cf4b48deb98beba7fbf2c" title="Was this packet number used this update to track windowing drops or increases? Each packet number is ...">creationTime</a>+(<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a>)unreliableTimeout)</div>
<div class="line"><a name="l01774"></a><span class="lineno"> 1774</span>&#160;                    {</div>
<div class="line"><a name="l01775"></a><span class="lineno"> 1775</span>&#160;                        <span class="comment">// Flag invalid, and clear the memory. Still needs to be removed from the sendPacketSet later</span></div>
<div class="line"><a name="l01776"></a><span class="lineno"> 1776</span>&#160;                        <span class="comment">// This fixes a problem where a remote system disconnects, but we don&#39;t know it yet, and memory consumption increases to a huge value</span></div>
<div class="line"><a name="l01777"></a><span class="lineno"> 1777</span>&#160;                        FreeInternalPacketData(cur, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l01778"></a><span class="lineno"> 1778</span>&#160;                        cur-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>=0;</div>
<div class="line"><a name="l01779"></a><span class="lineno"> 1779</span>&#160;                        <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *next = cur-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a283ac9e10954e8718916bb454173bead">unreliableNext</a>;</div>
<div class="line"><a name="l01780"></a><span class="lineno"> 1780</span>&#160;                        RemoveFromUnreliableLinkedList(cur);</div>
<div class="line"><a name="l01781"></a><span class="lineno"> 1781</span>&#160;</div>
<div class="line"><a name="l01782"></a><span class="lineno"> 1782</span>&#160;                        <span class="keywordflow">if</span> (cur==end)</div>
<div class="line"><a name="l01783"></a><span class="lineno"> 1783</span>&#160;                            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01784"></a><span class="lineno"> 1784</span>&#160;</div>
<div class="line"><a name="l01785"></a><span class="lineno"> 1785</span>&#160;                        cur=next;</div>
<div class="line"><a name="l01786"></a><span class="lineno"> 1786</span>&#160;                    }</div>
<div class="line"><a name="l01787"></a><span class="lineno"> 1787</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01788"></a><span class="lineno"> 1788</span>&#160;                    {</div>
<div class="line"><a name="l01789"></a><span class="lineno"> 1789</span>&#160;                        <span class="comment">//                      if (cur==end)</span></div>
<div class="line"><a name="l01790"></a><span class="lineno"> 1790</span>&#160;                        <span class="comment">//                          break;</span></div>
<div class="line"><a name="l01791"></a><span class="lineno"> 1791</span>&#160;                        <span class="comment">// </span></div>
<div class="line"><a name="l01792"></a><span class="lineno"> 1792</span>&#160;                        <span class="comment">//                      cur=cur-&gt;unreliableNext;</span></div>
<div class="line"><a name="l01793"></a><span class="lineno"> 1793</span>&#160;</div>
<div class="line"><a name="l01794"></a><span class="lineno"> 1794</span>&#160;                        <span class="comment">// They should be inserted in-order, so no need to iterate past the first failure</span></div>
<div class="line"><a name="l01795"></a><span class="lineno"> 1795</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01796"></a><span class="lineno"> 1796</span>&#160;                    }</div>
<div class="line"><a name="l01797"></a><span class="lineno"> 1797</span>&#160;                }</div>
<div class="line"><a name="l01798"></a><span class="lineno"> 1798</span>&#160;            }</div>
<div class="line"><a name="l01799"></a><span class="lineno"> 1799</span>&#160;</div>
<div class="line"><a name="l01800"></a><span class="lineno"> 1800</span>&#160;            timeToNextUnreliableCull=unreliableTimeout/(<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a>)2;</div>
<div class="line"><a name="l01801"></a><span class="lineno"> 1801</span>&#160;        }</div>
<div class="line"><a name="l01802"></a><span class="lineno"> 1802</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01803"></a><span class="lineno"> 1803</span>&#160;        {</div>
<div class="line"><a name="l01804"></a><span class="lineno"> 1804</span>&#160;            timeToNextUnreliableCull-=timeSinceLastTick;</div>
<div class="line"><a name="l01805"></a><span class="lineno"> 1805</span>&#160;        }</div>
<div class="line"><a name="l01806"></a><span class="lineno"> 1806</span>&#160;    }</div>
<div class="line"><a name="l01807"></a><span class="lineno"> 1807</span>&#160;</div>
<div class="line"><a name="l01808"></a><span class="lineno"> 1808</span>&#160;</div>
<div class="line"><a name="l01809"></a><span class="lineno"> 1809</span>&#160;    <span class="comment">// Due to thread vagarities and the way I store the time to avoid slow calls to SLNet::GetTime</span></div>
<div class="line"><a name="l01810"></a><span class="lineno"> 1810</span>&#160;    <span class="comment">// time may be less than lastAck</span></div>
<div class="line"><a name="l01811"></a><span class="lineno"> 1811</span>&#160;<span class="preprocessor">#if CC_TIME_TYPE_BYTES==4</span></div>
<div class="line"><a name="l01812"></a><span class="lineno"> 1812</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">if</span> ( statistics.messagesInResendBuffer!=0 &amp;&amp; AckTimeout(time) )</div>
<div class="line"><a name="l01813"></a><span class="lineno"> 1813</span>&#160;#<span class="keywordflow">else</span></div>
<div class="line"><a name="l01814"></a><span class="lineno"> 1814</span>&#160;    <span class="keywordflow">if</span> ( statistics.messagesInResendBuffer!=0 &amp;&amp; AckTimeout(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a>(time/(<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a>)1000)) )</div>
<div class="line"><a name="l01815"></a><span class="lineno"> 1815</span>&#160;#endif</div>
<div class="line"><a name="l01816"></a><span class="lineno"> 1816</span>&#160;    {</div>
<div class="line"><a name="l01817"></a><span class="lineno"> 1817</span>&#160;        <span class="comment">// SHOW - dead connection</span></div>
<div class="line"><a name="l01818"></a><span class="lineno"> 1818</span>&#160;        <span class="comment">// We&#39;ve waited a very long time for a reliable packet to get an ack and it never has</span></div>
<div class="line"><a name="l01819"></a><span class="lineno"> 1819</span>&#160;        deadConnection = <span class="keyword">true</span>;</div>
<div class="line"><a name="l01820"></a><span class="lineno"> 1820</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l01821"></a><span class="lineno"> 1821</span>&#160;    }</div>
<div class="line"><a name="l01822"></a><span class="lineno"> 1822</span>&#160;</div>
<div class="line"><a name="l01823"></a><span class="lineno"> 1823</span>&#160;    <span class="keywordflow">if</span> (congestionManager.ShouldSendACKs(time,timeSinceLastTick))</div>
<div class="line"><a name="l01824"></a><span class="lineno"> 1824</span>&#160;    {</div>
<div class="line"><a name="l01825"></a><span class="lineno"> 1825</span>&#160;        SendACKs(s, systemAddress, time, rnr, updateBitStream);</div>
<div class="line"><a name="l01826"></a><span class="lineno"> 1826</span>&#160;    }</div>
<div class="line"><a name="l01827"></a><span class="lineno"> 1827</span>&#160;</div>
<div class="line"><a name="l01828"></a><span class="lineno"> 1828</span>&#160;    <span class="keywordflow">if</span> (NAKs.Size()&gt;0)</div>
<div class="line"><a name="l01829"></a><span class="lineno"> 1829</span>&#160;    {</div>
<div class="line"><a name="l01830"></a><span class="lineno"> 1830</span>&#160;        updateBitStream.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#aab4381d8b4a48dbc8e2975dba894f350" title="Resets the bitstream for reuse.">Reset</a>();</div>
<div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160;        DatagramHeaderFormat dhfNAK;</div>
<div class="line"><a name="l01832"></a><span class="lineno"> 1832</span>&#160;        dhfNAK.isNAK=<span class="keyword">true</span>;</div>
<div class="line"><a name="l01833"></a><span class="lineno"> 1833</span>&#160;        dhfNAK.isACK=<span class="keyword">false</span>;</div>
<div class="line"><a name="l01834"></a><span class="lineno"> 1834</span>&#160;        dhfNAK.isPacketPair=<span class="keyword">false</span>;</div>
<div class="line"><a name="l01835"></a><span class="lineno"> 1835</span>&#160;        dhfNAK.Serialize(&amp;updateBitStream);</div>
<div class="line"><a name="l01836"></a><span class="lineno"> 1836</span>&#160;        NAKs.Serialize(&amp;updateBitStream, GetMaxDatagramSizeExcludingMessageHeaderBits(), <span class="keyword">true</span>);</div>
<div class="line"><a name="l01837"></a><span class="lineno"> 1837</span>&#160;        SendBitStream( s, systemAddress, &amp;updateBitStream, rnr, time );</div>
<div class="line"><a name="l01838"></a><span class="lineno"> 1838</span>&#160;    }</div>
<div class="line"><a name="l01839"></a><span class="lineno"> 1839</span>&#160;</div>
<div class="line"><a name="l01840"></a><span class="lineno"> 1840</span>&#160;    DatagramHeaderFormat dhf;</div>
<div class="line"><a name="l01841"></a><span class="lineno"> 1841</span>&#160;    dhf.needsBAndAs=congestionManager.GetIsInSlowStart();</div>
<div class="line"><a name="l01842"></a><span class="lineno"> 1842</span>&#160;    dhf.isContinuousSend=bandwidthExceededStatistic;</div>
<div class="line"><a name="l01843"></a><span class="lineno"> 1843</span>&#160;    <span class="comment">//  bandwidthExceededStatistic=sendPacketSet[0].IsEmpty()==false ||</span></div>
<div class="line"><a name="l01844"></a><span class="lineno"> 1844</span>&#160;    <span class="comment">//      sendPacketSet[1].IsEmpty()==false ||</span></div>
<div class="line"><a name="l01845"></a><span class="lineno"> 1845</span>&#160;    <span class="comment">//      sendPacketSet[2].IsEmpty()==false ||</span></div>
<div class="line"><a name="l01846"></a><span class="lineno"> 1846</span>&#160;    <span class="comment">//      sendPacketSet[3].IsEmpty()==false;</span></div>
<div class="line"><a name="l01847"></a><span class="lineno"> 1847</span>&#160;    bandwidthExceededStatistic=outgoingPacketBuffer.Size()&gt;0;</div>
<div class="line"><a name="l01848"></a><span class="lineno"> 1848</span>&#160;</div>
<div class="line"><a name="l01849"></a><span class="lineno"> 1849</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> hasDataToSendOrResend = IsResendQueueEmpty()==<span class="keyword">false</span> || bandwidthExceededStatistic;</div>
<div class="line"><a name="l01850"></a><span class="lineno"> 1850</span>&#160;    <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(NUMBER_OF_PRIORITIES==4);</div>
<div class="line"><a name="l01851"></a><span class="lineno"> 1851</span>&#160;    congestionManager.Update(time, hasDataToSendOrResend);</div>
<div class="line"><a name="l01852"></a><span class="lineno"> 1852</span>&#160;</div>
<div class="line"><a name="l01853"></a><span class="lineno"> 1853</span>&#160;    statistics.BPSLimitByOutgoingBandwidthLimit = <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(bitsPerSecondLimit);</div>
<div class="line"><a name="l01854"></a><span class="lineno"> 1854</span>&#160;    statistics.BPSLimitByCongestionControl = congestionManager.GetBytesPerSecondLimitByCongestionControl();</div>
<div class="line"><a name="l01855"></a><span class="lineno"> 1855</span>&#160;</div>
<div class="line"><a name="l01856"></a><span class="lineno"> 1856</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i;</div>
<div class="line"><a name="l01857"></a><span class="lineno"> 1857</span>&#160;    <span class="keywordflow">if</span> (time &gt; lastBpsClear+</div>
<div class="line"><a name="l01858"></a><span class="lineno"> 1858</span>&#160;#<span class="keywordflow">if</span> <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#aefac830b579dd77afb0c525fb51908c5" title="Set to 4 if you are using the iPod Touch TG. See http://www.jenkinssoftware.com/forum/index.php?topic=2717.0.">CC_TIME_TYPE_BYTES</a>==4</div>
<div class="line"><a name="l01859"></a><span class="lineno"> 1859</span>&#160;        100</div>
<div class="line"><a name="l01860"></a><span class="lineno"> 1860</span>&#160;#<span class="keywordflow">else</span></div>
<div class="line"><a name="l01861"></a><span class="lineno"> 1861</span>&#160;        100000</div>
<div class="line"><a name="l01862"></a><span class="lineno"> 1862</span>&#160;#endif</div>
<div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160;        )</div>
<div class="line"><a name="l01864"></a><span class="lineno"> 1864</span>&#160;    {</div>
<div class="line"><a name="l01865"></a><span class="lineno"> 1865</span>&#160;        <span class="keywordflow">for</span> (i=0; i &lt; <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca766e442d17c52434750d2c2208555237">RNS_PER_SECOND_METRICS_COUNT</a>; i++)</div>
<div class="line"><a name="l01866"></a><span class="lineno"> 1866</span>&#160;        {</div>
<div class="line"><a name="l01867"></a><span class="lineno"> 1867</span>&#160;            bpsMetrics[i].ClearExpired1(time);</div>
<div class="line"><a name="l01868"></a><span class="lineno"> 1868</span>&#160;        }</div>
<div class="line"><a name="l01869"></a><span class="lineno"> 1869</span>&#160;</div>
<div class="line"><a name="l01870"></a><span class="lineno"> 1870</span>&#160;        lastBpsClear=time;</div>
<div class="line"><a name="l01871"></a><span class="lineno"> 1871</span>&#160;    }</div>
<div class="line"><a name="l01872"></a><span class="lineno"> 1872</span>&#160;</div>
<div class="line"><a name="l01873"></a><span class="lineno"> 1873</span>&#160;    <span class="keywordflow">if</span> (unreliableWithAckReceiptHistory.Size()&gt;0)</div>
<div class="line"><a name="l01874"></a><span class="lineno"> 1874</span>&#160;    {</div>
<div class="line"><a name="l01875"></a><span class="lineno"> 1875</span>&#160;        i=0;</div>
<div class="line"><a name="l01876"></a><span class="lineno"> 1876</span>&#160;        <span class="keywordflow">while</span> (i &lt; unreliableWithAckReceiptHistory.Size())</div>
<div class="line"><a name="l01877"></a><span class="lineno"> 1877</span>&#160;        {</div>
<div class="line"><a name="l01878"></a><span class="lineno"> 1878</span>&#160;            <span class="comment">//if (unreliableWithAckReceiptHistory[i].nextActionTime &lt; time)</span></div>
<div class="line"><a name="l01879"></a><span class="lineno"> 1879</span>&#160;            <span class="keywordflow">if</span> (time - unreliableWithAckReceiptHistory[i].nextActionTime &lt; (((<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a>)-1)/2) )</div>
<div class="line"><a name="l01880"></a><span class="lineno"> 1880</span>&#160;            {</div>
<div class="line"><a name="l01881"></a><span class="lineno"> 1881</span>&#160;                <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *ackReceipt = AllocateFromInternalPacketPool();</div>
<div class="line"><a name="l01882"></a><span class="lineno"> 1882</span>&#160;                AllocInternalPacketData(ackReceipt, 5,  <span class="keyword">false</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l01883"></a><span class="lineno"> 1883</span>&#160;                ackReceipt-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>=<a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(5);</div>
<div class="line"><a name="l01884"></a><span class="lineno"> 1884</span>&#160;                ackReceipt-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>[0]=(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a5b5b9eb3be9ad636af02da44b718a75f" title="First byte of a network message.">MessageID</a>)<a class="code" href="../../d6/d83/_message_identifiers_8h.xhtml#ac1b471af280629f5ace02e586d5bcfd3aad5680905e97e2219ee27b671c6a7fb0">ID_SND_RECEIPT_LOSS</a>;</div>
<div class="line"><a name="l01885"></a><span class="lineno"> 1885</span>&#160;                memcpy(ackReceipt-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>+<span class="keyword">sizeof</span>(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a5b5b9eb3be9ad636af02da44b718a75f" title="First byte of a network message.">MessageID</a>), &amp;unreliableWithAckReceiptHistory[i].sendReceiptSerial, <span class="keyword">sizeof</span>(<a class="code" href="../../df/df2/_native_types_8h.xhtml#a6eb1e68cc391dd753bc8ce896dbb8315">uint32_t</a>));</div>
<div class="line"><a name="l01886"></a><span class="lineno"> 1886</span>&#160;                outputQueue.Push(ackReceipt, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l01887"></a><span class="lineno"> 1887</span>&#160;</div>
<div class="line"><a name="l01888"></a><span class="lineno"> 1888</span>&#160;                <span class="comment">// Remove, swap with last</span></div>
<div class="line"><a name="l01889"></a><span class="lineno"> 1889</span>&#160;                unreliableWithAckReceiptHistory.RemoveAtIndex(i);</div>
<div class="line"><a name="l01890"></a><span class="lineno"> 1890</span>&#160;            }</div>
<div class="line"><a name="l01891"></a><span class="lineno"> 1891</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l01892"></a><span class="lineno"> 1892</span>&#160;                i++;</div>
<div class="line"><a name="l01893"></a><span class="lineno"> 1893</span>&#160;        }</div>
<div class="line"><a name="l01894"></a><span class="lineno"> 1894</span>&#160;    }</div>
<div class="line"><a name="l01895"></a><span class="lineno"> 1895</span>&#160;</div>
<div class="line"><a name="l01896"></a><span class="lineno"> 1896</span>&#160;    <span class="keywordflow">if</span> (hasDataToSendOrResend==<span class="keyword">true</span>)</div>
<div class="line"><a name="l01897"></a><span class="lineno"> 1897</span>&#160;    {</div>
<div class="line"><a name="l01898"></a><span class="lineno"> 1898</span>&#160;        <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *internalPacket;</div>
<div class="line"><a name="l01899"></a><span class="lineno"> 1899</span>&#160;        <span class="comment">//      bool forceSend=false;</span></div>
<div class="line"><a name="l01900"></a><span class="lineno"> 1900</span>&#160;        <span class="keywordtype">bool</span> pushedAnything;</div>
<div class="line"><a name="l01901"></a><span class="lineno"> 1901</span>&#160;        <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> nextPacketBitLength;</div>
<div class="line"><a name="l01902"></a><span class="lineno"> 1902</span>&#160;        dhf.isACK=<span class="keyword">false</span>;</div>
<div class="line"><a name="l01903"></a><span class="lineno"> 1903</span>&#160;        dhf.isNAK=<span class="keyword">false</span>;</div>
<div class="line"><a name="l01904"></a><span class="lineno"> 1904</span>&#160;        dhf.hasBAndAS=<span class="keyword">false</span>;</div>
<div class="line"><a name="l01905"></a><span class="lineno"> 1905</span>&#160;        ResetPacketsAndDatagrams();</div>
<div class="line"><a name="l01906"></a><span class="lineno"> 1906</span>&#160;</div>
<div class="line"><a name="l01907"></a><span class="lineno"> 1907</span>&#160;        <span class="keywordtype">int</span> transmissionBandwidth = congestionManager.GetTransmissionBandwidth(time, timeSinceLastTick, unacknowledgedBytes,dhf.isContinuousSend);</div>
<div class="line"><a name="l01908"></a><span class="lineno"> 1908</span>&#160;        <span class="keywordtype">int</span> retransmissionBandwidth = congestionManager.GetRetransmissionBandwidth(time, timeSinceLastTick, unacknowledgedBytes,dhf.isContinuousSend);</div>
<div class="line"><a name="l01909"></a><span class="lineno"> 1909</span>&#160;        <span class="keywordflow">if</span> (retransmissionBandwidth&gt;0 || transmissionBandwidth&gt;0)</div>
<div class="line"><a name="l01910"></a><span class="lineno"> 1910</span>&#160;        {</div>
<div class="line"><a name="l01911"></a><span class="lineno"> 1911</span>&#160;            statistics.isLimitedByCongestionControl=<span class="keyword">false</span>;</div>
<div class="line"><a name="l01912"></a><span class="lineno"> 1912</span>&#160;</div>
<div class="line"><a name="l01913"></a><span class="lineno"> 1913</span>&#160;            allDatagramSizesSoFar=0;</div>
<div class="line"><a name="l01914"></a><span class="lineno"> 1914</span>&#160;</div>
<div class="line"><a name="l01915"></a><span class="lineno"> 1915</span>&#160;            <span class="comment">// Keep filling datagrams until we exceed retransmission bandwidth</span></div>
<div class="line"><a name="l01916"></a><span class="lineno"> 1916</span>&#160;            <span class="keywordflow">while</span> ((<span class="keywordtype">int</span>)<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(allDatagramSizesSoFar)&lt;retransmissionBandwidth)</div>
<div class="line"><a name="l01917"></a><span class="lineno"> 1917</span>&#160;            {</div>
<div class="line"><a name="l01918"></a><span class="lineno"> 1918</span>&#160;                pushedAnything=<span class="keyword">false</span>;</div>
<div class="line"><a name="l01919"></a><span class="lineno"> 1919</span>&#160;</div>
<div class="line"><a name="l01920"></a><span class="lineno"> 1920</span>&#160;                <span class="comment">// Fill one datagram, then break</span></div>
<div class="line"><a name="l01921"></a><span class="lineno"> 1921</span>&#160;                <span class="keywordflow">while</span> ( IsResendQueueEmpty()==<span class="keyword">false</span> )</div>
<div class="line"><a name="l01922"></a><span class="lineno"> 1922</span>&#160;                {</div>
<div class="line"><a name="l01923"></a><span class="lineno"> 1923</span>&#160;                    internalPacket = resendLinkedListHead;</div>
<div class="line"><a name="l01924"></a><span class="lineno"> 1924</span>&#160;                    <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a4f7fcca56594cded46930e105e175339">messageNumberAssigned</a>==<span class="keyword">true</span>);</div>
<div class="line"><a name="l01925"></a><span class="lineno"> 1925</span>&#160;</div>
<div class="line"><a name="l01926"></a><span class="lineno"> 1926</span>&#160;                    <span class="comment">//if ( internalPacket-&gt;nextActionTime &lt; time )</span></div>
<div class="line"><a name="l01927"></a><span class="lineno"> 1927</span>&#160;                    <span class="keywordflow">if</span> ( time - internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a6793b6c44191952078c40545e227c4f0" title="The resendNext time to take action on this packet.">nextActionTime</a> &lt; (((<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a>)-1)/2) )</div>
<div class="line"><a name="l01928"></a><span class="lineno"> 1928</span>&#160;                    {</div>
<div class="line"><a name="l01929"></a><span class="lineno"> 1929</span>&#160;                        nextPacketBitLength = internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ad8c98f322a49f5765b9960743907a750">headerLength</a> + internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>;</div>
<div class="line"><a name="l01930"></a><span class="lineno"> 1930</span>&#160;                        <span class="keywordflow">if</span> ( datagramSizeSoFar + nextPacketBitLength &gt; GetMaxDatagramSizeExcludingMessageHeaderBits() )</div>
<div class="line"><a name="l01931"></a><span class="lineno"> 1931</span>&#160;                        {</div>
<div class="line"><a name="l01932"></a><span class="lineno"> 1932</span>&#160;                            <span class="comment">// Gathers all PushPackets()</span></div>
<div class="line"><a name="l01933"></a><span class="lineno"> 1933</span>&#160;                            PushDatagram();</div>
<div class="line"><a name="l01934"></a><span class="lineno"> 1934</span>&#160;                            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01935"></a><span class="lineno"> 1935</span>&#160;                        }</div>
<div class="line"><a name="l01936"></a><span class="lineno"> 1936</span>&#160;</div>
<div class="line"><a name="l01937"></a><span class="lineno"> 1937</span>&#160;                        PopListHead(<span class="keyword">false</span>);</div>
<div class="line"><a name="l01938"></a><span class="lineno"> 1938</span>&#160;</div>
<div class="line"><a name="l01939"></a><span class="lineno"> 1939</span>&#160;                        <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#ac50dfa4707ffeeaac6b5f0491fd5c407">CC_DEBUG_PRINTF_2</a>(<span class="stringliteral">&quot;Rs %i &quot;</span>, internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1ba0071a22897a0b50f5a414735dc542" title="A unique numerical identifier given to this user message. Used to identify reliable messages on the n...">reliableMessageNumber</a>.<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml#a2e06899a191560e2a2f45b1508f3f571">val</a>);</div>
<div class="line"><a name="l01940"></a><span class="lineno"> 1940</span>&#160;</div>
<div class="line"><a name="l01941"></a><span class="lineno"> 1941</span>&#160;                        bpsMetrics[(int) <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca65babf3cbcac908eee4e950a5eb74e22" title="How many user message bytes were resent. A message is resent if it is marked as reliable, and either the message didn&#39;t arrive or the message ack didn&#39;t arrive.">USER_MESSAGE_BYTES_RESENT</a>].<a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a096d41a893d9115781eac7620e975ee6">Push1</a>(time,<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>));</div>
<div class="line"><a name="l01942"></a><span class="lineno"> 1942</span>&#160;</div>
<div class="line"><a name="l01943"></a><span class="lineno"> 1943</span>&#160;                        <span class="comment">// Testing1</span></div>
<div class="line"><a name="l01944"></a><span class="lineno"> 1944</span>&#160;<span class="comment">//                      if (internalPacket-&gt;reliability==RELIABLE_ORDERED || internalPacket-&gt;reliability==RELIABLE_ORDERED_WITH_ACK_RECEIPT)</span></div>
<div class="line"><a name="l01945"></a><span class="lineno"> 1945</span>&#160;<span class="comment">//                          printf(&quot;RESEND reliableMessageNumber %i with datagram %i\n&quot;, internalPacket-&gt;reliableMessageNumber.val, congestionManager.GetNextDatagramSequenceNumber().val);</span></div>
<div class="line"><a name="l01946"></a><span class="lineno"> 1946</span>&#160;</div>
<div class="line"><a name="l01947"></a><span class="lineno"> 1947</span>&#160;                        PushPacket(time,internalPacket,<span class="keyword">true</span>); <span class="comment">// Affects GetNewTransmissionBandwidth()</span></div>
<div class="line"><a name="l01948"></a><span class="lineno"> 1948</span>&#160;                        internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#adc41cae78447c4f9c20d2607c3d1617f" title="How many attempts we made at sending this message.">timesSent</a>++;</div>
<div class="line"><a name="l01949"></a><span class="lineno"> 1949</span>&#160;                        congestionManager.OnResend(time, internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a6793b6c44191952078c40545e227c4f0" title="The resendNext time to take action on this packet.">nextActionTime</a>);</div>
<div class="line"><a name="l01950"></a><span class="lineno"> 1950</span>&#160;                        internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a6de6a044a98de267b994438f391556b8">retransmissionTime</a> = congestionManager.GetRTOForRetransmission(internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#adc41cae78447c4f9c20d2607c3d1617f" title="How many attempts we made at sending this message.">timesSent</a>);</div>
<div class="line"><a name="l01951"></a><span class="lineno"> 1951</span>&#160;                        internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a6793b6c44191952078c40545e227c4f0" title="The resendNext time to take action on this packet.">nextActionTime</a> = internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a6de6a044a98de267b994438f391556b8">retransmissionTime</a>+time;</div>
<div class="line"><a name="l01952"></a><span class="lineno"> 1952</span>&#160;</div>
<div class="line"><a name="l01953"></a><span class="lineno"> 1953</span>&#160;                        pushedAnything=<span class="keyword">true</span>;</div>
<div class="line"><a name="l01954"></a><span class="lineno"> 1954</span>&#160;</div>
<div class="line"><a name="l01955"></a><span class="lineno"> 1955</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> messageHandlerIndex=0; messageHandlerIndex &lt; messageHandlerList.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); messageHandlerIndex++)</div>
<div class="line"><a name="l01956"></a><span class="lineno"> 1956</span>&#160;                        {</div>
<div class="line"><a name="l01957"></a><span class="lineno"> 1957</span>&#160;<span class="preprocessor">#if CC_TIME_TYPE_BYTES==4</span></div>
<div class="line"><a name="l01958"></a><span class="lineno"> 1958</span>&#160;<span class="preprocessor"></span>                            messageHandlerList[messageHandlerIndex]-&gt;OnInternalPacket(internalPacket, packetsToSendThisUpdateDatagramBoundaries.Size()+congestionManager.GetNextDatagramSequenceNumber(), systemAddress, (<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a>) time, <span class="keyword">true</span>);</div>
<div class="line"><a name="l01959"></a><span class="lineno"> 1959</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l01960"></a><span class="lineno"> 1960</span>&#160;<span class="preprocessor"></span>                            messageHandlerList[messageHandlerIndex]-&gt;OnInternalPacket(internalPacket, packetsToSendThisUpdateDatagramBoundaries.Size()+congestionManager.GetNextDatagramSequenceNumber(), systemAddress, (<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a>)(time/(<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a>)1000), <span class="keyword">true</span>);</div>
<div class="line"><a name="l01961"></a><span class="lineno"> 1961</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01962"></a><span class="lineno"> 1962</span>&#160;<span class="preprocessor"></span>                        }</div>
<div class="line"><a name="l01963"></a><span class="lineno"> 1963</span>&#160;</div>
<div class="line"><a name="l01964"></a><span class="lineno"> 1964</span>&#160;                        <span class="comment">// Put the packet back into the resend list at the correct spot</span></div>
<div class="line"><a name="l01965"></a><span class="lineno"> 1965</span>&#160;                        <span class="comment">// Don&#39;t make a copy since I&#39;m reinserting an allocated struct</span></div>
<div class="line"><a name="l01966"></a><span class="lineno"> 1966</span>&#160;                        InsertPacketIntoResendList( internalPacket, time, <span class="keyword">false</span>, <span class="keyword">false</span> );</div>
<div class="line"><a name="l01967"></a><span class="lineno"> 1967</span>&#160;</div>
<div class="line"><a name="l01968"></a><span class="lineno"> 1968</span>&#160;                        <span class="comment">// Removeme</span></div>
<div class="line"><a name="l01969"></a><span class="lineno"> 1969</span>&#160;                        <span class="comment">//                      printf(&quot;Resend:%i &quot;, internalPacket-&gt;reliableMessageNumber);</span></div>
<div class="line"><a name="l01970"></a><span class="lineno"> 1970</span>&#160;                    }</div>
<div class="line"><a name="l01971"></a><span class="lineno"> 1971</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01972"></a><span class="lineno"> 1972</span>&#160;                    {</div>
<div class="line"><a name="l01973"></a><span class="lineno"> 1973</span>&#160;                        <span class="comment">// Filled one datagram.</span></div>
<div class="line"><a name="l01974"></a><span class="lineno"> 1974</span>&#160;                        <span class="comment">// If the 2nd and it&#39;s time to send a datagram pair, will be marked as a pair</span></div>
<div class="line"><a name="l01975"></a><span class="lineno"> 1975</span>&#160;                        PushDatagram();</div>
<div class="line"><a name="l01976"></a><span class="lineno"> 1976</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01977"></a><span class="lineno"> 1977</span>&#160;                    }</div>
<div class="line"><a name="l01978"></a><span class="lineno"> 1978</span>&#160;                }</div>
<div class="line"><a name="l01979"></a><span class="lineno"> 1979</span>&#160;</div>
<div class="line"><a name="l01980"></a><span class="lineno"> 1980</span>&#160;                <span class="keywordflow">if</span> (pushedAnything==<span class="keyword">false</span>)</div>
<div class="line"><a name="l01981"></a><span class="lineno"> 1981</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01982"></a><span class="lineno"> 1982</span>&#160;            }</div>
<div class="line"><a name="l01983"></a><span class="lineno"> 1983</span>&#160;        }</div>
<div class="line"><a name="l01984"></a><span class="lineno"> 1984</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01985"></a><span class="lineno"> 1985</span>&#160;        {</div>
<div class="line"><a name="l01986"></a><span class="lineno"> 1986</span>&#160;            statistics.isLimitedByCongestionControl=<span class="keyword">true</span>;</div>
<div class="line"><a name="l01987"></a><span class="lineno"> 1987</span>&#160;        }</div>
<div class="line"><a name="l01988"></a><span class="lineno"> 1988</span>&#160;</div>
<div class="line"><a name="l01989"></a><span class="lineno"> 1989</span>&#160;        <span class="keywordflow">if</span> ((<span class="keywordtype">int</span>)<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(allDatagramSizesSoFar)&lt;transmissionBandwidth)</div>
<div class="line"><a name="l01990"></a><span class="lineno"> 1990</span>&#160;        {</div>
<div class="line"><a name="l01991"></a><span class="lineno"> 1991</span>&#160;            <span class="comment">//  printf(&quot;S+ &quot;);</span></div>
<div class="line"><a name="l01992"></a><span class="lineno"> 1992</span>&#160;            allDatagramSizesSoFar=0;</div>
<div class="line"><a name="l01993"></a><span class="lineno"> 1993</span>&#160;</div>
<div class="line"><a name="l01994"></a><span class="lineno"> 1994</span>&#160;            <span class="comment">// Keep filling datagrams until we exceed transmission bandwidth</span></div>
<div class="line"><a name="l01995"></a><span class="lineno"> 1995</span>&#160;            <span class="keywordflow">while</span> (</div>
<div class="line"><a name="l01996"></a><span class="lineno"> 1996</span>&#160;                ResendBufferOverflow()==<span class="keyword">false</span> &amp;&amp;</div>
<div class="line"><a name="l01997"></a><span class="lineno"> 1997</span>&#160;                ((<span class="keywordtype">int</span>)<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(allDatagramSizesSoFar)&lt;transmissionBandwidth ||</div>
<div class="line"><a name="l01998"></a><span class="lineno"> 1998</span>&#160;                <span class="comment">// This condition means if we want to send a datagram pair, and only have one datagram buffered, exceed bandwidth to add another</span></div>
<div class="line"><a name="l01999"></a><span class="lineno"> 1999</span>&#160;                (countdownToNextPacketPair==0 &amp;&amp;</div>
<div class="line"><a name="l02000"></a><span class="lineno"> 2000</span>&#160;                datagramsToSendThisUpdateIsPair.Size()==1))</div>
<div class="line"><a name="l02001"></a><span class="lineno"> 2001</span>&#160;                )</div>
<div class="line"><a name="l02002"></a><span class="lineno"> 2002</span>&#160;            {</div>
<div class="line"><a name="l02003"></a><span class="lineno"> 2003</span>&#160;                <span class="comment">// Fill with packets until MTU is reached</span></div>
<div class="line"><a name="l02004"></a><span class="lineno"> 2004</span>&#160;                <span class="comment">//  for ( i = 0; i &lt; NUMBER_OF_PRIORITIES; i++ )</span></div>
<div class="line"><a name="l02005"></a><span class="lineno"> 2005</span>&#160;                <span class="comment">//  {</span></div>
<div class="line"><a name="l02006"></a><span class="lineno"> 2006</span>&#160;                pushedAnything=<span class="keyword">false</span>;</div>
<div class="line"><a name="l02007"></a><span class="lineno"> 2007</span>&#160;</div>
<div class="line"><a name="l02008"></a><span class="lineno"> 2008</span>&#160;                statistics.isLimitedByOutgoingBandwidthLimit=bitsPerSecondLimit!=0 &amp;&amp; <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(bitsPerSecondLimit) &lt; bpsMetrics[<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca5735d17220987e4ea658bacfbbe3d757">USER_MESSAGE_BYTES_SENT</a>].GetBPS1(time);</div>
<div class="line"><a name="l02009"></a><span class="lineno"> 2009</span>&#160;</div>
<div class="line"><a name="l02010"></a><span class="lineno"> 2010</span>&#160;</div>
<div class="line"><a name="l02011"></a><span class="lineno"> 2011</span>&#160;                <span class="keywordflow">while</span> (outgoingPacketBuffer.Size() &amp;&amp;</div>
<div class="line"><a name="l02012"></a><span class="lineno"> 2012</span>&#160;                    statistics.isLimitedByOutgoingBandwidthLimit==<span class="keyword">false</span>)</div>
<div class="line"><a name="l02013"></a><span class="lineno"> 2013</span>&#160;                    <span class="comment">//while ( sendPacketSet[ i ].Size() )</span></div>
<div class="line"><a name="l02014"></a><span class="lineno"> 2014</span>&#160;                {</div>
<div class="line"><a name="l02015"></a><span class="lineno"> 2015</span>&#160;                    internalPacket=outgoingPacketBuffer.Peek();</div>
<div class="line"><a name="l02016"></a><span class="lineno"> 2016</span>&#160;                    <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a4f7fcca56594cded46930e105e175339">messageNumberAssigned</a>==<span class="keyword">false</span>);</div>
<div class="line"><a name="l02017"></a><span class="lineno"> 2017</span>&#160;                    <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(outgoingPacketBuffer.Size()==0 || outgoingPacketBuffer.Peek()-&gt;dataBitLength&lt;<a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(<a class="code" href="../../d2/d24/_m_t_u_size_8h.xhtml#a39d9da73f39bf9acabfc9e0ad2ae97c5">MAXIMUM_MTU_SIZE</a>));</div>
<div class="line"><a name="l02018"></a><span class="lineno"> 2018</span>&#160;</div>
<div class="line"><a name="l02019"></a><span class="lineno"> 2019</span>&#160;                    <span class="comment">// internalPacket = sendPacketSet[ i ].Peek();</span></div>
<div class="line"><a name="l02020"></a><span class="lineno"> 2020</span>&#160;                    <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>==0)</div>
<div class="line"><a name="l02021"></a><span class="lineno"> 2021</span>&#160;                    {</div>
<div class="line"><a name="l02022"></a><span class="lineno"> 2022</span>&#160;                        <span class="comment">//sendPacketSet[ i ].Pop();</span></div>
<div class="line"><a name="l02023"></a><span class="lineno"> 2023</span>&#160;                        outgoingPacketBuffer.Pop(0);</div>
<div class="line"><a name="l02024"></a><span class="lineno"> 2024</span>&#160;                        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(outgoingPacketBuffer.Size()==0 || outgoingPacketBuffer.Peek()-&gt;dataBitLength&lt;<a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(<a class="code" href="../../d2/d24/_m_t_u_size_8h.xhtml#a39d9da73f39bf9acabfc9e0ad2ae97c5">MAXIMUM_MTU_SIZE</a>));</div>
<div class="line"><a name="l02025"></a><span class="lineno"> 2025</span>&#160;                        statistics.messageInSendBuffer[(int)internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a47e8d1384096dcfbc7925b41e3e7c84e" title="The priority level of this packet.">priority</a>]--;</div>
<div class="line"><a name="l02026"></a><span class="lineno"> 2026</span>&#160;                        statistics.bytesInSendBuffer[(<span class="keywordtype">int</span>)internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a47e8d1384096dcfbc7925b41e3e7c84e" title="The priority level of this packet.">priority</a>]-=(double) <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>);</div>
<div class="line"><a name="l02027"></a><span class="lineno"> 2027</span>&#160;                        ReleaseToInternalPacketPool( internalPacket );</div>
<div class="line"><a name="l02028"></a><span class="lineno"> 2028</span>&#160;                        <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l02029"></a><span class="lineno"> 2029</span>&#160;                    }</div>
<div class="line"><a name="l02030"></a><span class="lineno"> 2030</span>&#160;</div>
<div class="line"><a name="l02031"></a><span class="lineno"> 2031</span>&#160;                    internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ad8c98f322a49f5765b9960743907a750">headerLength</a>=GetMessageHeaderLengthBits(internalPacket);</div>
<div class="line"><a name="l02032"></a><span class="lineno"> 2032</span>&#160;                    nextPacketBitLength = internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ad8c98f322a49f5765b9960743907a750">headerLength</a> + internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>;</div>
<div class="line"><a name="l02033"></a><span class="lineno"> 2033</span>&#160;                    <span class="keywordflow">if</span> ( datagramSizeSoFar + nextPacketBitLength &gt; GetMaxDatagramSizeExcludingMessageHeaderBits() )</div>
<div class="line"><a name="l02034"></a><span class="lineno"> 2034</span>&#160;                    {</div>
<div class="line"><a name="l02035"></a><span class="lineno"> 2035</span>&#160;                        <span class="comment">// Hit MTU. May still push packets if smaller ones exist at a lower priority</span></div>
<div class="line"><a name="l02036"></a><span class="lineno"> 2036</span>&#160;                        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(datagramSizeSoFar!=0);</div>
<div class="line"><a name="l02037"></a><span class="lineno"> 2037</span>&#160;                        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>&lt;<a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(<a class="code" href="../../d2/d24/_m_t_u_size_8h.xhtml#a39d9da73f39bf9acabfc9e0ad2ae97c5">MAXIMUM_MTU_SIZE</a>));</div>
<div class="line"><a name="l02038"></a><span class="lineno"> 2038</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02039"></a><span class="lineno"> 2039</span>&#160;                    }</div>
<div class="line"><a name="l02040"></a><span class="lineno"> 2040</span>&#160;</div>
<div class="line"><a name="l02041"></a><span class="lineno"> 2041</span>&#160;                    <span class="keywordtype">bool</span> isReliable;</div>
<div class="line"><a name="l02042"></a><span class="lineno"> 2042</span>&#160;                    <span class="keywordflow">if</span> ( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eabc6ba98e9404532481e43eea39731929" title="The message is sent reliably, but not necessarily in any order. Same overhead as UNRELIABLE.">RELIABLE</a> ||</div>
<div class="line"><a name="l02043"></a><span class="lineno"> 2043</span>&#160;                        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae1fc3633b353730ff448e5b6675f7085">RELIABLE_SEQUENCED</a> ||</div>
<div class="line"><a name="l02044"></a><span class="lineno"> 2044</span>&#160;                        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eaff2d39b163bcf3e142744962bfb0849f">RELIABLE_ORDERED</a> ||</div>
<div class="line"><a name="l02045"></a><span class="lineno"> 2045</span>&#160;                        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eacd15d4c4a2cea8b4c4459f1d3c09d95f" title="Same as RELIABLE. The user will also get ID_SND_RECEIPT_ACKED after the message is delivered when cal...">RELIABLE_WITH_ACK_RECEIPT</a>  ||</div>
<div class="line"><a name="l02046"></a><span class="lineno"> 2046</span>&#160;<span class="comment">//                      internalPacket-&gt;reliability == RELIABLE_SEQUENCED_WITH_ACK_RECEIPT  ||</span></div>
<div class="line"><a name="l02047"></a><span class="lineno"> 2047</span>&#160;                        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae94727e3abc9217e16c1c19f1e8f850a" title="Same as RELIABLE_ORDERED_ACK_RECEIPT. The user will also get ID_SND_RECEIPT_ACKED after the message i...">RELIABLE_ORDERED_WITH_ACK_RECEIPT</a></div>
<div class="line"><a name="l02048"></a><span class="lineno"> 2048</span>&#160;                        )</div>
<div class="line"><a name="l02049"></a><span class="lineno"> 2049</span>&#160;                        isReliable = <span class="keyword">true</span>;</div>
<div class="line"><a name="l02050"></a><span class="lineno"> 2050</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l02051"></a><span class="lineno"> 2051</span>&#160;                        isReliable = <span class="keyword">false</span>;</div>
<div class="line"><a name="l02052"></a><span class="lineno"> 2052</span>&#160;</div>
<div class="line"><a name="l02053"></a><span class="lineno"> 2053</span>&#160;                    <span class="comment">//sendPacketSet[ i ].Pop();</span></div>
<div class="line"><a name="l02054"></a><span class="lineno"> 2054</span>&#160;                    outgoingPacketBuffer.Pop(0);</div>
<div class="line"><a name="l02055"></a><span class="lineno"> 2055</span>&#160;                    <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(outgoingPacketBuffer.Size()==0 || outgoingPacketBuffer.Peek()-&gt;dataBitLength&lt;<a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(<a class="code" href="../../d2/d24/_m_t_u_size_8h.xhtml#a39d9da73f39bf9acabfc9e0ad2ae97c5">MAXIMUM_MTU_SIZE</a>));</div>
<div class="line"><a name="l02056"></a><span class="lineno"> 2056</span>&#160;                    <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a4f7fcca56594cded46930e105e175339">messageNumberAssigned</a>==<span class="keyword">false</span>);</div>
<div class="line"><a name="l02057"></a><span class="lineno"> 2057</span>&#160;                    statistics.messageInSendBuffer[(int)internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a47e8d1384096dcfbc7925b41e3e7c84e" title="The priority level of this packet.">priority</a>]--;</div>
<div class="line"><a name="l02058"></a><span class="lineno"> 2058</span>&#160;                    statistics.bytesInSendBuffer[(<span class="keywordtype">int</span>)internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a47e8d1384096dcfbc7925b41e3e7c84e" title="The priority level of this packet.">priority</a>]-=(double) <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>);</div>
<div class="line"><a name="l02059"></a><span class="lineno"> 2059</span>&#160;                    <span class="keywordflow">if</span> (isReliable</div>
<div class="line"><a name="l02060"></a><span class="lineno"> 2060</span>&#160;                        <span class="comment">/*</span></div>
<div class="line"><a name="l02061"></a><span class="lineno"> 2061</span>&#160;<span class="comment">                        I thought about this and agree that UNRELIABLE_SEQUENCED_WITH_ACK_RECEIPT and RELIABLE_SEQUENCED_WITH_ACK_RECEIPT is not useful unless you also know if the message was discarded.</span></div>
<div class="line"><a name="l02062"></a><span class="lineno"> 2062</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l02063"></a><span class="lineno"> 2063</span>&#160;<span class="comment">                        The problem is that internally, message numbers are only assigned to reliable messages, because message numbers are only used to discard duplicate message receipt and only reliable messages get sent more than once. However, without message numbers getting assigned and transmitted, there is no way to tell the sender about which messages were discarded. In fact, in looking this over I realized that UNRELIABLE_SEQUENCED_WITH_ACK_RECEIPT introduced a bug, because the remote system assumes all message numbers are used (no holes). With that send type, on packetloss, a permanent hole would have been created which eventually would cause the system to discard all further packets.</span></div>
<div class="line"><a name="l02064"></a><span class="lineno"> 2064</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l02065"></a><span class="lineno"> 2065</span>&#160;<span class="comment">                        So I have two options. Either do not support ack receipts when sending sequenced, or write complex and major new systems. UNRELIABLE_SEQUENCED_WITH_ACK_RECEIPT would need to send the message ID number on a special channel which allows for non-delivery. And both of them would need to have a special range list to indicate which message numbers were not delivered, so when acks are sent that can be indicated as well. A further problem is that the ack itself can be lost - it is possible that the message can arrive but be discarded, yet the ack is lost. On resend, the resent message would be ignored as duplicate, and you&#39;d never get the discard message either (unless I made a special buffer for that case too). </span></div>
<div class="line"><a name="l02066"></a><span class="lineno"> 2066</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l02067"></a><span class="lineno"> 2067</span>&#160;<span class="comment">//                      ||</span></div>
<div class="line"><a name="l02068"></a><span class="lineno"> 2068</span>&#160;                        <span class="comment">// If needs an ack receipt, keep the internal packet around in the list</span></div>
<div class="line"><a name="l02069"></a><span class="lineno"> 2069</span>&#160;<span class="comment">//                      internalPacket-&gt;reliability == UNRELIABLE_WITH_ACK_RECEIPT ||</span></div>
<div class="line"><a name="l02070"></a><span class="lineno"> 2070</span>&#160;<span class="comment">//                      internalPacket-&gt;reliability == UNRELIABLE_SEQUENCED_WITH_ACK_RECEIPT</span></div>
<div class="line"><a name="l02071"></a><span class="lineno"> 2071</span>&#160;                        )</div>
<div class="line"><a name="l02072"></a><span class="lineno"> 2072</span>&#160;                    {</div>
<div class="line"><a name="l02073"></a><span class="lineno"> 2073</span>&#160;                        internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a4f7fcca56594cded46930e105e175339">messageNumberAssigned</a>=<span class="keyword">true</span>;</div>
<div class="line"><a name="l02074"></a><span class="lineno"> 2074</span>&#160;                        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1ba0071a22897a0b50f5a414735dc542" title="A unique numerical identifier given to this user message. Used to identify reliable messages on the n...">reliableMessageNumber</a>=sendReliableMessageNumberIndex;</div>
<div class="line"><a name="l02075"></a><span class="lineno"> 2075</span>&#160;                        internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a6de6a044a98de267b994438f391556b8">retransmissionTime</a> = congestionManager.GetRTOForRetransmission(internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#adc41cae78447c4f9c20d2607c3d1617f" title="How many attempts we made at sending this message.">timesSent</a>+1);</div>
<div class="line"><a name="l02076"></a><span class="lineno"> 2076</span>&#160;                        internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a6793b6c44191952078c40545e227c4f0" title="The resendNext time to take action on this packet.">nextActionTime</a> = internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a6de6a044a98de267b994438f391556b8">retransmissionTime</a>+time;</div>
<div class="line"><a name="l02077"></a><span class="lineno"> 2077</span>&#160;<span class="preprocessor">#if CC_TIME_TYPE_BYTES==4</span></div>
<div class="line"><a name="l02078"></a><span class="lineno"> 2078</span>&#160;<span class="preprocessor"></span>                        <span class="keyword">const</span> <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> threshhold = 10000;</div>
<div class="line"><a name="l02079"></a><span class="lineno"> 2079</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l02080"></a><span class="lineno"> 2080</span>&#160;<span class="preprocessor"></span>                        <span class="keyword">const</span> <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> threshhold = 10000000;</div>
<div class="line"><a name="l02081"></a><span class="lineno"> 2081</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l02082"></a><span class="lineno"> 2082</span>&#160;<span class="preprocessor"></span>                        <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a6793b6c44191952078c40545e227c4f0" title="The resendNext time to take action on this packet.">nextActionTime</a>-time &gt; threshhold)</div>
<div class="line"><a name="l02083"></a><span class="lineno"> 2083</span>&#160;                        {</div>
<div class="line"><a name="l02084"></a><span class="lineno"> 2084</span>&#160;                            <span class="comment">//                              int a=5;</span></div>
<div class="line"><a name="l02085"></a><span class="lineno"> 2085</span>&#160;                            <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(time-internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a6793b6c44191952078c40545e227c4f0" title="The resendNext time to take action on this packet.">nextActionTime</a> &lt; threshhold);</div>
<div class="line"><a name="l02086"></a><span class="lineno"> 2086</span>&#160;                        }</div>
<div class="line"><a name="l02087"></a><span class="lineno"> 2087</span>&#160;                        <span class="comment">//resendTree.Insert( internalPacket-&gt;reliableMessageNumber, internalPacket);</span></div>
<div class="line"><a name="l02088"></a><span class="lineno"> 2088</span>&#160;                        <span class="keywordflow">if</span> (resendBuffer[internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1ba0071a22897a0b50f5a414735dc542" title="A unique numerical identifier given to this user message. Used to identify reliable messages on the n...">reliableMessageNumber</a> &amp; (<a class="code" href="../../df/df2/_native_types_8h.xhtml#a6eb1e68cc391dd753bc8ce896dbb8315">uint32_t</a>) <a class="code" href="../../d8/db0/defines_8h.xhtml#a3abde4cfe6a8c3a20ce719c1cad27a07">RESEND_BUFFER_ARRAY_MASK</a>]!=0)</div>
<div class="line"><a name="l02089"></a><span class="lineno"> 2089</span>&#160;                        {</div>
<div class="line"><a name="l02090"></a><span class="lineno"> 2090</span>&#160;                            <span class="comment">//                              bool overflow = ResendBufferOverflow();</span></div>
<div class="line"><a name="l02091"></a><span class="lineno"> 2091</span>&#160;                            <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(0);</div>
<div class="line"><a name="l02092"></a><span class="lineno"> 2092</span>&#160;                        }</div>
<div class="line"><a name="l02093"></a><span class="lineno"> 2093</span>&#160;                        resendBuffer[internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1ba0071a22897a0b50f5a414735dc542" title="A unique numerical identifier given to this user message. Used to identify reliable messages on the n...">reliableMessageNumber</a> &amp; (<a class="code" href="../../df/df2/_native_types_8h.xhtml#a6eb1e68cc391dd753bc8ce896dbb8315">uint32_t</a>) <a class="code" href="../../d8/db0/defines_8h.xhtml#a3abde4cfe6a8c3a20ce719c1cad27a07">RESEND_BUFFER_ARRAY_MASK</a>] = internalPacket;</div>
<div class="line"><a name="l02094"></a><span class="lineno"> 2094</span>&#160;                        statistics.messagesInResendBuffer++;</div>
<div class="line"><a name="l02095"></a><span class="lineno"> 2095</span>&#160;                        statistics.bytesInResendBuffer+=<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>);</div>
<div class="line"><a name="l02096"></a><span class="lineno"> 2096</span>&#160;</div>
<div class="line"><a name="l02097"></a><span class="lineno"> 2097</span>&#160;                        <span class="comment">//      printf(&quot;pre:%i &quot;, unacknowledgedBytes);</span></div>
<div class="line"><a name="l02098"></a><span class="lineno"> 2098</span>&#160;</div>
<div class="line"><a name="l02099"></a><span class="lineno"> 2099</span>&#160;                        InsertPacketIntoResendList( internalPacket, time, <span class="keyword">true</span>, isReliable);</div>
<div class="line"><a name="l02100"></a><span class="lineno"> 2100</span>&#160;</div>
<div class="line"><a name="l02101"></a><span class="lineno"> 2101</span>&#160;</div>
<div class="line"><a name="l02102"></a><span class="lineno"> 2102</span>&#160;                        <span class="comment">//      printf(&quot;post:%i &quot;, unacknowledgedBytes);</span></div>
<div class="line"><a name="l02103"></a><span class="lineno"> 2103</span>&#160;                        sendReliableMessageNumberIndex++;</div>
<div class="line"><a name="l02104"></a><span class="lineno"> 2104</span>&#160;                    }</div>
<div class="line"><a name="l02105"></a><span class="lineno"> 2105</span>&#160;                    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7ea4a623962051043733acde3e595e1cce0" title="Same as UNRELIABLE, however the user will get either ID_SND_RECEIPT_ACKED or ID_SND_RECEIPT_LOSS base...">UNRELIABLE_WITH_ACK_RECEIPT</a>)</div>
<div class="line"><a name="l02106"></a><span class="lineno"> 2106</span>&#160;                    {</div>
<div class="line"><a name="l02107"></a><span class="lineno"> 2107</span>&#160;                        unreliableWithAckReceiptHistory.Push(UnreliableWithAckReceiptNode(</div>
<div class="line"><a name="l02108"></a><span class="lineno"> 2108</span>&#160;                            congestionManager.GetNextDatagramSequenceNumber() + packetsToSendThisUpdateDatagramBoundaries.Size(),</div>
<div class="line"><a name="l02109"></a><span class="lineno"> 2109</span>&#160;                            internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a218b725d7cfd3577195f5c14a401694c" title="If the reliability type requires a receipt, then return this number with it.">sendReceiptSerial</a>,</div>
<div class="line"><a name="l02110"></a><span class="lineno"> 2110</span>&#160;                            congestionManager.GetRTOForRetransmission(internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#adc41cae78447c4f9c20d2607c3d1617f" title="How many attempts we made at sending this message.">timesSent</a>+1)+time</div>
<div class="line"><a name="l02111"></a><span class="lineno"> 2111</span>&#160;                            ), <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l02112"></a><span class="lineno"> 2112</span>&#160;                    }</div>
<div class="line"><a name="l02113"></a><span class="lineno"> 2113</span>&#160;</div>
<div class="line"><a name="l02114"></a><span class="lineno"> 2114</span>&#160;                    <span class="comment">// If isReliable is false, the packet and its contents will be added to a list to be freed in ClearPacketsAndDatagrams</span></div>
<div class="line"><a name="l02115"></a><span class="lineno"> 2115</span>&#160;                    <span class="comment">// However, the internalPacket structure will remain allocated and be in the resendBuffer list if it requires a receipt</span></div>
<div class="line"><a name="l02116"></a><span class="lineno"> 2116</span>&#160;                    bpsMetrics[(int) <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca5735d17220987e4ea658bacfbbe3d757">USER_MESSAGE_BYTES_SENT</a>].<a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a096d41a893d9115781eac7620e975ee6">Push1</a>(time,<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>));</div>
<div class="line"><a name="l02117"></a><span class="lineno"> 2117</span>&#160;</div>
<div class="line"><a name="l02118"></a><span class="lineno"> 2118</span>&#160;                    <span class="comment">// Testing1</span></div>
<div class="line"><a name="l02119"></a><span class="lineno"> 2119</span>&#160;<span class="comment">//                  if (internalPacket-&gt;reliability==RELIABLE_ORDERED || internalPacket-&gt;reliability==RELIABLE_ORDERED_WITH_ACK_RECEIPT)</span></div>
<div class="line"><a name="l02120"></a><span class="lineno"> 2120</span>&#160;<span class="comment">//                      printf(&quot;SEND reliableMessageNumber %i in datagram %i\n&quot;, internalPacket-&gt;reliableMessageNumber.val, congestionManager.GetNextDatagramSequenceNumber().val);</span></div>
<div class="line"><a name="l02121"></a><span class="lineno"> 2121</span>&#160;</div>
<div class="line"><a name="l02122"></a><span class="lineno"> 2122</span>&#160;                    PushPacket(time,internalPacket, isReliable);</div>
<div class="line"><a name="l02123"></a><span class="lineno"> 2123</span>&#160;                    internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#adc41cae78447c4f9c20d2607c3d1617f" title="How many attempts we made at sending this message.">timesSent</a>++;</div>
<div class="line"><a name="l02124"></a><span class="lineno"> 2124</span>&#160;</div>
<div class="line"><a name="l02125"></a><span class="lineno"> 2125</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> messageHandlerIndex=0; messageHandlerIndex &lt; messageHandlerList.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); messageHandlerIndex++)</div>
<div class="line"><a name="l02126"></a><span class="lineno"> 2126</span>&#160;                    {</div>
<div class="line"><a name="l02127"></a><span class="lineno"> 2127</span>&#160;<span class="preprocessor">#if CC_TIME_TYPE_BYTES==4</span></div>
<div class="line"><a name="l02128"></a><span class="lineno"> 2128</span>&#160;<span class="preprocessor"></span>                        messageHandlerList[messageHandlerIndex]-&gt;OnInternalPacket(internalPacket, packetsToSendThisUpdateDatagramBoundaries.Size()+congestionManager.GetNextDatagramSequenceNumber(), systemAddress, (<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a>)time, <span class="keyword">true</span>);</div>
<div class="line"><a name="l02129"></a><span class="lineno"> 2129</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l02130"></a><span class="lineno"> 2130</span>&#160;<span class="preprocessor"></span>                        messageHandlerList[messageHandlerIndex]-&gt;OnInternalPacket(internalPacket, packetsToSendThisUpdateDatagramBoundaries.Size()+congestionManager.GetNextDatagramSequenceNumber(), systemAddress, (<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a>)(time/(<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a>)1000), <span class="keyword">true</span>);</div>
<div class="line"><a name="l02131"></a><span class="lineno"> 2131</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l02132"></a><span class="lineno"> 2132</span>&#160;<span class="preprocessor"></span>                    }</div>
<div class="line"><a name="l02133"></a><span class="lineno"> 2133</span>&#160;                    pushedAnything=<span class="keyword">true</span>;</div>
<div class="line"><a name="l02134"></a><span class="lineno"> 2134</span>&#160;</div>
<div class="line"><a name="l02135"></a><span class="lineno"> 2135</span>&#160;                    <span class="keywordflow">if</span> (ResendBufferOverflow())</div>
<div class="line"><a name="l02136"></a><span class="lineno"> 2136</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02137"></a><span class="lineno"> 2137</span>&#160;                }</div>
<div class="line"><a name="l02138"></a><span class="lineno"> 2138</span>&#160;                <span class="comment">//  if (ResendBufferOverflow())</span></div>
<div class="line"><a name="l02139"></a><span class="lineno"> 2139</span>&#160;                <span class="comment">//      break;</span></div>
<div class="line"><a name="l02140"></a><span class="lineno"> 2140</span>&#160;                <span class="comment">//  }z</span></div>
<div class="line"><a name="l02141"></a><span class="lineno"> 2141</span>&#160;</div>
<div class="line"><a name="l02142"></a><span class="lineno"> 2142</span>&#160;                <span class="comment">// No datagrams pushed?</span></div>
<div class="line"><a name="l02143"></a><span class="lineno"> 2143</span>&#160;                <span class="keywordflow">if</span> (datagramSizeSoFar==0)</div>
<div class="line"><a name="l02144"></a><span class="lineno"> 2144</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02145"></a><span class="lineno"> 2145</span>&#160;</div>
<div class="line"><a name="l02146"></a><span class="lineno"> 2146</span>&#160;                <span class="comment">// Filled one datagram.</span></div>
<div class="line"><a name="l02147"></a><span class="lineno"> 2147</span>&#160;                <span class="comment">// If the 2nd and it&#39;s time to send a datagram pair, will be marked as a pair</span></div>
<div class="line"><a name="l02148"></a><span class="lineno"> 2148</span>&#160;                PushDatagram();</div>
<div class="line"><a name="l02149"></a><span class="lineno"> 2149</span>&#160;            }</div>
<div class="line"><a name="l02150"></a><span class="lineno"> 2150</span>&#160;        }</div>
<div class="line"><a name="l02151"></a><span class="lineno"> 2151</span>&#160;</div>
<div class="line"><a name="l02152"></a><span class="lineno"> 2152</span>&#160;</div>
<div class="line"><a name="l02153"></a><span class="lineno"> 2153</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> datagramIndex=0; datagramIndex &lt; packetsToSendThisUpdateDatagramBoundaries.Size(); datagramIndex++)</div>
<div class="line"><a name="l02154"></a><span class="lineno"> 2154</span>&#160;        {</div>
<div class="line"><a name="l02155"></a><span class="lineno"> 2155</span>&#160;            <span class="keywordflow">if</span> (datagramIndex&gt;0)</div>
<div class="line"><a name="l02156"></a><span class="lineno"> 2156</span>&#160;                dhf.isContinuousSend=<span class="keyword">true</span>;</div>
<div class="line"><a name="l02157"></a><span class="lineno"> 2157</span>&#160;            MessageNumberNode* messageNumberNode = 0;</div>
<div class="line"><a name="l02158"></a><span class="lineno"> 2158</span>&#160;            dhf.datagramNumber=congestionManager.GetAndIncrementNextDatagramSequenceNumber();</div>
<div class="line"><a name="l02159"></a><span class="lineno"> 2159</span>&#160;            dhf.isPacketPair=datagramsToSendThisUpdateIsPair[datagramIndex];</div>
<div class="line"><a name="l02160"></a><span class="lineno"> 2160</span>&#160;</div>
<div class="line"><a name="l02161"></a><span class="lineno"> 2161</span>&#160;            <span class="comment">//printf(&quot;%p pushing datagram %i\n&quot;, this, dhf.datagramNumber.val);</span></div>
<div class="line"><a name="l02162"></a><span class="lineno"> 2162</span>&#160;</div>
<div class="line"><a name="l02163"></a><span class="lineno"> 2163</span>&#160;            <span class="keywordtype">bool</span> isSecondOfPacketPair=dhf.isPacketPair &amp;&amp; datagramIndex&gt;0 &amp;&amp;  datagramsToSendThisUpdateIsPair[datagramIndex-1];</div>
<div class="line"><a name="l02164"></a><span class="lineno"> 2164</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> msgIndex, msgTerm;</div>
<div class="line"><a name="l02165"></a><span class="lineno"> 2165</span>&#160;            <span class="keywordflow">if</span> (datagramIndex==0)</div>
<div class="line"><a name="l02166"></a><span class="lineno"> 2166</span>&#160;            {</div>
<div class="line"><a name="l02167"></a><span class="lineno"> 2167</span>&#160;                msgIndex=0;</div>
<div class="line"><a name="l02168"></a><span class="lineno"> 2168</span>&#160;                msgTerm=packetsToSendThisUpdateDatagramBoundaries[0];</div>
<div class="line"><a name="l02169"></a><span class="lineno"> 2169</span>&#160;            }</div>
<div class="line"><a name="l02170"></a><span class="lineno"> 2170</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l02171"></a><span class="lineno"> 2171</span>&#160;            {</div>
<div class="line"><a name="l02172"></a><span class="lineno"> 2172</span>&#160;                msgIndex=packetsToSendThisUpdateDatagramBoundaries[datagramIndex-1];</div>
<div class="line"><a name="l02173"></a><span class="lineno"> 2173</span>&#160;                msgTerm=packetsToSendThisUpdateDatagramBoundaries[datagramIndex];</div>
<div class="line"><a name="l02174"></a><span class="lineno"> 2174</span>&#160;            }</div>
<div class="line"><a name="l02175"></a><span class="lineno"> 2175</span>&#160;</div>
<div class="line"><a name="l02176"></a><span class="lineno"> 2176</span>&#160;            <span class="comment">// More accurate time to reset here</span></div>
<div class="line"><a name="l02177"></a><span class="lineno"> 2177</span>&#160;<span class="preprocessor">#if INCLUDE_TIMESTAMP_WITH_DATAGRAMS==1</span></div>
<div class="line"><a name="l02178"></a><span class="lineno"> 2178</span>&#160;<span class="preprocessor"></span>            dhf.sourceSystemTime= <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#aaf7a5da6c601ae66963471d55a476dff">SLNet::GetTimeUS</a>();</div>
<div class="line"><a name="l02179"></a><span class="lineno"> 2179</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l02180"></a><span class="lineno"> 2180</span>&#160;<span class="preprocessor"></span>            updateBitStream.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#aab4381d8b4a48dbc8e2975dba894f350" title="Resets the bitstream for reuse.">Reset</a>();</div>
<div class="line"><a name="l02181"></a><span class="lineno"> 2181</span>&#160;            dhf.Serialize(&amp;updateBitStream);</div>
<div class="line"><a name="l02182"></a><span class="lineno"> 2182</span>&#160;            <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#ac50dfa4707ffeeaac6b5f0491fd5c407">CC_DEBUG_PRINTF_2</a>(<span class="stringliteral">&quot;S%i &quot;</span>,dhf.datagramNumber.val);</div>
<div class="line"><a name="l02183"></a><span class="lineno"> 2183</span>&#160;</div>
<div class="line"><a name="l02184"></a><span class="lineno"> 2184</span>&#160;            <span class="keywordflow">while</span> (msgIndex &lt; msgTerm)</div>
<div class="line"><a name="l02185"></a><span class="lineno"> 2185</span>&#160;            {</div>
<div class="line"><a name="l02186"></a><span class="lineno"> 2186</span>&#160;                <span class="comment">// If reliable or needs receipt</span></div>
<div class="line"><a name="l02187"></a><span class="lineno"> 2187</span>&#160;                <span class="keywordflow">if</span> ( packetsToSendThisUpdate[msgIndex]-&gt;reliability != <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eaeb409c363ddaeb3201fd95e9bee56696" title="Same as regular UDP, except that it will also discard duplicate datagrams. RakNet adds (6 to 17) + 21...">UNRELIABLE</a> &amp;&amp;</div>
<div class="line"><a name="l02188"></a><span class="lineno"> 2188</span>&#160;                    packetsToSendThisUpdate[msgIndex]-&gt;reliability != <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eab6a8eb609ec1adbd5af421cf2acbedf5">UNRELIABLE_SEQUENCED</a></div>
<div class="line"><a name="l02189"></a><span class="lineno"> 2189</span>&#160;                    )</div>
<div class="line"><a name="l02190"></a><span class="lineno"> 2190</span>&#160;                {</div>
<div class="line"><a name="l02191"></a><span class="lineno"> 2191</span>&#160;                    <span class="keywordflow">if</span> (messageNumberNode==0)</div>
<div class="line"><a name="l02192"></a><span class="lineno"> 2192</span>&#160;                    {</div>
<div class="line"><a name="l02193"></a><span class="lineno"> 2193</span>&#160;                        messageNumberNode = AddFirstToDatagramHistory(dhf.datagramNumber, packetsToSendThisUpdate[msgIndex]-&gt;reliableMessageNumber, time);</div>
<div class="line"><a name="l02194"></a><span class="lineno"> 2194</span>&#160;                    }</div>
<div class="line"><a name="l02195"></a><span class="lineno"> 2195</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l02196"></a><span class="lineno"> 2196</span>&#160;                    {</div>
<div class="line"><a name="l02197"></a><span class="lineno"> 2197</span>&#160;                        messageNumberNode = AddSubsequentToDatagramHistory(messageNumberNode, packetsToSendThisUpdate[msgIndex]-&gt;reliableMessageNumber);</div>
<div class="line"><a name="l02198"></a><span class="lineno"> 2198</span>&#160;                    }</div>
<div class="line"><a name="l02199"></a><span class="lineno"> 2199</span>&#160;                }</div>
<div class="line"><a name="l02200"></a><span class="lineno"> 2200</span>&#160;</div>
<div class="line"><a name="l02201"></a><span class="lineno"> 2201</span>&#160;                <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(updateBitStream.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a48740002683b46b00cbb97b8f7d0710e" title="Returns the length in bytes of the stream.">GetNumberOfBytesUsed</a>()&lt;=<a class="code" href="../../d2/d24/_m_t_u_size_8h.xhtml#a39d9da73f39bf9acabfc9e0ad2ae97c5">MAXIMUM_MTU_SIZE</a>-<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#a8a0fae83e487dc04b3cd774b3d4ee637" title="Sizeof an UDP header in byte.">UDP_HEADER_SIZE</a>);</div>
<div class="line"><a name="l02202"></a><span class="lineno"> 2202</span>&#160;                WriteToBitStreamFromInternalPacket( &amp;updateBitStream, packetsToSendThisUpdate[msgIndex], time );</div>
<div class="line"><a name="l02203"></a><span class="lineno"> 2203</span>&#160;                <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(updateBitStream.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a48740002683b46b00cbb97b8f7d0710e" title="Returns the length in bytes of the stream.">GetNumberOfBytesUsed</a>()&lt;=<a class="code" href="../../d2/d24/_m_t_u_size_8h.xhtml#a39d9da73f39bf9acabfc9e0ad2ae97c5">MAXIMUM_MTU_SIZE</a>-<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#a8a0fae83e487dc04b3cd774b3d4ee637" title="Sizeof an UDP header in byte.">UDP_HEADER_SIZE</a>);</div>
<div class="line"><a name="l02204"></a><span class="lineno"> 2204</span>&#160;                msgIndex++;</div>
<div class="line"><a name="l02205"></a><span class="lineno"> 2205</span>&#160;            }</div>
<div class="line"><a name="l02206"></a><span class="lineno"> 2206</span>&#160;</div>
<div class="line"><a name="l02207"></a><span class="lineno"> 2207</span>&#160;            <span class="keywordflow">if</span> (isSecondOfPacketPair)</div>
<div class="line"><a name="l02208"></a><span class="lineno"> 2208</span>&#160;            {</div>
<div class="line"><a name="l02209"></a><span class="lineno"> 2209</span>&#160;                <span class="comment">// Pad to size of first datagram</span></div>
<div class="line"><a name="l02210"></a><span class="lineno"> 2210</span>&#160;                <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(updateBitStream.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a48740002683b46b00cbb97b8f7d0710e" title="Returns the length in bytes of the stream.">GetNumberOfBytesUsed</a>()&lt;=<a class="code" href="../../d2/d24/_m_t_u_size_8h.xhtml#a39d9da73f39bf9acabfc9e0ad2ae97c5">MAXIMUM_MTU_SIZE</a>-<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#a8a0fae83e487dc04b3cd774b3d4ee637" title="Sizeof an UDP header in byte.">UDP_HEADER_SIZE</a>);</div>
<div class="line"><a name="l02211"></a><span class="lineno"> 2211</span>&#160;                updateBitStream.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a76ea2ef937a428e9d907a7367fd92b12" title="Write zeros until the bitstream is filled up to bytes.">PadWithZeroToByteLength</a>(datagramSizesInBytes[datagramIndex-1]);</div>
<div class="line"><a name="l02212"></a><span class="lineno"> 2212</span>&#160;                <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(updateBitStream.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a48740002683b46b00cbb97b8f7d0710e" title="Returns the length in bytes of the stream.">GetNumberOfBytesUsed</a>()&lt;=<a class="code" href="../../d2/d24/_m_t_u_size_8h.xhtml#a39d9da73f39bf9acabfc9e0ad2ae97c5">MAXIMUM_MTU_SIZE</a>-<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#a8a0fae83e487dc04b3cd774b3d4ee637" title="Sizeof an UDP header in byte.">UDP_HEADER_SIZE</a>);</div>
<div class="line"><a name="l02213"></a><span class="lineno"> 2213</span>&#160;            }</div>
<div class="line"><a name="l02214"></a><span class="lineno"> 2214</span>&#160;</div>
<div class="line"><a name="l02215"></a><span class="lineno"> 2215</span>&#160;            <span class="keywordflow">if</span> (messageNumberNode==0)</div>
<div class="line"><a name="l02216"></a><span class="lineno"> 2216</span>&#160;            {</div>
<div class="line"><a name="l02217"></a><span class="lineno"> 2217</span>&#160;                <span class="comment">// Unreliable, add dummy node</span></div>
<div class="line"><a name="l02218"></a><span class="lineno"> 2218</span>&#160;                AddFirstToDatagramHistory(dhf.datagramNumber, time);</div>
<div class="line"><a name="l02219"></a><span class="lineno"> 2219</span>&#160;            }</div>
<div class="line"><a name="l02220"></a><span class="lineno"> 2220</span>&#160;</div>
<div class="line"><a name="l02221"></a><span class="lineno"> 2221</span>&#160;            <span class="comment">// Store what message ids were sent with this datagram</span></div>
<div class="line"><a name="l02222"></a><span class="lineno"> 2222</span>&#160;            <span class="comment">//  datagramMessageIDTree.Insert(dhf.datagramNumber,idList);</span></div>
<div class="line"><a name="l02223"></a><span class="lineno"> 2223</span>&#160;</div>
<div class="line"><a name="l02224"></a><span class="lineno"> 2224</span>&#160;            congestionManager.OnSendBytes(time,<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#a8a0fae83e487dc04b3cd774b3d4ee637" title="Sizeof an UDP header in byte.">UDP_HEADER_SIZE</a>+DatagramHeaderFormat::GetDataHeaderByteLength());</div>
<div class="line"><a name="l02225"></a><span class="lineno"> 2225</span>&#160;</div>
<div class="line"><a name="l02226"></a><span class="lineno"> 2226</span>&#160;            SendBitStream( s, systemAddress, &amp;updateBitStream, rnr, time );</div>
<div class="line"><a name="l02227"></a><span class="lineno"> 2227</span>&#160;</div>
<div class="line"><a name="l02228"></a><span class="lineno"> 2228</span>&#160;            bandwidthExceededStatistic=outgoingPacketBuffer.Size()&gt;0;</div>
<div class="line"><a name="l02229"></a><span class="lineno"> 2229</span>&#160;            <span class="comment">//          bandwidthExceededStatistic=sendPacketSet[0].IsEmpty()==false ||</span></div>
<div class="line"><a name="l02230"></a><span class="lineno"> 2230</span>&#160;            <span class="comment">//              sendPacketSet[1].IsEmpty()==false ||</span></div>
<div class="line"><a name="l02231"></a><span class="lineno"> 2231</span>&#160;            <span class="comment">//              sendPacketSet[2].IsEmpty()==false ||</span></div>
<div class="line"><a name="l02232"></a><span class="lineno"> 2232</span>&#160;            <span class="comment">//              sendPacketSet[3].IsEmpty()==false;</span></div>
<div class="line"><a name="l02233"></a><span class="lineno"> 2233</span>&#160;</div>
<div class="line"><a name="l02234"></a><span class="lineno"> 2234</span>&#160;</div>
<div class="line"><a name="l02235"></a><span class="lineno"> 2235</span>&#160;</div>
<div class="line"><a name="l02236"></a><span class="lineno"> 2236</span>&#160;            <span class="keywordflow">if</span> (bandwidthExceededStatistic==<span class="keyword">true</span>)</div>
<div class="line"><a name="l02237"></a><span class="lineno"> 2237</span>&#160;                timeOfLastContinualSend=time;</div>
<div class="line"><a name="l02238"></a><span class="lineno"> 2238</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l02239"></a><span class="lineno"> 2239</span>&#160;                timeOfLastContinualSend=0;</div>
<div class="line"><a name="l02240"></a><span class="lineno"> 2240</span>&#160;        }</div>
<div class="line"><a name="l02241"></a><span class="lineno"> 2241</span>&#160;</div>
<div class="line"><a name="l02242"></a><span class="lineno"> 2242</span>&#160;        ClearPacketsAndDatagrams();</div>
<div class="line"><a name="l02243"></a><span class="lineno"> 2243</span>&#160;</div>
<div class="line"><a name="l02244"></a><span class="lineno"> 2244</span>&#160;        <span class="comment">// Any data waiting to send after attempting to send, then bandwidth is exceeded</span></div>
<div class="line"><a name="l02245"></a><span class="lineno"> 2245</span>&#160;        bandwidthExceededStatistic=outgoingPacketBuffer.Size()&gt;0;</div>
<div class="line"><a name="l02246"></a><span class="lineno"> 2246</span>&#160;        <span class="comment">//      bandwidthExceededStatistic=sendPacketSet[0].IsEmpty()==false ||</span></div>
<div class="line"><a name="l02247"></a><span class="lineno"> 2247</span>&#160;        <span class="comment">//          sendPacketSet[1].IsEmpty()==false ||</span></div>
<div class="line"><a name="l02248"></a><span class="lineno"> 2248</span>&#160;        <span class="comment">//          sendPacketSet[2].IsEmpty()==false ||</span></div>
<div class="line"><a name="l02249"></a><span class="lineno"> 2249</span>&#160;        <span class="comment">//          sendPacketSet[3].IsEmpty()==false;</span></div>
<div class="line"><a name="l02250"></a><span class="lineno"> 2250</span>&#160;    }</div>
<div class="line"><a name="l02251"></a><span class="lineno"> 2251</span>&#160;</div>
<div class="line"><a name="l02252"></a><span class="lineno"> 2252</span>&#160;</div>
<div class="line"><a name="l02253"></a><span class="lineno"> 2253</span>&#160;    <span class="comment">// Keep on top of deleting old unreliable split packets so they don&#39;t clog the list.</span></div>
<div class="line"><a name="l02254"></a><span class="lineno"> 2254</span>&#160;    <span class="comment">//DeleteOldUnreliableSplitPackets( time );</span></div>
<div class="line"><a name="l02255"></a><span class="lineno"> 2255</span>&#160;}</div>
<div class="line"><a name="l02256"></a><span class="lineno"> 2256</span>&#160;</div>
<div class="line"><a name="l02257"></a><span class="lineno"> 2257</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02258"></a><span class="lineno"> 2258</span>&#160;<span class="comment">// Writes a bitstream to the socket</span></div>
<div class="line"><a name="l02259"></a><span class="lineno"> 2259</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02260"></a><span class="lineno"> 2260</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::SendBitStream( <a class="code" href="../../d1/dde/class_s_l_net_1_1_rak_net_socket2.xhtml">RakNetSocket2</a> *s, <a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml" title="Network address for a system.">SystemAddress</a> &amp;systemAddress, <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *bitStream, <a class="code" href="../../df/dd4/class_s_l_net_1_1_rak_net_random.xhtml">RakNetRandom</a> *<a class="code" href="../../d5/d55/_rak_peer_8cpp.xhtml#ad813a0f3eb2b1e317d9307dde627778a">rnr</a>, <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> currentTime)</div>
<div class="line"><a name="l02261"></a><span class="lineno"> 2261</span>&#160;{</div>
<div class="line"><a name="l02262"></a><span class="lineno"> 2262</span>&#160;    (void) systemAddress;</div>
<div class="line"><a name="l02263"></a><span class="lineno"> 2263</span>&#160;    (void) rnr;</div>
<div class="line"><a name="l02264"></a><span class="lineno"> 2264</span>&#160;</div>
<div class="line"><a name="l02265"></a><span class="lineno"> 2265</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> length;</div>
<div class="line"><a name="l02266"></a><span class="lineno"> 2266</span>&#160;</div>
<div class="line"><a name="l02267"></a><span class="lineno"> 2267</span>&#160;    length = (<span class="keywordtype">unsigned</span> int) bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a48740002683b46b00cbb97b8f7d0710e" title="Returns the length in bytes of the stream.">GetNumberOfBytesUsed</a>();</div>
<div class="line"><a name="l02268"></a><span class="lineno"> 2268</span>&#160;</div>
<div class="line"><a name="l02269"></a><span class="lineno"> 2269</span>&#160;</div>
<div class="line"><a name="l02270"></a><span class="lineno"> 2270</span>&#160;<span class="preprocessor">#ifdef _DEBUG</span></div>
<div class="line"><a name="l02271"></a><span class="lineno"> 2271</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">if</span> (packetloss &gt; 0.0)</div>
<div class="line"><a name="l02272"></a><span class="lineno"> 2272</span>&#160;    {</div>
<div class="line"><a name="l02273"></a><span class="lineno"> 2273</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="../../da/d82/_rand_8cpp.xhtml#ae1893c71ce567b99bb84624d323368e2">frandomMT</a>() &lt; packetloss)</div>
<div class="line"><a name="l02274"></a><span class="lineno"> 2274</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l02275"></a><span class="lineno"> 2275</span>&#160;    }</div>
<div class="line"><a name="l02276"></a><span class="lineno"> 2276</span>&#160;</div>
<div class="line"><a name="l02277"></a><span class="lineno"> 2277</span>&#160;    <span class="keywordflow">if</span> (minExtraPing &gt; 0 || extraPingVariance &gt; 0)</div>
<div class="line"><a name="l02278"></a><span class="lineno"> 2278</span>&#160;    {</div>
<div class="line"><a name="l02279"></a><span class="lineno"> 2279</span>&#160;<span class="preprocessor">#ifdef FLIP_SEND_ORDER_TEST</span></div>
<div class="line"><a name="l02280"></a><span class="lineno"> 2280</span>&#160;<span class="preprocessor"></span>        <span class="comment">// Flip order of sends without delaying them for testing</span></div>
<div class="line"><a name="l02281"></a><span class="lineno"> 2281</span>&#160;        DataAndTime *dat = SLNet::OP_NEW&lt;DataAndTime&gt;(__FILE__,__LINE__);</div>
<div class="line"><a name="l02282"></a><span class="lineno"> 2282</span>&#160;        memcpy(dat-&gt;data, ( <span class="keywordtype">char</span>* ) bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a7b4099386f6f116f0978b00ead160a0d">GetData</a>(), length );</div>
<div class="line"><a name="l02283"></a><span class="lineno"> 2283</span>&#160;        dat-&gt;s=s;</div>
<div class="line"><a name="l02284"></a><span class="lineno"> 2284</span>&#160;        dat-&gt;length=length;</div>
<div class="line"><a name="l02285"></a><span class="lineno"> 2285</span>&#160;        dat-&gt;sendTime = 0;</div>
<div class="line"><a name="l02286"></a><span class="lineno"> 2286</span>&#160;        dat-&gt;remotePortRakNetWasStartedOn_PS3=remotePortRakNetWasStartedOn_PS3;</div>
<div class="line"><a name="l02287"></a><span class="lineno"> 2287</span>&#160;        dat-&gt;extraSocketOptions=extraSocketOptions;</div>
<div class="line"><a name="l02288"></a><span class="lineno"> 2288</span>&#160;        delayList.PushAtHead(dat, 0, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l02289"></a><span class="lineno"> 2289</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l02290"></a><span class="lineno"> 2290</span>&#160;<span class="preprocessor"></span>        <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a> delay = minExtraPing;</div>
<div class="line"><a name="l02291"></a><span class="lineno"> 2291</span>&#160;        <span class="keywordflow">if</span> (extraPingVariance&gt;0)</div>
<div class="line"><a name="l02292"></a><span class="lineno"> 2292</span>&#160;            delay += (<a class="code" href="../../da/d82/_rand_8cpp.xhtml#a90046cfad3cc4ee544377abb9d435f34">randomMT</a>() % extraPingVariance);</div>
<div class="line"><a name="l02293"></a><span class="lineno"> 2293</span>&#160;        <span class="keywordflow">if</span> (delay &gt; 0)</div>
<div class="line"><a name="l02294"></a><span class="lineno"> 2294</span>&#160;        {</div>
<div class="line"><a name="l02295"></a><span class="lineno"> 2295</span>&#160;            DataAndTime *dat = SLNet::OP_NEW&lt;DataAndTime&gt;(__FILE__,__LINE__);</div>
<div class="line"><a name="l02296"></a><span class="lineno"> 2296</span>&#160;            memcpy(dat-&gt;data, ( <span class="keywordtype">char</span>* ) bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a7b4099386f6f116f0978b00ead160a0d">GetData</a>(), length );</div>
<div class="line"><a name="l02297"></a><span class="lineno"> 2297</span>&#160;            dat-&gt;s=s;</div>
<div class="line"><a name="l02298"></a><span class="lineno"> 2298</span>&#160;            dat-&gt;length=length;</div>
<div class="line"><a name="l02299"></a><span class="lineno"> 2299</span>&#160;            dat-&gt;sendTime = <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4772a177cb3fcb5d9e699a6670c3fb8a">SLNet::GetTimeMS</a>() + delay;</div>
<div class="line"><a name="l02300"></a><span class="lineno"> 2300</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i &lt; delayList.Size(); i++)</div>
<div class="line"><a name="l02301"></a><span class="lineno"> 2301</span>&#160;            {</div>
<div class="line"><a name="l02302"></a><span class="lineno"> 2302</span>&#160;                <span class="keywordflow">if</span> (dat-&gt;sendTime &lt; delayList[i]-&gt;sendTime)</div>
<div class="line"><a name="l02303"></a><span class="lineno"> 2303</span>&#160;                {</div>
<div class="line"><a name="l02304"></a><span class="lineno"> 2304</span>&#160;                    delayList.PushAtHead(dat, i, __FILE__, __LINE__);</div>
<div class="line"><a name="l02305"></a><span class="lineno"> 2305</span>&#160;                    dat=0;</div>
<div class="line"><a name="l02306"></a><span class="lineno"> 2306</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02307"></a><span class="lineno"> 2307</span>&#160;                }</div>
<div class="line"><a name="l02308"></a><span class="lineno"> 2308</span>&#160;            }</div>
<div class="line"><a name="l02309"></a><span class="lineno"> 2309</span>&#160;            <span class="keywordflow">if</span> (dat!=0)</div>
<div class="line"><a name="l02310"></a><span class="lineno"> 2310</span>&#160;                delayList.Push(dat,__FILE__,__LINE__);</div>
<div class="line"><a name="l02311"></a><span class="lineno"> 2311</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l02312"></a><span class="lineno"> 2312</span>&#160;        }</div>
<div class="line"><a name="l02313"></a><span class="lineno"> 2313</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l02314"></a><span class="lineno"> 2314</span>&#160;<span class="preprocessor"></span>    }</div>
<div class="line"><a name="l02315"></a><span class="lineno"> 2315</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l02316"></a><span class="lineno"> 2316</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l02317"></a><span class="lineno"> 2317</span>&#160;<span class="preprocessor">#if LIBCAT_SECURITY==1</span></div>
<div class="line"><a name="l02318"></a><span class="lineno"> 2318</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">if</span> (useSecurity)</div>
<div class="line"><a name="l02319"></a><span class="lineno"> 2319</span>&#160;    {</div>
<div class="line"><a name="l02320"></a><span class="lineno"> 2320</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *buffer = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*<span class="keyword">&gt;</span>( bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a7b4099386f6f116f0978b00ead160a0d">GetData</a>() );</div>
<div class="line"><a name="l02321"></a><span class="lineno"> 2321</span>&#160;</div>
<div class="line"><a name="l02322"></a><span class="lineno"> 2322</span>&#160;        <span class="keywordtype">int</span> buffer_size = bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a757cf284665353e8d3e1bcf5f739f1b2">GetNumberOfBitsAllocated</a>() / 8;</div>
<div class="line"><a name="l02323"></a><span class="lineno"> 2323</span>&#160;</div>
<div class="line"><a name="l02324"></a><span class="lineno"> 2324</span>&#160;        <span class="comment">// Verify there is enough room for encrypted output and encrypt</span></div>
<div class="line"><a name="l02325"></a><span class="lineno"> 2325</span>&#160;        <span class="comment">// Encrypt() will increase length</span></div>
<div class="line"><a name="l02326"></a><span class="lineno"> 2326</span>&#160;        <span class="keywordtype">bool</span> success = auth_enc.Encrypt(buffer, buffer_size, length);</div>
<div class="line"><a name="l02327"></a><span class="lineno"> 2327</span>&#160;        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(success);</div>
<div class="line"><a name="l02328"></a><span class="lineno"> 2328</span>&#160;    }</div>
<div class="line"><a name="l02329"></a><span class="lineno"> 2329</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l02330"></a><span class="lineno"> 2330</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l02331"></a><span class="lineno"> 2331</span>&#160;    bpsMetrics[(int) <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca4b1565e630dc9ebff06d02649916c104" title="How many actual bytes were sent, including per-message and per-datagram overhead, and reliable messag...">ACTUAL_BYTES_SENT</a>].<a class="code" href="../../d2/d87/struct_s_l_net_1_1_b_p_s_tracker.xhtml#a096d41a893d9115781eac7620e975ee6">Push1</a>(currentTime,length);</div>
<div class="line"><a name="l02332"></a><span class="lineno"> 2332</span>&#160;</div>
<div class="line"><a name="l02333"></a><span class="lineno"> 2333</span>&#160;    <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(length &lt;= congestionManager.GetMTU());</div>
<div class="line"><a name="l02334"></a><span class="lineno"> 2334</span>&#160;</div>
<div class="line"><a name="l02335"></a><span class="lineno"> 2335</span>&#160;<span class="preprocessor">#ifdef USE_THREADED_SEND</span></div>
<div class="line"><a name="l02336"></a><span class="lineno"> 2336</span>&#160;<span class="preprocessor"></span>    SendToThread::SendToThreadBlock *block =  SendToThread::AllocateBlock();</div>
<div class="line"><a name="l02337"></a><span class="lineno"> 2337</span>&#160;    memcpy(block-&gt;data, bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a7b4099386f6f116f0978b00ead160a0d">GetData</a>(), length);</div>
<div class="line"><a name="l02338"></a><span class="lineno"> 2338</span>&#160;    block-&gt;dataWriteOffset=length;</div>
<div class="line"><a name="l02339"></a><span class="lineno"> 2339</span>&#160;    block-&gt;extraSocketOptions=extraSocketOptions;</div>
<div class="line"><a name="l02340"></a><span class="lineno"> 2340</span>&#160;    block-&gt;remotePortRakNetWasStartedOn_PS3=remotePortRakNetWasStartedOn_PS3;</div>
<div class="line"><a name="l02341"></a><span class="lineno"> 2341</span>&#160;    block-&gt;s=s;</div>
<div class="line"><a name="l02342"></a><span class="lineno"> 2342</span>&#160;    block-&gt;systemAddress=systemAddress;</div>
<div class="line"><a name="l02343"></a><span class="lineno"> 2343</span>&#160;    SendToThread::ProcessBlock(block);</div>
<div class="line"><a name="l02344"></a><span class="lineno"> 2344</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l02345"></a><span class="lineno"> 2345</span>&#160;<span class="preprocessor"></span>    <span class="comment">// SocketLayer::SendTo( s, ( char* ) bitStream-&gt;GetData(), length, systemAddress, __FILE__, __LINE__  );</span></div>
<div class="line"><a name="l02346"></a><span class="lineno"> 2346</span>&#160;</div>
<div class="line"><a name="l02347"></a><span class="lineno"> 2347</span>&#160;    <a class="code" href="../../df/dc3/struct_s_l_net_1_1_r_n_s2___send_parameters.xhtml">RNS2_SendParameters</a> bsp;</div>
<div class="line"><a name="l02348"></a><span class="lineno"> 2348</span>&#160;    bsp.<a class="code" href="../../df/dc3/struct_s_l_net_1_1_r_n_s2___send_parameters.xhtml#a223cad191bf08d288c46750e75c5f959">data</a> = (<span class="keywordtype">char</span>*) bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a7b4099386f6f116f0978b00ead160a0d">GetData</a>();</div>
<div class="line"><a name="l02349"></a><span class="lineno"> 2349</span>&#160;    bsp.<a class="code" href="../../df/dc3/struct_s_l_net_1_1_r_n_s2___send_parameters.xhtml#a23d46d4d1bf564a8873f477af6a29bd9">length</a> = length;</div>
<div class="line"><a name="l02350"></a><span class="lineno"> 2350</span>&#160;    bsp.<a class="code" href="../../df/dc3/struct_s_l_net_1_1_r_n_s2___send_parameters.xhtml#a7e9bd3e902cda195cdeff08db0ddfd8c">systemAddress</a> = systemAddress;</div>
<div class="line"><a name="l02351"></a><span class="lineno"> 2351</span>&#160;    s-&gt;<a class="code" href="../../d1/dde/class_s_l_net_1_1_rak_net_socket2.xhtml#a2b88e6864d8b42a494475deae58044a6">Send</a>(&amp;bsp, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l02352"></a><span class="lineno"> 2352</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l02353"></a><span class="lineno"> 2353</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l02354"></a><span class="lineno"> 2354</span>&#160;</div>
<div class="line"><a name="l02355"></a><span class="lineno"> 2355</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02356"></a><span class="lineno"> 2356</span>&#160;<span class="comment">// Are we waiting for any data to be sent out or be processed by the player?</span></div>
<div class="line"><a name="l02357"></a><span class="lineno"> 2357</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02358"></a><span class="lineno"><a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a365a2fdfb29b707746a826dfe1224615"> 2358</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a365a2fdfb29b707746a826dfe1224615" title="Are we waiting for any data to be sent out or be processed by the player?">ReliabilityLayer::IsOutgoingDataWaiting</a>(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l02359"></a><span class="lineno"> 2359</span>&#160;{</div>
<div class="line"><a name="l02360"></a><span class="lineno"> 2360</span>&#160;    <span class="keywordflow">if</span> (outgoingPacketBuffer.Size()&gt;0)</div>
<div class="line"><a name="l02361"></a><span class="lineno"> 2361</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l02362"></a><span class="lineno"> 2362</span>&#160;</div>
<div class="line"><a name="l02363"></a><span class="lineno"> 2363</span>&#160;    <span class="comment">//  unsigned i;</span></div>
<div class="line"><a name="l02364"></a><span class="lineno"> 2364</span>&#160;    <span class="comment">//  for ( i = 0; i &lt; NUMBER_OF_PRIORITIES; i++ )</span></div>
<div class="line"><a name="l02365"></a><span class="lineno"> 2365</span>&#160;    <span class="comment">//  {</span></div>
<div class="line"><a name="l02366"></a><span class="lineno"> 2366</span>&#160;    <span class="comment">//      if (sendPacketSet[ i ].Size() &gt; 0)</span></div>
<div class="line"><a name="l02367"></a><span class="lineno"> 2367</span>&#160;    <span class="comment">//          return true;</span></div>
<div class="line"><a name="l02368"></a><span class="lineno"> 2368</span>&#160;    <span class="comment">//  }</span></div>
<div class="line"><a name="l02369"></a><span class="lineno"> 2369</span>&#160;</div>
<div class="line"><a name="l02370"></a><span class="lineno"> 2370</span>&#160;    <span class="keywordflow">return</span> </div>
<div class="line"><a name="l02371"></a><span class="lineno"> 2371</span>&#160;        <span class="comment">//acknowlegements.Size() &gt; 0 ||</span></div>
<div class="line"><a name="l02372"></a><span class="lineno"> 2372</span>&#160;        <span class="comment">//resendTree.IsEmpty()==false;// || outputQueue.Size() &gt; 0 || orderingList.Size() &gt; 0 || splitPacketChannelList.Size() &gt; 0;</span></div>
<div class="line"><a name="l02373"></a><span class="lineno"> 2373</span>&#160;        statistics.messagesInResendBuffer!=0;</div>
<div class="line"><a name="l02374"></a><span class="lineno"> 2374</span>&#160;}</div>
<div class="line"><a name="l02375"></a><span class="lineno"><a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#af0042a197372fb3bdd26a9514855dc2e"> 2375</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#af0042a197372fb3bdd26a9514855dc2e">ReliabilityLayer::AreAcksWaiting</a>(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l02376"></a><span class="lineno"> 2376</span>&#160;{</div>
<div class="line"><a name="l02377"></a><span class="lineno"> 2377</span>&#160;    <span class="keywordflow">return</span> acknowlegements.Size() &gt; 0;</div>
<div class="line"><a name="l02378"></a><span class="lineno"> 2378</span>&#160;}</div>
<div class="line"><a name="l02379"></a><span class="lineno"> 2379</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02380"></a><span class="lineno"><a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#ab354b17db4ee0bb894edb49ebc2349a1"> 2380</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#ab354b17db4ee0bb894edb49ebc2349a1">ReliabilityLayer::ApplyNetworkSimulator</a>( <span class="keywordtype">double</span> _packetloss, <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a> _minExtraPing, <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a> _extraPingVariance )</div>
<div class="line"><a name="l02381"></a><span class="lineno"> 2381</span>&#160;{</div>
<div class="line"><a name="l02382"></a><span class="lineno"> 2382</span>&#160;<span class="preprocessor">#ifdef _DEBUG</span></div>
<div class="line"><a name="l02383"></a><span class="lineno"> 2383</span>&#160;<span class="preprocessor"></span>    packetloss=_packetloss;</div>
<div class="line"><a name="l02384"></a><span class="lineno"> 2384</span>&#160;    minExtraPing=_minExtraPing;</div>
<div class="line"><a name="l02385"></a><span class="lineno"> 2385</span>&#160;    extraPingVariance=_extraPingVariance;</div>
<div class="line"><a name="l02386"></a><span class="lineno"> 2386</span>&#160;    <span class="comment">//  if (ping &lt; (unsigned int)(minExtraPing+extraPingVariance)*2)</span></div>
<div class="line"><a name="l02387"></a><span class="lineno"> 2387</span>&#160;    <span class="comment">//      ping=(minExtraPing+extraPingVariance)*2;</span></div>
<div class="line"><a name="l02388"></a><span class="lineno"> 2388</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l02389"></a><span class="lineno"> 2389</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l02390"></a><span class="lineno"> 2390</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02391"></a><span class="lineno"><a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a4bb5b8fba7d1c3397594a62e6ffd7c97"> 2391</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a4bb5b8fba7d1c3397594a62e6ffd7c97">ReliabilityLayer::SetSplitMessageProgressInterval</a>(<span class="keywordtype">int</span> interval)</div>
<div class="line"><a name="l02392"></a><span class="lineno"> 2392</span>&#160;{</div>
<div class="line"><a name="l02393"></a><span class="lineno"> 2393</span>&#160;    splitMessageProgressInterval=interval;</div>
<div class="line"><a name="l02394"></a><span class="lineno"> 2394</span>&#160;}</div>
<div class="line"><a name="l02395"></a><span class="lineno"> 2395</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02396"></a><span class="lineno"><a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#add22038276a9b7732ff95378be35c679"> 2396</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#add22038276a9b7732ff95378be35c679">ReliabilityLayer::SetUnreliableTimeout</a>(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a> timeoutMS)</div>
<div class="line"><a name="l02397"></a><span class="lineno"> 2397</span>&#160;{</div>
<div class="line"><a name="l02398"></a><span class="lineno"> 2398</span>&#160;<span class="preprocessor">#if CC_TIME_TYPE_BYTES==4</span></div>
<div class="line"><a name="l02399"></a><span class="lineno"> 2399</span>&#160;<span class="preprocessor"></span>    unreliableTimeout=timeoutMS;</div>
<div class="line"><a name="l02400"></a><span class="lineno"> 2400</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l02401"></a><span class="lineno"> 2401</span>&#160;<span class="preprocessor"></span>    unreliableTimeout=(<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a>)timeoutMS*(<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a>)1000;</div>
<div class="line"><a name="l02402"></a><span class="lineno"> 2402</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l02403"></a><span class="lineno"> 2403</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l02404"></a><span class="lineno"> 2404</span>&#160;</div>
<div class="line"><a name="l02405"></a><span class="lineno"> 2405</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02406"></a><span class="lineno"> 2406</span>&#160;<span class="comment">// This will return true if we should not send at this time</span></div>
<div class="line"><a name="l02407"></a><span class="lineno"> 2407</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02408"></a><span class="lineno"> 2408</span>&#160;<span class="keywordtype">bool</span> ReliabilityLayer::IsSendThrottled( <span class="keywordtype">int</span> MTUSize )</div>
<div class="line"><a name="l02409"></a><span class="lineno"> 2409</span>&#160;{</div>
<div class="line"><a name="l02410"></a><span class="lineno"> 2410</span>&#160;    (void) MTUSize;</div>
<div class="line"><a name="l02411"></a><span class="lineno"> 2411</span>&#160;</div>
<div class="line"><a name="l02412"></a><span class="lineno"> 2412</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l02413"></a><span class="lineno"> 2413</span>&#160;    <span class="comment">//  return resendList.Size() &gt; windowSize;</span></div>
<div class="line"><a name="l02414"></a><span class="lineno"> 2414</span>&#160;</div>
<div class="line"><a name="l02415"></a><span class="lineno"> 2415</span>&#160;    <span class="comment">// Disabling this, because it can get stuck here forever</span></div>
<div class="line"><a name="l02416"></a><span class="lineno"> 2416</span>&#160;    <span class="comment">/*</span></div>
<div class="line"><a name="l02417"></a><span class="lineno"> 2417</span>&#160;<span class="comment">    unsigned packetsWaiting;</span></div>
<div class="line"><a name="l02418"></a><span class="lineno"> 2418</span>&#160;<span class="comment">    unsigned resendListDataSize=0;</span></div>
<div class="line"><a name="l02419"></a><span class="lineno"> 2419</span>&#160;<span class="comment">    unsigned i;</span></div>
<div class="line"><a name="l02420"></a><span class="lineno"> 2420</span>&#160;<span class="comment">    for (i=0; i &lt; resendList.Size(); i++)</span></div>
<div class="line"><a name="l02421"></a><span class="lineno"> 2421</span>&#160;<span class="comment">    {</span></div>
<div class="line"><a name="l02422"></a><span class="lineno"> 2422</span>&#160;<span class="comment">    if (resendList[i])</span></div>
<div class="line"><a name="l02423"></a><span class="lineno"> 2423</span>&#160;<span class="comment">    resendListDataSize+=resendList[i]-&gt;dataBitLength;</span></div>
<div class="line"><a name="l02424"></a><span class="lineno"> 2424</span>&#160;<span class="comment">    }</span></div>
<div class="line"><a name="l02425"></a><span class="lineno"> 2425</span>&#160;<span class="comment">    packetsWaiting = 1 + ((BITS_TO_BYTES(resendListDataSize)) / (MTUSize - UDP_HEADER_SIZE - 10)); // 10 to roughly estimate the raknet header</span></div>
<div class="line"><a name="l02426"></a><span class="lineno"> 2426</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l02427"></a><span class="lineno"> 2427</span>&#160;<span class="comment">    return packetsWaiting &gt;= windowSize;</span></div>
<div class="line"><a name="l02428"></a><span class="lineno"> 2428</span>&#160;<span class="comment">    */</span></div>
<div class="line"><a name="l02429"></a><span class="lineno"> 2429</span>&#160;}</div>
<div class="line"><a name="l02430"></a><span class="lineno"> 2430</span>&#160;</div>
<div class="line"><a name="l02431"></a><span class="lineno"> 2431</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02432"></a><span class="lineno"> 2432</span>&#160;<span class="comment">// We lost a packet</span></div>
<div class="line"><a name="l02433"></a><span class="lineno"> 2433</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02434"></a><span class="lineno"> 2434</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::UpdateWindowFromPacketloss( <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> time )</div>
<div class="line"><a name="l02435"></a><span class="lineno"> 2435</span>&#160;{</div>
<div class="line"><a name="l02436"></a><span class="lineno"> 2436</span>&#160;    (void) time;</div>
<div class="line"><a name="l02437"></a><span class="lineno"> 2437</span>&#160;}</div>
<div class="line"><a name="l02438"></a><span class="lineno"> 2438</span>&#160;</div>
<div class="line"><a name="l02439"></a><span class="lineno"> 2439</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02440"></a><span class="lineno"> 2440</span>&#160;<span class="comment">// Increase the window size</span></div>
<div class="line"><a name="l02441"></a><span class="lineno"> 2441</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02442"></a><span class="lineno"> 2442</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::UpdateWindowFromAck( <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> time )</div>
<div class="line"><a name="l02443"></a><span class="lineno"> 2443</span>&#160;{</div>
<div class="line"><a name="l02444"></a><span class="lineno"> 2444</span>&#160;    (void) time;</div>
<div class="line"><a name="l02445"></a><span class="lineno"> 2445</span>&#160;}</div>
<div class="line"><a name="l02446"></a><span class="lineno"> 2446</span>&#160;</div>
<div class="line"><a name="l02447"></a><span class="lineno"> 2447</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02448"></a><span class="lineno"> 2448</span>&#160;<span class="comment">// Does what the function name says</span></div>
<div class="line"><a name="l02449"></a><span class="lineno"> 2449</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02450"></a><span class="lineno"> 2450</span>&#160;<span class="keywordtype">unsigned</span> ReliabilityLayer::RemovePacketFromResendListAndDeleteOlderReliableSequenced( <span class="keyword">const</span> <a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">MessageNumberType</a> messageNumber, <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> time, <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List&lt;PluginInterface2*&gt;</a> &amp;messageHandlerList, <span class="keyword">const</span> <a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml" title="Network address for a system.">SystemAddress</a> &amp;systemAddress )</div>
<div class="line"><a name="l02451"></a><span class="lineno"> 2451</span>&#160;{</div>
<div class="line"><a name="l02452"></a><span class="lineno"> 2452</span>&#160;    (void) time;</div>
<div class="line"><a name="l02453"></a><span class="lineno"> 2453</span>&#160;    (void) messageNumber;</div>
<div class="line"><a name="l02454"></a><span class="lineno"> 2454</span>&#160;    <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> * internalPacket;</div>
<div class="line"><a name="l02455"></a><span class="lineno"> 2455</span>&#160;    <span class="comment">//InternalPacket *temp;</span></div>
<div class="line"><a name="l02456"></a><span class="lineno"> 2456</span>&#160;<span class="comment">//  PacketReliability reliability; // What type of reliability algorithm to use with this packet</span></div>
<div class="line"><a name="l02457"></a><span class="lineno"> 2457</span>&#160;<span class="comment">//  unsigned char orderingChannel; // What ordering channel this packet is on, if the reliability type uses ordering channels</span></div>
<div class="line"><a name="l02458"></a><span class="lineno"> 2458</span>&#160;<span class="comment">//  OrderingIndexType orderingIndex; // The ID used as identification for ordering channels</span></div>
<div class="line"><a name="l02459"></a><span class="lineno"> 2459</span>&#160;    <span class="comment">//  unsigned j;</span></div>
<div class="line"><a name="l02460"></a><span class="lineno"> 2460</span>&#160;</div>
<div class="line"><a name="l02461"></a><span class="lineno"> 2461</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> messageHandlerIndex=0; messageHandlerIndex &lt; messageHandlerList.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); messageHandlerIndex++)</div>
<div class="line"><a name="l02462"></a><span class="lineno"> 2462</span>&#160;    {</div>
<div class="line"><a name="l02463"></a><span class="lineno"> 2463</span>&#160;<span class="preprocessor">#if CC_TIME_TYPE_BYTES==4</span></div>
<div class="line"><a name="l02464"></a><span class="lineno"> 2464</span>&#160;<span class="preprocessor"></span>        messageHandlerList[messageHandlerIndex]-&gt;OnAck(messageNumber, systemAddress, time);</div>
<div class="line"><a name="l02465"></a><span class="lineno"> 2465</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l02466"></a><span class="lineno"> 2466</span>&#160;<span class="preprocessor"></span>        messageHandlerList[messageHandlerIndex]-&gt;OnAck(messageNumber, systemAddress, (<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a>)(time/(<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a>)1000));</div>
<div class="line"><a name="l02467"></a><span class="lineno"> 2467</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l02468"></a><span class="lineno"> 2468</span>&#160;<span class="preprocessor"></span>    }</div>
<div class="line"><a name="l02469"></a><span class="lineno"> 2469</span>&#160;</div>
<div class="line"><a name="l02470"></a><span class="lineno"> 2470</span>&#160;    <span class="comment">// Testing1</span></div>
<div class="line"><a name="l02471"></a><span class="lineno"> 2471</span>&#160;<span class="comment">//  if (resendLinkedListHead)</span></div>
<div class="line"><a name="l02472"></a><span class="lineno"> 2472</span>&#160;<span class="comment">//  {</span></div>
<div class="line"><a name="l02473"></a><span class="lineno"> 2473</span>&#160;<span class="comment">//      InternalPacket *internalPacket = resendLinkedListHead;</span></div>
<div class="line"><a name="l02474"></a><span class="lineno"> 2474</span>&#160;<span class="comment">//      do </span></div>
<div class="line"><a name="l02475"></a><span class="lineno"> 2475</span>&#160;<span class="comment">//      {</span></div>
<div class="line"><a name="l02476"></a><span class="lineno"> 2476</span>&#160;<span class="comment">//          internalPacket=internalPacket-&gt;resendNext;</span></div>
<div class="line"><a name="l02477"></a><span class="lineno"> 2477</span>&#160;<span class="comment">//          printf(&quot;%i &quot;, internalPacket-&gt;reliableMessageNumber.val);</span></div>
<div class="line"><a name="l02478"></a><span class="lineno"> 2478</span>&#160;<span class="comment">//      } while (internalPacket!=resendLinkedListHead);</span></div>
<div class="line"><a name="l02479"></a><span class="lineno"> 2479</span>&#160;<span class="comment">//      printf(&quot;\n&quot;);</span></div>
<div class="line"><a name="l02480"></a><span class="lineno"> 2480</span>&#160;<span class="comment">//  }</span></div>
<div class="line"><a name="l02481"></a><span class="lineno"> 2481</span>&#160;</div>
<div class="line"><a name="l02482"></a><span class="lineno"> 2482</span>&#160;    <span class="comment">//  bool deleted;</span></div>
<div class="line"><a name="l02483"></a><span class="lineno"> 2483</span>&#160;    <span class="comment">//  deleted=resendTree.Delete(messageNumber, internalPacket);</span></div>
<div class="line"><a name="l02484"></a><span class="lineno"> 2484</span>&#160;    internalPacket = resendBuffer[messageNumber &amp; <a class="code" href="../../d8/db0/defines_8h.xhtml#a3abde4cfe6a8c3a20ce719c1cad27a07">RESEND_BUFFER_ARRAY_MASK</a>];</div>
<div class="line"><a name="l02485"></a><span class="lineno"> 2485</span>&#160;    <span class="comment">// May ask to remove twice, for example resend twice, then second ack</span></div>
<div class="line"><a name="l02486"></a><span class="lineno"> 2486</span>&#160;    <span class="keywordflow">if</span> (internalPacket &amp;&amp; internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1ba0071a22897a0b50f5a414735dc542" title="A unique numerical identifier given to this user message. Used to identify reliable messages on the n...">reliableMessageNumber</a>==messageNumber)</div>
<div class="line"><a name="l02487"></a><span class="lineno"> 2487</span>&#160;    {</div>
<div class="line"><a name="l02488"></a><span class="lineno"> 2488</span>&#160;    <span class="comment">//  ValidateResendList();</span></div>
<div class="line"><a name="l02489"></a><span class="lineno"> 2489</span>&#160;        resendBuffer[messageNumber &amp; <a class="code" href="../../d8/db0/defines_8h.xhtml#a3abde4cfe6a8c3a20ce719c1cad27a07">RESEND_BUFFER_ARRAY_MASK</a>]=0;</div>
<div class="line"><a name="l02490"></a><span class="lineno"> 2490</span>&#160;        <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#ac50dfa4707ffeeaac6b5f0491fd5c407">CC_DEBUG_PRINTF_2</a>(<span class="stringliteral">&quot;AckRcv %i &quot;</span>, messageNumber);</div>
<div class="line"><a name="l02491"></a><span class="lineno"> 2491</span>&#160;</div>
<div class="line"><a name="l02492"></a><span class="lineno"> 2492</span>&#160;        statistics.messagesInResendBuffer--;</div>
<div class="line"><a name="l02493"></a><span class="lineno"> 2493</span>&#160;        statistics.bytesInResendBuffer-=<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>);</div>
<div class="line"><a name="l02494"></a><span class="lineno"> 2494</span>&#160;</div>
<div class="line"><a name="l02495"></a><span class="lineno"> 2495</span>&#160;<span class="comment">//      orderingIndex = internalPacket-&gt;orderingIndex;</span></div>
<div class="line"><a name="l02496"></a><span class="lineno"> 2496</span>&#160;        totalUserDataBytesAcked+=(double) <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ad8c98f322a49f5765b9960743907a750">headerLength</a>+internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>);</div>
<div class="line"><a name="l02497"></a><span class="lineno"> 2497</span>&#160;</div>
<div class="line"><a name="l02498"></a><span class="lineno"> 2498</span>&#160;        <span class="comment">// Return receipt if asked for</span></div>
<div class="line"><a name="l02499"></a><span class="lineno"> 2499</span>&#160;        <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a>&gt;=<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eacd15d4c4a2cea8b4c4459f1d3c09d95f" title="Same as RELIABLE. The user will also get ID_SND_RECEIPT_ACKED after the message is delivered when cal...">RELIABLE_WITH_ACK_RECEIPT</a> &amp;&amp; </div>
<div class="line"><a name="l02500"></a><span class="lineno"> 2500</span>&#160;            (internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a>==0 || internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af1e3b0024f2cbbd08d9217457c6721f3" title="If this is a split packet, the index into the array of subsplit packets.">splitPacketIndex</a>+1==internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a>)</div>
<div class="line"><a name="l02501"></a><span class="lineno"> 2501</span>&#160;            )</div>
<div class="line"><a name="l02502"></a><span class="lineno"> 2502</span>&#160;        {</div>
<div class="line"><a name="l02503"></a><span class="lineno"> 2503</span>&#160;            <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *ackReceipt = AllocateFromInternalPacketPool();</div>
<div class="line"><a name="l02504"></a><span class="lineno"> 2504</span>&#160;            AllocInternalPacketData(ackReceipt, 5,  <span class="keyword">false</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l02505"></a><span class="lineno"> 2505</span>&#160;            ackReceipt-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>=<a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(5);</div>
<div class="line"><a name="l02506"></a><span class="lineno"> 2506</span>&#160;            ackReceipt-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>[0]=(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a5b5b9eb3be9ad636af02da44b718a75f" title="First byte of a network message.">MessageID</a>)<a class="code" href="../../d6/d83/_message_identifiers_8h.xhtml#ac1b471af280629f5ace02e586d5bcfd3aea254aecc756b8f68b9b0b75ebefa246">ID_SND_RECEIPT_ACKED</a>;</div>
<div class="line"><a name="l02507"></a><span class="lineno"> 2507</span>&#160;            memcpy(ackReceipt-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>+<span class="keyword">sizeof</span>(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a5b5b9eb3be9ad636af02da44b718a75f" title="First byte of a network message.">MessageID</a>), &amp;internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a218b725d7cfd3577195f5c14a401694c" title="If the reliability type requires a receipt, then return this number with it.">sendReceiptSerial</a>, <span class="keyword">sizeof</span>(internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a218b725d7cfd3577195f5c14a401694c" title="If the reliability type requires a receipt, then return this number with it.">sendReceiptSerial</a>));</div>
<div class="line"><a name="l02508"></a><span class="lineno"> 2508</span>&#160;            outputQueue.Push(ackReceipt, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l02509"></a><span class="lineno"> 2509</span>&#160;        }</div>
<div class="line"><a name="l02510"></a><span class="lineno"> 2510</span>&#160;</div>
<div class="line"><a name="l02511"></a><span class="lineno"> 2511</span>&#160;        <span class="keywordtype">bool</span> isReliable;</div>
<div class="line"><a name="l02512"></a><span class="lineno"> 2512</span>&#160;        <span class="keywordflow">if</span> ( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eabc6ba98e9404532481e43eea39731929" title="The message is sent reliably, but not necessarily in any order. Same overhead as UNRELIABLE.">RELIABLE</a> ||</div>
<div class="line"><a name="l02513"></a><span class="lineno"> 2513</span>&#160;            internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae1fc3633b353730ff448e5b6675f7085">RELIABLE_SEQUENCED</a> ||</div>
<div class="line"><a name="l02514"></a><span class="lineno"> 2514</span>&#160;            internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eaff2d39b163bcf3e142744962bfb0849f">RELIABLE_ORDERED</a> ||</div>
<div class="line"><a name="l02515"></a><span class="lineno"> 2515</span>&#160;            internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eacd15d4c4a2cea8b4c4459f1d3c09d95f" title="Same as RELIABLE. The user will also get ID_SND_RECEIPT_ACKED after the message is delivered when cal...">RELIABLE_WITH_ACK_RECEIPT</a>  ||</div>
<div class="line"><a name="l02516"></a><span class="lineno"> 2516</span>&#160;<span class="comment">//          internalPacket-&gt;reliability == RELIABLE_SEQUENCED_WITH_ACK_RECEIPT  ||</span></div>
<div class="line"><a name="l02517"></a><span class="lineno"> 2517</span>&#160;            internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae94727e3abc9217e16c1c19f1e8f850a" title="Same as RELIABLE_ORDERED_ACK_RECEIPT. The user will also get ID_SND_RECEIPT_ACKED after the message i...">RELIABLE_ORDERED_WITH_ACK_RECEIPT</a></div>
<div class="line"><a name="l02518"></a><span class="lineno"> 2518</span>&#160;            )</div>
<div class="line"><a name="l02519"></a><span class="lineno"> 2519</span>&#160;            isReliable = <span class="keyword">true</span>;</div>
<div class="line"><a name="l02520"></a><span class="lineno"> 2520</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l02521"></a><span class="lineno"> 2521</span>&#160;            isReliable = <span class="keyword">false</span>;</div>
<div class="line"><a name="l02522"></a><span class="lineno"> 2522</span>&#160;</div>
<div class="line"><a name="l02523"></a><span class="lineno"> 2523</span>&#160;        RemoveFromList(internalPacket, isReliable);</div>
<div class="line"><a name="l02524"></a><span class="lineno"> 2524</span>&#160;        FreeInternalPacketData(internalPacket, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l02525"></a><span class="lineno"> 2525</span>&#160;        ReleaseToInternalPacketPool( internalPacket );</div>
<div class="line"><a name="l02526"></a><span class="lineno"> 2526</span>&#160;</div>
<div class="line"><a name="l02527"></a><span class="lineno"> 2527</span>&#160;</div>
<div class="line"><a name="l02528"></a><span class="lineno"> 2528</span>&#160;        <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l02529"></a><span class="lineno"> 2529</span>&#160;    }</div>
<div class="line"><a name="l02530"></a><span class="lineno"> 2530</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l02531"></a><span class="lineno"> 2531</span>&#160;    {</div>
<div class="line"><a name="l02532"></a><span class="lineno"> 2532</span>&#160;</div>
<div class="line"><a name="l02533"></a><span class="lineno"> 2533</span>&#160;    }</div>
<div class="line"><a name="l02534"></a><span class="lineno"> 2534</span>&#160;</div>
<div class="line"><a name="l02535"></a><span class="lineno"> 2535</span>&#160;    <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span>)-1;</div>
<div class="line"><a name="l02536"></a><span class="lineno"> 2536</span>&#160;}</div>
<div class="line"><a name="l02537"></a><span class="lineno"> 2537</span>&#160;</div>
<div class="line"><a name="l02538"></a><span class="lineno"> 2538</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02539"></a><span class="lineno"> 2539</span>&#160;<span class="comment">// Acknowledge receipt of the packet with the specified messageNumber</span></div>
<div class="line"><a name="l02540"></a><span class="lineno"> 2540</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02541"></a><span class="lineno"> 2541</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::SendAcknowledgementPacket( <span class="keyword">const</span> <a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">DatagramSequenceNumberType</a> messageNumber, <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> time )</div>
<div class="line"><a name="l02542"></a><span class="lineno"> 2542</span>&#160;{</div>
<div class="line"><a name="l02543"></a><span class="lineno"> 2543</span>&#160;</div>
<div class="line"><a name="l02544"></a><span class="lineno"> 2544</span>&#160;    <span class="comment">// REMOVEME</span></div>
<div class="line"><a name="l02545"></a><span class="lineno"> 2545</span>&#160;    <span class="comment">// printf(&quot;%p Send ack %i\n&quot;, this, messageNumber.val);</span></div>
<div class="line"><a name="l02546"></a><span class="lineno"> 2546</span>&#160;</div>
<div class="line"><a name="l02547"></a><span class="lineno"> 2547</span>&#160;    nextAckTimeToSend=time;</div>
<div class="line"><a name="l02548"></a><span class="lineno"> 2548</span>&#160;    acknowlegements.Insert(messageNumber);</div>
<div class="line"><a name="l02549"></a><span class="lineno"> 2549</span>&#160;</div>
<div class="line"><a name="l02550"></a><span class="lineno"> 2550</span>&#160;    <span class="comment">//printf(&quot;ACK_DG:%i &quot;, messageNumber.val);</span></div>
<div class="line"><a name="l02551"></a><span class="lineno"> 2551</span>&#160;</div>
<div class="line"><a name="l02552"></a><span class="lineno"> 2552</span>&#160;    <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#ac50dfa4707ffeeaac6b5f0491fd5c407">CC_DEBUG_PRINTF_2</a>(<span class="stringliteral">&quot;AckPush %i &quot;</span>, messageNumber);</div>
<div class="line"><a name="l02553"></a><span class="lineno"> 2553</span>&#160;</div>
<div class="line"><a name="l02554"></a><span class="lineno"> 2554</span>&#160;}</div>
<div class="line"><a name="l02555"></a><span class="lineno"> 2555</span>&#160;</div>
<div class="line"><a name="l02556"></a><span class="lineno"> 2556</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02557"></a><span class="lineno"> 2557</span>&#160;<span class="comment">// Parse an internalPacket and figure out how many header bits would be</span></div>
<div class="line"><a name="l02558"></a><span class="lineno"> 2558</span>&#160;<span class="comment">// written.  Returns that number</span></div>
<div class="line"><a name="l02559"></a><span class="lineno"> 2559</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02560"></a><span class="lineno"> 2560</span>&#160;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> ReliabilityLayer::GetMaxMessageHeaderLengthBits( <span class="keywordtype">void</span> )</div>
<div class="line"><a name="l02561"></a><span class="lineno"> 2561</span>&#160;{</div>
<div class="line"><a name="l02562"></a><span class="lineno"> 2562</span>&#160;    <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> ip;</div>
<div class="line"><a name="l02563"></a><span class="lineno"> 2563</span>&#160;    ip.<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a>=<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae1fc3633b353730ff448e5b6675f7085">RELIABLE_SEQUENCED</a>;</div>
<div class="line"><a name="l02564"></a><span class="lineno"> 2564</span>&#160;    ip.<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a>=1;</div>
<div class="line"><a name="l02565"></a><span class="lineno"> 2565</span>&#160;    <span class="keywordflow">return</span> GetMessageHeaderLengthBits(&amp;ip);</div>
<div class="line"><a name="l02566"></a><span class="lineno"> 2566</span>&#160;}</div>
<div class="line"><a name="l02567"></a><span class="lineno"> 2567</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02568"></a><span class="lineno"> 2568</span>&#160;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> ReliabilityLayer::GetMessageHeaderLengthBits( <span class="keyword">const</span> <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *<span class="keyword">const</span> internalPacket )</div>
<div class="line"><a name="l02569"></a><span class="lineno"> 2569</span>&#160;{   </div>
<div class="line"><a name="l02570"></a><span class="lineno"> 2570</span>&#160;    <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> bitLength;</div>
<div class="line"><a name="l02571"></a><span class="lineno"> 2571</span>&#160;</div>
<div class="line"><a name="l02572"></a><span class="lineno"> 2572</span>&#160;    <span class="comment">//  bitStream-&gt;AlignWriteToByteBoundary(); // Potentially unaligned</span></div>
<div class="line"><a name="l02573"></a><span class="lineno"> 2573</span>&#160;    <span class="comment">//  tempChar=(unsigned char)internalPacket-&gt;reliability; bitStream-&gt;WriteBits( (const unsigned char *)&amp;tempChar, 3, true ); // 3 bits to write reliability.</span></div>
<div class="line"><a name="l02574"></a><span class="lineno"> 2574</span>&#160;    <span class="comment">//  bool hasSplitPacket = internalPacket-&gt;splitPacketCount&gt;0; bitStream-&gt;Write(hasSplitPacket); // Write 1 bit to indicate if splitPacketCount&gt;0</span></div>
<div class="line"><a name="l02575"></a><span class="lineno"> 2575</span>&#160;    bitLength = 8*1;</div>
<div class="line"><a name="l02576"></a><span class="lineno"> 2576</span>&#160;</div>
<div class="line"><a name="l02577"></a><span class="lineno"> 2577</span>&#160;    <span class="comment">//  bitStream-&gt;AlignWriteToByteBoundary();</span></div>
<div class="line"><a name="l02578"></a><span class="lineno"> 2578</span>&#160;    <span class="comment">//  RakAssert(internalPacket-&gt;dataBitLength &lt; 65535);</span></div>
<div class="line"><a name="l02579"></a><span class="lineno"> 2579</span>&#160;    <span class="comment">//  unsigned short s; s = (unsigned short) internalPacket-&gt;dataBitLength; bitStream-&gt;WriteAlignedVar16((const char*)&amp; s);</span></div>
<div class="line"><a name="l02580"></a><span class="lineno"> 2580</span>&#160;    bitLength += 8*2;</div>
<div class="line"><a name="l02581"></a><span class="lineno"> 2581</span>&#160;</div>
<div class="line"><a name="l02582"></a><span class="lineno"> 2582</span>&#160;    <span class="keywordflow">if</span> ( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eabc6ba98e9404532481e43eea39731929" title="The message is sent reliably, but not necessarily in any order. Same overhead as UNRELIABLE.">RELIABLE</a> ||</div>
<div class="line"><a name="l02583"></a><span class="lineno"> 2583</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae1fc3633b353730ff448e5b6675f7085">RELIABLE_SEQUENCED</a> ||</div>
<div class="line"><a name="l02584"></a><span class="lineno"> 2584</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eaff2d39b163bcf3e142744962bfb0849f">RELIABLE_ORDERED</a> ||</div>
<div class="line"><a name="l02585"></a><span class="lineno"> 2585</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eacd15d4c4a2cea8b4c4459f1d3c09d95f" title="Same as RELIABLE. The user will also get ID_SND_RECEIPT_ACKED after the message is delivered when cal...">RELIABLE_WITH_ACK_RECEIPT</a> ||</div>
<div class="line"><a name="l02586"></a><span class="lineno"> 2586</span>&#160;<span class="comment">//      internalPacket-&gt;reliability == RELIABLE_SEQUENCED_WITH_ACK_RECEIPT ||</span></div>
<div class="line"><a name="l02587"></a><span class="lineno"> 2587</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae94727e3abc9217e16c1c19f1e8f850a" title="Same as RELIABLE_ORDERED_ACK_RECEIPT. The user will also get ID_SND_RECEIPT_ACKED after the message i...">RELIABLE_ORDERED_WITH_ACK_RECEIPT</a></div>
<div class="line"><a name="l02588"></a><span class="lineno"> 2588</span>&#160;        )</div>
<div class="line"><a name="l02589"></a><span class="lineno"> 2589</span>&#160;        bitLength += 8*3; <span class="comment">// bitStream-&gt;Write(internalPacket-&gt;reliableMessageNumber); // Message sequence number</span></div>
<div class="line"><a name="l02590"></a><span class="lineno"> 2590</span>&#160;    <span class="comment">// bitStream-&gt;AlignWriteToByteBoundary(); // Potentially nothing else to write</span></div>
<div class="line"><a name="l02591"></a><span class="lineno"> 2591</span>&#160;</div>
<div class="line"><a name="l02592"></a><span class="lineno"> 2592</span>&#160;</div>
<div class="line"><a name="l02593"></a><span class="lineno"> 2593</span>&#160;</div>
<div class="line"><a name="l02594"></a><span class="lineno"> 2594</span>&#160;    <span class="keywordflow">if</span> ( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eab6a8eb609ec1adbd5af421cf2acbedf5">UNRELIABLE_SEQUENCED</a> ||</div>
<div class="line"><a name="l02595"></a><span class="lineno"> 2595</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae1fc3633b353730ff448e5b6675f7085">RELIABLE_SEQUENCED</a></div>
<div class="line"><a name="l02596"></a><span class="lineno"> 2596</span>&#160;        )</div>
<div class="line"><a name="l02597"></a><span class="lineno"> 2597</span>&#160;    {</div>
<div class="line"><a name="l02598"></a><span class="lineno"> 2598</span>&#160;        bitLength += 8*3;; <span class="comment">// bitStream-&gt;Write(internalPacket-&gt;_sequencingIndex); // Used for UNRELIABLE_SEQUENCED, RELIABLE_SEQUENCED, RELIABLE_ORDERED.</span></div>
<div class="line"><a name="l02599"></a><span class="lineno"> 2599</span>&#160;    }</div>
<div class="line"><a name="l02600"></a><span class="lineno"> 2600</span>&#160;</div>
<div class="line"><a name="l02601"></a><span class="lineno"> 2601</span>&#160;    <span class="keywordflow">if</span> ( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eab6a8eb609ec1adbd5af421cf2acbedf5">UNRELIABLE_SEQUENCED</a> ||</div>
<div class="line"><a name="l02602"></a><span class="lineno"> 2602</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae1fc3633b353730ff448e5b6675f7085">RELIABLE_SEQUENCED</a> ||</div>
<div class="line"><a name="l02603"></a><span class="lineno"> 2603</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eaff2d39b163bcf3e142744962bfb0849f">RELIABLE_ORDERED</a> ||</div>
<div class="line"><a name="l02604"></a><span class="lineno"> 2604</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae94727e3abc9217e16c1c19f1e8f850a" title="Same as RELIABLE_ORDERED_ACK_RECEIPT. The user will also get ID_SND_RECEIPT_ACKED after the message i...">RELIABLE_ORDERED_WITH_ACK_RECEIPT</a></div>
<div class="line"><a name="l02605"></a><span class="lineno"> 2605</span>&#160;        )</div>
<div class="line"><a name="l02606"></a><span class="lineno"> 2606</span>&#160;    {</div>
<div class="line"><a name="l02607"></a><span class="lineno"> 2607</span>&#160;        bitLength += 8*3; <span class="comment">// bitStream-&gt;Write(internalPacket-&gt;orderingIndex); // Used for UNRELIABLE_SEQUENCED, RELIABLE_SEQUENCED, RELIABLE_ORDERED.</span></div>
<div class="line"><a name="l02608"></a><span class="lineno"> 2608</span>&#160;        bitLength += 8*1; <span class="comment">// tempChar=internalPacket-&gt;orderingChannel; bitStream-&gt;WriteAlignedVar8((const char*)&amp; tempChar); // Used for UNRELIABLE_SEQUENCED, RELIABLE_SEQUENCED, RELIABLE_ORDERED. 5 bits needed, write one byte</span></div>
<div class="line"><a name="l02609"></a><span class="lineno"> 2609</span>&#160;    }</div>
<div class="line"><a name="l02610"></a><span class="lineno"> 2610</span>&#160;    <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a>&gt;0)</div>
<div class="line"><a name="l02611"></a><span class="lineno"> 2611</span>&#160;    {</div>
<div class="line"><a name="l02612"></a><span class="lineno"> 2612</span>&#160;        bitLength += 8*4; <span class="comment">// bitStream-&gt;WriteAlignedVar32((const char*)&amp; internalPacket-&gt;splitPacketCount); RakAssert(sizeof(SplitPacketIndexType)==4); // Only needed if splitPacketCount&gt;0. 4 bytes</span></div>
<div class="line"><a name="l02613"></a><span class="lineno"> 2613</span>&#160;        bitLength += 8*<span class="keyword">sizeof</span>(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#ada9d06cc4d3df50fbf844c6725cd7230">SplitPacketIdType</a>); <span class="comment">// bitStream-&gt;WriteAlignedVar16((const char*)&amp; internalPacket-&gt;splitPacketId); RakAssert(sizeof(SplitPacketIdType)==2); // Only needed if splitPacketCount&gt;0.</span></div>
<div class="line"><a name="l02614"></a><span class="lineno"> 2614</span>&#160;        bitLength += 8*4; <span class="comment">// bitStream-&gt;WriteAlignedVar32((const char*)&amp; internalPacket-&gt;splitPacketIndex); // Only needed if splitPacketCount&gt;0. 4 bytes</span></div>
<div class="line"><a name="l02615"></a><span class="lineno"> 2615</span>&#160;    }</div>
<div class="line"><a name="l02616"></a><span class="lineno"> 2616</span>&#160;</div>
<div class="line"><a name="l02617"></a><span class="lineno"> 2617</span>&#160;    <span class="keywordflow">return</span> bitLength;</div>
<div class="line"><a name="l02618"></a><span class="lineno"> 2618</span>&#160;}</div>
<div class="line"><a name="l02619"></a><span class="lineno"> 2619</span>&#160;</div>
<div class="line"><a name="l02620"></a><span class="lineno"> 2620</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02621"></a><span class="lineno"> 2621</span>&#160;<span class="comment">// Parse an internalPacket and create a bitstream to represent this data</span></div>
<div class="line"><a name="l02622"></a><span class="lineno"> 2622</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02623"></a><span class="lineno"> 2623</span>&#160;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> ReliabilityLayer::WriteToBitStreamFromInternalPacket(<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *bitStream, <span class="keyword">const</span> <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *<span class="keyword">const</span> internalPacket, <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> curTime )</div>
<div class="line"><a name="l02624"></a><span class="lineno"> 2624</span>&#160;{</div>
<div class="line"><a name="l02625"></a><span class="lineno"> 2625</span>&#160;    (void) curTime;</div>
<div class="line"><a name="l02626"></a><span class="lineno"> 2626</span>&#160;</div>
<div class="line"><a name="l02627"></a><span class="lineno"> 2627</span>&#160;    <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> start = bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a0efe4cd010ac7ccc0a7aa8868e0c54c8" title="Returns the length in bits of the stream.">GetNumberOfBitsUsed</a>();</div>
<div class="line"><a name="l02628"></a><span class="lineno"> 2628</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> tempChar;</div>
<div class="line"><a name="l02629"></a><span class="lineno"> 2629</span>&#160;</div>
<div class="line"><a name="l02630"></a><span class="lineno"> 2630</span>&#160;    <span class="comment">// (Incoming data may be all zeros due to padding)</span></div>
<div class="line"><a name="l02631"></a><span class="lineno"> 2631</span>&#160;    bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a1083ab999b52c839709eab5cff65a68d" title="Align the next write and/or read to a byte boundary.">AlignWriteToByteBoundary</a>(); <span class="comment">// Potentially unaligned</span></div>
<div class="line"><a name="l02632"></a><span class="lineno"> 2632</span>&#160;    <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a>==<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7ea4a623962051043733acde3e595e1cce0" title="Same as UNRELIABLE, however the user will get either ID_SND_RECEIPT_ACKED or ID_SND_RECEIPT_LOSS base...">UNRELIABLE_WITH_ACK_RECEIPT</a>)</div>
<div class="line"><a name="l02633"></a><span class="lineno"> 2633</span>&#160;        tempChar=<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eaeb409c363ddaeb3201fd95e9bee56696" title="Same as regular UDP, except that it will also discard duplicate datagrams. RakNet adds (6 to 17) + 21...">UNRELIABLE</a>;</div>
<div class="line"><a name="l02634"></a><span class="lineno"> 2634</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a>==<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eacd15d4c4a2cea8b4c4459f1d3c09d95f" title="Same as RELIABLE. The user will also get ID_SND_RECEIPT_ACKED after the message is delivered when cal...">RELIABLE_WITH_ACK_RECEIPT</a>)</div>
<div class="line"><a name="l02635"></a><span class="lineno"> 2635</span>&#160;        tempChar=<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eabc6ba98e9404532481e43eea39731929" title="The message is sent reliably, but not necessarily in any order. Same overhead as UNRELIABLE.">RELIABLE</a>;</div>
<div class="line"><a name="l02636"></a><span class="lineno"> 2636</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a>==<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae94727e3abc9217e16c1c19f1e8f850a" title="Same as RELIABLE_ORDERED_ACK_RECEIPT. The user will also get ID_SND_RECEIPT_ACKED after the message i...">RELIABLE_ORDERED_WITH_ACK_RECEIPT</a>)</div>
<div class="line"><a name="l02637"></a><span class="lineno"> 2637</span>&#160;        tempChar=<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eaff2d39b163bcf3e142744962bfb0849f">RELIABLE_ORDERED</a>;</div>
<div class="line"><a name="l02638"></a><span class="lineno"> 2638</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l02639"></a><span class="lineno"> 2639</span>&#160;        tempChar=(<span class="keywordtype">unsigned</span> char)internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a>;</div>
<div class="line"><a name="l02640"></a><span class="lineno"> 2640</span>&#160;</div>
<div class="line"><a name="l02641"></a><span class="lineno"> 2641</span>&#160;    bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8bf3d5d6926d80a9dba19dea5eecb7d2" title="Write numberToWrite bits from the input source.">WriteBits</a>( (<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *)&amp;tempChar, 3, <span class="keyword">true</span> ); <span class="comment">// 3 bits to write reliability.</span></div>
<div class="line"><a name="l02642"></a><span class="lineno"> 2642</span>&#160;</div>
<div class="line"><a name="l02643"></a><span class="lineno"> 2643</span>&#160;    <span class="keywordtype">bool</span> hasSplitPacket = internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a>&gt;0; bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(hasSplitPacket); <span class="comment">// Write 1 bit to indicate if splitPacketCount&gt;0</span></div>
<div class="line"><a name="l02644"></a><span class="lineno"> 2644</span>&#160;    bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a1083ab999b52c839709eab5cff65a68d" title="Align the next write and/or read to a byte boundary.">AlignWriteToByteBoundary</a>();</div>
<div class="line"><a name="l02645"></a><span class="lineno"> 2645</span>&#160;    <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a> &lt; 65535);</div>
<div class="line"><a name="l02646"></a><span class="lineno"> 2646</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> s; s = (<span class="keywordtype">unsigned</span> short) internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>; bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8e5684a529734bdb62349ed60c2bab30">WriteAlignedVar16</a>((<span class="keyword">const</span> <span class="keywordtype">char</span>*)&amp; s);</div>
<div class="line"><a name="l02647"></a><span class="lineno"> 2647</span>&#160;    <span class="keywordflow">if</span> ( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eabc6ba98e9404532481e43eea39731929" title="The message is sent reliably, but not necessarily in any order. Same overhead as UNRELIABLE.">RELIABLE</a> ||</div>
<div class="line"><a name="l02648"></a><span class="lineno"> 2648</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae1fc3633b353730ff448e5b6675f7085">RELIABLE_SEQUENCED</a> ||</div>
<div class="line"><a name="l02649"></a><span class="lineno"> 2649</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eaff2d39b163bcf3e142744962bfb0849f">RELIABLE_ORDERED</a> ||</div>
<div class="line"><a name="l02650"></a><span class="lineno"> 2650</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eacd15d4c4a2cea8b4c4459f1d3c09d95f" title="Same as RELIABLE. The user will also get ID_SND_RECEIPT_ACKED after the message is delivered when cal...">RELIABLE_WITH_ACK_RECEIPT</a> ||</div>
<div class="line"><a name="l02651"></a><span class="lineno"> 2651</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae94727e3abc9217e16c1c19f1e8f850a" title="Same as RELIABLE_ORDERED_ACK_RECEIPT. The user will also get ID_SND_RECEIPT_ACKED after the message i...">RELIABLE_ORDERED_WITH_ACK_RECEIPT</a></div>
<div class="line"><a name="l02652"></a><span class="lineno"> 2652</span>&#160;        )</div>
<div class="line"><a name="l02653"></a><span class="lineno"> 2653</span>&#160;        bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1ba0071a22897a0b50f5a414735dc542" title="A unique numerical identifier given to this user message. Used to identify reliable messages on the n...">reliableMessageNumber</a>); <span class="comment">// Used for all reliable types</span></div>
<div class="line"><a name="l02654"></a><span class="lineno"> 2654</span>&#160;    bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a1083ab999b52c839709eab5cff65a68d" title="Align the next write and/or read to a byte boundary.">AlignWriteToByteBoundary</a>(); <span class="comment">// Potentially nothing else to write</span></div>
<div class="line"><a name="l02655"></a><span class="lineno"> 2655</span>&#160;</div>
<div class="line"><a name="l02656"></a><span class="lineno"> 2656</span>&#160;    <span class="keywordflow">if</span> ( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eab6a8eb609ec1adbd5af421cf2acbedf5">UNRELIABLE_SEQUENCED</a> ||</div>
<div class="line"><a name="l02657"></a><span class="lineno"> 2657</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae1fc3633b353730ff448e5b6675f7085">RELIABLE_SEQUENCED</a></div>
<div class="line"><a name="l02658"></a><span class="lineno"> 2658</span>&#160;        )</div>
<div class="line"><a name="l02659"></a><span class="lineno"> 2659</span>&#160;    {</div>
<div class="line"><a name="l02660"></a><span class="lineno"> 2660</span>&#160;        bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a29568680a39b237528fbbf775b1f99e0">sequencingIndex</a>); <span class="comment">// Used for UNRELIABLE_SEQUENCED, RELIABLE_SEQUENCED, RELIABLE_ORDERED.</span></div>
<div class="line"><a name="l02661"></a><span class="lineno"> 2661</span>&#160;    }</div>
<div class="line"><a name="l02662"></a><span class="lineno"> 2662</span>&#160;</div>
<div class="line"><a name="l02663"></a><span class="lineno"> 2663</span>&#160;    <span class="keywordflow">if</span> ( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eab6a8eb609ec1adbd5af421cf2acbedf5">UNRELIABLE_SEQUENCED</a> ||</div>
<div class="line"><a name="l02664"></a><span class="lineno"> 2664</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae1fc3633b353730ff448e5b6675f7085">RELIABLE_SEQUENCED</a> ||</div>
<div class="line"><a name="l02665"></a><span class="lineno"> 2665</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eaff2d39b163bcf3e142744962bfb0849f">RELIABLE_ORDERED</a> ||</div>
<div class="line"><a name="l02666"></a><span class="lineno"> 2666</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae94727e3abc9217e16c1c19f1e8f850a" title="Same as RELIABLE_ORDERED_ACK_RECEIPT. The user will also get ID_SND_RECEIPT_ACKED after the message i...">RELIABLE_ORDERED_WITH_ACK_RECEIPT</a></div>
<div class="line"><a name="l02667"></a><span class="lineno"> 2667</span>&#160;        )</div>
<div class="line"><a name="l02668"></a><span class="lineno"> 2668</span>&#160;    {</div>
<div class="line"><a name="l02669"></a><span class="lineno"> 2669</span>&#160;        bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1fabcef98ca0b6e15d6aca4c8ebe862b" title="The ID used as identification for ordering messages. Also included in sequenced messages.">orderingIndex</a>); <span class="comment">// Used for UNRELIABLE_SEQUENCED, RELIABLE_SEQUENCED, RELIABLE_ORDERED.</span></div>
<div class="line"><a name="l02670"></a><span class="lineno"> 2670</span>&#160;        tempChar=internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a>; bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#af094784f8d431c8bfe433a63a6721d3a">WriteAlignedVar8</a>((<span class="keyword">const</span> <span class="keywordtype">char</span>*)&amp; tempChar); <span class="comment">// Used for UNRELIABLE_SEQUENCED, RELIABLE_SEQUENCED, RELIABLE_ORDERED. 5 bits needed, write one byte</span></div>
<div class="line"><a name="l02671"></a><span class="lineno"> 2671</span>&#160;    }</div>
<div class="line"><a name="l02672"></a><span class="lineno"> 2672</span>&#160;</div>
<div class="line"><a name="l02673"></a><span class="lineno"> 2673</span>&#160;    <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a>&gt;0)</div>
<div class="line"><a name="l02674"></a><span class="lineno"> 2674</span>&#160;    {</div>
<div class="line"><a name="l02675"></a><span class="lineno"> 2675</span>&#160;    <span class="comment">//  printf(&quot;Write before\n&quot;);</span></div>
<div class="line"><a name="l02676"></a><span class="lineno"> 2676</span>&#160;    <span class="comment">//  bitStream-&gt;PrintBits();</span></div>
<div class="line"><a name="l02677"></a><span class="lineno"> 2677</span>&#160;</div>
<div class="line"><a name="l02678"></a><span class="lineno"> 2678</span>&#160;        bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a03d2df12a3cc011fe7c3044174d8d05f">WriteAlignedVar32</a>((<span class="keyword">const</span> <span class="keywordtype">char</span>*)&amp; internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a>); <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(<span class="keyword">sizeof</span>(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#afe219620b084e1150e61e8ff98f7c855">SplitPacketIndexType</a>)==4); <span class="comment">// Only needed if splitPacketCount&gt;0. 4 bytes</span></div>
<div class="line"><a name="l02679"></a><span class="lineno"> 2679</span>&#160;        bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8e5684a529734bdb62349ed60c2bab30">WriteAlignedVar16</a>((<span class="keyword">const</span> <span class="keywordtype">char</span>*)&amp; internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a01f5ff1a7b5cec5925f0ec5703bfae13" title="The ID of the split packet, if we have split packets. This is the maximum number of split messages we...">splitPacketId</a>); <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(<span class="keyword">sizeof</span>(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#ada9d06cc4d3df50fbf844c6725cd7230">SplitPacketIdType</a>)==2); <span class="comment">// Only needed if splitPacketCount&gt;0.</span></div>
<div class="line"><a name="l02680"></a><span class="lineno"> 2680</span>&#160;        bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a03d2df12a3cc011fe7c3044174d8d05f">WriteAlignedVar32</a>((<span class="keyword">const</span> <span class="keywordtype">char</span>*)&amp; internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af1e3b0024f2cbbd08d9217457c6721f3" title="If this is a split packet, the index into the array of subsplit packets.">splitPacketIndex</a>); <span class="comment">// Only needed if splitPacketCount&gt;0. 4 bytes</span></div>
<div class="line"><a name="l02681"></a><span class="lineno"> 2681</span>&#160;</div>
<div class="line"><a name="l02682"></a><span class="lineno"> 2682</span>&#160;    <span class="comment">//  printf(&quot;Write after\n&quot;);</span></div>
<div class="line"><a name="l02683"></a><span class="lineno"> 2683</span>&#160;    <span class="comment">//  bitStream-&gt;PrintBits();</span></div>
<div class="line"><a name="l02684"></a><span class="lineno"> 2684</span>&#160;    }</div>
<div class="line"><a name="l02685"></a><span class="lineno"> 2685</span>&#160;</div>
<div class="line"><a name="l02686"></a><span class="lineno"> 2686</span>&#160;    <span class="comment">// Write the actual data.</span></div>
<div class="line"><a name="l02687"></a><span class="lineno"> 2687</span>&#160;    bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#af777083a659116082f109ccd9c8639f5" title="Align the bitstream to the byte boundary and then write the specified number of bits.">WriteAlignedBytes</a>( ( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* ) internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>, <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a> ) );</div>
<div class="line"><a name="l02688"></a><span class="lineno"> 2688</span>&#160;</div>
<div class="line"><a name="l02689"></a><span class="lineno"> 2689</span>&#160;    <span class="keywordflow">return</span> bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a0efe4cd010ac7ccc0a7aa8868e0c54c8" title="Returns the length in bits of the stream.">GetNumberOfBitsUsed</a>() - start;</div>
<div class="line"><a name="l02690"></a><span class="lineno"> 2690</span>&#160;}</div>
<div class="line"><a name="l02691"></a><span class="lineno"> 2691</span>&#160;</div>
<div class="line"><a name="l02692"></a><span class="lineno"> 2692</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02693"></a><span class="lineno"> 2693</span>&#160;<span class="comment">// Parse a bitstream and create an internal packet to represent this data</span></div>
<div class="line"><a name="l02694"></a><span class="lineno"> 2694</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02695"></a><span class="lineno"> 2695</span>&#160;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a>* ReliabilityLayer::CreateInternalPacketFromBitStream(<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *bitStream, <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> time )</div>
<div class="line"><a name="l02696"></a><span class="lineno"> 2696</span>&#160;{</div>
<div class="line"><a name="l02697"></a><span class="lineno"> 2697</span>&#160;    <span class="keywordtype">bool</span> bitStreamSucceeded;</div>
<div class="line"><a name="l02698"></a><span class="lineno"> 2698</span>&#160;    <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a>* internalPacket;</div>
<div class="line"><a name="l02699"></a><span class="lineno"> 2699</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> tempChar;</div>
<div class="line"><a name="l02700"></a><span class="lineno"> 2700</span>&#160;    <span class="keywordtype">bool</span> hasSplitPacket=<span class="keyword">false</span>;</div>
<div class="line"><a name="l02701"></a><span class="lineno"> 2701</span>&#160;    <span class="keywordtype">bool</span> readSuccess;</div>
<div class="line"><a name="l02702"></a><span class="lineno"> 2702</span>&#160;</div>
<div class="line"><a name="l02703"></a><span class="lineno"> 2703</span>&#160;    <span class="keywordflow">if</span> ( bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a89838c39f170290405c95d78b0553e51" title="Returns the number of bits left in the stream that haven&#39;t been read.">GetNumberOfUnreadBits</a>() &lt; (int) <span class="keyword">sizeof</span>( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1ba0071a22897a0b50f5a414735dc542" title="A unique numerical identifier given to this user message. Used to identify reliable messages on the n...">reliableMessageNumber</a> ) * 8 )</div>
<div class="line"><a name="l02704"></a><span class="lineno"> 2704</span>&#160;        <span class="keywordflow">return</span> 0; <span class="comment">// leftover bits</span></div>
<div class="line"><a name="l02705"></a><span class="lineno"> 2705</span>&#160;</div>
<div class="line"><a name="l02706"></a><span class="lineno"> 2706</span>&#160;    internalPacket = AllocateFromInternalPacketPool();</div>
<div class="line"><a name="l02707"></a><span class="lineno"> 2707</span>&#160;    <span class="keywordflow">if</span> (internalPacket==0)</div>
<div class="line"><a name="l02708"></a><span class="lineno"> 2708</span>&#160;    {</div>
<div class="line"><a name="l02709"></a><span class="lineno"> 2709</span>&#160;        <span class="comment">// Out of memory</span></div>
<div class="line"><a name="l02710"></a><span class="lineno"> 2710</span>&#160;        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(0);</div>
<div class="line"><a name="l02711"></a><span class="lineno"> 2711</span>&#160;        <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l02712"></a><span class="lineno"> 2712</span>&#160;    }</div>
<div class="line"><a name="l02713"></a><span class="lineno"> 2713</span>&#160;    internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a917f67e20c8cf4b48deb98beba7fbf2c" title="Was this packet number used this update to track windowing drops or increases? Each packet number is ...">creationTime</a> = time;</div>
<div class="line"><a name="l02714"></a><span class="lineno"> 2714</span>&#160;</div>
<div class="line"><a name="l02715"></a><span class="lineno"> 2715</span>&#160;    <span class="comment">// (Incoming data may be all zeros due to padding)</span></div>
<div class="line"><a name="l02716"></a><span class="lineno"> 2716</span>&#160;    bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#af64b3663a865840e013f5aef490d891e" title="Align the next write and/or read to a byte boundary.">AlignReadToByteBoundary</a>(); <span class="comment">// Potentially unaligned</span></div>
<div class="line"><a name="l02717"></a><span class="lineno"> 2717</span>&#160;    bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8b621ad8c094410bc4cb44b24720320f" title="Read numberOfBitsToRead bits to the output source.">ReadBits</a>( ( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* ) ( &amp;( tempChar ) ), 3 );</div>
<div class="line"><a name="l02718"></a><span class="lineno"> 2718</span>&#160;    internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> = ( <span class="keyword">const</span> <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7e">PacketReliability</a> ) tempChar;</div>
<div class="line"><a name="l02719"></a><span class="lineno"> 2719</span>&#160;    readSuccess=bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(hasSplitPacket); <span class="comment">// Read 1 bit to indicate if splitPacketCount&gt;0</span></div>
<div class="line"><a name="l02720"></a><span class="lineno"> 2720</span>&#160;    bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#af64b3663a865840e013f5aef490d891e" title="Align the next write and/or read to a byte boundary.">AlignReadToByteBoundary</a>();</div>
<div class="line"><a name="l02721"></a><span class="lineno"> 2721</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> s; bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a7d2337062c1c9bd85b5e0344c6b19893">ReadAlignedVar16</a>((<span class="keywordtype">char</span>*)&amp;s); internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>=s; <span class="comment">// Length of message (2 bytes)</span></div>
<div class="line"><a name="l02722"></a><span class="lineno"> 2722</span>&#160;    <span class="keywordflow">if</span> ( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eabc6ba98e9404532481e43eea39731929" title="The message is sent reliably, but not necessarily in any order. Same overhead as UNRELIABLE.">RELIABLE</a> ||</div>
<div class="line"><a name="l02723"></a><span class="lineno"> 2723</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae1fc3633b353730ff448e5b6675f7085">RELIABLE_SEQUENCED</a> ||</div>
<div class="line"><a name="l02724"></a><span class="lineno"> 2724</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eaff2d39b163bcf3e142744962bfb0849f">RELIABLE_ORDERED</a></div>
<div class="line"><a name="l02725"></a><span class="lineno"> 2725</span>&#160;        <span class="comment">// I don&#39;t write ACK_RECEIPT to the remote system</span></div>
<div class="line"><a name="l02726"></a><span class="lineno"> 2726</span>&#160;<span class="comment">//      ||</span></div>
<div class="line"><a name="l02727"></a><span class="lineno"> 2727</span>&#160;<span class="comment">//      internalPacket-&gt;reliability == RELIABLE_WITH_ACK_RECEIPT ||</span></div>
<div class="line"><a name="l02728"></a><span class="lineno"> 2728</span>&#160;<span class="comment">//      internalPacket-&gt;reliability == RELIABLE_SEQUENCED_WITH_ACK_RECEIPT ||</span></div>
<div class="line"><a name="l02729"></a><span class="lineno"> 2729</span>&#160;<span class="comment">//      internalPacket-&gt;reliability == RELIABLE_ORDERED_WITH_ACK_RECEIPT</span></div>
<div class="line"><a name="l02730"></a><span class="lineno"> 2730</span>&#160;        )</div>
<div class="line"><a name="l02731"></a><span class="lineno"> 2731</span>&#160;        bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1ba0071a22897a0b50f5a414735dc542" title="A unique numerical identifier given to this user message. Used to identify reliable messages on the n...">reliableMessageNumber</a>); <span class="comment">// Message sequence number</span></div>
<div class="line"><a name="l02732"></a><span class="lineno"> 2732</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l02733"></a><span class="lineno"> 2733</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1ba0071a22897a0b50f5a414735dc542" title="A unique numerical identifier given to this user message. Used to identify reliable messages on the n...">reliableMessageNumber</a>=(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a047b6dedcd35244b1575bfcf1cfb6b6c">MessageNumberType</a>)(<span class="keyword">const</span> <a class="code" href="../../df/df2/_native_types_8h.xhtml#a6eb1e68cc391dd753bc8ce896dbb8315">uint32_t</a>)-1;</div>
<div class="line"><a name="l02734"></a><span class="lineno"> 2734</span>&#160;    bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#af64b3663a865840e013f5aef490d891e" title="Align the next write and/or read to a byte boundary.">AlignReadToByteBoundary</a>(); <span class="comment">// Potentially nothing else to Read</span></div>
<div class="line"><a name="l02735"></a><span class="lineno"> 2735</span>&#160;</div>
<div class="line"><a name="l02736"></a><span class="lineno"> 2736</span>&#160;    <span class="keywordflow">if</span> ( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eab6a8eb609ec1adbd5af421cf2acbedf5">UNRELIABLE_SEQUENCED</a> ||</div>
<div class="line"><a name="l02737"></a><span class="lineno"> 2737</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae1fc3633b353730ff448e5b6675f7085">RELIABLE_SEQUENCED</a></div>
<div class="line"><a name="l02738"></a><span class="lineno"> 2738</span>&#160;        )</div>
<div class="line"><a name="l02739"></a><span class="lineno"> 2739</span>&#160;    {</div>
<div class="line"><a name="l02740"></a><span class="lineno"> 2740</span>&#160;        bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a29568680a39b237528fbbf775b1f99e0">sequencingIndex</a>); <span class="comment">// Used for UNRELIABLE_SEQUENCED, RELIABLE_SEQUENCED, RELIABLE_ORDERED.</span></div>
<div class="line"><a name="l02741"></a><span class="lineno"> 2741</span>&#160;    }</div>
<div class="line"><a name="l02742"></a><span class="lineno"> 2742</span>&#160;</div>
<div class="line"><a name="l02743"></a><span class="lineno"> 2743</span>&#160;    <span class="keywordflow">if</span> ( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eab6a8eb609ec1adbd5af421cf2acbedf5">UNRELIABLE_SEQUENCED</a> ||</div>
<div class="line"><a name="l02744"></a><span class="lineno"> 2744</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae1fc3633b353730ff448e5b6675f7085">RELIABLE_SEQUENCED</a> ||</div>
<div class="line"><a name="l02745"></a><span class="lineno"> 2745</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eaff2d39b163bcf3e142744962bfb0849f">RELIABLE_ORDERED</a> ||</div>
<div class="line"><a name="l02746"></a><span class="lineno"> 2746</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> == <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eae94727e3abc9217e16c1c19f1e8f850a" title="Same as RELIABLE_ORDERED_ACK_RECEIPT. The user will also get ID_SND_RECEIPT_ACKED after the message i...">RELIABLE_ORDERED_WITH_ACK_RECEIPT</a></div>
<div class="line"><a name="l02747"></a><span class="lineno"> 2747</span>&#160;        )</div>
<div class="line"><a name="l02748"></a><span class="lineno"> 2748</span>&#160;    {</div>
<div class="line"><a name="l02749"></a><span class="lineno"> 2749</span>&#160;        bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1fabcef98ca0b6e15d6aca4c8ebe862b" title="The ID used as identification for ordering messages. Also included in sequenced messages.">orderingIndex</a>); <span class="comment">// Used for UNRELIABLE_SEQUENCED, RELIABLE_SEQUENCED, RELIABLE_ORDERED. 4 bytes.</span></div>
<div class="line"><a name="l02750"></a><span class="lineno"> 2750</span>&#160;        readSuccess=bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8e9a550e276c5e5c7cdd94c6090f16c8">ReadAlignedVar8</a>((<span class="keywordtype">char</span>*)&amp; internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a>); <span class="comment">// Used for UNRELIABLE_SEQUENCED, RELIABLE_SEQUENCED, RELIABLE_ORDERED. 5 bits needed, Read one byte</span></div>
<div class="line"><a name="l02751"></a><span class="lineno"> 2751</span>&#160;    }</div>
<div class="line"><a name="l02752"></a><span class="lineno"> 2752</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l02753"></a><span class="lineno"> 2753</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a>=0;</div>
<div class="line"><a name="l02754"></a><span class="lineno"> 2754</span>&#160;</div>
<div class="line"><a name="l02755"></a><span class="lineno"> 2755</span>&#160;    <span class="keywordflow">if</span> (hasSplitPacket)</div>
<div class="line"><a name="l02756"></a><span class="lineno"> 2756</span>&#160;    {</div>
<div class="line"><a name="l02757"></a><span class="lineno"> 2757</span>&#160;<span class="comment">//      printf(&quot;Read before\n&quot;);</span></div>
<div class="line"><a name="l02758"></a><span class="lineno"> 2758</span>&#160;<span class="comment">//      bitStream-&gt;PrintBits();</span></div>
<div class="line"><a name="l02759"></a><span class="lineno"> 2759</span>&#160;</div>
<div class="line"><a name="l02760"></a><span class="lineno"> 2760</span>&#160;        bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#abeed6358066f78da4346900c0cea1143">ReadAlignedVar32</a>((<span class="keywordtype">char</span>*)&amp; internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a>); <span class="comment">// Only needed if splitPacketCount&gt;0. 4 bytes</span></div>
<div class="line"><a name="l02761"></a><span class="lineno"> 2761</span>&#160;        bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a7d2337062c1c9bd85b5e0344c6b19893">ReadAlignedVar16</a>((<span class="keywordtype">char</span>*)&amp; internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a01f5ff1a7b5cec5925f0ec5703bfae13" title="The ID of the split packet, if we have split packets. This is the maximum number of split messages we...">splitPacketId</a>); <span class="comment">// Only needed if splitPacketCount&gt;0.</span></div>
<div class="line"><a name="l02762"></a><span class="lineno"> 2762</span>&#160;        readSuccess=bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#abeed6358066f78da4346900c0cea1143">ReadAlignedVar32</a>((<span class="keywordtype">char</span>*)&amp; internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af1e3b0024f2cbbd08d9217457c6721f3" title="If this is a split packet, the index into the array of subsplit packets.">splitPacketIndex</a>); <span class="comment">// Only needed if splitPacketCount&gt;0. 4 bytes</span></div>
<div class="line"><a name="l02763"></a><span class="lineno"> 2763</span>&#160;        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(readSuccess);</div>
<div class="line"><a name="l02764"></a><span class="lineno"> 2764</span>&#160;</div>
<div class="line"><a name="l02765"></a><span class="lineno"> 2765</span>&#160;<span class="comment">//      printf(&quot;Read after\n&quot;);</span></div>
<div class="line"><a name="l02766"></a><span class="lineno"> 2766</span>&#160;<span class="comment">//      bitStream-&gt;PrintBits();</span></div>
<div class="line"><a name="l02767"></a><span class="lineno"> 2767</span>&#160;    }</div>
<div class="line"><a name="l02768"></a><span class="lineno"> 2768</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l02769"></a><span class="lineno"> 2769</span>&#160;    {</div>
<div class="line"><a name="l02770"></a><span class="lineno"> 2770</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a>=0;</div>
<div class="line"><a name="l02771"></a><span class="lineno"> 2771</span>&#160;    }</div>
<div class="line"><a name="l02772"></a><span class="lineno"> 2772</span>&#160;</div>
<div class="line"><a name="l02773"></a><span class="lineno"> 2773</span>&#160;    <span class="keywordflow">if</span> (readSuccess==<span class="keyword">false</span> ||</div>
<div class="line"><a name="l02774"></a><span class="lineno"> 2774</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>==0 ||</div>
<div class="line"><a name="l02775"></a><span class="lineno"> 2775</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a>&gt;=<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eaf49e4584ca35290efd854922f4cad6be">NUMBER_OF_RELIABILITIES</a> ||</div>
<div class="line"><a name="l02776"></a><span class="lineno"> 2776</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a>&gt;=32 || </div>
<div class="line"><a name="l02777"></a><span class="lineno"> 2777</span>&#160;        (hasSplitPacket &amp;&amp; (internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af1e3b0024f2cbbd08d9217457c6721f3" title="If this is a split packet, the index into the array of subsplit packets.">splitPacketIndex</a> &gt;= internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a>)))</div>
<div class="line"><a name="l02778"></a><span class="lineno"> 2778</span>&#160;    {</div>
<div class="line"><a name="l02779"></a><span class="lineno"> 2779</span>&#160;        <span class="comment">// If this assert hits, encoding is garbage</span></div>
<div class="line"><a name="l02780"></a><span class="lineno"> 2780</span>&#160;        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(<span class="stringliteral">&quot;Encoding is garbage&quot;</span> &amp;&amp; 0);</div>
<div class="line"><a name="l02781"></a><span class="lineno"> 2781</span>&#160;        ReleaseToInternalPacketPool( internalPacket );</div>
<div class="line"><a name="l02782"></a><span class="lineno"> 2782</span>&#160;        <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l02783"></a><span class="lineno"> 2783</span>&#160;    }</div>
<div class="line"><a name="l02784"></a><span class="lineno"> 2784</span>&#160;</div>
<div class="line"><a name="l02785"></a><span class="lineno"> 2785</span>&#160;    <span class="comment">// Allocate memory to hold our data</span></div>
<div class="line"><a name="l02786"></a><span class="lineno"> 2786</span>&#160;    AllocInternalPacketData(internalPacket, <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a> ), <span class="keyword">false</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l02787"></a><span class="lineno"> 2787</span>&#160;    <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a> )&lt;<a class="code" href="../../d2/d24/_m_t_u_size_8h.xhtml#a39d9da73f39bf9acabfc9e0ad2ae97c5">MAXIMUM_MTU_SIZE</a>);</div>
<div class="line"><a name="l02788"></a><span class="lineno"> 2788</span>&#160;</div>
<div class="line"><a name="l02789"></a><span class="lineno"> 2789</span>&#160;    <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a> == 0)</div>
<div class="line"><a name="l02790"></a><span class="lineno"> 2790</span>&#160;    {</div>
<div class="line"><a name="l02791"></a><span class="lineno"> 2791</span>&#160;        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(<span class="stringliteral">&quot;Out of memory in ReliabilityLayer::CreateInternalPacketFromBitStream&quot;</span> &amp;&amp; 0);</div>
<div class="line"><a name="l02792"></a><span class="lineno"> 2792</span>&#160;        <a class="code" href="../../d9/d4c/_rak_memory_override_8cpp.xhtml#aa4ec18d5e86e162b63d9b2ded4df5596">notifyOutOfMemory</a>(<a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l02793"></a><span class="lineno"> 2793</span>&#160;        ReleaseToInternalPacketPool( internalPacket );</div>
<div class="line"><a name="l02794"></a><span class="lineno"> 2794</span>&#160;        <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l02795"></a><span class="lineno"> 2795</span>&#160;    }</div>
<div class="line"><a name="l02796"></a><span class="lineno"> 2796</span>&#160;</div>
<div class="line"><a name="l02797"></a><span class="lineno"> 2797</span>&#160;    <span class="comment">// Set the last byte to 0 so if ReadBits does not read a multiple of 8 the last bits are 0&#39;ed out</span></div>
<div class="line"><a name="l02798"></a><span class="lineno"> 2798</span>&#160;    internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>[ <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a> ) - 1 ] = 0;</div>
<div class="line"><a name="l02799"></a><span class="lineno"> 2799</span>&#160;</div>
<div class="line"><a name="l02800"></a><span class="lineno"> 2800</span>&#160;    <span class="comment">// Read the data the packet holds</span></div>
<div class="line"><a name="l02801"></a><span class="lineno"> 2801</span>&#160;    bitStreamSucceeded = bitStream-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8770a882b3b97c3ce51d5b0b1a0315e0" title="Read bits, starting at the next aligned bits.">ReadAlignedBytes</a>( ( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* ) internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>, <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a> ) );</div>
<div class="line"><a name="l02802"></a><span class="lineno"> 2802</span>&#160;</div>
<div class="line"><a name="l02803"></a><span class="lineno"> 2803</span>&#160;    <span class="keywordflow">if</span> ( bitStreamSucceeded == <span class="keyword">false</span> )</div>
<div class="line"><a name="l02804"></a><span class="lineno"> 2804</span>&#160;    {</div>
<div class="line"><a name="l02805"></a><span class="lineno"> 2805</span>&#160;        <span class="comment">// If this hits, most likely the variable buff is too small in RunUpdateCycle in RakPeer.cpp</span></div>
<div class="line"><a name="l02806"></a><span class="lineno"> 2806</span>&#160;        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(<span class="stringliteral">&quot;Couldn&#39;t read all the data&quot;</span>  &amp;&amp; 0);</div>
<div class="line"><a name="l02807"></a><span class="lineno"> 2807</span>&#160;</div>
<div class="line"><a name="l02808"></a><span class="lineno"> 2808</span>&#160;        FreeInternalPacketData(internalPacket, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l02809"></a><span class="lineno"> 2809</span>&#160;        ReleaseToInternalPacketPool( internalPacket );</div>
<div class="line"><a name="l02810"></a><span class="lineno"> 2810</span>&#160;        <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l02811"></a><span class="lineno"> 2811</span>&#160;    }</div>
<div class="line"><a name="l02812"></a><span class="lineno"> 2812</span>&#160;</div>
<div class="line"><a name="l02813"></a><span class="lineno"> 2813</span>&#160;    <span class="keywordflow">return</span> internalPacket;</div>
<div class="line"><a name="l02814"></a><span class="lineno"> 2814</span>&#160;}</div>
<div class="line"><a name="l02815"></a><span class="lineno"> 2815</span>&#160;</div>
<div class="line"><a name="l02816"></a><span class="lineno"> 2816</span>&#160;</div>
<div class="line"><a name="l02817"></a><span class="lineno"> 2817</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02818"></a><span class="lineno"> 2818</span>&#160;<span class="comment">// Get the SHA1 code</span></div>
<div class="line"><a name="l02819"></a><span class="lineno"> 2819</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02820"></a><span class="lineno"> 2820</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::GetSHA1( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> * <span class="keyword">const</span> buffer, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span></div>
<div class="line"><a name="l02821"></a><span class="lineno"> 2821</span>&#160;                               nbytes, <span class="keywordtype">char</span> code[ <a class="code" href="../../db/d31/_d_r___s_h_a1_8h.xhtml#ada325b66c61568fd5151e89881aa368c">SHA1_LENGTH</a> ] )</div>
<div class="line"><a name="l02822"></a><span class="lineno"> 2822</span>&#160;{</div>
<div class="line"><a name="l02823"></a><span class="lineno"> 2823</span>&#160;    <a class="code" href="../../d9/d3f/class_c_s_h_a1.xhtml">CSHA1</a> sha1;</div>
<div class="line"><a name="l02824"></a><span class="lineno"> 2824</span>&#160;</div>
<div class="line"><a name="l02825"></a><span class="lineno"> 2825</span>&#160;    sha1.<a class="code" href="../../d9/d3f/class_c_s_h_a1.xhtml#a2473fd69604fc762000247867830c2a0">Reset</a>();</div>
<div class="line"><a name="l02826"></a><span class="lineno"> 2826</span>&#160;    sha1.<a class="code" href="../../d9/d3f/class_c_s_h_a1.xhtml#a59536022ba64be584aed79c28f78d84c">Update</a>( ( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* ) buffer, nbytes );</div>
<div class="line"><a name="l02827"></a><span class="lineno"> 2827</span>&#160;    sha1.<a class="code" href="../../d9/d3f/class_c_s_h_a1.xhtml#afbdaab3f2a2946d26a6144af3fec5fd8">Final</a>();</div>
<div class="line"><a name="l02828"></a><span class="lineno"> 2828</span>&#160;    memcpy( code, sha1.<a class="code" href="../../d9/d3f/class_c_s_h_a1.xhtml#a736d60c74d29c605c5e62b3095ab7405">GetHash</a>(), <a class="code" href="../../db/d31/_d_r___s_h_a1_8h.xhtml#ada325b66c61568fd5151e89881aa368c">SHA1_LENGTH</a> );</div>
<div class="line"><a name="l02829"></a><span class="lineno"> 2829</span>&#160;}</div>
<div class="line"><a name="l02830"></a><span class="lineno"> 2830</span>&#160;</div>
<div class="line"><a name="l02831"></a><span class="lineno"> 2831</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02832"></a><span class="lineno"> 2832</span>&#160;<span class="comment">// Check the SHA1 code</span></div>
<div class="line"><a name="l02833"></a><span class="lineno"> 2833</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02834"></a><span class="lineno"> 2834</span>&#160;<span class="keywordtype">bool</span> ReliabilityLayer::CheckSHA1( <span class="keywordtype">char</span> code[ SHA1_LENGTH ], <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *</div>
<div class="line"><a name="l02835"></a><span class="lineno"> 2835</span>&#160;                                 <span class="keyword">const</span> buffer, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nbytes )</div>
<div class="line"><a name="l02836"></a><span class="lineno"> 2836</span>&#160;{</div>
<div class="line"><a name="l02837"></a><span class="lineno"> 2837</span>&#160;    <span class="keywordtype">char</span> code2[ <a class="code" href="../../db/d31/_d_r___s_h_a1_8h.xhtml#ada325b66c61568fd5151e89881aa368c">SHA1_LENGTH</a> ];</div>
<div class="line"><a name="l02838"></a><span class="lineno"> 2838</span>&#160;    GetSHA1( buffer, nbytes, code2 );</div>
<div class="line"><a name="l02839"></a><span class="lineno"> 2839</span>&#160;</div>
<div class="line"><a name="l02840"></a><span class="lineno"> 2840</span>&#160;    <span class="keywordflow">for</span> ( <span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="../../db/d31/_d_r___s_h_a1_8h.xhtml#ada325b66c61568fd5151e89881aa368c">SHA1_LENGTH</a>; i++ )</div>
<div class="line"><a name="l02841"></a><span class="lineno"> 2841</span>&#160;        <span class="keywordflow">if</span> ( code[ i ] != code2[ i ] )</div>
<div class="line"><a name="l02842"></a><span class="lineno"> 2842</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l02843"></a><span class="lineno"> 2843</span>&#160;</div>
<div class="line"><a name="l02844"></a><span class="lineno"> 2844</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l02845"></a><span class="lineno"> 2845</span>&#160;}</div>
<div class="line"><a name="l02846"></a><span class="lineno"> 2846</span>&#160;</div>
<div class="line"><a name="l02847"></a><span class="lineno"> 2847</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l02848"></a><span class="lineno"> 2848</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02849"></a><span class="lineno"> 2849</span>&#160;<span class="comment">// Search the specified list for sequenced packets on the specified ordering</span></div>
<div class="line"><a name="l02850"></a><span class="lineno"> 2850</span>&#160;<span class="comment">// stream, optionally skipping those with splitPacketId, and delete them</span></div>
<div class="line"><a name="l02851"></a><span class="lineno"> 2851</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02852"></a><span class="lineno"> 2852</span>&#160;<span class="comment">void ReliabilityLayer::DeleteSequencedPacketsInList( unsigned char orderingChannel, DataStructures::List&lt;InternalPacket*&gt;&amp;theList, int splitPacketId )</span></div>
<div class="line"><a name="l02853"></a><span class="lineno"> 2853</span>&#160;<span class="comment">{</span></div>
<div class="line"><a name="l02854"></a><span class="lineno"> 2854</span>&#160;<span class="comment">    unsigned i = 0;</span></div>
<div class="line"><a name="l02855"></a><span class="lineno"> 2855</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l02856"></a><span class="lineno"> 2856</span>&#160;<span class="comment">    while ( i &lt; theList.Size() )</span></div>
<div class="line"><a name="l02857"></a><span class="lineno"> 2857</span>&#160;<span class="comment">    {</span></div>
<div class="line"><a name="l02858"></a><span class="lineno"> 2858</span>&#160;<span class="comment">        if ( ( </span></div>
<div class="line"><a name="l02859"></a><span class="lineno"> 2859</span>&#160;<span class="comment">            theList[ i ]-&gt;reliability == RELIABLE_SEQUENCED ||</span></div>
<div class="line"><a name="l02860"></a><span class="lineno"> 2860</span>&#160;<span class="comment">            theList[ i ]-&gt;reliability == UNRELIABLE_SEQUENCED </span></div>
<div class="line"><a name="l02861"></a><span class="lineno"> 2861</span>&#160;<span class="comment">//          ||</span></div>
<div class="line"><a name="l02862"></a><span class="lineno"> 2862</span>&#160;<span class="comment">//          theList[ i ]-&gt;reliability == RELIABLE_SEQUENCED_WITH_ACK_RECEIPT ||</span></div>
<div class="line"><a name="l02863"></a><span class="lineno"> 2863</span>&#160;<span class="comment">//          theList[ i ]-&gt;reliability == UNRELIABLE_SEQUENCED_WITH_ACK_RECEIPT</span></div>
<div class="line"><a name="l02864"></a><span class="lineno"> 2864</span>&#160;<span class="comment">            ) &amp;&amp;</span></div>
<div class="line"><a name="l02865"></a><span class="lineno"> 2865</span>&#160;<span class="comment">            theList[ i ]-&gt;orderingChannel == orderingChannel &amp;&amp; ( splitPacketId == -1 || theList[ i ]-&gt;splitPacketId != (unsigned int) splitPacketId ) )</span></div>
<div class="line"><a name="l02866"></a><span class="lineno"> 2866</span>&#160;<span class="comment">        {</span></div>
<div class="line"><a name="l02867"></a><span class="lineno"> 2867</span>&#160;<span class="comment">            InternalPacket * internalPacket = theList[ i ];</span></div>
<div class="line"><a name="l02868"></a><span class="lineno"> 2868</span>&#160;<span class="comment">            theList.RemoveAtIndex( i );</span></div>
<div class="line"><a name="l02869"></a><span class="lineno"> 2869</span>&#160;<span class="comment">            FreeInternalPacketData(internalPacket, _FILE_AND_LINE_ );</span></div>
<div class="line"><a name="l02870"></a><span class="lineno"> 2870</span>&#160;<span class="comment">            ReleaseToInternalPacketPool( internalPacket );</span></div>
<div class="line"><a name="l02871"></a><span class="lineno"> 2871</span>&#160;<span class="comment">        }</span></div>
<div class="line"><a name="l02872"></a><span class="lineno"> 2872</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l02873"></a><span class="lineno"> 2873</span>&#160;<span class="comment">        else</span></div>
<div class="line"><a name="l02874"></a><span class="lineno"> 2874</span>&#160;<span class="comment">            i++;</span></div>
<div class="line"><a name="l02875"></a><span class="lineno"> 2875</span>&#160;<span class="comment">    }</span></div>
<div class="line"><a name="l02876"></a><span class="lineno"> 2876</span>&#160;<span class="comment">}</span></div>
<div class="line"><a name="l02877"></a><span class="lineno"> 2877</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l02878"></a><span class="lineno"> 2878</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02879"></a><span class="lineno"> 2879</span>&#160;<span class="comment">// Search the specified list for sequenced packets with a value less than orderingIndex and delete them</span></div>
<div class="line"><a name="l02880"></a><span class="lineno"> 2880</span>&#160;<span class="comment">// Note - I added functionality so you can use the Queue as a list (in this case for searching) but it is less efficient to do so than a regular list</span></div>
<div class="line"><a name="l02881"></a><span class="lineno"> 2881</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02882"></a><span class="lineno"> 2882</span>&#160;<span class="comment">void ReliabilityLayer::DeleteSequencedPacketsInList( unsigned char orderingChannel, DataStructures::Queue&lt;InternalPacket*&gt;&amp;theList )</span></div>
<div class="line"><a name="l02883"></a><span class="lineno"> 2883</span>&#160;<span class="comment">{</span></div>
<div class="line"><a name="l02884"></a><span class="lineno"> 2884</span>&#160;<span class="comment">    InternalPacket * internalPacket;</span></div>
<div class="line"><a name="l02885"></a><span class="lineno"> 2885</span>&#160;<span class="comment">    int listSize = theList.Size();</span></div>
<div class="line"><a name="l02886"></a><span class="lineno"> 2886</span>&#160;<span class="comment">    int i = 0;</span></div>
<div class="line"><a name="l02887"></a><span class="lineno"> 2887</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l02888"></a><span class="lineno"> 2888</span>&#160;<span class="comment">    while ( i &lt; listSize )</span></div>
<div class="line"><a name="l02889"></a><span class="lineno"> 2889</span>&#160;<span class="comment">    {</span></div>
<div class="line"><a name="l02890"></a><span class="lineno"> 2890</span>&#160;<span class="comment">        if ( (</span></div>
<div class="line"><a name="l02891"></a><span class="lineno"> 2891</span>&#160;<span class="comment">            theList[ i ]-&gt;reliability == RELIABLE_SEQUENCED ||</span></div>
<div class="line"><a name="l02892"></a><span class="lineno"> 2892</span>&#160;<span class="comment">            theList[ i ]-&gt;reliability == UNRELIABLE_SEQUENCED</span></div>
<div class="line"><a name="l02893"></a><span class="lineno"> 2893</span>&#160;<span class="comment">//          ||</span></div>
<div class="line"><a name="l02894"></a><span class="lineno"> 2894</span>&#160;<span class="comment">//          theList[ i ]-&gt;reliability == RELIABLE_SEQUENCED_WITH_ACK_RECEIPT ||</span></div>
<div class="line"><a name="l02895"></a><span class="lineno"> 2895</span>&#160;<span class="comment">//          theList[ i ]-&gt;reliability == UNRELIABLE_SEQUENCED_WITH_ACK_RECEIPT</span></div>
<div class="line"><a name="l02896"></a><span class="lineno"> 2896</span>&#160;<span class="comment">            ) &amp;&amp; theList[ i ]-&gt;orderingChannel == orderingChannel )</span></div>
<div class="line"><a name="l02897"></a><span class="lineno"> 2897</span>&#160;<span class="comment">        {</span></div>
<div class="line"><a name="l02898"></a><span class="lineno"> 2898</span>&#160;<span class="comment">            internalPacket = theList[ i ];</span></div>
<div class="line"><a name="l02899"></a><span class="lineno"> 2899</span>&#160;<span class="comment">            theList.RemoveAtIndex( i );</span></div>
<div class="line"><a name="l02900"></a><span class="lineno"> 2900</span>&#160;<span class="comment">            FreeInternalPacketData(internalPacket, _FILE_AND_LINE_ );</span></div>
<div class="line"><a name="l02901"></a><span class="lineno"> 2901</span>&#160;<span class="comment">            ReleaseToInternalPacketPool( internalPacket );</span></div>
<div class="line"><a name="l02902"></a><span class="lineno"> 2902</span>&#160;<span class="comment">            listSize--;</span></div>
<div class="line"><a name="l02903"></a><span class="lineno"> 2903</span>&#160;<span class="comment">        }</span></div>
<div class="line"><a name="l02904"></a><span class="lineno"> 2904</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l02905"></a><span class="lineno"> 2905</span>&#160;<span class="comment">        else</span></div>
<div class="line"><a name="l02906"></a><span class="lineno"> 2906</span>&#160;<span class="comment">            i++;</span></div>
<div class="line"><a name="l02907"></a><span class="lineno"> 2907</span>&#160;<span class="comment">    }</span></div>
<div class="line"><a name="l02908"></a><span class="lineno"> 2908</span>&#160;<span class="comment">}</span></div>
<div class="line"><a name="l02909"></a><span class="lineno"> 2909</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l02910"></a><span class="lineno"> 2910</span>&#160;</div>
<div class="line"><a name="l02911"></a><span class="lineno"> 2911</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02912"></a><span class="lineno"> 2912</span>&#160;<span class="comment">// Returns true if newPacketOrderingIndex is older than the waitingForPacketOrderingIndex</span></div>
<div class="line"><a name="l02913"></a><span class="lineno"> 2913</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02914"></a><span class="lineno"> 2914</span>&#160;<span class="keywordtype">bool</span> ReliabilityLayer::IsOlderOrderedPacket( <a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">OrderingIndexType</a> newPacketOrderingIndex, <a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">OrderingIndexType</a> waitingForPacketOrderingIndex )</div>
<div class="line"><a name="l02915"></a><span class="lineno"> 2915</span>&#160;{</div>
<div class="line"><a name="l02916"></a><span class="lineno"> 2916</span>&#160;    <a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">OrderingIndexType</a> maxRange = (<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a6fa1eeef8ba656471611c0b68595fbb4">OrderingIndexType</a>) (<span class="keyword">const</span> <a class="code" href="../../df/df2/_native_types_8h.xhtml#a6eb1e68cc391dd753bc8ce896dbb8315">uint32_t</a>)-1;</div>
<div class="line"><a name="l02917"></a><span class="lineno"> 2917</span>&#160;</div>
<div class="line"><a name="l02918"></a><span class="lineno"> 2918</span>&#160;    <span class="keywordflow">if</span> ( waitingForPacketOrderingIndex &gt; maxRange/(<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">OrderingIndexType</a>)2 )</div>
<div class="line"><a name="l02919"></a><span class="lineno"> 2919</span>&#160;    {</div>
<div class="line"><a name="l02920"></a><span class="lineno"> 2920</span>&#160;        <span class="keywordflow">if</span> ( newPacketOrderingIndex &gt;= waitingForPacketOrderingIndex - maxRange/(<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">OrderingIndexType</a>)2+(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a6fa1eeef8ba656471611c0b68595fbb4">OrderingIndexType</a>)1 &amp;&amp; newPacketOrderingIndex &lt; waitingForPacketOrderingIndex )</div>
<div class="line"><a name="l02921"></a><span class="lineno"> 2921</span>&#160;        {</div>
<div class="line"><a name="l02922"></a><span class="lineno"> 2922</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l02923"></a><span class="lineno"> 2923</span>&#160;        }</div>
<div class="line"><a name="l02924"></a><span class="lineno"> 2924</span>&#160;    }</div>
<div class="line"><a name="l02925"></a><span class="lineno"> 2925</span>&#160;</div>
<div class="line"><a name="l02926"></a><span class="lineno"> 2926</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l02927"></a><span class="lineno"> 2927</span>&#160;        <span class="keywordflow">if</span> ( newPacketOrderingIndex &gt;= ( <a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">OrderingIndexType</a> ) ( waitingForPacketOrderingIndex - (( <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a6fa1eeef8ba656471611c0b68595fbb4">OrderingIndexType</a> ) maxRange/(<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">OrderingIndexType</a>)2+(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a6fa1eeef8ba656471611c0b68595fbb4">OrderingIndexType</a>)1) ) ||</div>
<div class="line"><a name="l02928"></a><span class="lineno"> 2928</span>&#160;            newPacketOrderingIndex &lt; waitingForPacketOrderingIndex )</div>
<div class="line"><a name="l02929"></a><span class="lineno"> 2929</span>&#160;        {</div>
<div class="line"><a name="l02930"></a><span class="lineno"> 2930</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l02931"></a><span class="lineno"> 2931</span>&#160;        }</div>
<div class="line"><a name="l02932"></a><span class="lineno"> 2932</span>&#160;</div>
<div class="line"><a name="l02933"></a><span class="lineno"> 2933</span>&#160;        <span class="comment">// Old packet</span></div>
<div class="line"><a name="l02934"></a><span class="lineno"> 2934</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l02935"></a><span class="lineno"> 2935</span>&#160;}</div>
<div class="line"><a name="l02936"></a><span class="lineno"> 2936</span>&#160;</div>
<div class="line"><a name="l02937"></a><span class="lineno"> 2937</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02938"></a><span class="lineno"> 2938</span>&#160;<span class="comment">// Split the passed packet into chunks under MTU_SIZEbytes (including headers) and save those new chunks</span></div>
<div class="line"><a name="l02939"></a><span class="lineno"> 2939</span>&#160;<span class="comment">// Optimized version</span></div>
<div class="line"><a name="l02940"></a><span class="lineno"> 2940</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l02941"></a><span class="lineno"> 2941</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::SplitPacket( <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *internalPacket )</div>
<div class="line"><a name="l02942"></a><span class="lineno"> 2942</span>&#160;{</div>
<div class="line"><a name="l02943"></a><span class="lineno"> 2943</span>&#160;    <span class="comment">// Doing all sizes in bytes in this function so I don&#39;t write partial bytes with split packets</span></div>
<div class="line"><a name="l02944"></a><span class="lineno"> 2944</span>&#160;    internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a> = 1; <span class="comment">// This causes GetMessageHeaderLengthBits to account for the split packet header</span></div>
<div class="line"><a name="l02945"></a><span class="lineno"> 2945</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> headerLength = (<span class="keywordtype">unsigned</span> int) <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>( GetMessageHeaderLengthBits( internalPacket ) );</div>
<div class="line"><a name="l02946"></a><span class="lineno"> 2946</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dataByteLength = (<span class="keywordtype">unsigned</span> int) <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a> );</div>
<div class="line"><a name="l02947"></a><span class="lineno"> 2947</span>&#160;    <span class="keywordtype">int</span> maximumSendBlockBytes, byteOffset, bytesToSend;</div>
<div class="line"><a name="l02948"></a><span class="lineno"> 2948</span>&#160;    <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#afe219620b084e1150e61e8ff98f7c855">SplitPacketIndexType</a> splitPacketIndex;</div>
<div class="line"><a name="l02949"></a><span class="lineno"> 2949</span>&#160;    <span class="keywordtype">int</span> i;</div>
<div class="line"><a name="l02950"></a><span class="lineno"> 2950</span>&#160;    <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> **internalPacketArray;</div>
<div class="line"><a name="l02951"></a><span class="lineno"> 2951</span>&#160;</div>
<div class="line"><a name="l02952"></a><span class="lineno"> 2952</span>&#160;    maximumSendBlockBytes = GetMaxDatagramSizeExcludingMessageHeaderBytes() - <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(GetMaxMessageHeaderLengthBits());</div>
<div class="line"><a name="l02953"></a><span class="lineno"> 2953</span>&#160;</div>
<div class="line"><a name="l02954"></a><span class="lineno"> 2954</span>&#160;    <span class="comment">// Calculate how many packets we need to create</span></div>
<div class="line"><a name="l02955"></a><span class="lineno"> 2955</span>&#160;    internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a> = ( ( dataByteLength - 1 ) / ( maximumSendBlockBytes ) + 1 );</div>
<div class="line"><a name="l02956"></a><span class="lineno"> 2956</span>&#160;</div>
<div class="line"><a name="l02957"></a><span class="lineno"> 2957</span>&#160;    <span class="comment">// Optimization</span></div>
<div class="line"><a name="l02958"></a><span class="lineno"> 2958</span>&#160;    <span class="comment">// internalPacketArray = SLNet::OP_NEW&lt;InternalPacket*&gt;(internalPacket-&gt;splitPacketCount, _FILE_AND_LINE_ );</span></div>
<div class="line"><a name="l02959"></a><span class="lineno"> 2959</span>&#160;    <span class="keywordtype">bool</span> usedAlloca=<span class="keyword">false</span>;</div>
<div class="line"><a name="l02960"></a><span class="lineno"> 2960</span>&#160;<span class="preprocessor">#if USE_ALLOCA==1</span></div>
<div class="line"><a name="l02961"></a><span class="lineno"> 2961</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">if</span> (<span class="keyword">sizeof</span>( <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a>* ) * internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a> &lt; <a class="code" href="../../d8/db0/defines_8h.xhtml#a6bf2bc2d4ea6acbcd9e3da316d56cd95" title="Maximum (stack) size to use with _alloca before using new and delete instead.">MAX_ALLOCA_STACK_ALLOCATION</a>)</div>
<div class="line"><a name="l02962"></a><span class="lineno"> 2962</span>&#160;    {</div>
<div class="line"><a name="l02963"></a><span class="lineno"> 2963</span>&#160;        internalPacketArray = ( <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a>** ) alloca( <span class="keyword">sizeof</span>( <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a>* ) * internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a> );</div>
<div class="line"><a name="l02964"></a><span class="lineno"> 2964</span>&#160;        usedAlloca=<span class="keyword">true</span>;</div>
<div class="line"><a name="l02965"></a><span class="lineno"> 2965</span>&#160;    }</div>
<div class="line"><a name="l02966"></a><span class="lineno"> 2966</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l02967"></a><span class="lineno"> 2967</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l02968"></a><span class="lineno"> 2968</span>&#160;<span class="preprocessor"></span>        internalPacketArray = (<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a>**) <a class="code" href="../../d9/d4c/_rak_memory_override_8cpp.xhtml#aebeb2e4754399ea3e2c7af3dd9bbe8c3">rakMalloc_Ex</a>( <span class="keyword">sizeof</span>(<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a>*) * internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l02969"></a><span class="lineno"> 2969</span>&#160;</div>
<div class="line"><a name="l02970"></a><span class="lineno"> 2970</span>&#160;    <span class="keywordflow">for</span> ( i = 0; i &lt; ( int ) internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a>; i++ )</div>
<div class="line"><a name="l02971"></a><span class="lineno"> 2971</span>&#160;    {</div>
<div class="line"><a name="l02972"></a><span class="lineno"> 2972</span>&#160;        internalPacketArray[ i ] = AllocateFromInternalPacketPool();</div>
<div class="line"><a name="l02973"></a><span class="lineno"> 2973</span>&#160;</div>
<div class="line"><a name="l02974"></a><span class="lineno"> 2974</span>&#160;        <span class="comment">//internalPacketArray[ i ] = (InternalPacket*) alloca( sizeof( InternalPacket ) );</span></div>
<div class="line"><a name="l02975"></a><span class="lineno"> 2975</span>&#160;        <span class="comment">//      internalPacketArray[ i ] = sendPacketSet[internalPacket-&gt;priority].WriteLock();</span></div>
<div class="line"><a name="l02976"></a><span class="lineno"> 2976</span>&#160;        *internalPacketArray[ i ]=*internalPacket;</div>
<div class="line"><a name="l02977"></a><span class="lineno"> 2977</span>&#160;        internalPacketArray[ i ]-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a4f7fcca56594cded46930e105e175339">messageNumberAssigned</a>=<span class="keyword">false</span>;</div>
<div class="line"><a name="l02978"></a><span class="lineno"> 2978</span>&#160;</div>
<div class="line"><a name="l02979"></a><span class="lineno"> 2979</span>&#160;        <span class="keywordflow">if</span> (i!=0)</div>
<div class="line"><a name="l02980"></a><span class="lineno"> 2980</span>&#160;            internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a399a8e9109710d94c36c3dca946ce8a2" title="Identifies the order in which this number was sent. Used locally.">messageInternalOrder</a> = internalOrderIndex++;</div>
<div class="line"><a name="l02981"></a><span class="lineno"> 2981</span>&#160;    }</div>
<div class="line"><a name="l02982"></a><span class="lineno"> 2982</span>&#160;</div>
<div class="line"><a name="l02983"></a><span class="lineno"> 2983</span>&#160;    <span class="comment">// This identifies which packet this is in the set</span></div>
<div class="line"><a name="l02984"></a><span class="lineno"> 2984</span>&#160;    splitPacketIndex = 0;</div>
<div class="line"><a name="l02985"></a><span class="lineno"> 2985</span>&#160;</div>
<div class="line"><a name="l02986"></a><span class="lineno"> 2986</span>&#160;    <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#d4/d28/struct_s_l_net_1_1_internal_packet_ref_counted_data" title="Used in InternalPacket when pointing to sharedDataBlock, rather than allocating itself.">InternalPacketRefCountedData</a> *refCounter=0;</div>
<div class="line"><a name="l02987"></a><span class="lineno"> 2987</span>&#160;</div>
<div class="line"><a name="l02988"></a><span class="lineno"> 2988</span>&#160;    <span class="comment">// Do a loop to send out all the packets</span></div>
<div class="line"><a name="l02989"></a><span class="lineno"> 2989</span>&#160;    <span class="keywordflow">do</span></div>
<div class="line"><a name="l02990"></a><span class="lineno"> 2990</span>&#160;    {</div>
<div class="line"><a name="l02991"></a><span class="lineno"> 2991</span>&#160;        byteOffset = splitPacketIndex * maximumSendBlockBytes;</div>
<div class="line"><a name="l02992"></a><span class="lineno"> 2992</span>&#160;        bytesToSend = dataByteLength - byteOffset;</div>
<div class="line"><a name="l02993"></a><span class="lineno"> 2993</span>&#160;</div>
<div class="line"><a name="l02994"></a><span class="lineno"> 2994</span>&#160;        <span class="keywordflow">if</span> ( bytesToSend &gt; maximumSendBlockBytes )</div>
<div class="line"><a name="l02995"></a><span class="lineno"> 2995</span>&#160;            bytesToSend = maximumSendBlockBytes;</div>
<div class="line"><a name="l02996"></a><span class="lineno"> 2996</span>&#160;</div>
<div class="line"><a name="l02997"></a><span class="lineno"> 2997</span>&#160;        <span class="comment">// Copy over our chunk of data</span></div>
<div class="line"><a name="l02998"></a><span class="lineno"> 2998</span>&#160;</div>
<div class="line"><a name="l02999"></a><span class="lineno"> 2999</span>&#160;        AllocInternalPacketData(internalPacketArray[ splitPacketIndex ], &amp;refCounter, internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>, internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a> + byteOffset);</div>
<div class="line"><a name="l03000"></a><span class="lineno"> 3000</span>&#160;        <span class="comment">//      internalPacketArray[ splitPacketIndex ]-&gt;data = (unsigned char*) rakMalloc_Ex( bytesToSend, _FILE_AND_LINE_ );</span></div>
<div class="line"><a name="l03001"></a><span class="lineno"> 3001</span>&#160;        <span class="comment">//      memcpy( internalPacketArray[ splitPacketIndex ]-&gt;data, internalPacket-&gt;data + byteOffset, bytesToSend );</span></div>
<div class="line"><a name="l03002"></a><span class="lineno"> 3002</span>&#160;</div>
<div class="line"><a name="l03003"></a><span class="lineno"> 3003</span>&#160;        <span class="keywordflow">if</span> ( bytesToSend != maximumSendBlockBytes )</div>
<div class="line"><a name="l03004"></a><span class="lineno"> 3004</span>&#160;            internalPacketArray[ splitPacketIndex ]-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a> = internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a> - splitPacketIndex * ( maximumSendBlockBytes &lt;&lt; 3 );</div>
<div class="line"><a name="l03005"></a><span class="lineno"> 3005</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l03006"></a><span class="lineno"> 3006</span>&#160;            internalPacketArray[ splitPacketIndex ]-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a> = bytesToSend &lt;&lt; 3;</div>
<div class="line"><a name="l03007"></a><span class="lineno"> 3007</span>&#160;</div>
<div class="line"><a name="l03008"></a><span class="lineno"> 3008</span>&#160;        internalPacketArray[ splitPacketIndex ]-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af1e3b0024f2cbbd08d9217457c6721f3" title="If this is a split packet, the index into the array of subsplit packets.">splitPacketIndex</a> = splitPacketIndex;</div>
<div class="line"><a name="l03009"></a><span class="lineno"> 3009</span>&#160;        internalPacketArray[ splitPacketIndex ]-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a01f5ff1a7b5cec5925f0ec5703bfae13" title="The ID of the split packet, if we have split packets. This is the maximum number of split messages we...">splitPacketId</a> = splitPacketId;</div>
<div class="line"><a name="l03010"></a><span class="lineno"> 3010</span>&#160;        internalPacketArray[ splitPacketIndex ]-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a> = internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a>;</div>
<div class="line"><a name="l03011"></a><span class="lineno"> 3011</span>&#160;        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(internalPacketArray[ splitPacketIndex ]-&gt;dataBitLength&lt;<a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(<a class="code" href="../../d2/d24/_m_t_u_size_8h.xhtml#a39d9da73f39bf9acabfc9e0ad2ae97c5">MAXIMUM_MTU_SIZE</a>));</div>
<div class="line"><a name="l03012"></a><span class="lineno"> 3012</span>&#160;    } <span class="keywordflow">while</span> ( ++splitPacketIndex &lt; internalPacket-&gt;splitPacketCount );</div>
<div class="line"><a name="l03013"></a><span class="lineno"> 3013</span>&#160;</div>
<div class="line"><a name="l03014"></a><span class="lineno"> 3014</span>&#160;    splitPacketId++; <span class="comment">// It&#39;s ok if this wraps to 0</span></div>
<div class="line"><a name="l03015"></a><span class="lineno"> 3015</span>&#160;</div>
<div class="line"><a name="l03016"></a><span class="lineno"> 3016</span>&#160;    <span class="comment">//  InternalPacket *workingPacket;</span></div>
<div class="line"><a name="l03017"></a><span class="lineno"> 3017</span>&#160;</div>
<div class="line"><a name="l03018"></a><span class="lineno"> 3018</span>&#160;    <span class="comment">// Tell the heap we are going to push a list of elements where each element in the list follows the heap order</span></div>
<div class="line"><a name="l03019"></a><span class="lineno"> 3019</span>&#160;    <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(outgoingPacketBuffer.Size()==0 || outgoingPacketBuffer.Peek()-&gt;dataBitLength&lt;<a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(<a class="code" href="../../d2/d24/_m_t_u_size_8h.xhtml#a39d9da73f39bf9acabfc9e0ad2ae97c5">MAXIMUM_MTU_SIZE</a>));</div>
<div class="line"><a name="l03020"></a><span class="lineno"> 3020</span>&#160;    outgoingPacketBuffer.StartSeries();</div>
<div class="line"><a name="l03021"></a><span class="lineno"> 3021</span>&#160;</div>
<div class="line"><a name="l03022"></a><span class="lineno"> 3022</span>&#160;    <span class="comment">// Copy all the new packets into the split packet list</span></div>
<div class="line"><a name="l03023"></a><span class="lineno"> 3023</span>&#160;    <span class="keywordflow">for</span> ( i = 0; i &lt; ( int ) internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a>; i++ )</div>
<div class="line"><a name="l03024"></a><span class="lineno"> 3024</span>&#160;    {</div>
<div class="line"><a name="l03025"></a><span class="lineno"> 3025</span>&#160;        internalPacketArray[ i ]-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ad8c98f322a49f5765b9960743907a750">headerLength</a>=headerLength;</div>
<div class="line"><a name="l03026"></a><span class="lineno"> 3026</span>&#160;        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(internalPacketArray[ i ]-&gt;dataBitLength&lt;<a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(<a class="code" href="../../d2/d24/_m_t_u_size_8h.xhtml#a39d9da73f39bf9acabfc9e0ad2ae97c5">MAXIMUM_MTU_SIZE</a>));</div>
<div class="line"><a name="l03027"></a><span class="lineno"> 3027</span>&#160;        AddToUnreliableLinkedList(internalPacketArray[ i ]);</div>
<div class="line"><a name="l03028"></a><span class="lineno"> 3028</span>&#160;        <span class="comment">//      sendPacketSet[ internalPacket-&gt;priority ].Push( internalPacketArray[ i ], _FILE_AND_LINE_  );</span></div>
<div class="line"><a name="l03029"></a><span class="lineno"> 3029</span>&#160;        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(internalPacketArray[ i ]-&gt;dataBitLength&lt;<a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(<a class="code" href="../../d2/d24/_m_t_u_size_8h.xhtml#a39d9da73f39bf9acabfc9e0ad2ae97c5">MAXIMUM_MTU_SIZE</a>));</div>
<div class="line"><a name="l03030"></a><span class="lineno"> 3030</span>&#160;        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(internalPacketArray[ i ]-&gt;messageNumberAssigned==<span class="keyword">false</span>);</div>
<div class="line"><a name="l03031"></a><span class="lineno"> 3031</span>&#160;        outgoingPacketBuffer.PushSeries(GetNextWeight(internalPacketArray[ i ]-&gt;priority), internalPacketArray[ i ], <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l03032"></a><span class="lineno"> 3032</span>&#160;        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(outgoingPacketBuffer.Size()==0 || outgoingPacketBuffer.Peek()-&gt;dataBitLength&lt;<a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(<a class="code" href="../../d2/d24/_m_t_u_size_8h.xhtml#a39d9da73f39bf9acabfc9e0ad2ae97c5">MAXIMUM_MTU_SIZE</a>));</div>
<div class="line"><a name="l03033"></a><span class="lineno"> 3033</span>&#160;        statistics.messageInSendBuffer[(int)internalPacketArray[ i ]-&gt;priority]++;</div>
<div class="line"><a name="l03034"></a><span class="lineno"> 3034</span>&#160;        statistics.bytesInSendBuffer[(int)(<span class="keywordtype">int</span>)internalPacketArray[ i ]-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a47e8d1384096dcfbc7925b41e3e7c84e" title="The priority level of this packet.">priority</a>]+=(double) <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacketArray[ i ]-&gt;dataBitLength);</div>
<div class="line"><a name="l03035"></a><span class="lineno"> 3035</span>&#160;        <span class="comment">//      workingPacket=sendPacketSet[internalPacket-&gt;priority].WriteLock();</span></div>
<div class="line"><a name="l03036"></a><span class="lineno"> 3036</span>&#160;        <span class="comment">//      memcpy(workingPacket, internalPacketArray[ i ], sizeof(InternalPacket));</span></div>
<div class="line"><a name="l03037"></a><span class="lineno"> 3037</span>&#160;        <span class="comment">//      sendPacketSet[internalPacket-&gt;priority].WriteUnlock();</span></div>
<div class="line"><a name="l03038"></a><span class="lineno"> 3038</span>&#160;    }</div>
<div class="line"><a name="l03039"></a><span class="lineno"> 3039</span>&#160;</div>
<div class="line"><a name="l03040"></a><span class="lineno"> 3040</span>&#160;    <span class="comment">// Do not delete, original is referenced by all split packets to avoid numerous allocations. See AllocInternalPacketData above</span></div>
<div class="line"><a name="l03041"></a><span class="lineno"> 3041</span>&#160;    <span class="comment">//  FreeInternalPacketData(internalPacket, _FILE_AND_LINE_ );</span></div>
<div class="line"><a name="l03042"></a><span class="lineno"> 3042</span>&#160;    ReleaseToInternalPacketPool( internalPacket );</div>
<div class="line"><a name="l03043"></a><span class="lineno"> 3043</span>&#160;</div>
<div class="line"><a name="l03044"></a><span class="lineno"> 3044</span>&#160;    <span class="keywordflow">if</span> (usedAlloca==<span class="keyword">false</span>)</div>
<div class="line"><a name="l03045"></a><span class="lineno"> 3045</span>&#160;        <a class="code" href="../../d9/d4c/_rak_memory_override_8cpp.xhtml#ab91fbe0570bf501cd97a53c6cffcef8f">rakFree_Ex</a>(internalPacketArray, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l03046"></a><span class="lineno"> 3046</span>&#160;}</div>
<div class="line"><a name="l03047"></a><span class="lineno"> 3047</span>&#160;</div>
<div class="line"><a name="l03048"></a><span class="lineno"> 3048</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03049"></a><span class="lineno"> 3049</span>&#160;<span class="comment">// Insert a packet into the split packet list</span></div>
<div class="line"><a name="l03050"></a><span class="lineno"> 3050</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03051"></a><span class="lineno"> 3051</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::InsertIntoSplitPacketList( <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> * internalPacket, <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> time )</div>
<div class="line"><a name="l03052"></a><span class="lineno"> 3052</span>&#160;{</div>
<div class="line"><a name="l03053"></a><span class="lineno"> 3053</span>&#160;    <span class="keywordtype">bool</span> objectExists;</div>
<div class="line"><a name="l03054"></a><span class="lineno"> 3054</span>&#160;    <span class="keywordtype">unsigned</span> index;</div>
<div class="line"><a name="l03055"></a><span class="lineno"> 3055</span>&#160;    <span class="comment">// Find in splitPacketChannelList if a SplitPacketChannel with this splitPacketId was already allocated. If not, allocate and insert the channel into the list.</span></div>
<div class="line"><a name="l03056"></a><span class="lineno"> 3056</span>&#160;    index=splitPacketChannelList.GetIndexFromKey(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a01f5ff1a7b5cec5925f0ec5703bfae13" title="The ID of the split packet, if we have split packets. This is the maximum number of split messages we...">splitPacketId</a>, &amp;objectExists);</div>
<div class="line"><a name="l03057"></a><span class="lineno"> 3057</span>&#160;    <span class="keywordflow">if</span> (objectExists==<span class="keyword">false</span>)</div>
<div class="line"><a name="l03058"></a><span class="lineno"> 3058</span>&#160;    {</div>
<div class="line"><a name="l03059"></a><span class="lineno"> 3059</span>&#160;        <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#d6/d4d/struct_s_l_net_1_1_split_packet_channel">SplitPacketChannel</a> *newChannel = SLNet::OP_NEW&lt;SplitPacketChannel&gt;( __FILE__, __LINE__ );</div>
<div class="line"><a name="l03060"></a><span class="lineno"> 3060</span>&#160;<span class="preprocessor">#if PREALLOCATE_LARGE_MESSAGES==1</span></div>
<div class="line"><a name="l03061"></a><span class="lineno"> 3061</span>&#160;<span class="preprocessor"></span>        index=splitPacketChannelList.Insert(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a01f5ff1a7b5cec5925f0ec5703bfae13" title="The ID of the split packet, if we have split packets. This is the maximum number of split messages we...">splitPacketId</a>, newChannel, <span class="keyword">true</span>, __FILE__,__LINE__);</div>
<div class="line"><a name="l03062"></a><span class="lineno"> 3062</span>&#160;        newChannel-&gt;returnedPacket=CreateInternalPacketCopy( internalPacket, 0, 0, time );</div>
<div class="line"><a name="l03063"></a><span class="lineno"> 3063</span>&#160;        newChannel-&gt;gotFirstPacket=<span class="keyword">false</span>;</div>
<div class="line"><a name="l03064"></a><span class="lineno"> 3064</span>&#160;        newChannel-&gt;splitPacketsArrived=0;</div>
<div class="line"><a name="l03065"></a><span class="lineno"> 3065</span>&#160;        AllocInternalPacketData(newChannel-&gt;returnedPacket, <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>*internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a> ),  <span class="keyword">false</span>, __FILE__, __LINE__ );</div>
<div class="line"><a name="l03066"></a><span class="lineno"> 3066</span>&#160;        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(newChannel-&gt;returnedPacket-&gt;data);</div>
<div class="line"><a name="l03067"></a><span class="lineno"> 3067</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l03068"></a><span class="lineno"> 3068</span>&#160;<span class="preprocessor"></span>        newChannel-&gt;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a8a1a70c02601a2bc0fcfd7b0e3f87b9d">firstPacket</a>=0;</div>
<div class="line"><a name="l03069"></a><span class="lineno"> 3069</span>&#160;        index=splitPacketChannelList.Insert(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a01f5ff1a7b5cec5925f0ec5703bfae13" title="The ID of the split packet, if we have split packets. This is the maximum number of split messages we...">splitPacketId</a>, newChannel, <span class="keyword">true</span>, __FILE__,__LINE__);</div>
<div class="line"><a name="l03070"></a><span class="lineno"> 3070</span>&#160;        <span class="comment">// Preallocate to the final size, to avoid runtime copies</span></div>
<div class="line"><a name="l03071"></a><span class="lineno"> 3071</span>&#160;        newChannel-&gt;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4103677c8e4a800964837b6449f27e2b">splitPacketList</a>.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a3ccff322ccbf8eca0214d2c39693abc0" title="Preallocate the list, so it needs fewer reallocations at runtime.">Preallocate</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a>, __FILE__,__LINE__);</div>
<div class="line"><a name="l03072"></a><span class="lineno"> 3072</span>&#160;</div>
<div class="line"><a name="l03073"></a><span class="lineno"> 3073</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l03074"></a><span class="lineno"> 3074</span>&#160;<span class="preprocessor"></span>    }</div>
<div class="line"><a name="l03075"></a><span class="lineno"> 3075</span>&#160;</div>
<div class="line"><a name="l03076"></a><span class="lineno"> 3076</span>&#160;<span class="preprocessor">#if PREALLOCATE_LARGE_MESSAGES==1</span></div>
<div class="line"><a name="l03077"></a><span class="lineno"> 3077</span>&#160;<span class="preprocessor"></span>    splitPacketChannelList[index]-&gt;lastUpdateTime=time;</div>
<div class="line"><a name="l03078"></a><span class="lineno"> 3078</span>&#160;    splitPacketChannelList[index]-&gt;splitPacketsArrived++;</div>
<div class="line"><a name="l03079"></a><span class="lineno"> 3079</span>&#160;    splitPacketChannelList[index]-&gt;returnedPacket-&gt;dataBitLength+=internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>;</div>
<div class="line"><a name="l03080"></a><span class="lineno"> 3080</span>&#160;</div>
<div class="line"><a name="l03081"></a><span class="lineno"> 3081</span>&#160;    <span class="keywordtype">bool</span> dealloc;</div>
<div class="line"><a name="l03082"></a><span class="lineno"> 3082</span>&#160;    <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af1e3b0024f2cbbd08d9217457c6721f3" title="If this is a split packet, the index into the array of subsplit packets.">splitPacketIndex</a>==0)</div>
<div class="line"><a name="l03083"></a><span class="lineno"> 3083</span>&#160;    {</div>
<div class="line"><a name="l03084"></a><span class="lineno"> 3084</span>&#160;        splitPacketChannelList[index]-&gt;gotFirstPacket=<span class="keyword">true</span>;</div>
<div class="line"><a name="l03085"></a><span class="lineno"> 3085</span>&#160;        splitPacketChannelList[index]-&gt;stride=<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>);</div>
<div class="line"><a name="l03086"></a><span class="lineno"> 3086</span>&#160;</div>
<div class="line"><a name="l03087"></a><span class="lineno"> 3087</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j=0; j &lt; splitPacketChannelList[index]-&gt;splitPacketList.Size(); j++)</div>
<div class="line"><a name="l03088"></a><span class="lineno"> 3088</span>&#160;        {</div>
<div class="line"><a name="l03089"></a><span class="lineno"> 3089</span>&#160;            memcpy(splitPacketChannelList[index]-&gt;returnedPacket-&gt;data+internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af1e3b0024f2cbbd08d9217457c6721f3" title="If this is a split packet, the index into the array of subsplit packets.">splitPacketIndex</a>*splitPacketChannelList[index]-&gt;stride, internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>, (<span class="keywordtype">size_t</span>) <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>));</div>
<div class="line"><a name="l03090"></a><span class="lineno"> 3090</span>&#160;            FreeInternalPacketData(splitPacketChannelList[index]-&gt;splitPacketList[j], __FILE__, __LINE__ );</div>
<div class="line"><a name="l03091"></a><span class="lineno"> 3091</span>&#160;            ReleaseToInternalPacketPool(splitPacketChannelList[index]-&gt;splitPacketList[j]);</div>
<div class="line"><a name="l03092"></a><span class="lineno"> 3092</span>&#160;        }</div>
<div class="line"><a name="l03093"></a><span class="lineno"> 3093</span>&#160;</div>
<div class="line"><a name="l03094"></a><span class="lineno"> 3094</span>&#160;        memcpy(splitPacketChannelList[index]-&gt;returnedPacket-&gt;data, internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>, (<span class="keywordtype">size_t</span>) <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>));</div>
<div class="line"><a name="l03095"></a><span class="lineno"> 3095</span>&#160;        splitPacketChannelList[index]-&gt;splitPacketList.Clear(<span class="keyword">true</span>,__FILE__,__LINE__);</div>
<div class="line"><a name="l03096"></a><span class="lineno"> 3096</span>&#160;        dealloc=<span class="keyword">true</span>;</div>
<div class="line"><a name="l03097"></a><span class="lineno"> 3097</span>&#160;    }</div>
<div class="line"><a name="l03098"></a><span class="lineno"> 3098</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l03099"></a><span class="lineno"> 3099</span>&#160;    {</div>
<div class="line"><a name="l03100"></a><span class="lineno"> 3100</span>&#160;        <span class="keywordflow">if</span> (splitPacketChannelList[index]-&gt;gotFirstPacket==<span class="keyword">true</span>)</div>
<div class="line"><a name="l03101"></a><span class="lineno"> 3101</span>&#160;        {</div>
<div class="line"><a name="l03102"></a><span class="lineno"> 3102</span>&#160;            memcpy(splitPacketChannelList[index]-&gt;returnedPacket-&gt;data+internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af1e3b0024f2cbbd08d9217457c6721f3" title="If this is a split packet, the index into the array of subsplit packets.">splitPacketIndex</a>*splitPacketChannelList[index]-&gt;stride, internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>, (<span class="keywordtype">size_t</span>) <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>));</div>
<div class="line"><a name="l03103"></a><span class="lineno"> 3103</span>&#160;            dealloc=<span class="keyword">true</span>;</div>
<div class="line"><a name="l03104"></a><span class="lineno"> 3104</span>&#160;        }</div>
<div class="line"><a name="l03105"></a><span class="lineno"> 3105</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l03106"></a><span class="lineno"> 3106</span>&#160;        {</div>
<div class="line"><a name="l03107"></a><span class="lineno"> 3107</span>&#160;            splitPacketChannelList[index]-&gt;splitPacketList.Push(internalPacket,__FILE__,__LINE__);</div>
<div class="line"><a name="l03108"></a><span class="lineno"> 3108</span>&#160;            dealloc=<span class="keyword">false</span>;</div>
<div class="line"><a name="l03109"></a><span class="lineno"> 3109</span>&#160;        }</div>
<div class="line"><a name="l03110"></a><span class="lineno"> 3110</span>&#160;    }</div>
<div class="line"><a name="l03111"></a><span class="lineno"> 3111</span>&#160;</div>
<div class="line"><a name="l03112"></a><span class="lineno"> 3112</span>&#160;    <span class="keywordflow">if</span> (splitPacketChannelList[index]-&gt;gotFirstPacket==<span class="keyword">true</span> &amp;&amp;</div>
<div class="line"><a name="l03113"></a><span class="lineno"> 3113</span>&#160;        splitMessageProgressInterval &amp;&amp;</div>
<div class="line"><a name="l03114"></a><span class="lineno"> 3114</span>&#160;        <span class="comment">//      splitPacketChannelList[index]-&gt;firstPacket &amp;&amp;</span></div>
<div class="line"><a name="l03115"></a><span class="lineno"> 3115</span>&#160;        <span class="comment">//      splitPacketChannelList[index]-&gt;splitPacketList.Size()!=splitPacketChannelList[index]-&gt;firstPacket-&gt;splitPacketCount &amp;&amp;</span></div>
<div class="line"><a name="l03116"></a><span class="lineno"> 3116</span>&#160;        <span class="comment">//      (splitPacketChannelList[index]-&gt;splitPacketList.Size()%splitMessageProgressInterval)==0</span></div>
<div class="line"><a name="l03117"></a><span class="lineno"> 3117</span>&#160;        splitPacketChannelList[index]-&gt;gotFirstPacket &amp;&amp;</div>
<div class="line"><a name="l03118"></a><span class="lineno"> 3118</span>&#160;        splitPacketChannelList[index]-&gt;splitPacketsArrived!=splitPacketChannelList[index]-&gt;returnedPacket-&gt;splitPacketCount &amp;&amp;</div>
<div class="line"><a name="l03119"></a><span class="lineno"> 3119</span>&#160;        (splitPacketChannelList[index]-&gt;splitPacketsArrived%splitMessageProgressInterval)==0</div>
<div class="line"><a name="l03120"></a><span class="lineno"> 3120</span>&#160;        )</div>
<div class="line"><a name="l03121"></a><span class="lineno"> 3121</span>&#160;    {</div>
<div class="line"><a name="l03122"></a><span class="lineno"> 3122</span>&#160;        <span class="comment">// Return ID_DOWNLOAD_PROGRESS</span></div>
<div class="line"><a name="l03123"></a><span class="lineno"> 3123</span>&#160;        <span class="comment">// Write splitPacketIndex (SplitPacketIndexType)</span></div>
<div class="line"><a name="l03124"></a><span class="lineno"> 3124</span>&#160;        <span class="comment">// Write splitPacketCount (SplitPacketIndexType)</span></div>
<div class="line"><a name="l03125"></a><span class="lineno"> 3125</span>&#160;        <span class="comment">// Write byteLength (4)</span></div>
<div class="line"><a name="l03126"></a><span class="lineno"> 3126</span>&#160;        <span class="comment">// Write data, splitPacketChannelList[index]-&gt;splitPacketList[0]-&gt;data</span></div>
<div class="line"><a name="l03127"></a><span class="lineno"> 3127</span>&#160;        <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *progressIndicator = AllocateFromInternalPacketPool();</div>
<div class="line"><a name="l03128"></a><span class="lineno"> 3128</span>&#160;        <span class="comment">//      unsigned int len = sizeof(MessageID) + sizeof(unsigned int)*2 + sizeof(unsigned int) + (unsigned int) BITS_TO_BYTES(splitPacketChannelList[index]-&gt;firstPacket-&gt;dataBitLength);</span></div>
<div class="line"><a name="l03129"></a><span class="lineno"> 3129</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> l = (<span class="keywordtype">unsigned</span> int) splitPacketChannelList[index]-&gt;stride;</div>
<div class="line"><a name="l03130"></a><span class="lineno"> 3130</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> len = <span class="keyword">sizeof</span>(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a5b5b9eb3be9ad636af02da44b718a75f" title="First byte of a network message.">MessageID</a>) + <span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)*2 + <span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span> int) + l;</div>
<div class="line"><a name="l03131"></a><span class="lineno"> 3131</span>&#160;        AllocInternalPacketData(progressIndicator, len,  <span class="keyword">false</span>, __FILE__, __LINE__ );</div>
<div class="line"><a name="l03132"></a><span class="lineno"> 3132</span>&#160;        progressIndicator-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>=<a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(len);</div>
<div class="line"><a name="l03133"></a><span class="lineno"> 3133</span>&#160;        progressIndicator-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>[0]=(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a5b5b9eb3be9ad636af02da44b718a75f" title="First byte of a network message.">MessageID</a>)<a class="code" href="../../d6/d83/_message_identifiers_8h.xhtml#ac1b471af280629f5ace02e586d5bcfd3a2a5c6d1fc237792f3c6972041d971684">ID_DOWNLOAD_PROGRESS</a>;</div>
<div class="line"><a name="l03134"></a><span class="lineno"> 3134</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> temp;</div>
<div class="line"><a name="l03135"></a><span class="lineno"> 3135</span>&#160;        <span class="comment">//  temp=splitPacketChannelList[index]-&gt;splitPacketList.Size();</span></div>
<div class="line"><a name="l03136"></a><span class="lineno"> 3136</span>&#160;        temp=splitPacketChannelList[index]-&gt;splitPacketsArrived;</div>
<div class="line"><a name="l03137"></a><span class="lineno"> 3137</span>&#160;        memcpy(progressIndicator-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>+<span class="keyword">sizeof</span>(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a5b5b9eb3be9ad636af02da44b718a75f" title="First byte of a network message.">MessageID</a>), &amp;temp, <span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>));</div>
<div class="line"><a name="l03138"></a><span class="lineno"> 3138</span>&#160;        temp=(<span class="keywordtype">unsigned</span> int)internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a>;</div>
<div class="line"><a name="l03139"></a><span class="lineno"> 3139</span>&#160;        memcpy(progressIndicator-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>+<span class="keyword">sizeof</span>(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a5b5b9eb3be9ad636af02da44b718a75f" title="First byte of a network message.">MessageID</a>)+<span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span> int)*1, &amp;temp, <span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>));</div>
<div class="line"><a name="l03140"></a><span class="lineno"> 3140</span>&#160;        <span class="comment">//      temp=(unsigned int) BITS_TO_BYTES(splitPacketChannelList[index]-&gt;firstPacket-&gt;dataBitLength);</span></div>
<div class="line"><a name="l03141"></a><span class="lineno"> 3141</span>&#160;        temp=(<span class="keywordtype">unsigned</span> int) <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(l);</div>
<div class="line"><a name="l03142"></a><span class="lineno"> 3142</span>&#160;        memcpy(progressIndicator-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>+<span class="keyword">sizeof</span>(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a5b5b9eb3be9ad636af02da44b718a75f" title="First byte of a network message.">MessageID</a>)+<span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)*2, &amp;temp, <span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>));</div>
<div class="line"><a name="l03143"></a><span class="lineno"> 3143</span>&#160;        <span class="comment">//memcpy(progressIndicator-&gt;data+sizeof(MessageID)+sizeof(unsigned int)*3, splitPacketChannelList[index]-&gt;firstPacket-&gt;data, (size_t) BITS_TO_BYTES(splitPacketChannelList[index]-&gt;firstPacket-&gt;dataBitLength));</span></div>
<div class="line"><a name="l03144"></a><span class="lineno"> 3144</span>&#160;        memcpy(progressIndicator-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>+<span class="keyword">sizeof</span>(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a5b5b9eb3be9ad636af02da44b718a75f" title="First byte of a network message.">MessageID</a>)+<span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)*3, splitPacketChannelList[index]-&gt;returnedPacket-&gt;data, (<span class="keywordtype">size_t</span>) <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(l));</div>
<div class="line"><a name="l03145"></a><span class="lineno"> 3145</span>&#160;    }</div>
<div class="line"><a name="l03146"></a><span class="lineno"> 3146</span>&#160;</div>
<div class="line"><a name="l03147"></a><span class="lineno"> 3147</span>&#160;    <span class="keywordflow">if</span> (dealloc)</div>
<div class="line"><a name="l03148"></a><span class="lineno"> 3148</span>&#160;    {</div>
<div class="line"><a name="l03149"></a><span class="lineno"> 3149</span>&#160;        FreeInternalPacketData(internalPacket, __FILE__, __LINE__ );</div>
<div class="line"><a name="l03150"></a><span class="lineno"> 3150</span>&#160;        ReleaseToInternalPacketPool(internalPacket);</div>
<div class="line"><a name="l03151"></a><span class="lineno"> 3151</span>&#160;    }</div>
<div class="line"><a name="l03152"></a><span class="lineno"> 3152</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l03153"></a><span class="lineno"> 3153</span>&#160;<span class="preprocessor"></span>    <span class="comment">// Insert the packet into the SplitPacketChannel</span></div>
<div class="line"><a name="l03154"></a><span class="lineno"> 3154</span>&#160;    splitPacketChannelList[index]-&gt;splitPacketList.Insert(internalPacket, __FILE__, __LINE__ );</div>
<div class="line"><a name="l03155"></a><span class="lineno"> 3155</span>&#160;    splitPacketChannelList[index]-&gt;lastUpdateTime=time;</div>
<div class="line"><a name="l03156"></a><span class="lineno"> 3156</span>&#160;</div>
<div class="line"><a name="l03157"></a><span class="lineno"> 3157</span>&#160;    <span class="comment">// If the index is 0, then this is the first packet. Record this so it can be returned to the user with download progress</span></div>
<div class="line"><a name="l03158"></a><span class="lineno"> 3158</span>&#160;    <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af1e3b0024f2cbbd08d9217457c6721f3" title="If this is a split packet, the index into the array of subsplit packets.">splitPacketIndex</a>==0)</div>
<div class="line"><a name="l03159"></a><span class="lineno"> 3159</span>&#160;        splitPacketChannelList[index]-&gt;firstPacket=internalPacket;</div>
<div class="line"><a name="l03160"></a><span class="lineno"> 3160</span>&#160;    </div>
<div class="line"><a name="l03161"></a><span class="lineno"> 3161</span>&#160;    <span class="comment">// Return download progress if we have the first packet, the list is not complete, and there are enough packets to justify it</span></div>
<div class="line"><a name="l03162"></a><span class="lineno"> 3162</span>&#160;    <span class="keywordflow">if</span> (splitMessageProgressInterval &amp;&amp;</div>
<div class="line"><a name="l03163"></a><span class="lineno"> 3163</span>&#160;        splitPacketChannelList[index]-&gt;firstPacket &amp;&amp;</div>
<div class="line"><a name="l03164"></a><span class="lineno"> 3164</span>&#160;        splitPacketChannelList[index]-&gt;splitPacketList.Size()!=splitPacketChannelList[index]-&gt;firstPacket-&gt;splitPacketCount &amp;&amp;</div>
<div class="line"><a name="l03165"></a><span class="lineno"> 3165</span>&#160;        (splitPacketChannelList[index]-&gt;splitPacketList.Size()%splitMessageProgressInterval)==0)</div>
<div class="line"><a name="l03166"></a><span class="lineno"> 3166</span>&#160;    {</div>
<div class="line"><a name="l03167"></a><span class="lineno"> 3167</span>&#160;        <span class="comment">// Return ID_DOWNLOAD_PROGRESS</span></div>
<div class="line"><a name="l03168"></a><span class="lineno"> 3168</span>&#160;        <span class="comment">// Write splitPacketIndex (SplitPacketIndexType)</span></div>
<div class="line"><a name="l03169"></a><span class="lineno"> 3169</span>&#160;        <span class="comment">// Write splitPacketCount (SplitPacketIndexType)</span></div>
<div class="line"><a name="l03170"></a><span class="lineno"> 3170</span>&#160;        <span class="comment">// Write byteLength (4)</span></div>
<div class="line"><a name="l03171"></a><span class="lineno"> 3171</span>&#160;        <span class="comment">// Write data, splitPacketChannelList[index]-&gt;splitPacketList[0]-&gt;data</span></div>
<div class="line"><a name="l03172"></a><span class="lineno"> 3172</span>&#160;        <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *progressIndicator = AllocateFromInternalPacketPool();</div>
<div class="line"><a name="l03173"></a><span class="lineno"> 3173</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> length = <span class="keyword">sizeof</span>(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a5b5b9eb3be9ad636af02da44b718a75f" title="First byte of a network message.">MessageID</a>) + <span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)*2 + <span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span> int) + (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>) <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(splitPacketChannelList[index]-&gt;firstPacket-&gt;dataBitLength);</div>
<div class="line"><a name="l03174"></a><span class="lineno"> 3174</span>&#160;        AllocInternalPacketData(progressIndicator, length,  <span class="keyword">false</span>, __FILE__, __LINE__ );</div>
<div class="line"><a name="l03175"></a><span class="lineno"> 3175</span>&#160;        progressIndicator-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>=<a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(length);</div>
<div class="line"><a name="l03176"></a><span class="lineno"> 3176</span>&#160;        progressIndicator-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>[0]=(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a5b5b9eb3be9ad636af02da44b718a75f" title="First byte of a network message.">MessageID</a>)<a class="code" href="../../d6/d83/_message_identifiers_8h.xhtml#ac1b471af280629f5ace02e586d5bcfd3a2a5c6d1fc237792f3c6972041d971684">ID_DOWNLOAD_PROGRESS</a>;</div>
<div class="line"><a name="l03177"></a><span class="lineno"> 3177</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> temp;</div>
<div class="line"><a name="l03178"></a><span class="lineno"> 3178</span>&#160;        temp=splitPacketChannelList[index]-&gt;splitPacketList.Size();</div>
<div class="line"><a name="l03179"></a><span class="lineno"> 3179</span>&#160;        memcpy(progressIndicator-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>+<span class="keyword">sizeof</span>(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a5b5b9eb3be9ad636af02da44b718a75f" title="First byte of a network message.">MessageID</a>), &amp;temp, <span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>));</div>
<div class="line"><a name="l03180"></a><span class="lineno"> 3180</span>&#160;        temp=(<span class="keywordtype">unsigned</span> int)internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a>;</div>
<div class="line"><a name="l03181"></a><span class="lineno"> 3181</span>&#160;        memcpy(progressIndicator-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>+<span class="keyword">sizeof</span>(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a5b5b9eb3be9ad636af02da44b718a75f" title="First byte of a network message.">MessageID</a>)+<span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span> int)*1, &amp;temp, <span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>));</div>
<div class="line"><a name="l03182"></a><span class="lineno"> 3182</span>&#160;        temp=(<span class="keywordtype">unsigned</span> int) <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(splitPacketChannelList[index]-&gt;firstPacket-&gt;dataBitLength);</div>
<div class="line"><a name="l03183"></a><span class="lineno"> 3183</span>&#160;        memcpy(progressIndicator-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>+<span class="keyword">sizeof</span>(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a5b5b9eb3be9ad636af02da44b718a75f" title="First byte of a network message.">MessageID</a>)+<span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)*2, &amp;temp, <span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>));</div>
<div class="line"><a name="l03184"></a><span class="lineno"> 3184</span>&#160;</div>
<div class="line"><a name="l03185"></a><span class="lineno"> 3185</span>&#160;        memcpy(progressIndicator-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>+<span class="keyword">sizeof</span>(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a5b5b9eb3be9ad636af02da44b718a75f" title="First byte of a network message.">MessageID</a>)+<span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)*3, splitPacketChannelList[index]-&gt;firstPacket-&gt;data, (<span class="keywordtype">size_t</span>) <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(splitPacketChannelList[index]-&gt;firstPacket-&gt;dataBitLength));</div>
<div class="line"><a name="l03186"></a><span class="lineno"> 3186</span>&#160;        outputQueue.Push(progressIndicator, __FILE__, __LINE__ );</div>
<div class="line"><a name="l03187"></a><span class="lineno"> 3187</span>&#160;    }</div>
<div class="line"><a name="l03188"></a><span class="lineno"> 3188</span>&#160;</div>
<div class="line"><a name="l03189"></a><span class="lineno"> 3189</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l03190"></a><span class="lineno"> 3190</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l03191"></a><span class="lineno"> 3191</span>&#160;</div>
<div class="line"><a name="l03192"></a><span class="lineno"> 3192</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03193"></a><span class="lineno"> 3193</span>&#160;<span class="comment">// Take all split chunks with the specified splitPacketId and try to</span></div>
<div class="line"><a name="l03194"></a><span class="lineno"> 3194</span>&#160;<span class="comment">//reconstruct a packet.  If we can, allocate and return it.  Otherwise return 0</span></div>
<div class="line"><a name="l03195"></a><span class="lineno"> 3195</span>&#160;<span class="comment">// Optimized version</span></div>
<div class="line"><a name="l03196"></a><span class="lineno"> 3196</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03197"></a><span class="lineno"> 3197</span>&#160;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> * ReliabilityLayer::BuildPacketFromSplitPacketList( <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#d6/d4d/struct_s_l_net_1_1_split_packet_channel">SplitPacketChannel</a> *splitPacketChannel, <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> time )</div>
<div class="line"><a name="l03198"></a><span class="lineno"> 3198</span>&#160;{</div>
<div class="line"><a name="l03199"></a><span class="lineno"> 3199</span>&#160;<span class="preprocessor">#if PREALLOCATE_LARGE_MESSAGES==1</span></div>
<div class="line"><a name="l03200"></a><span class="lineno"> 3200</span>&#160;<span class="preprocessor"></span>    <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *returnedPacket=splitPacketChannel-&gt;returnedPacket;</div>
<div class="line"><a name="l03201"></a><span class="lineno"> 3201</span>&#160;    <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a79772d09451f784e87bec85694fad1ed">SLNet::OP_DELETE</a>(splitPacketChannel, __FILE__, __LINE__);</div>
<div class="line"><a name="l03202"></a><span class="lineno"> 3202</span>&#160;    (void) time;</div>
<div class="line"><a name="l03203"></a><span class="lineno"> 3203</span>&#160;    <span class="keywordflow">return</span> returnedPacket;</div>
<div class="line"><a name="l03204"></a><span class="lineno"> 3204</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l03205"></a><span class="lineno"> 3205</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j;</div>
<div class="line"><a name="l03206"></a><span class="lineno"> 3206</span>&#160;    <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> * internalPacket, *splitPacket;</div>
<div class="line"><a name="l03207"></a><span class="lineno"> 3207</span>&#160;    <span class="comment">// int splitPacketPartLength;</span></div>
<div class="line"><a name="l03208"></a><span class="lineno"> 3208</span>&#160;</div>
<div class="line"><a name="l03209"></a><span class="lineno"> 3209</span>&#160;    <span class="comment">// Reconstruct</span></div>
<div class="line"><a name="l03210"></a><span class="lineno"> 3210</span>&#160;    internalPacket = CreateInternalPacketCopy( splitPacketChannel-&gt;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4103677c8e4a800964837b6449f27e2b">splitPacketList</a>[0], 0, 0, time );</div>
<div class="line"><a name="l03211"></a><span class="lineno"> 3211</span>&#160;    internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>=0;</div>
<div class="line"><a name="l03212"></a><span class="lineno"> 3212</span>&#160;    <span class="keywordflow">for</span> (j=0; j &lt; splitPacketChannel-&gt;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4103677c8e4a800964837b6449f27e2b">splitPacketList</a>.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); j++)</div>
<div class="line"><a name="l03213"></a><span class="lineno"> 3213</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>+=splitPacketChannel-&gt;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4103677c8e4a800964837b6449f27e2b">splitPacketList</a>[j]-&gt;dataBitLength;</div>
<div class="line"><a name="l03214"></a><span class="lineno"> 3214</span>&#160;    <span class="comment">// splitPacketPartLength=BITS_TO_BYTES(splitPacketChannel-&gt;firstPacket-&gt;dataBitLength);</span></div>
<div class="line"><a name="l03215"></a><span class="lineno"> 3215</span>&#160;</div>
<div class="line"><a name="l03216"></a><span class="lineno"> 3216</span>&#160;    internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a> = (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*) <a class="code" href="../../d9/d4c/_rak_memory_override_8cpp.xhtml#aebeb2e4754399ea3e2c7af3dd9bbe8c3">rakMalloc_Ex</a>( (<span class="keywordtype">size_t</span>) <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>( internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a> ), <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l03217"></a><span class="lineno"> 3217</span>&#160;    internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a923316ee89426c1e6078d9a4c83c4061">allocationScheme</a>=<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ab9f3530490f074239c783495e4d176a0a8a25cc0b17e6ab9242ba0e5dc9461a0b" title="Data is allocated using rakMalloc. Just free it.">InternalPacket::NORMAL</a>;</div>
<div class="line"><a name="l03218"></a><span class="lineno"> 3218</span>&#160;</div>
<div class="line"><a name="l03219"></a><span class="lineno"> 3219</span>&#160;    <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> offset = 0;</div>
<div class="line"><a name="l03220"></a><span class="lineno"> 3220</span>&#160;    <span class="keywordflow">for</span> (j=0; j &lt; splitPacketChannel-&gt;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4103677c8e4a800964837b6449f27e2b">splitPacketList</a>.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); j++)</div>
<div class="line"><a name="l03221"></a><span class="lineno"> 3221</span>&#160;    {</div>
<div class="line"><a name="l03222"></a><span class="lineno"> 3222</span>&#160;        splitPacket=splitPacketChannel-&gt;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4103677c8e4a800964837b6449f27e2b">splitPacketList</a>[j];</div>
<div class="line"><a name="l03223"></a><span class="lineno"> 3223</span>&#160;        memcpy(internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a> + <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(offset), splitPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>, (<span class="keywordtype">size_t</span>)<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(splitPacketChannel-&gt;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4103677c8e4a800964837b6449f27e2b">splitPacketList</a>[j]-&gt;dataBitLength));</div>
<div class="line"><a name="l03224"></a><span class="lineno"> 3224</span>&#160;        offset += splitPacketChannel-&gt;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4103677c8e4a800964837b6449f27e2b">splitPacketList</a>[j]-&gt;dataBitLength;</div>
<div class="line"><a name="l03225"></a><span class="lineno"> 3225</span>&#160;    }</div>
<div class="line"><a name="l03226"></a><span class="lineno"> 3226</span>&#160;</div>
<div class="line"><a name="l03227"></a><span class="lineno"> 3227</span>&#160;    <span class="keywordflow">for</span> (j=0; j &lt; splitPacketChannel-&gt;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4103677c8e4a800964837b6449f27e2b">splitPacketList</a>.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); j++)</div>
<div class="line"><a name="l03228"></a><span class="lineno"> 3228</span>&#160;    {</div>
<div class="line"><a name="l03229"></a><span class="lineno"> 3229</span>&#160;        FreeInternalPacketData(splitPacketChannel-&gt;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4103677c8e4a800964837b6449f27e2b">splitPacketList</a>[j], <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l03230"></a><span class="lineno"> 3230</span>&#160;        ReleaseToInternalPacketPool(splitPacketChannel-&gt;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4103677c8e4a800964837b6449f27e2b">splitPacketList</a>[j]);</div>
<div class="line"><a name="l03231"></a><span class="lineno"> 3231</span>&#160;    }</div>
<div class="line"><a name="l03232"></a><span class="lineno"> 3232</span>&#160;    <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a79772d09451f784e87bec85694fad1ed">SLNet::OP_DELETE</a>(splitPacketChannel, __FILE__, __LINE__);</div>
<div class="line"><a name="l03233"></a><span class="lineno"> 3233</span>&#160;</div>
<div class="line"><a name="l03234"></a><span class="lineno"> 3234</span>&#160;    <span class="keywordflow">return</span> internalPacket;</div>
<div class="line"><a name="l03235"></a><span class="lineno"> 3235</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l03236"></a><span class="lineno"> 3236</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l03237"></a><span class="lineno"> 3237</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03238"></a><span class="lineno"> 3238</span>&#160;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> * ReliabilityLayer::BuildPacketFromSplitPacketList( <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#ada9d06cc4d3df50fbf844c6725cd7230">SplitPacketIdType</a> inSplitPacketId, <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> time,</div>
<div class="line"><a name="l03239"></a><span class="lineno"> 3239</span>&#160;                                                                  <a class="code" href="../../d1/dde/class_s_l_net_1_1_rak_net_socket2.xhtml">RakNetSocket2</a> *s, <a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml" title="Network address for a system.">SystemAddress</a> &amp;systemAddress, <a class="code" href="../../df/dd4/class_s_l_net_1_1_rak_net_random.xhtml">RakNetRandom</a> *rnr, </div>
<div class="line"><a name="l03240"></a><span class="lineno"> 3240</span>&#160;                                                                  <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a> &amp;updateBitStream)</div>
<div class="line"><a name="l03241"></a><span class="lineno"> 3241</span>&#160;{</div>
<div class="line"><a name="l03242"></a><span class="lineno"> 3242</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i;</div>
<div class="line"><a name="l03243"></a><span class="lineno"> 3243</span>&#160;    <span class="keywordtype">bool</span> objectExists;</div>
<div class="line"><a name="l03244"></a><span class="lineno"> 3244</span>&#160;    <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#d6/d4d/struct_s_l_net_1_1_split_packet_channel">SplitPacketChannel</a> *splitPacketChannel;</div>
<div class="line"><a name="l03245"></a><span class="lineno"> 3245</span>&#160;    <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> * internalPacket;</div>
<div class="line"><a name="l03246"></a><span class="lineno"> 3246</span>&#160;</div>
<div class="line"><a name="l03247"></a><span class="lineno"> 3247</span>&#160;    <span class="comment">// Find in splitPacketChannelList the SplitPacketChannel with this splitPacketId</span></div>
<div class="line"><a name="l03248"></a><span class="lineno"> 3248</span>&#160;    i=splitPacketChannelList.GetIndexFromKey(inSplitPacketId, &amp;objectExists);</div>
<div class="line"><a name="l03249"></a><span class="lineno"> 3249</span>&#160;    splitPacketChannel=splitPacketChannelList[i];</div>
<div class="line"><a name="l03250"></a><span class="lineno"> 3250</span>&#160;    </div>
<div class="line"><a name="l03251"></a><span class="lineno"> 3251</span>&#160;<span class="preprocessor">#if PREALLOCATE_LARGE_MESSAGES==1</span></div>
<div class="line"><a name="l03252"></a><span class="lineno"> 3252</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">if</span> (splitPacketChannel-&gt;splitPacketsArrived==splitPacketChannel-&gt;returnedPacket-&gt;splitPacketCount)</div>
<div class="line"><a name="l03253"></a><span class="lineno"> 3253</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l03254"></a><span class="lineno"> 3254</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">if</span> (splitPacketChannel-&gt;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4103677c8e4a800964837b6449f27e2b">splitPacketList</a>.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>()==splitPacketChannel-&gt;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4103677c8e4a800964837b6449f27e2b">splitPacketList</a>[0]-&gt;splitPacketCount)</div>
<div class="line"><a name="l03255"></a><span class="lineno"> 3255</span>&#160;#endif</div>
<div class="line"><a name="l03256"></a><span class="lineno"> 3256</span>&#160;    {</div>
<div class="line"><a name="l03257"></a><span class="lineno"> 3257</span>&#160;        <span class="comment">// Ack immediately, because for large files this can take a long time</span></div>
<div class="line"><a name="l03258"></a><span class="lineno"> 3258</span>&#160;        SendACKs(s, systemAddress, time, rnr, updateBitStream);</div>
<div class="line"><a name="l03259"></a><span class="lineno"> 3259</span>&#160;        internalPacket=BuildPacketFromSplitPacketList(splitPacketChannel,time);</div>
<div class="line"><a name="l03260"></a><span class="lineno"> 3260</span>&#160;        splitPacketChannelList.RemoveAtIndex(i);</div>
<div class="line"><a name="l03261"></a><span class="lineno"> 3261</span>&#160;        <span class="keywordflow">return</span> internalPacket;</div>
<div class="line"><a name="l03262"></a><span class="lineno"> 3262</span>&#160;    }</div>
<div class="line"><a name="l03263"></a><span class="lineno"> 3263</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l03264"></a><span class="lineno"> 3264</span>&#160;    {</div>
<div class="line"><a name="l03265"></a><span class="lineno"> 3265</span>&#160;        <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l03266"></a><span class="lineno"> 3266</span>&#160;    }</div>
<div class="line"><a name="l03267"></a><span class="lineno"> 3267</span>&#160;}</div>
<div class="line"><a name="l03268"></a><span class="lineno"> 3268</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l03269"></a><span class="lineno"> 3269</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03270"></a><span class="lineno"> 3270</span>&#160;<span class="comment">// Delete any unreliable split packets that have long since expired</span></div>
<div class="line"><a name="l03271"></a><span class="lineno"> 3271</span>&#160;<span class="comment">void ReliabilityLayer::DeleteOldUnreliableSplitPackets( CCTimeType time )</span></div>
<div class="line"><a name="l03272"></a><span class="lineno"> 3272</span>&#160;<span class="comment">{</span></div>
<div class="line"><a name="l03273"></a><span class="lineno"> 3273</span>&#160;<span class="comment">unsigned i,j;</span></div>
<div class="line"><a name="l03274"></a><span class="lineno"> 3274</span>&#160;<span class="comment">i=0;</span></div>
<div class="line"><a name="l03275"></a><span class="lineno"> 3275</span>&#160;<span class="comment">while (i &lt; splitPacketChannelList.Size())</span></div>
<div class="line"><a name="l03276"></a><span class="lineno"> 3276</span>&#160;<span class="comment">{</span></div>
<div class="line"><a name="l03277"></a><span class="lineno"> 3277</span>&#160;<span class="comment">#if CC_TIME_TYPE_BYTES==4</span></div>
<div class="line"><a name="l03278"></a><span class="lineno"> 3278</span>&#160;<span class="comment">if (time &gt; splitPacketChannelList[i]-&gt;lastUpdateTime + timeoutTime &amp;&amp;</span></div>
<div class="line"><a name="l03279"></a><span class="lineno"> 3279</span>&#160;<span class="comment">#else</span></div>
<div class="line"><a name="l03280"></a><span class="lineno"> 3280</span>&#160;<span class="comment">if (time &gt; splitPacketChannelList[i]-&gt;lastUpdateTime + (CCTimeType)timeoutTime*(CCTimeType)1000 &amp;&amp;</span></div>
<div class="line"><a name="l03281"></a><span class="lineno"> 3281</span>&#160;<span class="comment">#endif</span></div>
<div class="line"><a name="l03282"></a><span class="lineno"> 3282</span>&#160;<span class="comment">(splitPacketChannelList[i]-&gt;splitPacketList[0]-&gt;reliability==UNRELIABLE || splitPacketChannelList[i]-&gt;splitPacketList[0]-&gt;reliability==UNRELIABLE_SEQUENCED))</span></div>
<div class="line"><a name="l03283"></a><span class="lineno"> 3283</span>&#160;<span class="comment">{</span></div>
<div class="line"><a name="l03284"></a><span class="lineno"> 3284</span>&#160;<span class="comment">for (j=0; j &lt; splitPacketChannelList[i]-&gt;splitPacketList.Size(); j++)</span></div>
<div class="line"><a name="l03285"></a><span class="lineno"> 3285</span>&#160;<span class="comment">{</span></div>
<div class="line"><a name="l03286"></a><span class="lineno"> 3286</span>&#160;<span class="comment">SLNet::OP_DELETE_ARRAY(splitPacketChannelList[i]-&gt;splitPacketList[j]-&gt;data, _FILE_AND_LINE_);</span></div>
<div class="line"><a name="l03287"></a><span class="lineno"> 3287</span>&#160;<span class="comment">ReleaseToInternalPacketPool(splitPacketChannelList[i]-&gt;splitPacketList[j]);</span></div>
<div class="line"><a name="l03288"></a><span class="lineno"> 3288</span>&#160;<span class="comment">}</span></div>
<div class="line"><a name="l03289"></a><span class="lineno"> 3289</span>&#160;<span class="comment">SLNet::OP_DELETE(splitPacketChannelList[i], _FILE_AND_LINE_);</span></div>
<div class="line"><a name="l03290"></a><span class="lineno"> 3290</span>&#160;<span class="comment">splitPacketChannelList.RemoveAtIndex(i);</span></div>
<div class="line"><a name="l03291"></a><span class="lineno"> 3291</span>&#160;<span class="comment">}</span></div>
<div class="line"><a name="l03292"></a><span class="lineno"> 3292</span>&#160;<span class="comment">else</span></div>
<div class="line"><a name="l03293"></a><span class="lineno"> 3293</span>&#160;<span class="comment">i++;</span></div>
<div class="line"><a name="l03294"></a><span class="lineno"> 3294</span>&#160;<span class="comment">}</span></div>
<div class="line"><a name="l03295"></a><span class="lineno"> 3295</span>&#160;<span class="comment">}</span></div>
<div class="line"><a name="l03296"></a><span class="lineno"> 3296</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l03297"></a><span class="lineno"> 3297</span>&#160;</div>
<div class="line"><a name="l03298"></a><span class="lineno"> 3298</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03299"></a><span class="lineno"> 3299</span>&#160;<span class="comment">// Creates a copy of the specified internal packet with data copied from the original starting at dataByteOffset for dataByteLength bytes.</span></div>
<div class="line"><a name="l03300"></a><span class="lineno"> 3300</span>&#160;<span class="comment">// Does not copy any split data parameters as that information is always generated does not have any reason to be copied</span></div>
<div class="line"><a name="l03301"></a><span class="lineno"> 3301</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03302"></a><span class="lineno"> 3302</span>&#160;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> * ReliabilityLayer::CreateInternalPacketCopy( <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *original, <span class="keywordtype">int</span> dataByteOffset, <span class="keywordtype">int</span> dataByteLength, <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> time )</div>
<div class="line"><a name="l03303"></a><span class="lineno"> 3303</span>&#160;{</div>
<div class="line"><a name="l03304"></a><span class="lineno"> 3304</span>&#160;    <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> * copy = AllocateFromInternalPacketPool();</div>
<div class="line"><a name="l03305"></a><span class="lineno"> 3305</span>&#160;<span class="preprocessor">#ifdef _DEBUG</span></div>
<div class="line"><a name="l03306"></a><span class="lineno"> 3306</span>&#160;<span class="preprocessor"></span>    <span class="comment">// Remove accessing undefined memory error</span></div>
<div class="line"><a name="l03307"></a><span class="lineno"> 3307</span>&#160;    memset( copy, 255, <span class="keyword">sizeof</span>( <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> ) );</div>
<div class="line"><a name="l03308"></a><span class="lineno"> 3308</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l03309"></a><span class="lineno"> 3309</span>&#160;<span class="preprocessor"></span>    <span class="comment">// Copy over our chunk of data</span></div>
<div class="line"><a name="l03310"></a><span class="lineno"> 3310</span>&#160;</div>
<div class="line"><a name="l03311"></a><span class="lineno"> 3311</span>&#160;    <span class="keywordflow">if</span> ( dataByteLength &gt; 0 )</div>
<div class="line"><a name="l03312"></a><span class="lineno"> 3312</span>&#160;    {</div>
<div class="line"><a name="l03313"></a><span class="lineno"> 3313</span>&#160;        AllocInternalPacketData(copy, <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(dataByteLength ),  <span class="keyword">false</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l03314"></a><span class="lineno"> 3314</span>&#160;        memcpy( copy-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>, original-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a> + dataByteOffset, dataByteLength );</div>
<div class="line"><a name="l03315"></a><span class="lineno"> 3315</span>&#160;    }</div>
<div class="line"><a name="l03316"></a><span class="lineno"> 3316</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l03317"></a><span class="lineno"> 3317</span>&#160;        copy-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a> = 0;</div>
<div class="line"><a name="l03318"></a><span class="lineno"> 3318</span>&#160;</div>
<div class="line"><a name="l03319"></a><span class="lineno"> 3319</span>&#160;    copy-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a> = dataByteLength &lt;&lt; 3;</div>
<div class="line"><a name="l03320"></a><span class="lineno"> 3320</span>&#160;    copy-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a917f67e20c8cf4b48deb98beba7fbf2c" title="Was this packet number used this update to track windowing drops or increases? Each packet number is ...">creationTime</a> = time;</div>
<div class="line"><a name="l03321"></a><span class="lineno"> 3321</span>&#160;    copy-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a6793b6c44191952078c40545e227c4f0" title="The resendNext time to take action on this packet.">nextActionTime</a> = 0;</div>
<div class="line"><a name="l03322"></a><span class="lineno"> 3322</span>&#160;    copy-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1fabcef98ca0b6e15d6aca4c8ebe862b" title="The ID used as identification for ordering messages. Also included in sequenced messages.">orderingIndex</a> = original-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1fabcef98ca0b6e15d6aca4c8ebe862b" title="The ID used as identification for ordering messages. Also included in sequenced messages.">orderingIndex</a>;</div>
<div class="line"><a name="l03323"></a><span class="lineno"> 3323</span>&#160;    copy-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a29568680a39b237528fbbf775b1f99e0">sequencingIndex</a> = original-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a29568680a39b237528fbbf775b1f99e0">sequencingIndex</a>;</div>
<div class="line"><a name="l03324"></a><span class="lineno"> 3324</span>&#160;    copy-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a> = original-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a4f1bb12b768ec1b1814218c77e5df709" title="What ordering channel this packet is on, if the reliability type uses ordering channels.">orderingChannel</a>;</div>
<div class="line"><a name="l03325"></a><span class="lineno"> 3325</span>&#160;    copy-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1ba0071a22897a0b50f5a414735dc542" title="A unique numerical identifier given to this user message. Used to identify reliable messages on the n...">reliableMessageNumber</a> = original-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1ba0071a22897a0b50f5a414735dc542" title="A unique numerical identifier given to this user message. Used to identify reliable messages on the n...">reliableMessageNumber</a>;</div>
<div class="line"><a name="l03326"></a><span class="lineno"> 3326</span>&#160;    copy-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a47e8d1384096dcfbc7925b41e3e7c84e" title="The priority level of this packet.">priority</a> = original-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a47e8d1384096dcfbc7925b41e3e7c84e" title="The priority level of this packet.">priority</a>;</div>
<div class="line"><a name="l03327"></a><span class="lineno"> 3327</span>&#160;    copy-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a> = original-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a>;</div>
<div class="line"><a name="l03328"></a><span class="lineno"> 3328</span>&#160;<span class="preprocessor">#if PREALLOCATE_LARGE_MESSAGES==1</span></div>
<div class="line"><a name="l03329"></a><span class="lineno"> 3329</span>&#160;<span class="preprocessor"></span>    copy-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a> = original-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a>;</div>
<div class="line"><a name="l03330"></a><span class="lineno"> 3330</span>&#160;    copy-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a01f5ff1a7b5cec5925f0ec5703bfae13" title="The ID of the split packet, if we have split packets. This is the maximum number of split messages we...">splitPacketId</a> = original-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a01f5ff1a7b5cec5925f0ec5703bfae13" title="The ID of the split packet, if we have split packets. This is the maximum number of split messages we...">splitPacketId</a>;</div>
<div class="line"><a name="l03331"></a><span class="lineno"> 3331</span>&#160;    copy-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af1e3b0024f2cbbd08d9217457c6721f3" title="If this is a split packet, the index into the array of subsplit packets.">splitPacketIndex</a> = original-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af1e3b0024f2cbbd08d9217457c6721f3" title="If this is a split packet, the index into the array of subsplit packets.">splitPacketIndex</a>;</div>
<div class="line"><a name="l03332"></a><span class="lineno"> 3332</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l03333"></a><span class="lineno"> 3333</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l03334"></a><span class="lineno"> 3334</span>&#160;    <span class="keywordflow">return</span> copy;</div>
<div class="line"><a name="l03335"></a><span class="lineno"> 3335</span>&#160;}</div>
<div class="line"><a name="l03336"></a><span class="lineno"> 3336</span>&#160;</div>
<div class="line"><a name="l03337"></a><span class="lineno"> 3337</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03338"></a><span class="lineno"> 3338</span>&#160;<span class="comment">// Get the specified ordering list</span></div>
<div class="line"><a name="l03339"></a><span class="lineno"> 3339</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03340"></a><span class="lineno"> 3340</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l03341"></a><span class="lineno"> 3341</span>&#160;<span class="comment">DataStructures::LinkedList&lt;InternalPacket*&gt; *ReliabilityLayer::GetOrderingListAtOrderingStream( unsigned char orderingChannel )</span></div>
<div class="line"><a name="l03342"></a><span class="lineno"> 3342</span>&#160;<span class="comment">{</span></div>
<div class="line"><a name="l03343"></a><span class="lineno"> 3343</span>&#160;<span class="comment">    if ( orderingChannel &gt;= orderingList.Size() )</span></div>
<div class="line"><a name="l03344"></a><span class="lineno"> 3344</span>&#160;<span class="comment">        return 0;</span></div>
<div class="line"><a name="l03345"></a><span class="lineno"> 3345</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l03346"></a><span class="lineno"> 3346</span>&#160;<span class="comment">    return orderingList[ orderingChannel ];</span></div>
<div class="line"><a name="l03347"></a><span class="lineno"> 3347</span>&#160;<span class="comment">}</span></div>
<div class="line"><a name="l03348"></a><span class="lineno"> 3348</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l03349"></a><span class="lineno"> 3349</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03350"></a><span class="lineno"> 3350</span>&#160;<span class="comment">// Add the internal packet to the ordering list in order based on order index</span></div>
<div class="line"><a name="l03351"></a><span class="lineno"> 3351</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03352"></a><span class="lineno"> 3352</span>&#160;<span class="comment">void ReliabilityLayer::AddToOrderingList( InternalPacket * internalPacket )</span></div>
<div class="line"><a name="l03353"></a><span class="lineno"> 3353</span>&#160;<span class="comment">{</span></div>
<div class="line"><a name="l03354"></a><span class="lineno"> 3354</span>&#160;<span class="comment">    }</span></div>
<div class="line"><a name="l03355"></a><span class="lineno"> 3355</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l03356"></a><span class="lineno"> 3356</span>&#160;</div>
<div class="line"><a name="l03357"></a><span class="lineno"> 3357</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03358"></a><span class="lineno"> 3358</span>&#160;<span class="comment">// Inserts a packet into the resend list in order</span></div>
<div class="line"><a name="l03359"></a><span class="lineno"> 3359</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03360"></a><span class="lineno"> 3360</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::InsertPacketIntoResendList( <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *internalPacket, <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> time, <span class="keywordtype">bool</span> firstResend, <span class="keywordtype">bool</span> modifyUnacknowledgedBytes )</div>
<div class="line"><a name="l03361"></a><span class="lineno"> 3361</span>&#160;{</div>
<div class="line"><a name="l03362"></a><span class="lineno"> 3362</span>&#160;    (void) firstResend;</div>
<div class="line"><a name="l03363"></a><span class="lineno"> 3363</span>&#160;    (void) time;</div>
<div class="line"><a name="l03364"></a><span class="lineno"> 3364</span>&#160;    (void) internalPacket;</div>
<div class="line"><a name="l03365"></a><span class="lineno"> 3365</span>&#160;</div>
<div class="line"><a name="l03366"></a><span class="lineno"> 3366</span>&#160;    AddToListTail(internalPacket, modifyUnacknowledgedBytes);</div>
<div class="line"><a name="l03367"></a><span class="lineno"> 3367</span>&#160;    <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a6793b6c44191952078c40545e227c4f0" title="The resendNext time to take action on this packet.">nextActionTime</a>!=0);</div>
<div class="line"><a name="l03368"></a><span class="lineno"> 3368</span>&#160;</div>
<div class="line"><a name="l03369"></a><span class="lineno"> 3369</span>&#160;}</div>
<div class="line"><a name="l03370"></a><span class="lineno"> 3370</span>&#160;</div>
<div class="line"><a name="l03371"></a><span class="lineno"> 3371</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03372"></a><span class="lineno"> 3372</span>&#160;<span class="comment">//  Were you ever unable to deliver a packet despite retries?</span></div>
<div class="line"><a name="l03373"></a><span class="lineno"> 3373</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03374"></a><span class="lineno"><a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a3fea229521eaf34263e99efcad9fcb33"> 3374</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a3fea229521eaf34263e99efcad9fcb33">ReliabilityLayer::IsDeadConnection</a>( <span class="keywordtype">void</span> )<span class="keyword"> const</span></div>
<div class="line"><a name="l03375"></a><span class="lineno"> 3375</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l03376"></a><span class="lineno"> 3376</span>&#160;    <span class="keywordflow">return</span> deadConnection;</div>
<div class="line"><a name="l03377"></a><span class="lineno"> 3377</span>&#160;}</div>
<div class="line"><a name="l03378"></a><span class="lineno"> 3378</span>&#160;</div>
<div class="line"><a name="l03379"></a><span class="lineno"> 3379</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03380"></a><span class="lineno"> 3380</span>&#160;<span class="comment">//  Causes IsDeadConnection to return true</span></div>
<div class="line"><a name="l03381"></a><span class="lineno"> 3381</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03382"></a><span class="lineno"><a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#add31029f764d997d13bb87314a9eaced"> 3382</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#add31029f764d997d13bb87314a9eaced" title="Causes IsDeadConnection to return true.">ReliabilityLayer::KillConnection</a>( <span class="keywordtype">void</span> )</div>
<div class="line"><a name="l03383"></a><span class="lineno"> 3383</span>&#160;{</div>
<div class="line"><a name="l03384"></a><span class="lineno"> 3384</span>&#160;    deadConnection=<span class="keyword">true</span>;</div>
<div class="line"><a name="l03385"></a><span class="lineno"> 3385</span>&#160;}</div>
<div class="line"><a name="l03386"></a><span class="lineno"> 3386</span>&#160;</div>
<div class="line"><a name="l03387"></a><span class="lineno"> 3387</span>&#160;</div>
<div class="line"><a name="l03388"></a><span class="lineno"> 3388</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03389"></a><span class="lineno"> 3389</span>&#160;<span class="comment">// Statistics</span></div>
<div class="line"><a name="l03390"></a><span class="lineno"> 3390</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03391"></a><span class="lineno"><a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a3c332dc52b07cebd36c18788634e2132"> 3391</a></span>&#160;<a class="code" href="../../df/df9/struct_s_l_net_1_1_rak_net_statistics.xhtml" title="Network Statisics Usage.">RakNetStatistics</a> * <a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a3c332dc52b07cebd36c18788634e2132">ReliabilityLayer::GetStatistics</a>( <a class="code" href="../../df/df9/struct_s_l_net_1_1_rak_net_statistics.xhtml" title="Network Statisics Usage.">RakNetStatistics</a> *rns )</div>
<div class="line"><a name="l03392"></a><span class="lineno"> 3392</span>&#160;{</div>
<div class="line"><a name="l03393"></a><span class="lineno"> 3393</span>&#160;    <span class="keywordtype">unsigned</span> i;</div>
<div class="line"><a name="l03394"></a><span class="lineno"> 3394</span>&#160;    <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a3d01a3c6dcc3c11f0cc5359fe290edc7">SLNet::TimeUS</a> time = <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#aaf7a5da6c601ae66963471d55a476dff">SLNet::GetTimeUS</a>();</div>
<div class="line"><a name="l03395"></a><span class="lineno"> 3395</span>&#160;    <a class="code" href="../../df/df2/_native_types_8h.xhtml#ad27ed092432b64ff558d2254c278720f">uint64_t</a> uint64Denominator;</div>
<div class="line"><a name="l03396"></a><span class="lineno"> 3396</span>&#160;    <span class="keywordtype">double</span> doubleDenominator;</div>
<div class="line"><a name="l03397"></a><span class="lineno"> 3397</span>&#160;</div>
<div class="line"><a name="l03398"></a><span class="lineno"> 3398</span>&#160;    <span class="keywordflow">for</span> (i=0; i &lt; <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca766e442d17c52434750d2c2208555237">RNS_PER_SECOND_METRICS_COUNT</a>; i++)</div>
<div class="line"><a name="l03399"></a><span class="lineno"> 3399</span>&#160;    {</div>
<div class="line"><a name="l03400"></a><span class="lineno"> 3400</span>&#160;        statistics.valueOverLastSecond[i]=bpsMetrics[i].GetBPS1Threadsafe(time);</div>
<div class="line"><a name="l03401"></a><span class="lineno"> 3401</span>&#160;        statistics.runningTotal[i]=bpsMetrics[i].GetTotal1();</div>
<div class="line"><a name="l03402"></a><span class="lineno"> 3402</span>&#160;    }</div>
<div class="line"><a name="l03403"></a><span class="lineno"> 3403</span>&#160;</div>
<div class="line"><a name="l03404"></a><span class="lineno"> 3404</span>&#160;    memcpy(rns, &amp;statistics, <span class="keyword">sizeof</span>(statistics));</div>
<div class="line"><a name="l03405"></a><span class="lineno"> 3405</span>&#160;</div>
<div class="line"><a name="l03406"></a><span class="lineno"> 3406</span>&#160;    <span class="keywordflow">if</span> (rns-&gt;<a class="code" href="../../df/df9/struct_s_l_net_1_1_rak_net_statistics.xhtml#a03467260cbf4685900095af89be748d8" title="For each type in RNSPerSecondMetrics, what is the value over the last 1 second?">valueOverLastSecond</a>[<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca5735d17220987e4ea658bacfbbe3d757">USER_MESSAGE_BYTES_SENT</a>]+rns-&gt;<a class="code" href="../../df/df9/struct_s_l_net_1_1_rak_net_statistics.xhtml#a03467260cbf4685900095af89be748d8" title="For each type in RNSPerSecondMetrics, what is the value over the last 1 second?">valueOverLastSecond</a>[<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca65babf3cbcac908eee4e950a5eb74e22" title="How many user message bytes were resent. A message is resent if it is marked as reliable, and either the message didn&#39;t arrive or the message ack didn&#39;t arrive.">USER_MESSAGE_BYTES_RESENT</a>]&gt;0)</div>
<div class="line"><a name="l03407"></a><span class="lineno"> 3407</span>&#160;        rns-&gt;<a class="code" href="../../df/df9/struct_s_l_net_1_1_rak_net_statistics.xhtml#a55e10cd5c8932d2ea0d372f723fe6aa5" title="Over the last second, what was our packetloss? This number will range from 0.0 (for none) to 1...">packetlossLastSecond</a>=(float)((<span class="keywordtype">double</span>) rns-&gt;<a class="code" href="../../df/df9/struct_s_l_net_1_1_rak_net_statistics.xhtml#a03467260cbf4685900095af89be748d8" title="For each type in RNSPerSecondMetrics, what is the value over the last 1 second?">valueOverLastSecond</a>[<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca65babf3cbcac908eee4e950a5eb74e22" title="How many user message bytes were resent. A message is resent if it is marked as reliable, and either the message didn&#39;t arrive or the message ack didn&#39;t arrive.">USER_MESSAGE_BYTES_RESENT</a>]/((double) rns-&gt;<a class="code" href="../../df/df9/struct_s_l_net_1_1_rak_net_statistics.xhtml#a03467260cbf4685900095af89be748d8" title="For each type in RNSPerSecondMetrics, what is the value over the last 1 second?">valueOverLastSecond</a>[<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca5735d17220987e4ea658bacfbbe3d757">USER_MESSAGE_BYTES_SENT</a>]+(<span class="keywordtype">double</span>) rns-&gt;<a class="code" href="../../df/df9/struct_s_l_net_1_1_rak_net_statistics.xhtml#a03467260cbf4685900095af89be748d8" title="For each type in RNSPerSecondMetrics, what is the value over the last 1 second?">valueOverLastSecond</a>[<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca65babf3cbcac908eee4e950a5eb74e22" title="How many user message bytes were resent. A message is resent if it is marked as reliable, and either the message didn&#39;t arrive or the message ack didn&#39;t arrive.">USER_MESSAGE_BYTES_RESENT</a>]));</div>
<div class="line"><a name="l03408"></a><span class="lineno"> 3408</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l03409"></a><span class="lineno"> 3409</span>&#160;        rns-&gt;<a class="code" href="../../df/df9/struct_s_l_net_1_1_rak_net_statistics.xhtml#a55e10cd5c8932d2ea0d372f723fe6aa5" title="Over the last second, what was our packetloss? This number will range from 0.0 (for none) to 1...">packetlossLastSecond</a>=0.0f;</div>
<div class="line"><a name="l03410"></a><span class="lineno"> 3410</span>&#160;</div>
<div class="line"><a name="l03411"></a><span class="lineno"> 3411</span>&#160;    rns-&gt;<a class="code" href="../../df/df9/struct_s_l_net_1_1_rak_net_statistics.xhtml#ae40fb7ab707e4ff5f7284b7d9326cdbe" title="What is the average total packetloss over the lifetime of the connection?">packetlossTotal</a>=0.0f;</div>
<div class="line"><a name="l03412"></a><span class="lineno"> 3412</span>&#160;    uint64Denominator=(rns-&gt;<a class="code" href="../../df/df9/struct_s_l_net_1_1_rak_net_statistics.xhtml#a05edd8f2c1042cecb5cd046ccb47a0f1" title="For each type in RNSPerSecondMetrics, what is the total value over the lifetime of the connection...">runningTotal</a>[<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca5735d17220987e4ea658bacfbbe3d757">USER_MESSAGE_BYTES_SENT</a>]+rns-&gt;<a class="code" href="../../df/df9/struct_s_l_net_1_1_rak_net_statistics.xhtml#a05edd8f2c1042cecb5cd046ccb47a0f1" title="For each type in RNSPerSecondMetrics, what is the total value over the lifetime of the connection...">runningTotal</a>[<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca65babf3cbcac908eee4e950a5eb74e22" title="How many user message bytes were resent. A message is resent if it is marked as reliable, and either the message didn&#39;t arrive or the message ack didn&#39;t arrive.">USER_MESSAGE_BYTES_RESENT</a>]);</div>
<div class="line"><a name="l03413"></a><span class="lineno"> 3413</span>&#160;    <span class="keywordflow">if</span> (uint64Denominator!=0&amp;&amp;rns-&gt;<a class="code" href="../../df/df9/struct_s_l_net_1_1_rak_net_statistics.xhtml#a05edd8f2c1042cecb5cd046ccb47a0f1" title="For each type in RNSPerSecondMetrics, what is the total value over the lifetime of the connection...">runningTotal</a>[<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca5735d17220987e4ea658bacfbbe3d757">USER_MESSAGE_BYTES_SENT</a>]/uint64Denominator&gt;0)</div>
<div class="line"><a name="l03414"></a><span class="lineno"> 3414</span>&#160;    {</div>
<div class="line"><a name="l03415"></a><span class="lineno"> 3415</span>&#160;        doubleDenominator=((double) rns-&gt;<a class="code" href="../../df/df9/struct_s_l_net_1_1_rak_net_statistics.xhtml#a05edd8f2c1042cecb5cd046ccb47a0f1" title="For each type in RNSPerSecondMetrics, what is the total value over the lifetime of the connection...">runningTotal</a>[<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca5735d17220987e4ea658bacfbbe3d757">USER_MESSAGE_BYTES_SENT</a>]+(<span class="keywordtype">double</span>) rns-&gt;<a class="code" href="../../df/df9/struct_s_l_net_1_1_rak_net_statistics.xhtml#a05edd8f2c1042cecb5cd046ccb47a0f1" title="For each type in RNSPerSecondMetrics, what is the total value over the lifetime of the connection...">runningTotal</a>[<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca65babf3cbcac908eee4e950a5eb74e22" title="How many user message bytes were resent. A message is resent if it is marked as reliable, and either the message didn&#39;t arrive or the message ack didn&#39;t arrive.">USER_MESSAGE_BYTES_RESENT</a>]);</div>
<div class="line"><a name="l03416"></a><span class="lineno"> 3416</span>&#160;        <span class="keywordflow">if</span>(doubleDenominator!=0)</div>
<div class="line"><a name="l03417"></a><span class="lineno"> 3417</span>&#160;        {</div>
<div class="line"><a name="l03418"></a><span class="lineno"> 3418</span>&#160;            rns-&gt;<a class="code" href="../../df/df9/struct_s_l_net_1_1_rak_net_statistics.xhtml#ae40fb7ab707e4ff5f7284b7d9326cdbe" title="What is the average total packetloss over the lifetime of the connection?">packetlossTotal</a>=(float)((<span class="keywordtype">double</span>) rns-&gt;<a class="code" href="../../df/df9/struct_s_l_net_1_1_rak_net_statistics.xhtml#a05edd8f2c1042cecb5cd046ccb47a0f1" title="For each type in RNSPerSecondMetrics, what is the total value over the lifetime of the connection...">runningTotal</a>[<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a4957d87c7d01c02ee3365ea01aec40aca65babf3cbcac908eee4e950a5eb74e22" title="How many user message bytes were resent. A message is resent if it is marked as reliable, and either the message didn&#39;t arrive or the message ack didn&#39;t arrive.">USER_MESSAGE_BYTES_RESENT</a>]/doubleDenominator);</div>
<div class="line"><a name="l03419"></a><span class="lineno"> 3419</span>&#160;        }</div>
<div class="line"><a name="l03420"></a><span class="lineno"> 3420</span>&#160;    }</div>
<div class="line"><a name="l03421"></a><span class="lineno"> 3421</span>&#160;</div>
<div class="line"><a name="l03422"></a><span class="lineno"> 3422</span>&#160;    rns-&gt;<a class="code" href="../../df/df9/struct_s_l_net_1_1_rak_net_statistics.xhtml#a4ac60b3e5e25a324c183e2a3423121eb">isLimitedByCongestionControl</a>=statistics.isLimitedByCongestionControl;</div>
<div class="line"><a name="l03423"></a><span class="lineno"> 3423</span>&#160;    rns-&gt;<a class="code" href="../../df/df9/struct_s_l_net_1_1_rak_net_statistics.xhtml#a1772104bda37cb4a8115cc4169b1dbc8" title="If isLimitedByCongestionControl is true, what is the limit, in bytes per second?">BPSLimitByCongestionControl</a>=statistics.BPSLimitByCongestionControl;</div>
<div class="line"><a name="l03424"></a><span class="lineno"> 3424</span>&#160;    rns-&gt;<a class="code" href="../../df/df9/struct_s_l_net_1_1_rak_net_statistics.xhtml#ab26b15848940d3e6acd25a7c573e1177" title="Is our current send rate throttled by a call to RakPeer::SetPerConnectionOutgoingBandwidthLimit()?">isLimitedByOutgoingBandwidthLimit</a>=statistics.isLimitedByOutgoingBandwidthLimit;</div>
<div class="line"><a name="l03425"></a><span class="lineno"> 3425</span>&#160;    rns-&gt;<a class="code" href="../../df/df9/struct_s_l_net_1_1_rak_net_statistics.xhtml#a476e3187816451ca55fcf6cc4435e526" title="If isLimitedByOutgoingBandwidthLimit is true, what is the limit, in bytes per second?">BPSLimitByOutgoingBandwidthLimit</a>=statistics.BPSLimitByOutgoingBandwidthLimit;</div>
<div class="line"><a name="l03426"></a><span class="lineno"> 3426</span>&#160;</div>
<div class="line"><a name="l03427"></a><span class="lineno"> 3427</span>&#160;    <span class="keywordflow">return</span> rns;</div>
<div class="line"><a name="l03428"></a><span class="lineno"> 3428</span>&#160;}</div>
<div class="line"><a name="l03429"></a><span class="lineno"> 3429</span>&#160;</div>
<div class="line"><a name="l03430"></a><span class="lineno"> 3430</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03431"></a><span class="lineno"> 3431</span>&#160;<span class="comment">// Returns the number of packets in the resend queue, not counting holes</span></div>
<div class="line"><a name="l03432"></a><span class="lineno"> 3432</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03433"></a><span class="lineno"> 3433</span>&#160;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ReliabilityLayer::GetResendListDataSize(<span class="keywordtype">void</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l03434"></a><span class="lineno"> 3434</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l03435"></a><span class="lineno"> 3435</span>&#160;    <span class="comment">// Not accurate but thread-safe.  The commented version might crash if the queue is cleared while we loop through it</span></div>
<div class="line"><a name="l03436"></a><span class="lineno"> 3436</span>&#160;    <span class="comment">// return resendTree.Size();</span></div>
<div class="line"><a name="l03437"></a><span class="lineno"> 3437</span>&#160;    <span class="keywordflow">return</span> statistics.<a class="code" href="../../df/df9/struct_s_l_net_1_1_rak_net_statistics.xhtml#a841c90947e8fc8803c394cafe662f6a3">messagesInResendBuffer</a>;</div>
<div class="line"><a name="l03438"></a><span class="lineno"> 3438</span>&#160;}</div>
<div class="line"><a name="l03439"></a><span class="lineno"> 3439</span>&#160;</div>
<div class="line"><a name="l03440"></a><span class="lineno"> 3440</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03441"></a><span class="lineno"><a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#ae840a6ab13db97e28e07f498f12c5d89"> 3441</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#ae840a6ab13db97e28e07f498f12c5d89" title="Has a lot of time passed since the last ack.">ReliabilityLayer::AckTimeout</a>(<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">SLNet::Time</a> curTime)</div>
<div class="line"><a name="l03442"></a><span class="lineno"> 3442</span>&#160;{</div>
<div class="line"><a name="l03443"></a><span class="lineno"> 3443</span>&#160;    <span class="comment">// I check timeLastDatagramArrived-curTime because with threading it is possible that timeLastDatagramArrived is</span></div>
<div class="line"><a name="l03444"></a><span class="lineno"> 3444</span>&#160;    <span class="comment">// slightly greater than curTime, in which case this is NOT an ack timeout</span></div>
<div class="line"><a name="l03445"></a><span class="lineno"> 3445</span>&#160;    <span class="keywordflow">return</span> (timeLastDatagramArrived-curTime)&gt;10000 &amp;&amp; curTime-timeLastDatagramArrived&gt;timeoutTime;</div>
<div class="line"><a name="l03446"></a><span class="lineno"> 3446</span>&#160;}</div>
<div class="line"><a name="l03447"></a><span class="lineno"> 3447</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03448"></a><span class="lineno"><a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a547e6abbaeff06959b5732debffcd853"> 3448</a></span>&#160;<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> <a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a547e6abbaeff06959b5732debffcd853">ReliabilityLayer::GetNextSendTime</a>(<span class="keywordtype">void</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l03449"></a><span class="lineno"> 3449</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l03450"></a><span class="lineno"> 3450</span>&#160;    <span class="keywordflow">return</span> nextSendTime;</div>
<div class="line"><a name="l03451"></a><span class="lineno"> 3451</span>&#160;}</div>
<div class="line"><a name="l03452"></a><span class="lineno"> 3452</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03453"></a><span class="lineno"><a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a5057b29131a1d56e5064e8a60f0efe79"> 3453</a></span>&#160;<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> <a class="code" href="../../d2/d55/class_s_l_net_1_1_reliability_layer.xhtml#a5057b29131a1d56e5064e8a60f0efe79">ReliabilityLayer::GetTimeBetweenPackets</a>(<span class="keywordtype">void</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l03454"></a><span class="lineno"> 3454</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l03455"></a><span class="lineno"> 3455</span>&#160;    <span class="keywordflow">return</span> timeBetweenPackets;</div>
<div class="line"><a name="l03456"></a><span class="lineno"> 3456</span>&#160;}</div>
<div class="line"><a name="l03457"></a><span class="lineno"> 3457</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03458"></a><span class="lineno"> 3458</span>&#160;<span class="preprocessor">#if INCLUDE_TIMESTAMP_WITH_DATAGRAMS==1</span></div>
<div class="line"><a name="l03459"></a><span class="lineno"> 3459</span>&#160;<span class="preprocessor"></span><a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> ReliabilityLayer::GetAckPing(<span class="keywordtype">void</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l03460"></a><span class="lineno"> 3460</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l03461"></a><span class="lineno"> 3461</span>&#160;    <span class="keywordflow">return</span> ackPing;</div>
<div class="line"><a name="l03462"></a><span class="lineno"> 3462</span>&#160;}</div>
<div class="line"><a name="l03463"></a><span class="lineno"> 3463</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l03464"></a><span class="lineno"> 3464</span>&#160;<span class="preprocessor"></span><span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03465"></a><span class="lineno"> 3465</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::ResetPacketsAndDatagrams(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l03466"></a><span class="lineno"> 3466</span>&#160;{</div>
<div class="line"><a name="l03467"></a><span class="lineno"> 3467</span>&#160;    packetsToSendThisUpdate.Clear(<span class="keyword">true</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l03468"></a><span class="lineno"> 3468</span>&#160;    packetsToDeallocThisUpdate.Clear(<span class="keyword">true</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l03469"></a><span class="lineno"> 3469</span>&#160;    packetsToSendThisUpdateDatagramBoundaries.Clear(<span class="keyword">true</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l03470"></a><span class="lineno"> 3470</span>&#160;    datagramsToSendThisUpdateIsPair.Clear(<span class="keyword">true</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l03471"></a><span class="lineno"> 3471</span>&#160;    datagramSizesInBytes.Clear(<span class="keyword">true</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l03472"></a><span class="lineno"> 3472</span>&#160;    datagramSizeSoFar=0;</div>
<div class="line"><a name="l03473"></a><span class="lineno"> 3473</span>&#160;}</div>
<div class="line"><a name="l03474"></a><span class="lineno"> 3474</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03475"></a><span class="lineno"> 3475</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::PushPacket(<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> time, <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *internalPacket, <span class="keywordtype">bool</span> isReliable)</div>
<div class="line"><a name="l03476"></a><span class="lineno"> 3476</span>&#160;{</div>
<div class="line"><a name="l03477"></a><span class="lineno"> 3477</span>&#160;    <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> bitsForThisPacket=<a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>)+<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ad8c98f322a49f5765b9960743907a750">headerLength</a>));</div>
<div class="line"><a name="l03478"></a><span class="lineno"> 3478</span>&#160;    datagramSizeSoFar+=bitsForThisPacket;</div>
<div class="line"><a name="l03479"></a><span class="lineno"> 3479</span>&#160;    <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(datagramSizeSoFar)&lt;<a class="code" href="../../d2/d24/_m_t_u_size_8h.xhtml#a39d9da73f39bf9acabfc9e0ad2ae97c5">MAXIMUM_MTU_SIZE</a>-<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#a8a0fae83e487dc04b3cd774b3d4ee637" title="Sizeof an UDP header in byte.">UDP_HEADER_SIZE</a>);</div>
<div class="line"><a name="l03480"></a><span class="lineno"> 3480</span>&#160;    allDatagramSizesSoFar+=bitsForThisPacket;</div>
<div class="line"><a name="l03481"></a><span class="lineno"> 3481</span>&#160;    packetsToSendThisUpdate.Push(internalPacket, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l03482"></a><span class="lineno"> 3482</span>&#160;    packetsToDeallocThisUpdate.Push(isReliable==<span class="keyword">false</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l03483"></a><span class="lineno"> 3483</span>&#160;    <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ad8c98f322a49f5765b9960743907a750">headerLength</a>==GetMessageHeaderLengthBits(internalPacket));</div>
<div class="line"><a name="l03484"></a><span class="lineno"> 3484</span>&#160;</div>
<div class="line"><a name="l03485"></a><span class="lineno"> 3485</span>&#160;<span class="comment">// This code tells me how much time elapses between when you send, and when the message actually goes out</span></div>
<div class="line"><a name="l03486"></a><span class="lineno"> 3486</span>&#160;<span class="comment">//  if (internalPacket-&gt;data[0]==0)</span></div>
<div class="line"><a name="l03487"></a><span class="lineno"> 3487</span>&#160;<span class="comment">//  {</span></div>
<div class="line"><a name="l03488"></a><span class="lineno"> 3488</span>&#160;<span class="comment">//      SLNet::TimeMS t;</span></div>
<div class="line"><a name="l03489"></a><span class="lineno"> 3489</span>&#160;<span class="comment">//      SLNet::BitStream bs(internalPacket-&gt;data+1,sizeof(t),false);</span></div>
<div class="line"><a name="l03490"></a><span class="lineno"> 3490</span>&#160;<span class="comment">//      bs.Read(t);</span></div>
<div class="line"><a name="l03491"></a><span class="lineno"> 3491</span>&#160;<span class="comment">//      SLNet::TimeMS curTime=SLNet::GetTimeMS();</span></div>
<div class="line"><a name="l03492"></a><span class="lineno"> 3492</span>&#160;<span class="comment">//      SLNet::TimeMS diff = curTime-t;</span></div>
<div class="line"><a name="l03493"></a><span class="lineno"> 3493</span>&#160;<span class="comment">//  }</span></div>
<div class="line"><a name="l03494"></a><span class="lineno"> 3494</span>&#160;</div>
<div class="line"><a name="l03495"></a><span class="lineno"> 3495</span>&#160;    congestionManager.OnSendBytes(time, <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>)+<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ad8c98f322a49f5765b9960743907a750">headerLength</a>));</div>
<div class="line"><a name="l03496"></a><span class="lineno"> 3496</span>&#160;}</div>
<div class="line"><a name="l03497"></a><span class="lineno"> 3497</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03498"></a><span class="lineno"> 3498</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::PushDatagram(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l03499"></a><span class="lineno"> 3499</span>&#160;{</div>
<div class="line"><a name="l03500"></a><span class="lineno"> 3500</span>&#160;    <span class="keywordflow">if</span> (datagramSizeSoFar&gt;0)</div>
<div class="line"><a name="l03501"></a><span class="lineno"> 3501</span>&#160;    {</div>
<div class="line"><a name="l03502"></a><span class="lineno"> 3502</span>&#160;        packetsToSendThisUpdateDatagramBoundaries.Push(packetsToSendThisUpdate.Size(), <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l03503"></a><span class="lineno"> 3503</span>&#160;        datagramsToSendThisUpdateIsPair.Push(<span class="keyword">false</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l03504"></a><span class="lineno"> 3504</span>&#160;        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(datagramSizeSoFar)&lt;<a class="code" href="../../d2/d24/_m_t_u_size_8h.xhtml#a39d9da73f39bf9acabfc9e0ad2ae97c5">MAXIMUM_MTU_SIZE</a>-<a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#a8a0fae83e487dc04b3cd774b3d4ee637" title="Sizeof an UDP header in byte.">UDP_HEADER_SIZE</a>);</div>
<div class="line"><a name="l03505"></a><span class="lineno"> 3505</span>&#160;        datagramSizesInBytes.Push(<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(datagramSizeSoFar), <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l03506"></a><span class="lineno"> 3506</span>&#160;        datagramSizeSoFar=0;</div>
<div class="line"><a name="l03507"></a><span class="lineno"> 3507</span>&#160;</div>
<div class="line"><a name="l03508"></a><span class="lineno"> 3508</span>&#160;        <span class="comment">// Disable packet pairs</span></div>
<div class="line"><a name="l03509"></a><span class="lineno"> 3509</span>&#160;        <span class="comment">/*</span></div>
<div class="line"><a name="l03510"></a><span class="lineno"> 3510</span>&#160;<span class="comment">        if (countdownToNextPacketPair==0)</span></div>
<div class="line"><a name="l03511"></a><span class="lineno"> 3511</span>&#160;<span class="comment">        {</span></div>
<div class="line"><a name="l03512"></a><span class="lineno"> 3512</span>&#160;<span class="comment">        if (TagMostRecentPushAsSecondOfPacketPair())</span></div>
<div class="line"><a name="l03513"></a><span class="lineno"> 3513</span>&#160;<span class="comment">        countdownToNextPacketPair=15;</span></div>
<div class="line"><a name="l03514"></a><span class="lineno"> 3514</span>&#160;<span class="comment">        }</span></div>
<div class="line"><a name="l03515"></a><span class="lineno"> 3515</span>&#160;<span class="comment">        else</span></div>
<div class="line"><a name="l03516"></a><span class="lineno"> 3516</span>&#160;<span class="comment">        countdownToNextPacketPair--;</span></div>
<div class="line"><a name="l03517"></a><span class="lineno"> 3517</span>&#160;<span class="comment">        */</span></div>
<div class="line"><a name="l03518"></a><span class="lineno"> 3518</span>&#160;    }</div>
<div class="line"><a name="l03519"></a><span class="lineno"> 3519</span>&#160;}</div>
<div class="line"><a name="l03520"></a><span class="lineno"> 3520</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03521"></a><span class="lineno"> 3521</span>&#160;<span class="keywordtype">bool</span> ReliabilityLayer::TagMostRecentPushAsSecondOfPacketPair(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l03522"></a><span class="lineno"> 3522</span>&#160;{</div>
<div class="line"><a name="l03523"></a><span class="lineno"> 3523</span>&#160;    <span class="keywordflow">if</span> (datagramsToSendThisUpdateIsPair.Size()&gt;=2)</div>
<div class="line"><a name="l03524"></a><span class="lineno"> 3524</span>&#160;    {</div>
<div class="line"><a name="l03525"></a><span class="lineno"> 3525</span>&#160;        datagramsToSendThisUpdateIsPair[datagramsToSendThisUpdateIsPair.Size()-2]=<span class="keyword">true</span>;</div>
<div class="line"><a name="l03526"></a><span class="lineno"> 3526</span>&#160;        datagramsToSendThisUpdateIsPair[datagramsToSendThisUpdateIsPair.Size()-1]=<span class="keyword">true</span>;</div>
<div class="line"><a name="l03527"></a><span class="lineno"> 3527</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l03528"></a><span class="lineno"> 3528</span>&#160;    }</div>
<div class="line"><a name="l03529"></a><span class="lineno"> 3529</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l03530"></a><span class="lineno"> 3530</span>&#160;}</div>
<div class="line"><a name="l03531"></a><span class="lineno"> 3531</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03532"></a><span class="lineno"> 3532</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::ClearPacketsAndDatagrams(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l03533"></a><span class="lineno"> 3533</span>&#160;{</div>
<div class="line"><a name="l03534"></a><span class="lineno"> 3534</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i;</div>
<div class="line"><a name="l03535"></a><span class="lineno"> 3535</span>&#160;    <span class="keywordflow">for</span> (i=0; i &lt; packetsToDeallocThisUpdate.Size(); i++)</div>
<div class="line"><a name="l03536"></a><span class="lineno"> 3536</span>&#160;    {</div>
<div class="line"><a name="l03537"></a><span class="lineno"> 3537</span>&#160;        <span class="comment">// packetsToDeallocThisUpdate holds a boolean indicating if packetsToSendThisUpdate at this index should be freed</span></div>
<div class="line"><a name="l03538"></a><span class="lineno"> 3538</span>&#160;        <span class="keywordflow">if</span> (packetsToDeallocThisUpdate[i])</div>
<div class="line"><a name="l03539"></a><span class="lineno"> 3539</span>&#160;        {</div>
<div class="line"><a name="l03540"></a><span class="lineno"> 3540</span>&#160;            RemoveFromUnreliableLinkedList(packetsToSendThisUpdate[i]);</div>
<div class="line"><a name="l03541"></a><span class="lineno"> 3541</span>&#160;            FreeInternalPacketData(packetsToSendThisUpdate[i], <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l03542"></a><span class="lineno"> 3542</span>&#160;            <span class="comment">// if (keepInternalPacketIfNeedsAck==false || packetsToSendThisUpdate[i]-&gt;reliability&lt;RELIABLE_WITH_ACK_RECEIPT)</span></div>
<div class="line"><a name="l03543"></a><span class="lineno"> 3543</span>&#160;            ReleaseToInternalPacketPool( packetsToSendThisUpdate[i] );</div>
<div class="line"><a name="l03544"></a><span class="lineno"> 3544</span>&#160;        }</div>
<div class="line"><a name="l03545"></a><span class="lineno"> 3545</span>&#160;    }</div>
<div class="line"><a name="l03546"></a><span class="lineno"> 3546</span>&#160;    packetsToDeallocThisUpdate.Clear(<span class="keyword">true</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l03547"></a><span class="lineno"> 3547</span>&#160;}</div>
<div class="line"><a name="l03548"></a><span class="lineno"> 3548</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03549"></a><span class="lineno"> 3549</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::MoveToListHead(<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *internalPacket)</div>
<div class="line"><a name="l03550"></a><span class="lineno"> 3550</span>&#160;{</div>
<div class="line"><a name="l03551"></a><span class="lineno"> 3551</span>&#160;    <span class="keywordflow">if</span> ( internalPacket == resendLinkedListHead )</div>
<div class="line"><a name="l03552"></a><span class="lineno"> 3552</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l03553"></a><span class="lineno"> 3553</span>&#160;    <span class="keywordflow">if</span> (resendLinkedListHead==0)</div>
<div class="line"><a name="l03554"></a><span class="lineno"> 3554</span>&#160;    {</div>
<div class="line"><a name="l03555"></a><span class="lineno"> 3555</span>&#160;        internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a9f1943940d66b55f3fe19dd9d8751a0b">resendNext</a>=internalPacket;</div>
<div class="line"><a name="l03556"></a><span class="lineno"> 3556</span>&#160;        internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a0d6417c39f68a57f41d5bf60d666d023">resendPrev</a>=internalPacket;</div>
<div class="line"><a name="l03557"></a><span class="lineno"> 3557</span>&#160;        resendLinkedListHead=internalPacket;</div>
<div class="line"><a name="l03558"></a><span class="lineno"> 3558</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l03559"></a><span class="lineno"> 3559</span>&#160;    }</div>
<div class="line"><a name="l03560"></a><span class="lineno"> 3560</span>&#160;    internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a0d6417c39f68a57f41d5bf60d666d023">resendPrev</a>-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a9f1943940d66b55f3fe19dd9d8751a0b">resendNext</a> = internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a9f1943940d66b55f3fe19dd9d8751a0b">resendNext</a>;</div>
<div class="line"><a name="l03561"></a><span class="lineno"> 3561</span>&#160;    internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a9f1943940d66b55f3fe19dd9d8751a0b">resendNext</a>-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a0d6417c39f68a57f41d5bf60d666d023">resendPrev</a> = internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a0d6417c39f68a57f41d5bf60d666d023">resendPrev</a>;</div>
<div class="line"><a name="l03562"></a><span class="lineno"> 3562</span>&#160;    internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a9f1943940d66b55f3fe19dd9d8751a0b">resendNext</a>=resendLinkedListHead;</div>
<div class="line"><a name="l03563"></a><span class="lineno"> 3563</span>&#160;    internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a0d6417c39f68a57f41d5bf60d666d023">resendPrev</a>=resendLinkedListHead-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a0d6417c39f68a57f41d5bf60d666d023">resendPrev</a>;</div>
<div class="line"><a name="l03564"></a><span class="lineno"> 3564</span>&#160;    internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a0d6417c39f68a57f41d5bf60d666d023">resendPrev</a>-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a9f1943940d66b55f3fe19dd9d8751a0b">resendNext</a>=internalPacket;</div>
<div class="line"><a name="l03565"></a><span class="lineno"> 3565</span>&#160;    resendLinkedListHead-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a0d6417c39f68a57f41d5bf60d666d023">resendPrev</a>=internalPacket;</div>
<div class="line"><a name="l03566"></a><span class="lineno"> 3566</span>&#160;    resendLinkedListHead=internalPacket;</div>
<div class="line"><a name="l03567"></a><span class="lineno"> 3567</span>&#160;    <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ad8c98f322a49f5765b9960743907a750">headerLength</a>+internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>&gt;0);</div>
<div class="line"><a name="l03568"></a><span class="lineno"> 3568</span>&#160;</div>
<div class="line"><a name="l03569"></a><span class="lineno"> 3569</span>&#160;    <span class="comment">//ValidateResendList();</span></div>
<div class="line"><a name="l03570"></a><span class="lineno"> 3570</span>&#160;}</div>
<div class="line"><a name="l03571"></a><span class="lineno"> 3571</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03572"></a><span class="lineno"> 3572</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::RemoveFromList(<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *internalPacket, <span class="keywordtype">bool</span> modifyUnacknowledgedBytes)</div>
<div class="line"><a name="l03573"></a><span class="lineno"> 3573</span>&#160;{</div>
<div class="line"><a name="l03574"></a><span class="lineno"> 3574</span>&#160;    <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *newPosition;</div>
<div class="line"><a name="l03575"></a><span class="lineno"> 3575</span>&#160;    internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a0d6417c39f68a57f41d5bf60d666d023">resendPrev</a>-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a9f1943940d66b55f3fe19dd9d8751a0b">resendNext</a> = internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a9f1943940d66b55f3fe19dd9d8751a0b">resendNext</a>;</div>
<div class="line"><a name="l03576"></a><span class="lineno"> 3576</span>&#160;    internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a9f1943940d66b55f3fe19dd9d8751a0b">resendNext</a>-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a0d6417c39f68a57f41d5bf60d666d023">resendPrev</a> = internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a0d6417c39f68a57f41d5bf60d666d023">resendPrev</a>;</div>
<div class="line"><a name="l03577"></a><span class="lineno"> 3577</span>&#160;    newPosition = internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a9f1943940d66b55f3fe19dd9d8751a0b">resendNext</a>;</div>
<div class="line"><a name="l03578"></a><span class="lineno"> 3578</span>&#160;    <span class="keywordflow">if</span> ( internalPacket == resendLinkedListHead )</div>
<div class="line"><a name="l03579"></a><span class="lineno"> 3579</span>&#160;        resendLinkedListHead = newPosition;</div>
<div class="line"><a name="l03580"></a><span class="lineno"> 3580</span>&#160;    <span class="keywordflow">if</span> (resendLinkedListHead==internalPacket)</div>
<div class="line"><a name="l03581"></a><span class="lineno"> 3581</span>&#160;        resendLinkedListHead=0;</div>
<div class="line"><a name="l03582"></a><span class="lineno"> 3582</span>&#160;</div>
<div class="line"><a name="l03583"></a><span class="lineno"> 3583</span>&#160;    <span class="keywordflow">if</span> (modifyUnacknowledgedBytes)</div>
<div class="line"><a name="l03584"></a><span class="lineno"> 3584</span>&#160;    {</div>
<div class="line"><a name="l03585"></a><span class="lineno"> 3585</span>&#160;        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(unacknowledgedBytes&gt;=<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ad8c98f322a49f5765b9960743907a750">headerLength</a>+internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>));</div>
<div class="line"><a name="l03586"></a><span class="lineno"> 3586</span>&#160;        unacknowledgedBytes-=<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ad8c98f322a49f5765b9960743907a750">headerLength</a>+internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>);</div>
<div class="line"><a name="l03587"></a><span class="lineno"> 3587</span>&#160;        <span class="comment">// printf(&quot;-unacknowledgedBytes:%i &quot;, unacknowledgedBytes);</span></div>
<div class="line"><a name="l03588"></a><span class="lineno"> 3588</span>&#160;</div>
<div class="line"><a name="l03589"></a><span class="lineno"> 3589</span>&#160;</div>
<div class="line"><a name="l03590"></a><span class="lineno"> 3590</span>&#160;<span class="comment">//      ValidateResendList();</span></div>
<div class="line"><a name="l03591"></a><span class="lineno"> 3591</span>&#160;    }</div>
<div class="line"><a name="l03592"></a><span class="lineno"> 3592</span>&#160;}</div>
<div class="line"><a name="l03593"></a><span class="lineno"> 3593</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03594"></a><span class="lineno"> 3594</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::AddToListTail(<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *internalPacket, <span class="keywordtype">bool</span> modifyUnacknowledgedBytes)</div>
<div class="line"><a name="l03595"></a><span class="lineno"> 3595</span>&#160;{</div>
<div class="line"><a name="l03596"></a><span class="lineno"> 3596</span>&#160;    <span class="keywordflow">if</span> (modifyUnacknowledgedBytes)</div>
<div class="line"><a name="l03597"></a><span class="lineno"> 3597</span>&#160;    {</div>
<div class="line"><a name="l03598"></a><span class="lineno"> 3598</span>&#160;        unacknowledgedBytes+=<a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ad8c98f322a49f5765b9960743907a750">headerLength</a>+internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a34c93035a873e2e60f31fda6eca0510c" title="How many bits long the data is.">dataBitLength</a>);</div>
<div class="line"><a name="l03599"></a><span class="lineno"> 3599</span>&#160;        <span class="comment">// printf(&quot;+unacknowledgedBytes:%i &quot;, unacknowledgedBytes);</span></div>
<div class="line"><a name="l03600"></a><span class="lineno"> 3600</span>&#160;    }</div>
<div class="line"><a name="l03601"></a><span class="lineno"> 3601</span>&#160;</div>
<div class="line"><a name="l03602"></a><span class="lineno"> 3602</span>&#160;    <span class="keywordflow">if</span> (resendLinkedListHead==0)</div>
<div class="line"><a name="l03603"></a><span class="lineno"> 3603</span>&#160;    {</div>
<div class="line"><a name="l03604"></a><span class="lineno"> 3604</span>&#160;        internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a9f1943940d66b55f3fe19dd9d8751a0b">resendNext</a>=internalPacket;</div>
<div class="line"><a name="l03605"></a><span class="lineno"> 3605</span>&#160;        internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a0d6417c39f68a57f41d5bf60d666d023">resendPrev</a>=internalPacket;</div>
<div class="line"><a name="l03606"></a><span class="lineno"> 3606</span>&#160;        resendLinkedListHead=internalPacket;</div>
<div class="line"><a name="l03607"></a><span class="lineno"> 3607</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l03608"></a><span class="lineno"> 3608</span>&#160;    }</div>
<div class="line"><a name="l03609"></a><span class="lineno"> 3609</span>&#160;    internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a9f1943940d66b55f3fe19dd9d8751a0b">resendNext</a>=resendLinkedListHead;</div>
<div class="line"><a name="l03610"></a><span class="lineno"> 3610</span>&#160;    internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a0d6417c39f68a57f41d5bf60d666d023">resendPrev</a>=resendLinkedListHead-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a0d6417c39f68a57f41d5bf60d666d023">resendPrev</a>;</div>
<div class="line"><a name="l03611"></a><span class="lineno"> 3611</span>&#160;    internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a0d6417c39f68a57f41d5bf60d666d023">resendPrev</a>-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a9f1943940d66b55f3fe19dd9d8751a0b">resendNext</a>=internalPacket;</div>
<div class="line"><a name="l03612"></a><span class="lineno"> 3612</span>&#160;    resendLinkedListHead-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a0d6417c39f68a57f41d5bf60d666d023">resendPrev</a>=internalPacket;</div>
<div class="line"><a name="l03613"></a><span class="lineno"> 3613</span>&#160;</div>
<div class="line"><a name="l03614"></a><span class="lineno"> 3614</span>&#160;<span class="comment">//  ValidateResendList();</span></div>
<div class="line"><a name="l03615"></a><span class="lineno"> 3615</span>&#160;</div>
<div class="line"><a name="l03616"></a><span class="lineno"> 3616</span>&#160;}</div>
<div class="line"><a name="l03617"></a><span class="lineno"> 3617</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03618"></a><span class="lineno"> 3618</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::PopListHead(<span class="keywordtype">bool</span> modifyUnacknowledgedBytes)</div>
<div class="line"><a name="l03619"></a><span class="lineno"> 3619</span>&#160;{</div>
<div class="line"><a name="l03620"></a><span class="lineno"> 3620</span>&#160;    <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(resendLinkedListHead!=0);</div>
<div class="line"><a name="l03621"></a><span class="lineno"> 3621</span>&#160;    RemoveFromList(resendLinkedListHead, modifyUnacknowledgedBytes);</div>
<div class="line"><a name="l03622"></a><span class="lineno"> 3622</span>&#160;}</div>
<div class="line"><a name="l03623"></a><span class="lineno"> 3623</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03624"></a><span class="lineno"> 3624</span>&#160;<span class="keywordtype">bool</span> ReliabilityLayer::IsResendQueueEmpty(<span class="keywordtype">void</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l03625"></a><span class="lineno"> 3625</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l03626"></a><span class="lineno"> 3626</span>&#160;    <span class="keywordflow">return</span> resendLinkedListHead==0;</div>
<div class="line"><a name="l03627"></a><span class="lineno"> 3627</span>&#160;}</div>
<div class="line"><a name="l03628"></a><span class="lineno"> 3628</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03629"></a><span class="lineno"> 3629</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::SendACKs(<a class="code" href="../../d1/dde/class_s_l_net_1_1_rak_net_socket2.xhtml">RakNetSocket2</a> *s, <a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml" title="Network address for a system.">SystemAddress</a> &amp;systemAddress, <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> time, <a class="code" href="../../df/dd4/class_s_l_net_1_1_rak_net_random.xhtml">RakNetRandom</a> *rnr, <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a> &amp;updateBitStream)</div>
<div class="line"><a name="l03630"></a><span class="lineno"> 3630</span>&#160;{</div>
<div class="line"><a name="l03631"></a><span class="lineno"> 3631</span>&#160;    <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> maxDatagramPayload = GetMaxDatagramSizeExcludingMessageHeaderBits();</div>
<div class="line"><a name="l03632"></a><span class="lineno"> 3632</span>&#160;</div>
<div class="line"><a name="l03633"></a><span class="lineno"> 3633</span>&#160;    <span class="keywordflow">while</span> (acknowlegements.Size()&gt;0)</div>
<div class="line"><a name="l03634"></a><span class="lineno"> 3634</span>&#160;    {</div>
<div class="line"><a name="l03635"></a><span class="lineno"> 3635</span>&#160;        <span class="comment">// Send acks</span></div>
<div class="line"><a name="l03636"></a><span class="lineno"> 3636</span>&#160;        updateBitStream.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#aab4381d8b4a48dbc8e2975dba894f350" title="Resets the bitstream for reuse.">Reset</a>();</div>
<div class="line"><a name="l03637"></a><span class="lineno"> 3637</span>&#160;        DatagramHeaderFormat dhf;</div>
<div class="line"><a name="l03638"></a><span class="lineno"> 3638</span>&#160;        dhf.isACK=<span class="keyword">true</span>;</div>
<div class="line"><a name="l03639"></a><span class="lineno"> 3639</span>&#160;        dhf.isNAK=<span class="keyword">false</span>;</div>
<div class="line"><a name="l03640"></a><span class="lineno"> 3640</span>&#160;        dhf.isPacketPair=<span class="keyword">false</span>;</div>
<div class="line"><a name="l03641"></a><span class="lineno"> 3641</span>&#160;<span class="preprocessor">#if INCLUDE_TIMESTAMP_WITH_DATAGRAMS==1</span></div>
<div class="line"><a name="l03642"></a><span class="lineno"> 3642</span>&#160;<span class="preprocessor"></span>        dhf.sourceSystemTime=time;</div>
<div class="line"><a name="l03643"></a><span class="lineno"> 3643</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l03644"></a><span class="lineno"> 3644</span>&#160;<span class="preprocessor"></span>        <span class="keywordtype">double</span> B;</div>
<div class="line"><a name="l03645"></a><span class="lineno"> 3645</span>&#160;        <span class="keywordtype">double</span> AS;</div>
<div class="line"><a name="l03646"></a><span class="lineno"> 3646</span>&#160;        <span class="keywordtype">bool</span> hasBAndAS;</div>
<div class="line"><a name="l03647"></a><span class="lineno"> 3647</span>&#160;        <span class="keywordflow">if</span> (remoteSystemNeedsBAndAS)</div>
<div class="line"><a name="l03648"></a><span class="lineno"> 3648</span>&#160;        {</div>
<div class="line"><a name="l03649"></a><span class="lineno"> 3649</span>&#160;            congestionManager.OnSendAckGetBAndAS(time, &amp;hasBAndAS,&amp;B,&amp;AS);</div>
<div class="line"><a name="l03650"></a><span class="lineno"> 3650</span>&#160;            dhf.AS=(float)AS;</div>
<div class="line"><a name="l03651"></a><span class="lineno"> 3651</span>&#160;            dhf.hasBAndAS=hasBAndAS;</div>
<div class="line"><a name="l03652"></a><span class="lineno"> 3652</span>&#160;        }</div>
<div class="line"><a name="l03653"></a><span class="lineno"> 3653</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l03654"></a><span class="lineno"> 3654</span>&#160;            dhf.hasBAndAS=<span class="keyword">false</span>;</div>
<div class="line"><a name="l03655"></a><span class="lineno"> 3655</span>&#160;<span class="preprocessor">#if INCLUDE_TIMESTAMP_WITH_DATAGRAMS==1</span></div>
<div class="line"><a name="l03656"></a><span class="lineno"> 3656</span>&#160;<span class="preprocessor"></span>        dhf.sourceSystemTime=nextAckTimeToSend;</div>
<div class="line"><a name="l03657"></a><span class="lineno"> 3657</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l03658"></a><span class="lineno"> 3658</span>&#160;<span class="preprocessor"></span>        <span class="comment">//      dhf.B=(float)B;</span></div>
<div class="line"><a name="l03659"></a><span class="lineno"> 3659</span>&#160;        updateBitStream.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#aab4381d8b4a48dbc8e2975dba894f350" title="Resets the bitstream for reuse.">Reset</a>();</div>
<div class="line"><a name="l03660"></a><span class="lineno"> 3660</span>&#160;        dhf.Serialize(&amp;updateBitStream);</div>
<div class="line"><a name="l03661"></a><span class="lineno"> 3661</span>&#160;        <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#a93bb7ead128b82763226cbdf008ecc58">CC_DEBUG_PRINTF_1</a>(<span class="stringliteral">&quot;AckSnd &quot;</span>);</div>
<div class="line"><a name="l03662"></a><span class="lineno"> 3662</span>&#160;        acknowlegements.Serialize(&amp;updateBitStream, maxDatagramPayload, <span class="keyword">true</span>);</div>
<div class="line"><a name="l03663"></a><span class="lineno"> 3663</span>&#160;        SendBitStream( s, systemAddress, &amp;updateBitStream, rnr, time );</div>
<div class="line"><a name="l03664"></a><span class="lineno"> 3664</span>&#160;        congestionManager.OnSendAck(time,updateBitStream.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a48740002683b46b00cbb97b8f7d0710e" title="Returns the length in bytes of the stream.">GetNumberOfBytesUsed</a>());</div>
<div class="line"><a name="l03665"></a><span class="lineno"> 3665</span>&#160;</div>
<div class="line"><a name="l03666"></a><span class="lineno"> 3666</span>&#160;        <span class="comment">// I think this is causing a bug where if the estimated bandwidth is very low for the recipient, only acks ever get sent</span></div>
<div class="line"><a name="l03667"></a><span class="lineno"> 3667</span>&#160;        <span class="comment">//  congestionManager.OnSendBytes(time,UDP_HEADER_SIZE+updateBitStream.GetNumberOfBytesUsed());</span></div>
<div class="line"><a name="l03668"></a><span class="lineno"> 3668</span>&#160;    }</div>
<div class="line"><a name="l03669"></a><span class="lineno"> 3669</span>&#160;}</div>
<div class="line"><a name="l03670"></a><span class="lineno"> 3670</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l03671"></a><span class="lineno"> 3671</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03672"></a><span class="lineno"> 3672</span>&#160;<span class="comment">ReliabilityLayer::DatagramMessageIDList* ReliabilityLayer::AllocateFromDatagramMessageIDPool(void)</span></div>
<div class="line"><a name="l03673"></a><span class="lineno"> 3673</span>&#160;<span class="comment">{</span></div>
<div class="line"><a name="l03674"></a><span class="lineno"> 3674</span>&#160;<span class="comment">DatagramMessageIDList*s;</span></div>
<div class="line"><a name="l03675"></a><span class="lineno"> 3675</span>&#160;<span class="comment">s=datagramMessageIDPool.Allocate( _FILE_AND_LINE_ );</span></div>
<div class="line"><a name="l03676"></a><span class="lineno"> 3676</span>&#160;<span class="comment">// Call new operator, memoryPool doesn&#39;t do this</span></div>
<div class="line"><a name="l03677"></a><span class="lineno"> 3677</span>&#160;<span class="comment">s = new ((void*)s) DatagramMessageIDList;</span></div>
<div class="line"><a name="l03678"></a><span class="lineno"> 3678</span>&#160;<span class="comment">return s;</span></div>
<div class="line"><a name="l03679"></a><span class="lineno"> 3679</span>&#160;<span class="comment">}</span></div>
<div class="line"><a name="l03680"></a><span class="lineno"> 3680</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03681"></a><span class="lineno"> 3681</span>&#160;<span class="comment">void ReliabilityLayer::ReleaseToDatagramMessageIDPool(DatagramMessageIDList* d)</span></div>
<div class="line"><a name="l03682"></a><span class="lineno"> 3682</span>&#160;<span class="comment">{</span></div>
<div class="line"><a name="l03683"></a><span class="lineno"> 3683</span>&#160;<span class="comment">d-&gt;~DatagramMessageIDList();</span></div>
<div class="line"><a name="l03684"></a><span class="lineno"> 3684</span>&#160;<span class="comment">datagramMessageIDPool.Release(d);</span></div>
<div class="line"><a name="l03685"></a><span class="lineno"> 3685</span>&#160;<span class="comment">}</span></div>
<div class="line"><a name="l03686"></a><span class="lineno"> 3686</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l03687"></a><span class="lineno"> 3687</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03688"></a><span class="lineno"> 3688</span>&#160;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a>* ReliabilityLayer::AllocateFromInternalPacketPool(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l03689"></a><span class="lineno"> 3689</span>&#160;{</div>
<div class="line"><a name="l03690"></a><span class="lineno"> 3690</span>&#160;    <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *ip = internalPacketPool.Allocate( <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l03691"></a><span class="lineno"> 3691</span>&#160;    ip-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a1ba0071a22897a0b50f5a414735dc542" title="A unique numerical identifier given to this user message. Used to identify reliable messages on the n...">reliableMessageNumber</a> = (<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a047b6dedcd35244b1575bfcf1cfb6b6c">MessageNumberType</a>) (<span class="keyword">const</span> <a class="code" href="../../df/df2/_native_types_8h.xhtml#a6eb1e68cc391dd753bc8ce896dbb8315">uint32_t</a>)-1;</div>
<div class="line"><a name="l03692"></a><span class="lineno"> 3692</span>&#160;    ip-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a4f7fcca56594cded46930e105e175339">messageNumberAssigned</a>=<span class="keyword">false</span>;</div>
<div class="line"><a name="l03693"></a><span class="lineno"> 3693</span>&#160;    ip-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a6793b6c44191952078c40545e227c4f0" title="The resendNext time to take action on this packet.">nextActionTime</a> = 0;</div>
<div class="line"><a name="l03694"></a><span class="lineno"> 3694</span>&#160;    ip-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a08dd401807f28ff2a8bc8b42884711cf" title="The size of the array of subsplit packets.">splitPacketCount</a> = 0;</div>
<div class="line"><a name="l03695"></a><span class="lineno"> 3695</span>&#160;    ip-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af1e3b0024f2cbbd08d9217457c6721f3" title="If this is a split packet, the index into the array of subsplit packets.">splitPacketIndex</a> = 0;</div>
<div class="line"><a name="l03696"></a><span class="lineno"> 3696</span>&#160;    ip-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#a01f5ff1a7b5cec5925f0ec5703bfae13" title="The ID of the split packet, if we have split packets. This is the maximum number of split messages we...">splitPacketId</a> = 0;</div>
<div class="line"><a name="l03697"></a><span class="lineno"> 3697</span>&#160;    ip-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a923316ee89426c1e6078d9a4c83c4061">allocationScheme</a>=<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ab9f3530490f074239c783495e4d176a0a8a25cc0b17e6ab9242ba0e5dc9461a0b" title="Data is allocated using rakMalloc. Just free it.">InternalPacket::NORMAL</a>;</div>
<div class="line"><a name="l03698"></a><span class="lineno"> 3698</span>&#160;    ip-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>=0;</div>
<div class="line"><a name="l03699"></a><span class="lineno"> 3699</span>&#160;    ip-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#adc41cae78447c4f9c20d2607c3d1617f" title="How many attempts we made at sending this message.">timesSent</a>=0;</div>
<div class="line"><a name="l03700"></a><span class="lineno"> 3700</span>&#160;    <span class="keywordflow">return</span> ip;</div>
<div class="line"><a name="l03701"></a><span class="lineno"> 3701</span>&#160;}</div>
<div class="line"><a name="l03702"></a><span class="lineno"> 3702</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03703"></a><span class="lineno"> 3703</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::ReleaseToInternalPacketPool(<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *ip)</div>
<div class="line"><a name="l03704"></a><span class="lineno"> 3704</span>&#160;{</div>
<div class="line"><a name="l03705"></a><span class="lineno"> 3705</span>&#160;    internalPacketPool.Release(ip, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l03706"></a><span class="lineno"> 3706</span>&#160;}</div>
<div class="line"><a name="l03707"></a><span class="lineno"> 3707</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03708"></a><span class="lineno"> 3708</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::RemoveFromUnreliableLinkedList(<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *internalPacket)</div>
<div class="line"><a name="l03709"></a><span class="lineno"> 3709</span>&#160;{</div>
<div class="line"><a name="l03710"></a><span class="lineno"> 3710</span>&#160;    <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a>==<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eaeb409c363ddaeb3201fd95e9bee56696" title="Same as regular UDP, except that it will also discard duplicate datagrams. RakNet adds (6 to 17) + 21...">UNRELIABLE</a> ||</div>
<div class="line"><a name="l03711"></a><span class="lineno"> 3711</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a>==<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eab6a8eb609ec1adbd5af421cf2acbedf5">UNRELIABLE_SEQUENCED</a> ||</div>
<div class="line"><a name="l03712"></a><span class="lineno"> 3712</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a>==<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7ea4a623962051043733acde3e595e1cce0" title="Same as UNRELIABLE, however the user will get either ID_SND_RECEIPT_ACKED or ID_SND_RECEIPT_LOSS base...">UNRELIABLE_WITH_ACK_RECEIPT</a></div>
<div class="line"><a name="l03713"></a><span class="lineno"> 3713</span>&#160;<span class="comment">//      ||</span></div>
<div class="line"><a name="l03714"></a><span class="lineno"> 3714</span>&#160;<span class="comment">//      internalPacket-&gt;reliability==UNRELIABLE_SEQUENCED_WITH_ACK_RECEIPT</span></div>
<div class="line"><a name="l03715"></a><span class="lineno"> 3715</span>&#160;        )</div>
<div class="line"><a name="l03716"></a><span class="lineno"> 3716</span>&#160;    {</div>
<div class="line"><a name="l03717"></a><span class="lineno"> 3717</span>&#160;        <a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *newPosition;</div>
<div class="line"><a name="l03718"></a><span class="lineno"> 3718</span>&#160;        internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a41632b2e9cd4069d8e1920dd5d53705c">unreliablePrev</a>-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a283ac9e10954e8718916bb454173bead">unreliableNext</a> = internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a283ac9e10954e8718916bb454173bead">unreliableNext</a>;</div>
<div class="line"><a name="l03719"></a><span class="lineno"> 3719</span>&#160;        internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a283ac9e10954e8718916bb454173bead">unreliableNext</a>-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a41632b2e9cd4069d8e1920dd5d53705c">unreliablePrev</a> = internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a41632b2e9cd4069d8e1920dd5d53705c">unreliablePrev</a>;</div>
<div class="line"><a name="l03720"></a><span class="lineno"> 3720</span>&#160;        newPosition = internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a283ac9e10954e8718916bb454173bead">unreliableNext</a>;</div>
<div class="line"><a name="l03721"></a><span class="lineno"> 3721</span>&#160;        <span class="keywordflow">if</span> ( internalPacket == unreliableLinkedListHead )</div>
<div class="line"><a name="l03722"></a><span class="lineno"> 3722</span>&#160;            unreliableLinkedListHead = newPosition;</div>
<div class="line"><a name="l03723"></a><span class="lineno"> 3723</span>&#160;        <span class="keywordflow">if</span> (unreliableLinkedListHead==internalPacket)</div>
<div class="line"><a name="l03724"></a><span class="lineno"> 3724</span>&#160;            unreliableLinkedListHead=0;</div>
<div class="line"><a name="l03725"></a><span class="lineno"> 3725</span>&#160;    }</div>
<div class="line"><a name="l03726"></a><span class="lineno"> 3726</span>&#160;}</div>
<div class="line"><a name="l03727"></a><span class="lineno"> 3727</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03728"></a><span class="lineno"> 3728</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::AddToUnreliableLinkedList(<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *internalPacket)</div>
<div class="line"><a name="l03729"></a><span class="lineno"> 3729</span>&#160;{</div>
<div class="line"><a name="l03730"></a><span class="lineno"> 3730</span>&#160;    <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a>==<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eaeb409c363ddaeb3201fd95e9bee56696" title="Same as regular UDP, except that it will also discard duplicate datagrams. RakNet adds (6 to 17) + 21...">UNRELIABLE</a> ||</div>
<div class="line"><a name="l03731"></a><span class="lineno"> 3731</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a>==<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7eab6a8eb609ec1adbd5af421cf2acbedf5">UNRELIABLE_SEQUENCED</a> ||</div>
<div class="line"><a name="l03732"></a><span class="lineno"> 3732</span>&#160;        internalPacket-&gt;<a class="code" href="../../d4/d46/struct_s_l_net_1_1_internal_packet_fixed_size_transmission_header.xhtml#af3dfd67bcaa86ce75e39c414d59447b5" title="What type of reliability algorithm to use with this packet.">reliability</a>==<a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7ea4a623962051043733acde3e595e1cce0" title="Same as UNRELIABLE, however the user will get either ID_SND_RECEIPT_ACKED or ID_SND_RECEIPT_LOSS base...">UNRELIABLE_WITH_ACK_RECEIPT</a></div>
<div class="line"><a name="l03733"></a><span class="lineno"> 3733</span>&#160;<span class="comment">//      ||</span></div>
<div class="line"><a name="l03734"></a><span class="lineno"> 3734</span>&#160;<span class="comment">//      internalPacket-&gt;reliability==UNRELIABLE_SEQUENCED_WITH_ACK_RECEIPT</span></div>
<div class="line"><a name="l03735"></a><span class="lineno"> 3735</span>&#160;        )</div>
<div class="line"><a name="l03736"></a><span class="lineno"> 3736</span>&#160;    {</div>
<div class="line"><a name="l03737"></a><span class="lineno"> 3737</span>&#160;        <span class="keywordflow">if</span> (unreliableLinkedListHead==0)</div>
<div class="line"><a name="l03738"></a><span class="lineno"> 3738</span>&#160;        {</div>
<div class="line"><a name="l03739"></a><span class="lineno"> 3739</span>&#160;            internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a283ac9e10954e8718916bb454173bead">unreliableNext</a>=internalPacket;</div>
<div class="line"><a name="l03740"></a><span class="lineno"> 3740</span>&#160;            internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a41632b2e9cd4069d8e1920dd5d53705c">unreliablePrev</a>=internalPacket;</div>
<div class="line"><a name="l03741"></a><span class="lineno"> 3741</span>&#160;            unreliableLinkedListHead=internalPacket;</div>
<div class="line"><a name="l03742"></a><span class="lineno"> 3742</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l03743"></a><span class="lineno"> 3743</span>&#160;        }</div>
<div class="line"><a name="l03744"></a><span class="lineno"> 3744</span>&#160;        internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a283ac9e10954e8718916bb454173bead">unreliableNext</a>=unreliableLinkedListHead;</div>
<div class="line"><a name="l03745"></a><span class="lineno"> 3745</span>&#160;        internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a41632b2e9cd4069d8e1920dd5d53705c">unreliablePrev</a>=unreliableLinkedListHead-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a41632b2e9cd4069d8e1920dd5d53705c">unreliablePrev</a>;</div>
<div class="line"><a name="l03746"></a><span class="lineno"> 3746</span>&#160;        internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a41632b2e9cd4069d8e1920dd5d53705c">unreliablePrev</a>-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a283ac9e10954e8718916bb454173bead">unreliableNext</a>=internalPacket;</div>
<div class="line"><a name="l03747"></a><span class="lineno"> 3747</span>&#160;        unreliableLinkedListHead-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a41632b2e9cd4069d8e1920dd5d53705c">unreliablePrev</a>=internalPacket;</div>
<div class="line"><a name="l03748"></a><span class="lineno"> 3748</span>&#160;    }</div>
<div class="line"><a name="l03749"></a><span class="lineno"> 3749</span>&#160;}</div>
<div class="line"><a name="l03750"></a><span class="lineno"> 3750</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03751"></a><span class="lineno"> 3751</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::ValidateResendList(<span class="keywordtype">void</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l03752"></a><span class="lineno"> 3752</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l03753"></a><span class="lineno"> 3753</span>&#160;<span class="comment">//  unsigned int count1=0, count2=0;</span></div>
<div class="line"><a name="l03754"></a><span class="lineno"> 3754</span>&#160;<span class="comment">//  for (unsigned int i=0; i &lt; RESEND_BUFFER_ARRAY_LENGTH; i++)</span></div>
<div class="line"><a name="l03755"></a><span class="lineno"> 3755</span>&#160;<span class="comment">//  if (resendBuffer[i])</span></div>
<div class="line"><a name="l03756"></a><span class="lineno"> 3756</span>&#160;<span class="comment">//  count1++;</span></div>
<div class="line"><a name="l03757"></a><span class="lineno"> 3757</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l03758"></a><span class="lineno"> 3758</span>&#160;<span class="comment">//  if (resendLinkedListHead)</span></div>
<div class="line"><a name="l03759"></a><span class="lineno"> 3759</span>&#160;<span class="comment">//  {</span></div>
<div class="line"><a name="l03760"></a><span class="lineno"> 3760</span>&#160;<span class="comment">//  InternalPacket *internalPacket = resendLinkedListHead;</span></div>
<div class="line"><a name="l03761"></a><span class="lineno"> 3761</span>&#160;<span class="comment">//  do </span></div>
<div class="line"><a name="l03762"></a><span class="lineno"> 3762</span>&#160;<span class="comment">//  {</span></div>
<div class="line"><a name="l03763"></a><span class="lineno"> 3763</span>&#160;<span class="comment">//  count2++;</span></div>
<div class="line"><a name="l03764"></a><span class="lineno"> 3764</span>&#160;<span class="comment">//  internalPacket=internalPacket-&gt;resendNext;</span></div>
<div class="line"><a name="l03765"></a><span class="lineno"> 3765</span>&#160;<span class="comment">//  } while (internalPacket!=resendLinkedListHead);</span></div>
<div class="line"><a name="l03766"></a><span class="lineno"> 3766</span>&#160;<span class="comment">//  }</span></div>
<div class="line"><a name="l03767"></a><span class="lineno"> 3767</span>&#160;<span class="comment">//  RakAssert(count1==count2);</span></div>
<div class="line"><a name="l03768"></a><span class="lineno"> 3768</span>&#160;<span class="comment">//  RakAssert(count2&lt;=RESEND_BUFFER_ARRAY_LENGTH);</span></div>
<div class="line"><a name="l03769"></a><span class="lineno"> 3769</span>&#160;}</div>
<div class="line"><a name="l03770"></a><span class="lineno"> 3770</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03771"></a><span class="lineno"> 3771</span>&#160;<span class="keywordtype">bool</span> ReliabilityLayer::ResendBufferOverflow(<span class="keywordtype">void</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l03772"></a><span class="lineno"> 3772</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l03773"></a><span class="lineno"> 3773</span>&#160;    <span class="keywordtype">int</span> index1 = sendReliableMessageNumberIndex &amp; (<a class="code" href="../../df/df2/_native_types_8h.xhtml#a6eb1e68cc391dd753bc8ce896dbb8315">uint32_t</a>) <a class="code" href="../../d8/db0/defines_8h.xhtml#a3abde4cfe6a8c3a20ce719c1cad27a07">RESEND_BUFFER_ARRAY_MASK</a>;</div>
<div class="line"><a name="l03774"></a><span class="lineno"> 3774</span>&#160;    <span class="comment">//  int index2 = (sendReliableMessageNumberIndex+(uint32_t)1) &amp; (uint32_t) RESEND_BUFFER_ARRAY_MASK;</span></div>
<div class="line"><a name="l03775"></a><span class="lineno"> 3775</span>&#160;    <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(index1&lt;<a class="code" href="../../d8/db0/defines_8h.xhtml#af1cb26d5d5b8bbb60367a848ee905ade">RESEND_BUFFER_ARRAY_LENGTH</a>);</div>
<div class="line"><a name="l03776"></a><span class="lineno"> 3776</span>&#160;    <span class="keywordflow">return</span> resendBuffer[index1]!=0; <span class="comment">// || resendBuffer[index2]!=0;</span></div>
<div class="line"><a name="l03777"></a><span class="lineno"> 3777</span>&#160;</div>
<div class="line"><a name="l03778"></a><span class="lineno"> 3778</span>&#160;}</div>
<div class="line"><a name="l03779"></a><span class="lineno"> 3779</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03780"></a><span class="lineno"> 3780</span>&#160;ReliabilityLayer::MessageNumberNode* ReliabilityLayer::GetMessageNumberNodeByDatagramIndex(<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">DatagramSequenceNumberType</a> index, <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> *timeSent)</div>
<div class="line"><a name="l03781"></a><span class="lineno"> 3781</span>&#160;{</div>
<div class="line"><a name="l03782"></a><span class="lineno"> 3782</span>&#160;    <span class="keywordflow">if</span> (datagramHistory.IsEmpty())</div>
<div class="line"><a name="l03783"></a><span class="lineno"> 3783</span>&#160;        <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l03784"></a><span class="lineno"> 3784</span>&#160;</div>
<div class="line"><a name="l03785"></a><span class="lineno"> 3785</span>&#160;    <span class="keywordflow">if</span> (congestionManager.LessThan(index, datagramHistoryPopCount))</div>
<div class="line"><a name="l03786"></a><span class="lineno"> 3786</span>&#160;        <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l03787"></a><span class="lineno"> 3787</span>&#160;</div>
<div class="line"><a name="l03788"></a><span class="lineno"> 3788</span>&#160;    <a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">DatagramSequenceNumberType</a> offsetIntoList = index - datagramHistoryPopCount;</div>
<div class="line"><a name="l03789"></a><span class="lineno"> 3789</span>&#160;    <span class="keywordflow">if</span> (offsetIntoList &gt;= datagramHistory.Size())</div>
<div class="line"><a name="l03790"></a><span class="lineno"> 3790</span>&#160;        <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l03791"></a><span class="lineno"> 3791</span>&#160;</div>
<div class="line"><a name="l03792"></a><span class="lineno"> 3792</span>&#160;    *timeSent=datagramHistory[offsetIntoList].timeSent;</div>
<div class="line"><a name="l03793"></a><span class="lineno"> 3793</span>&#160;    <span class="keywordflow">return</span> datagramHistory[offsetIntoList].head;</div>
<div class="line"><a name="l03794"></a><span class="lineno"> 3794</span>&#160;}</div>
<div class="line"><a name="l03795"></a><span class="lineno"> 3795</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03796"></a><span class="lineno"> 3796</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::RemoveFromDatagramHistory(<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">DatagramSequenceNumberType</a> index)</div>
<div class="line"><a name="l03797"></a><span class="lineno"> 3797</span>&#160;{</div>
<div class="line"><a name="l03798"></a><span class="lineno"> 3798</span>&#160;    <a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">DatagramSequenceNumberType</a> offsetIntoList = index - datagramHistoryPopCount;</div>
<div class="line"><a name="l03799"></a><span class="lineno"> 3799</span>&#160;    MessageNumberNode *mnm = datagramHistory[offsetIntoList].head;</div>
<div class="line"><a name="l03800"></a><span class="lineno"> 3800</span>&#160;    MessageNumberNode *next;</div>
<div class="line"><a name="l03801"></a><span class="lineno"> 3801</span>&#160;    <span class="keywordflow">while</span> (mnm)</div>
<div class="line"><a name="l03802"></a><span class="lineno"> 3802</span>&#160;    {</div>
<div class="line"><a name="l03803"></a><span class="lineno"> 3803</span>&#160;        next=mnm-&gt;next;</div>
<div class="line"><a name="l03804"></a><span class="lineno"> 3804</span>&#160;        datagramHistoryMessagePool.Release(mnm, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l03805"></a><span class="lineno"> 3805</span>&#160;        mnm=next;</div>
<div class="line"><a name="l03806"></a><span class="lineno"> 3806</span>&#160;    }</div>
<div class="line"><a name="l03807"></a><span class="lineno"> 3807</span>&#160;    datagramHistory[offsetIntoList].head=0;</div>
<div class="line"><a name="l03808"></a><span class="lineno"> 3808</span>&#160;}</div>
<div class="line"><a name="l03809"></a><span class="lineno"> 3809</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03810"></a><span class="lineno"> 3810</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::AddFirstToDatagramHistory(<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">DatagramSequenceNumberType</a> datagramNumber, <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> timeSent)</div>
<div class="line"><a name="l03811"></a><span class="lineno"> 3811</span>&#160;{</div>
<div class="line"><a name="l03812"></a><span class="lineno"> 3812</span>&#160;    (void) datagramNumber;</div>
<div class="line"><a name="l03813"></a><span class="lineno"> 3813</span>&#160;    <span class="keywordflow">if</span> (datagramHistory.Size()&gt;<a class="code" href="../../d8/db0/defines_8h.xhtml#ab317fdfccccc36c15ea2ba0f3d6f2b10">DATAGRAM_MESSAGE_ID_ARRAY_LENGTH</a>)</div>
<div class="line"><a name="l03814"></a><span class="lineno"> 3814</span>&#160;    {</div>
<div class="line"><a name="l03815"></a><span class="lineno"> 3815</span>&#160;        RemoveFromDatagramHistory(datagramHistoryPopCount);</div>
<div class="line"><a name="l03816"></a><span class="lineno"> 3816</span>&#160;        datagramHistory.Pop();</div>
<div class="line"><a name="l03817"></a><span class="lineno"> 3817</span>&#160;        datagramHistoryPopCount++;</div>
<div class="line"><a name="l03818"></a><span class="lineno"> 3818</span>&#160;    }</div>
<div class="line"><a name="l03819"></a><span class="lineno"> 3819</span>&#160;</div>
<div class="line"><a name="l03820"></a><span class="lineno"> 3820</span>&#160;    datagramHistory.Push(DatagramHistoryNode(0, timeSent), <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l03821"></a><span class="lineno"> 3821</span>&#160;    <span class="comment">// printf(&quot;%p Pushed empty DatagramHistoryNode to datagram history at index %i\n&quot;, this, datagramHistory.Size()-1);</span></div>
<div class="line"><a name="l03822"></a><span class="lineno"> 3822</span>&#160;}</div>
<div class="line"><a name="l03823"></a><span class="lineno"> 3823</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03824"></a><span class="lineno"> 3824</span>&#160;ReliabilityLayer::MessageNumberNode* ReliabilityLayer::AddFirstToDatagramHistory(<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">DatagramSequenceNumberType</a> datagramNumber, <a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">DatagramSequenceNumberType</a> messageNumber, <a class="code" href="../../d0/dfb/_c_c_rak_net_sliding_window_8h.xhtml#af68854e24d09ea8058bf8b27ce0f24e6">CCTimeType</a> timeSent)</div>
<div class="line"><a name="l03825"></a><span class="lineno"> 3825</span>&#160;{</div>
<div class="line"><a name="l03826"></a><span class="lineno"> 3826</span>&#160;    (void) datagramNumber;</div>
<div class="line"><a name="l03827"></a><span class="lineno"> 3827</span>&#160;<span class="comment">//  RakAssert(datagramHistoryPopCount+(unsigned int) datagramHistory.Size()==datagramNumber);</span></div>
<div class="line"><a name="l03828"></a><span class="lineno"> 3828</span>&#160;    <span class="keywordflow">if</span> (datagramHistory.Size()&gt;<a class="code" href="../../d8/db0/defines_8h.xhtml#ab317fdfccccc36c15ea2ba0f3d6f2b10">DATAGRAM_MESSAGE_ID_ARRAY_LENGTH</a>)</div>
<div class="line"><a name="l03829"></a><span class="lineno"> 3829</span>&#160;    {</div>
<div class="line"><a name="l03830"></a><span class="lineno"> 3830</span>&#160;        RemoveFromDatagramHistory(datagramHistoryPopCount);</div>
<div class="line"><a name="l03831"></a><span class="lineno"> 3831</span>&#160;        datagramHistory.Pop();</div>
<div class="line"><a name="l03832"></a><span class="lineno"> 3832</span>&#160;        datagramHistoryPopCount++;</div>
<div class="line"><a name="l03833"></a><span class="lineno"> 3833</span>&#160;    }</div>
<div class="line"><a name="l03834"></a><span class="lineno"> 3834</span>&#160;</div>
<div class="line"><a name="l03835"></a><span class="lineno"> 3835</span>&#160;    MessageNumberNode *mnm = datagramHistoryMessagePool.Allocate(<a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l03836"></a><span class="lineno"> 3836</span>&#160;    mnm-&gt;next=0;</div>
<div class="line"><a name="l03837"></a><span class="lineno"> 3837</span>&#160;    mnm-&gt;messageNumber=messageNumber;</div>
<div class="line"><a name="l03838"></a><span class="lineno"> 3838</span>&#160;    datagramHistory.Push(DatagramHistoryNode(mnm, timeSent), <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l03839"></a><span class="lineno"> 3839</span>&#160;    <span class="comment">// printf(&quot;%p Pushed message %i to DatagramHistoryNode to datagram history at index %i\n&quot;, this, messageNumber.val, datagramHistory.Size()-1);</span></div>
<div class="line"><a name="l03840"></a><span class="lineno"> 3840</span>&#160;    <span class="keywordflow">return</span> mnm;</div>
<div class="line"><a name="l03841"></a><span class="lineno"> 3841</span>&#160;}</div>
<div class="line"><a name="l03842"></a><span class="lineno"> 3842</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03843"></a><span class="lineno"> 3843</span>&#160;ReliabilityLayer::MessageNumberNode* ReliabilityLayer::AddSubsequentToDatagramHistory(MessageNumberNode *messageNumberNode, <a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">DatagramSequenceNumberType</a> messageNumber)</div>
<div class="line"><a name="l03844"></a><span class="lineno"> 3844</span>&#160;{</div>
<div class="line"><a name="l03845"></a><span class="lineno"> 3845</span>&#160;    messageNumberNode-&gt;next=datagramHistoryMessagePool.Allocate(<a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l03846"></a><span class="lineno"> 3846</span>&#160;    messageNumberNode-&gt;next-&gt;messageNumber=messageNumber;</div>
<div class="line"><a name="l03847"></a><span class="lineno"> 3847</span>&#160;    messageNumberNode-&gt;next-&gt;next=0;</div>
<div class="line"><a name="l03848"></a><span class="lineno"> 3848</span>&#160;    <span class="keywordflow">return</span> messageNumberNode-&gt;next;     </div>
<div class="line"><a name="l03849"></a><span class="lineno"> 3849</span>&#160;}</div>
<div class="line"><a name="l03850"></a><span class="lineno"> 3850</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03851"></a><span class="lineno"> 3851</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::AllocInternalPacketData(<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *internalPacket, <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#d4/d28/struct_s_l_net_1_1_internal_packet_ref_counted_data" title="Used in InternalPacket when pointing to sharedDataBlock, rather than allocating itself.">InternalPacketRefCountedData</a> **refCounter, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *externallyAllocatedPtr, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *ourOffset)</div>
<div class="line"><a name="l03852"></a><span class="lineno"> 3852</span>&#160;{</div>
<div class="line"><a name="l03853"></a><span class="lineno"> 3853</span>&#160;    internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a923316ee89426c1e6078d9a4c83c4061">allocationScheme</a>=<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ab9f3530490f074239c783495e4d176a0a7153cb6d9548b358df1f5d3777444651" title="data points to a larger block of data, where the larger block is reference counted. internalPacketRefCountedData is used in this case">InternalPacket::REF_COUNTED</a>;</div>
<div class="line"><a name="l03854"></a><span class="lineno"> 3854</span>&#160;    internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>=ourOffset;</div>
<div class="line"><a name="l03855"></a><span class="lineno"> 3855</span>&#160;    <span class="keywordflow">if</span> (*refCounter==0)</div>
<div class="line"><a name="l03856"></a><span class="lineno"> 3856</span>&#160;    {</div>
<div class="line"><a name="l03857"></a><span class="lineno"> 3857</span>&#160;        *refCounter = refCountedDataPool.Allocate(<a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l03858"></a><span class="lineno"> 3858</span>&#160;        <span class="comment">// *refCounter = SLNet::OP_NEW&lt;InternalPacketRefCountedData&gt;(_FILE_AND_LINE_);</span></div>
<div class="line"><a name="l03859"></a><span class="lineno"> 3859</span>&#160;        (*refCounter)-&gt;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a84e916aa1d9dbe7d91b751fa86569335">refCount</a>=1;</div>
<div class="line"><a name="l03860"></a><span class="lineno"> 3860</span>&#160;        (*refCounter)-&gt;sharedDataBlock=externallyAllocatedPtr;</div>
<div class="line"><a name="l03861"></a><span class="lineno"> 3861</span>&#160;    }</div>
<div class="line"><a name="l03862"></a><span class="lineno"> 3862</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l03863"></a><span class="lineno"> 3863</span>&#160;        (*refCounter)-&gt;refCount++;</div>
<div class="line"><a name="l03864"></a><span class="lineno"> 3864</span>&#160;    internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a2d459505f68f0ac9d914f471625eddea">refCountedData</a>=(*refCounter);</div>
<div class="line"><a name="l03865"></a><span class="lineno"> 3865</span>&#160;}</div>
<div class="line"><a name="l03866"></a><span class="lineno"> 3866</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03867"></a><span class="lineno"> 3867</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::AllocInternalPacketData(<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *internalPacket, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *externallyAllocatedPtr)</div>
<div class="line"><a name="l03868"></a><span class="lineno"> 3868</span>&#160;{</div>
<div class="line"><a name="l03869"></a><span class="lineno"> 3869</span>&#160;    internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a923316ee89426c1e6078d9a4c83c4061">allocationScheme</a>=<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ab9f3530490f074239c783495e4d176a0a8a25cc0b17e6ab9242ba0e5dc9461a0b" title="Data is allocated using rakMalloc. Just free it.">InternalPacket::NORMAL</a>;</div>
<div class="line"><a name="l03870"></a><span class="lineno"> 3870</span>&#160;    internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>=externallyAllocatedPtr;</div>
<div class="line"><a name="l03871"></a><span class="lineno"> 3871</span>&#160;}</div>
<div class="line"><a name="l03872"></a><span class="lineno"> 3872</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03873"></a><span class="lineno"> 3873</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::AllocInternalPacketData(<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *internalPacket, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numBytes, <span class="keywordtype">bool</span> allowStack, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line)</div>
<div class="line"><a name="l03874"></a><span class="lineno"> 3874</span>&#160;{</div>
<div class="line"><a name="l03875"></a><span class="lineno"> 3875</span>&#160;    <span class="keywordflow">if</span> (allowStack &amp;&amp; numBytes &lt;= <span class="keyword">sizeof</span>(internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#aa69c725aa9547a997f661535a740e31b">stackData</a>))</div>
<div class="line"><a name="l03876"></a><span class="lineno"> 3876</span>&#160;    {</div>
<div class="line"><a name="l03877"></a><span class="lineno"> 3877</span>&#160;        internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a923316ee89426c1e6078d9a4c83c4061">allocationScheme</a>=<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ab9f3530490f074239c783495e4d176a0a7f9bbca8ea2711a8729f8c0dbf5c8f58">InternalPacket::STACK</a>;</div>
<div class="line"><a name="l03878"></a><span class="lineno"> 3878</span>&#160;        internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>=internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#aa69c725aa9547a997f661535a740e31b">stackData</a>;</div>
<div class="line"><a name="l03879"></a><span class="lineno"> 3879</span>&#160;    }</div>
<div class="line"><a name="l03880"></a><span class="lineno"> 3880</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l03881"></a><span class="lineno"> 3881</span>&#160;    {</div>
<div class="line"><a name="l03882"></a><span class="lineno"> 3882</span>&#160;        internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a923316ee89426c1e6078d9a4c83c4061">allocationScheme</a>=<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ab9f3530490f074239c783495e4d176a0a8a25cc0b17e6ab9242ba0e5dc9461a0b" title="Data is allocated using rakMalloc. Just free it.">InternalPacket::NORMAL</a>;</div>
<div class="line"><a name="l03883"></a><span class="lineno"> 3883</span>&#160;        internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>=(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*) <a class="code" href="../../d9/d4c/_rak_memory_override_8cpp.xhtml#aebeb2e4754399ea3e2c7af3dd9bbe8c3">rakMalloc_Ex</a>(numBytes,file,line);</div>
<div class="line"><a name="l03884"></a><span class="lineno"> 3884</span>&#160;    }</div>
<div class="line"><a name="l03885"></a><span class="lineno"> 3885</span>&#160;}</div>
<div class="line"><a name="l03886"></a><span class="lineno"> 3886</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03887"></a><span class="lineno"> 3887</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::FreeInternalPacketData(<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *internalPacket, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line)</div>
<div class="line"><a name="l03888"></a><span class="lineno"> 3888</span>&#160;{</div>
<div class="line"><a name="l03889"></a><span class="lineno"> 3889</span>&#160;    <span class="keywordflow">if</span> (internalPacket==0)</div>
<div class="line"><a name="l03890"></a><span class="lineno"> 3890</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l03891"></a><span class="lineno"> 3891</span>&#160;</div>
<div class="line"><a name="l03892"></a><span class="lineno"> 3892</span>&#160;    <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a923316ee89426c1e6078d9a4c83c4061">allocationScheme</a>==<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ab9f3530490f074239c783495e4d176a0a7153cb6d9548b358df1f5d3777444651" title="data points to a larger block of data, where the larger block is reference counted. internalPacketRefCountedData is used in this case">InternalPacket::REF_COUNTED</a>)</div>
<div class="line"><a name="l03893"></a><span class="lineno"> 3893</span>&#160;    {</div>
<div class="line"><a name="l03894"></a><span class="lineno"> 3894</span>&#160;        <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a2d459505f68f0ac9d914f471625eddea">refCountedData</a>==0)</div>
<div class="line"><a name="l03895"></a><span class="lineno"> 3895</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l03896"></a><span class="lineno"> 3896</span>&#160;</div>
<div class="line"><a name="l03897"></a><span class="lineno"> 3897</span>&#160;        internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a2d459505f68f0ac9d914f471625eddea">refCountedData</a>-&gt;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a84e916aa1d9dbe7d91b751fa86569335">refCount</a>--;</div>
<div class="line"><a name="l03898"></a><span class="lineno"> 3898</span>&#160;        <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a2d459505f68f0ac9d914f471625eddea">refCountedData</a>-&gt;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a84e916aa1d9dbe7d91b751fa86569335">refCount</a>==0)</div>
<div class="line"><a name="l03899"></a><span class="lineno"> 3899</span>&#160;        {</div>
<div class="line"><a name="l03900"></a><span class="lineno"> 3900</span>&#160;            <a class="code" href="../../d9/d4c/_rak_memory_override_8cpp.xhtml#ab91fbe0570bf501cd97a53c6cffcef8f">rakFree_Ex</a>(internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a2d459505f68f0ac9d914f471625eddea">refCountedData</a>-&gt;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#adc73cd1d66d8e19751f3820654e8bec9">sharedDataBlock</a>, file, line );</div>
<div class="line"><a name="l03901"></a><span class="lineno"> 3901</span>&#160;            internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a2d459505f68f0ac9d914f471625eddea">refCountedData</a>-&gt;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#adc73cd1d66d8e19751f3820654e8bec9">sharedDataBlock</a>=0;</div>
<div class="line"><a name="l03902"></a><span class="lineno"> 3902</span>&#160;            <span class="comment">// SLNet::OP_DELETE(internalPacket-&gt;refCountedData,file, line);</span></div>
<div class="line"><a name="l03903"></a><span class="lineno"> 3903</span>&#160;            refCountedDataPool.Release(internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a2d459505f68f0ac9d914f471625eddea">refCountedData</a>,file, line);</div>
<div class="line"><a name="l03904"></a><span class="lineno"> 3904</span>&#160;            internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a2d459505f68f0ac9d914f471625eddea">refCountedData</a>=0;</div>
<div class="line"><a name="l03905"></a><span class="lineno"> 3905</span>&#160;        }</div>
<div class="line"><a name="l03906"></a><span class="lineno"> 3906</span>&#160;    }</div>
<div class="line"><a name="l03907"></a><span class="lineno"> 3907</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#a923316ee89426c1e6078d9a4c83c4061">allocationScheme</a>==<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ab9f3530490f074239c783495e4d176a0a8a25cc0b17e6ab9242ba0e5dc9461a0b" title="Data is allocated using rakMalloc. Just free it.">InternalPacket::NORMAL</a>)</div>
<div class="line"><a name="l03908"></a><span class="lineno"> 3908</span>&#160;    {</div>
<div class="line"><a name="l03909"></a><span class="lineno"> 3909</span>&#160;        <span class="keywordflow">if</span> (internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>==0)</div>
<div class="line"><a name="l03910"></a><span class="lineno"> 3910</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l03911"></a><span class="lineno"> 3911</span>&#160;</div>
<div class="line"><a name="l03912"></a><span class="lineno"> 3912</span>&#160;        <a class="code" href="../../d9/d4c/_rak_memory_override_8cpp.xhtml#ab91fbe0570bf501cd97a53c6cffcef8f">rakFree_Ex</a>(internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>, file, line );</div>
<div class="line"><a name="l03913"></a><span class="lineno"> 3913</span>&#160;        internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>=0;</div>
<div class="line"><a name="l03914"></a><span class="lineno"> 3914</span>&#160;    }</div>
<div class="line"><a name="l03915"></a><span class="lineno"> 3915</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l03916"></a><span class="lineno"> 3916</span>&#160;    {</div>
<div class="line"><a name="l03917"></a><span class="lineno"> 3917</span>&#160;        <span class="comment">// Data was on stack</span></div>
<div class="line"><a name="l03918"></a><span class="lineno"> 3918</span>&#160;        internalPacket-&gt;<a class="code" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml#ae0124bba032baf45f71b15d7b8fda2fa" title="Buffer is a pointer to the actual data, assuming this packet has data at all.">data</a>=0;</div>
<div class="line"><a name="l03919"></a><span class="lineno"> 3919</span>&#160;    }</div>
<div class="line"><a name="l03920"></a><span class="lineno"> 3920</span>&#160;}</div>
<div class="line"><a name="l03921"></a><span class="lineno"> 3921</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03922"></a><span class="lineno"> 3922</span>&#160;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ReliabilityLayer::GetMaxDatagramSizeExcludingMessageHeaderBytes(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l03923"></a><span class="lineno"> 3923</span>&#160;{</div>
<div class="line"><a name="l03924"></a><span class="lineno"> 3924</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> val = congestionManager.GetMTU() - DatagramHeaderFormat::GetDataHeaderByteLength();</div>
<div class="line"><a name="l03925"></a><span class="lineno"> 3925</span>&#160;</div>
<div class="line"><a name="l03926"></a><span class="lineno"> 3926</span>&#160;<span class="preprocessor">#if LIBCAT_SECURITY==1</span></div>
<div class="line"><a name="l03927"></a><span class="lineno"> 3927</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">if</span> (useSecurity)</div>
<div class="line"><a name="l03928"></a><span class="lineno"> 3928</span>&#160;        val -= cat::AuthenticatedEncryption::OVERHEAD_BYTES;</div>
<div class="line"><a name="l03929"></a><span class="lineno"> 3929</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l03930"></a><span class="lineno"> 3930</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l03931"></a><span class="lineno"> 3931</span>&#160;    <span class="keywordflow">return</span> val;</div>
<div class="line"><a name="l03932"></a><span class="lineno"> 3932</span>&#160;}</div>
<div class="line"><a name="l03933"></a><span class="lineno"> 3933</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03934"></a><span class="lineno"> 3934</span>&#160;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> ReliabilityLayer::GetMaxDatagramSizeExcludingMessageHeaderBits(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l03935"></a><span class="lineno"> 3935</span>&#160;{</div>
<div class="line"><a name="l03936"></a><span class="lineno"> 3936</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(GetMaxDatagramSizeExcludingMessageHeaderBytes());</div>
<div class="line"><a name="l03937"></a><span class="lineno"> 3937</span>&#160;}</div>
<div class="line"><a name="l03938"></a><span class="lineno"> 3938</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03939"></a><span class="lineno"> 3939</span>&#160;<span class="keywordtype">void</span> ReliabilityLayer::InitHeapWeights(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l03940"></a><span class="lineno"> 3940</span>&#160;{</div>
<div class="line"><a name="l03941"></a><span class="lineno"> 3941</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> priorityLevel=0; priorityLevel &lt; <a class="code" href="../../d7/d03/_packet_priority_8h.xhtml#a659378374e516180f93640c79f59705ca619c0d06913ad9d663b086aca30f7cdc">NUMBER_OF_PRIORITIES</a>; priorityLevel++)</div>
<div class="line"><a name="l03942"></a><span class="lineno"> 3942</span>&#160;        outgoingPacketBufferNextWeights[priorityLevel]=(1&lt;&lt;priorityLevel)*priorityLevel+priorityLevel;</div>
<div class="line"><a name="l03943"></a><span class="lineno"> 3943</span>&#160;}</div>
<div class="line"><a name="l03944"></a><span class="lineno"> 3944</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03945"></a><span class="lineno"> 3945</span>&#160;<a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#ab27f4cdc690fb1fc6d083601b79d5e99">reliabilityHeapWeightType</a> ReliabilityLayer::GetNextWeight(<span class="keywordtype">int</span> priorityLevel)</div>
<div class="line"><a name="l03946"></a><span class="lineno"> 3946</span>&#160;{</div>
<div class="line"><a name="l03947"></a><span class="lineno"> 3947</span>&#160;    <a class="code" href="../../df/df2/_native_types_8h.xhtml#ad27ed092432b64ff558d2254c278720f">uint64_t</a> next = outgoingPacketBufferNextWeights[priorityLevel];</div>
<div class="line"><a name="l03948"></a><span class="lineno"> 3948</span>&#160;    <span class="keywordflow">if</span> (outgoingPacketBuffer.Size()&gt;0)</div>
<div class="line"><a name="l03949"></a><span class="lineno"> 3949</span>&#160;    {</div>
<div class="line"><a name="l03950"></a><span class="lineno"> 3950</span>&#160;        <span class="keywordtype">int</span> peekPL = outgoingPacketBuffer.Peek()-&gt;priority;</div>
<div class="line"><a name="l03951"></a><span class="lineno"> 3951</span>&#160;        <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#ab27f4cdc690fb1fc6d083601b79d5e99">reliabilityHeapWeightType</a> weight = outgoingPacketBuffer.PeekWeight();</div>
<div class="line"><a name="l03952"></a><span class="lineno"> 3952</span>&#160;        <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#ab27f4cdc690fb1fc6d083601b79d5e99">reliabilityHeapWeightType</a> min = weight - (1&lt;&lt;peekPL)*peekPL+peekPL;</div>
<div class="line"><a name="l03953"></a><span class="lineno"> 3953</span>&#160;        <span class="keywordflow">if</span> (next&lt;min)</div>
<div class="line"><a name="l03954"></a><span class="lineno"> 3954</span>&#160;            next=min + (1&lt;&lt;priorityLevel)*priorityLevel+priorityLevel;</div>
<div class="line"><a name="l03955"></a><span class="lineno"> 3955</span>&#160;        outgoingPacketBufferNextWeights[priorityLevel]=next+(1&lt;&lt;priorityLevel)*(priorityLevel+1)+priorityLevel;</div>
<div class="line"><a name="l03956"></a><span class="lineno"> 3956</span>&#160;    }</div>
<div class="line"><a name="l03957"></a><span class="lineno"> 3957</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l03958"></a><span class="lineno"> 3958</span>&#160;    {</div>
<div class="line"><a name="l03959"></a><span class="lineno"> 3959</span>&#160;        InitHeapWeights();</div>
<div class="line"><a name="l03960"></a><span class="lineno"> 3960</span>&#160;    }</div>
<div class="line"><a name="l03961"></a><span class="lineno"> 3961</span>&#160;    <span class="keywordflow">return</span> next;</div>
<div class="line"><a name="l03962"></a><span class="lineno"> 3962</span>&#160;}</div>
<div class="line"><a name="l03963"></a><span class="lineno"> 3963</span>&#160;</div>
<div class="line"><a name="l03964"></a><span class="lineno"> 3964</span>&#160;<span class="comment">//-------------------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l03965"></a><span class="lineno"> 3965</span>&#160;<span class="comment">// #if defined(RELIABILITY_LAYER_NEW_UNDEF_ALLOCATING_QUEUE)</span></div>
<div class="line"><a name="l03966"></a><span class="lineno"> 3966</span>&#160;<span class="comment">// #pragma pop_macro(&quot;new&quot;)</span></div>
<div class="line"><a name="l03967"></a><span class="lineno"> 3967</span>&#160;<span class="comment">// #undef RELIABILITY_LAYER_NEW_UNDEF_ALLOCATING_QUEUE</span></div>
<div class="line"><a name="l03968"></a><span class="lineno"> 3968</span>&#160;<span class="comment">// #endif</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_74389ed8173ad57b461b9d623a1f3867.xhtml">Source</a></li><li class="navelem"><a class="el" href="../../dir_d1eb22c2ecfd8b50f59e9cbaf8260105.xhtml">src</a></li><li class="navelem"><a class="el" href="../../d9/d15/_reliability_layer_8cpp.xhtml">ReliabilityLayer.cpp</a></li>
    <li class="footer">Generated on Wed Aug 14 2019 22:09:47 for SLikeNet by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.2 </li>
  </ul>
</div>
</body>
</html>
