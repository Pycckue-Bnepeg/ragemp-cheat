<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>SLikeNet: SLNet::StringTable Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SLikeNet
   &#160;<span id="projectnumber">0.1.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../modules.xhtml"><span>Modules</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="../../files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="../../classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="../../inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="../../functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('d9/d49/class_s_l_net_1_1_string_table.xhtml','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="#pro-static-attribs">Static Protected Attributes</a> &#124;
<a href="../../d6/dfc/class_s_l_net_1_1_string_table-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">SLNet::StringTable Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Writes a string index, instead of the whole string.  
 <a href="../../d9/d49/class_s_l_net_1_1_string_table.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d3/d0e/_string_table_8h_source.xhtml">slikenet/StringTable.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a1772239d39a3e9c1a190774d827c276a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/d49/class_s_l_net_1_1_string_table.xhtml#a1772239d39a3e9c1a190774d827c276a">~StringTable</a> ()</td></tr>
<tr class="separator:a1772239d39a3e9c1a190774d827c276a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd93f02e3cb08103e0f2c03c04255d90"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/d49/class_s_l_net_1_1_string_table.xhtml#abd93f02e3cb08103e0f2c03c04255d90">AddString</a> (const char *str, bool copyString)</td></tr>
<tr class="separator:abd93f02e3cb08103e0f2c03c04255d90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37fbc7bcc37c1fff0f41b52ad3c18135"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/d49/class_s_l_net_1_1_string_table.xhtml#a37fbc7bcc37c1fff0f41b52ad3c18135">EncodeString</a> (const char *input, int maxCharsToWrite, <a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *output)</td></tr>
<tr class="separator:a37fbc7bcc37c1fff0f41b52ad3c18135"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae53f3af04d00b77d862c3cfaa6d009fd"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/d49/class_s_l_net_1_1_string_table.xhtml#ae53f3af04d00b77d862c3cfaa6d009fd">DecodeString</a> (char *output, int maxCharsToWrite, <a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *input)</td></tr>
<tr class="separator:ae53f3af04d00b77d862c3cfaa6d009fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e18ab7bcd59dfc3e2ac78b85a60e659"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/d49/class_s_l_net_1_1_string_table.xhtml#a0e18ab7bcd59dfc3e2ac78b85a60e659">StringTable</a> ()</td></tr>
<tr class="memdesc:a0e18ab7bcd59dfc3e2ac78b85a60e659"><td class="mdescLeft">&#160;</td><td class="mdescRight">Private Constructor.  <a href="#a0e18ab7bcd59dfc3e2ac78b85a60e659"></a><br/></td></tr>
<tr class="separator:a0e18ab7bcd59dfc3e2ac78b85a60e659"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a79ffc00fb29db388489a982a0f39a7be"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d9/d49/class_s_l_net_1_1_string_table.xhtml">StringTable</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/d49/class_s_l_net_1_1_string_table.xhtml#a79ffc00fb29db388489a982a0f39a7be">Instance</a> (void)</td></tr>
<tr class="separator:a79ffc00fb29db388489a982a0f39a7be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a419a84cb6af498ea958ed7996b7a67be"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/d49/class_s_l_net_1_1_string_table.xhtml#a419a84cb6af498ea958ed7996b7a67be">AddReference</a> (void)</td></tr>
<tr class="memdesc:a419a84cb6af498ea958ed7996b7a67be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used so I can allocate and deallocate this singleton at runtime.  <a href="#a419a84cb6af498ea958ed7996b7a67be"></a><br/></td></tr>
<tr class="separator:a419a84cb6af498ea958ed7996b7a67be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf88fc8afa1e79e105110cebd2c81b72"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/d49/class_s_l_net_1_1_string_table.xhtml#abf88fc8afa1e79e105110cebd2c81b72">RemoveReference</a> (void)</td></tr>
<tr class="memdesc:abf88fc8afa1e79e105110cebd2c81b72"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used so I can allocate and deallocate this singleton at runtime.  <a href="#abf88fc8afa1e79e105110cebd2c81b72"></a><br/></td></tr>
<tr class="separator:abf88fc8afa1e79e105110cebd2c81b72"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a228146b55c10117ff2311fc860f89147"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/d49/class_s_l_net_1_1_string_table.xhtml#a228146b55c10117ff2311fc860f89147">LogStringNotFound</a> (const char *strName)</td></tr>
<tr class="separator:a228146b55c10117ff2311fc860f89147"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a97b8695ff09609662de488660a993071"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml">DataStructures::OrderedList</a><br class="typebreak"/>
&lt; char *, <a class="el" href="../../d3/d0e/_string_table_8h.xhtml#da/dc7/struct_str_and_bool">StrAndBool</a>, <br class="typebreak"/>
<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a981e5820a4f85efc5ce11e6088a47e0f">StrAndBoolComp</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/d49/class_s_l_net_1_1_string_table.xhtml#a97b8695ff09609662de488660a993071">orderedStringList</a></td></tr>
<tr class="separator:a97b8695ff09609662de488660a993071"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-static-attribs"></a>
Static Protected Attributes</h2></td></tr>
<tr class="memitem:a0ee1c91fdca2c5f4c8657dd4cc4e03ad"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d9/d49/class_s_l_net_1_1_string_table.xhtml">StringTable</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/d49/class_s_l_net_1_1_string_table.xhtml#a0ee1c91fdca2c5f4c8657dd4cc4e03ad">instance</a> =0</td></tr>
<tr class="memdesc:a0ee1c91fdca2c5f4c8657dd4cc4e03ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Singleton instance.  <a href="#a0ee1c91fdca2c5f4c8657dd4cc4e03ad"></a><br/></td></tr>
<tr class="separator:a0ee1c91fdca2c5f4c8657dd4cc4e03ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa32ce681913860538db4099e86bb5ff8"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/d49/class_s_l_net_1_1_string_table.xhtml#aa32ce681913860538db4099e86bb5ff8">referenceCount</a> =0</td></tr>
<tr class="separator:aa32ce681913860538db4099e86bb5ff8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Writes a string index, instead of the whole string. </p>
<p>This is an even more efficient alternative to <a class="el" href="../../de/d3d/class_s_l_net_1_1_string_compressor.xhtml" title="Writes and reads strings to and from bitstreams.">StringCompressor</a> in that it writes a single byte from a lookup table and only does compression.<br/>
 if the string does not already exist in the table.<br/>
 All string tables must match on all systems - hence you must add all the strings in the same order on all systems.<br/>
 Furthermore, this must be done before sending packets that use this class, since the strings are ordered for fast lookup. Adding after that time would mess up all the indices so don't do it.<br/>
 Don't use this class to write strings which were not previously registered with AddString, since you just waste bandwidth then. Use <a class="el" href="../../de/d3d/class_s_l_net_1_1_string_compressor.xhtml" title="Writes and reads strings to and from bitstreams.">StringCompressor</a> instead. </p>

<p>Definition at line <a class="el" href="../../d3/d0e/_string_table_8h_source.xhtml#l00055">55</a> of file <a class="el" href="../../d3/d0e/_string_table_8h_source.xhtml">StringTable.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a1772239d39a3e9c1a190774d827c276a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">StringTable::~StringTable </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml">StringTable.cpp</a>.</p>

<p>References <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00047">_FILE_AND_LINE_</a>, <a class="el" href="../../d3/d0e/_string_table_8h_source.xhtml#l00104">orderedStringList</a>, <a class="el" href="../../d9/d4c/_rak_memory_override_8cpp_source.xhtml#l00064">rakFree_Ex</a>, and <a class="el" href="../../d6/d4d/_d_s___ordered_list_8h_source.xhtml#l00274">DataStructures::OrderedList&lt; key_type, data_type, default_comparison_function &gt;::Size()</a>.</p>

</div>
</div>
<a class="anchor" id="a0e18ab7bcd59dfc3e2ac78b85a60e659"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">StringTable::StringTable </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Private Constructor. </p>

<p>Definition at line <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml">StringTable.cpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a419a84cb6af498ea958ed7996b7a67be"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void StringTable::AddReference </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Used so I can allocate and deallocate this singleton at runtime. </p>

<p>Definition at line <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml#l00050">50</a> of file <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml">StringTable.cpp</a>.</p>

<p>References <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00047">_FILE_AND_LINE_</a>, <a class="el" href="../../d3/d0e/_string_table_8h_source.xhtml#l00101">instance</a>, and <a class="el" href="../../d3/d0e/_string_table_8h_source.xhtml#l00102">referenceCount</a>.</p>

<p>Referenced by <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l00192">SLNet::RakPeer::RakPeer()</a>.</p>

</div>
</div>
<a class="anchor" id="abd93f02e3cb08103e0f2c03c04255d90"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void StringTable::AddString </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>copyString</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Add a string to the string table. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>The string to add to the string table </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">copyString</td><td>true to make a copy of the passed string (takes more memory), false to not do so (if your string is in static memory). </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml#l00076">76</a> of file <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml">StringTable.cpp</a>.</p>

<p>References <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00047">_FILE_AND_LINE_</a>, <a class="el" href="../../d3/d0e/_string_table_8h_source.xhtml#l00042">StrAndBool::b</a>, <a class="el" href="../../d6/d4d/_d_s___ordered_list_8h_source.xhtml#l00176">DataStructures::OrderedList&lt; key_type, data_type, default_comparison_function &gt;::Insert()</a>, <a class="el" href="../../d3/d0e/_string_table_8h_source.xhtml#l00104">orderedStringList</a>, <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>, <a class="el" href="../../d9/d4c/_rak_memory_override_8cpp_source.xhtml#l00062">rakMalloc_Ex</a>, <a class="el" href="../../d6/d4d/_d_s___ordered_list_8h_source.xhtml#l00274">DataStructures::OrderedList&lt; key_type, data_type, default_comparison_function &gt;::Size()</a>, and <a class="el" href="../../d3/d0e/_string_table_8h_source.xhtml#l00041">StrAndBool::str</a>.</p>

</div>
</div>
<a class="anchor" id="ae53f3af04d00b77d862c3cfaa6d009fd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool StringTable::DecodeString </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>maxCharsToWrite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>input</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Writes input to output, uncompressed. Takes care of the null terminator for you. Relies on the <a class="el" href="../../de/d3d/class_s_l_net_1_1_string_compressor.xhtml" title="Writes and reads strings to and from bitstreams.">StringCompressor</a> class, which is automatically reference counted in the constructor and destructor in <a class="el" href="../../d5/dbf/class_s_l_net_1_1_rak_peer.xhtml" title="Main interface for network communications.">RakPeer</a>. You can call the reference counting functions yourself if you wish too. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>A block of bytes to receive the output </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">maxCharsToWrite</td><td>Size, in bytes, of <em>output</em> . A NULL terminator will always be appended to the output string. If the maxCharsToWrite is not large enough, the string will be truncated. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>The bitstream containing the compressed string </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml#l00116">116</a> of file <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml">StringTable.cpp</a>.</p>

<p>References <a class="el" href="../../d5/df6/_string_compressor_8cpp_source.xhtml#l00404">SLNet::StringCompressor::DecodeString()</a>, <a class="el" href="../../d5/df6/_string_compressor_8cpp_source.xhtml#l00062">SLNet::StringCompressor::Instance()</a>, <a class="el" href="../../d3/d0e/_string_table_8h_source.xhtml#l00104">orderedStringList</a>, <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>, <a class="el" href="../../d7/dc3/_bit_stream_8h_source.xhtml#l01279">SLNet::BitStream::Read()</a>, and <a class="el" href="../../d6/d4d/_d_s___ordered_list_8h_source.xhtml#l00274">DataStructures::OrderedList&lt; key_type, data_type, default_comparison_function &gt;::Size()</a>.</p>

</div>
</div>
<a class="anchor" id="a37fbc7bcc37c1fff0f41b52ad3c18135"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void StringTable::EncodeString </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>maxCharsToWrite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>output</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Writes input to output, compressed. Takes care of the null terminator for you. Relies on the <a class="el" href="../../de/d3d/class_s_l_net_1_1_string_compressor.xhtml" title="Writes and reads strings to and from bitstreams.">StringCompressor</a> class, which is automatically reference counted in the constructor and destructor in <a class="el" href="../../d5/dbf/class_s_l_net_1_1_rak_peer.xhtml" title="Main interface for network communications.">RakPeer</a>. You can call the reference counting functions yourself if you wish too. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Pointer to an ASCII string </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">maxCharsToWrite</td><td>The size of <em>input</em> </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output</td><td>The bitstream to write the compressed string to </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml#l00097">97</a> of file <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml">StringTable.cpp</a>.</p>

<p>References <a class="el" href="../../d5/df6/_string_compressor_8cpp_source.xhtml#l00371">SLNet::StringCompressor::EncodeString()</a>, <a class="el" href="../../d6/d4d/_d_s___ordered_list_8h_source.xhtml#l00124">DataStructures::OrderedList&lt; key_type, data_type, default_comparison_function &gt;::GetIndexFromKey()</a>, <a class="el" href="../../d5/df6/_string_compressor_8cpp_source.xhtml#l00062">SLNet::StringCompressor::Instance()</a>, <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml#l00150">LogStringNotFound()</a>, <a class="el" href="../../d3/d0e/_string_table_8h_source.xhtml#l00104">orderedStringList</a>, and <a class="el" href="../../d7/dc3/_bit_stream_8h_source.xhtml#l00922">SLNet::BitStream::Write()</a>.</p>

</div>
</div>
<a class="anchor" id="a79ffc00fb29db388489a982a0f39a7be"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/d49/class_s_l_net_1_1_string_table.xhtml">StringTable</a> * StringTable::Instance </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>static function because only static functions can access static members The <a class="el" href="../../d5/dbf/class_s_l_net_1_1_rak_peer.xhtml" title="Main interface for network communications.">RakPeer</a> constructor adds a reference to this class, so don't call this until an instance of <a class="el" href="../../d5/dbf/class_s_l_net_1_1_rak_peer.xhtml" title="Main interface for network communications.">RakPeer</a> exists, or unless you call AddReference yourself. </p>
<dl class="section return"><dt>Returns</dt><dd>the unique instance of the <a class="el" href="../../d9/d49/class_s_l_net_1_1_string_table.xhtml" title="Writes a string index, instead of the whole string.">StringTable</a> </dd></dl>

<p>Definition at line <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml#l00071">71</a> of file <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml">StringTable.cpp</a>.</p>

<p>References <a class="el" href="../../d3/d0e/_string_table_8h_source.xhtml#l00101">instance</a>.</p>

</div>
</div>
<a class="anchor" id="a228146b55c10117ff2311fc860f89147"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void StringTable::LogStringNotFound </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>strName</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Called when you mess up and send a string using this class that was not registered with AddString </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">maxCharsToWrite</td><td>Size, in bytes, of <em>output</em> . A NULL terminator will always be appended to the output string. If the maxCharsToWrite is not large enough, the string will be truncated. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml#l00150">150</a> of file <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml">StringTable.cpp</a>.</p>

<p>References <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00098">RAKNET_DEBUG_PRINTF</a>.</p>

<p>Referenced by <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml#l00097">EncodeString()</a>.</p>

</div>
</div>
<a class="anchor" id="abf88fc8afa1e79e105110cebd2c81b72"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void StringTable::RemoveReference </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Used so I can allocate and deallocate this singleton at runtime. </p>

<p>Definition at line <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml#l00057">57</a> of file <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml">StringTable.cpp</a>.</p>

<p>References <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00047">_FILE_AND_LINE_</a>, <a class="el" href="../../d3/d0e/_string_table_8h_source.xhtml#l00101">instance</a>, <a class="el" href="../../dd/dc5/memoryoverride_8h_source.xhtml#l00182">SLNet::OP_DELETE()</a>, <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>, and <a class="el" href="../../d3/d0e/_string_table_8h_source.xhtml#l00102">referenceCount</a>.</p>

<p>Referenced by <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l00319">SLNet::RakPeer::~RakPeer()</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="a0ee1c91fdca2c5f4c8657dd4cc4e03ad"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/d49/class_s_l_net_1_1_string_table.xhtml">StringTable</a> * StringTable::instance =0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Singleton instance. </p>

<p>Definition at line <a class="el" href="../../d3/d0e/_string_table_8h_source.xhtml#l00101">101</a> of file <a class="el" href="../../d3/d0e/_string_table_8h_source.xhtml">StringTable.h</a>.</p>

<p>Referenced by <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml#l00050">AddReference()</a>, <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml#l00071">Instance()</a>, and <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml#l00057">RemoveReference()</a>.</p>

</div>
</div>
<a class="anchor" id="a97b8695ff09609662de488660a993071"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml">DataStructures::OrderedList</a>&lt;char *, <a class="el" href="../../d3/d0e/_string_table_8h.xhtml#da/dc7/struct_str_and_bool">StrAndBool</a>, <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a981e5820a4f85efc5ce11e6088a47e0f">StrAndBoolComp</a>&gt; SLNet::StringTable::orderedStringList</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d3/d0e/_string_table_8h_source.xhtml#l00104">104</a> of file <a class="el" href="../../d3/d0e/_string_table_8h_source.xhtml">StringTable.h</a>.</p>

<p>Referenced by <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml#l00076">AddString()</a>, <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml#l00116">DecodeString()</a>, <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml#l00097">EncodeString()</a>, and <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml#l00040">~StringTable()</a>.</p>

</div>
</div>
<a class="anchor" id="aa32ce681913860538db4099e86bb5ff8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int StringTable::referenceCount =0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d3/d0e/_string_table_8h_source.xhtml#l00102">102</a> of file <a class="el" href="../../d3/d0e/_string_table_8h_source.xhtml">StringTable.h</a>.</p>

<p>Referenced by <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml#l00050">AddReference()</a>, and <a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml#l00057">RemoveReference()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Source/include/slikenet/<a class="el" href="../../d3/d0e/_string_table_8h_source.xhtml">StringTable.h</a></li>
<li>Source/src/<a class="el" href="../../d7/dcf/_string_table_8cpp_source.xhtml">StringTable.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml">SLNet</a></li><li class="navelem"><a class="el" href="../../d9/d49/class_s_l_net_1_1_string_table.xhtml">StringTable</a></li>
    <li class="footer">Generated on Wed Aug 14 2019 22:09:50 for SLikeNet by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.2 </li>
  </ul>
</div>
</body>
</html>
