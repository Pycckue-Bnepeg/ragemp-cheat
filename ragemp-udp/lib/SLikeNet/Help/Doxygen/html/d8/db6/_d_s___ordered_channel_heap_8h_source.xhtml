<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>SLikeNet: Source/include/slikenet/DS_OrderedChannelHeap.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SLikeNet
   &#160;<span id="projectnumber">0.1.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../modules.xhtml"><span>Modules</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="../../files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="../../globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('d8/db6/_d_s___ordered_channel_heap_8h_source.xhtml','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">DS_OrderedChannelHeap.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d8/db6/_d_s___ordered_channel_heap_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *  Original work: Copyright (c) 2014, Oculus VR, Inc.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  All rights reserved.</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  This source code is licensed under the BSD-style license found in the</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *  RakNet License.txt file in the licenses directory of this source tree. An additional grant </span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  of patent rights can be found in the RakNet Patents.txt file in the same directory.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *  Modified work: Copyright (c) 2017, SLikeSoft UG (haftungsbeschr√§nkt)</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  This source code was modified by SLikeSoft. Modifications are licensed under the MIT-style</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  license found in the license.txt file in the root directory of this source tree.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#ifndef __RAKNET_ORDERED_CHANNEL_HEAP_H</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define __RAKNET_ORDERED_CHANNEL_HEAP_H</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../da/dcb/_d_s___heap_8h.xhtml">DS_Heap.h</a>&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../de/dbe/_d_s___map_8h.xhtml">DS_Map.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../dc/d8d/_d_s___queue_8h.xhtml">DS_Queue.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../db/dbd/_export_8h.xhtml">Export.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../dc/da7/assert_8h.xhtml">assert.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d7/d10/_rand_8h.xhtml" title="[Internal] Random number generator">Rand.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span>DataStructures</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> channel_key_type, <span class="keyword">class</span> heap_data_type, <span class="keywordtype">int</span> (*channel_key_comparison_func)(const channel_key_type&amp;, const channel_key_type&amp;)=defaultMapKeyComparison&lt;channel_key_type&gt; &gt;</div>
<div class="line"><a name="l00037"></a><span class="lineno"><a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml">   37</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../db/dbd/_export_8h.xhtml#ab0579394e418800d5c85e46ad6fcd61d">RAK_DLL_EXPORT</a> <a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml">OrderedChannelHeap</a></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    {</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#aed73f07f296769d86f0373f9cd2ede2d">   40</a></span>&#160;        <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#aed73f07f296769d86f0373f9cd2ede2d">IMPLEMENT_DEFAULT_COMPARISON</a>(<span class="keywordtype">void</span>) {DataStructures::defaultMapKeyComparison&lt;channel_key_type&gt;(channel_key_type(),channel_key_type());}</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml">OrderedChannelHeap</a>();</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        ~<a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml">OrderedChannelHeap</a>();</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordtype">void</span> Push(<span class="keyword">const</span> channel_key_type &amp;channelID, <span class="keyword">const</span> heap_data_type &amp;data);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordtype">void</span> PushAtHead(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> index, <span class="keyword">const</span> channel_key_type &amp;channelID, <span class="keyword">const</span> heap_data_type &amp;data);</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        heap_data_type Pop(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> startingIndex=0);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        heap_data_type Peek(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> startingIndex) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordtype">void</span> AddChannel(<span class="keyword">const</span> channel_key_type &amp;channelID, <span class="keyword">const</span> <span class="keywordtype">double</span> weight);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordtype">void</span> RemoveChannel(channel_key_type channelID);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordtype">void</span> Clear(<span class="keywordtype">void</span>);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        heap_data_type&amp; operator[] ( <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> position ) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordtype">unsigned</span> ChannelSize(<span class="keyword">const</span> channel_key_type &amp;channelID);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordtype">unsigned</span> Size(<span class="keywordtype">void</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml">   55</a></span>&#160;        <span class="keyword">struct </span><a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#d2/df0/struct_data_structures_1_1_ordered_channel_heap_1_1_queue_and_weight">QueueAndWeight</a></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        {</div>
<div class="line"><a name="l00057"></a><span class="lineno"><a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#aa2613a2d88d02022920c7e1e35acff14">   57</a></span>&#160;            <a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml">DataStructures::Queue&lt;double&gt;</a> <a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#aa2613a2d88d02022920c7e1e35acff14">randResultQueue</a>;</div>
<div class="line"><a name="l00058"></a><span class="lineno"><a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a223f9fd06aea86618c8cc771e374d82d">   58</a></span>&#160;            <span class="keywordtype">double</span> <a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a223f9fd06aea86618c8cc771e374d82d">weight</a>;</div>
<div class="line"><a name="l00059"></a><span class="lineno"><a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a2906f6b6bb0f53c33dfd1ce8a7c3d3ba">   59</a></span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a2906f6b6bb0f53c33dfd1ce8a7c3d3ba">signalDeletion</a>;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        };</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div>
<div class="line"><a name="l00062"></a><span class="lineno"><a class="code" href="../../d4/da4/struct_data_structures_1_1_ordered_channel_heap_1_1_heap_channel_and_data.xhtml">   62</a></span>&#160;        <span class="keyword">struct </span><a class="code" href="../../d4/da4/struct_data_structures_1_1_ordered_channel_heap_1_1_heap_channel_and_data.xhtml">HeapChannelAndData</a></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        {</div>
<div class="line"><a name="l00064"></a><span class="lineno"><a class="code" href="../../d4/da4/struct_data_structures_1_1_ordered_channel_heap_1_1_heap_channel_and_data.xhtml#a4f98981f14e84391d0ff2535532c2655">   64</a></span>&#160;            <a class="code" href="../../d4/da4/struct_data_structures_1_1_ordered_channel_heap_1_1_heap_channel_and_data.xhtml#a4f98981f14e84391d0ff2535532c2655">HeapChannelAndData</a>() {}</div>
<div class="line"><a name="l00065"></a><span class="lineno"><a class="code" href="../../d4/da4/struct_data_structures_1_1_ordered_channel_heap_1_1_heap_channel_and_data.xhtml#ada0ca9b94437a7841736d7f6bec2874d">   65</a></span>&#160;            <a class="code" href="../../d4/da4/struct_data_structures_1_1_ordered_channel_heap_1_1_heap_channel_and_data.xhtml#ada0ca9b94437a7841736d7f6bec2874d">HeapChannelAndData</a>(<span class="keyword">const</span> channel_key_type &amp;_channel, <span class="keyword">const</span> heap_data_type &amp;_data) : data(_data), channel(_channel) {}</div>
<div class="line"><a name="l00066"></a><span class="lineno"><a class="code" href="../../d4/da4/struct_data_structures_1_1_ordered_channel_heap_1_1_heap_channel_and_data.xhtml#a64530eaa3b1a5893d83b87d074b2ea61">   66</a></span>&#160;            heap_data_type <a class="code" href="../../d4/da4/struct_data_structures_1_1_ordered_channel_heap_1_1_heap_channel_and_data.xhtml#a64530eaa3b1a5893d83b87d074b2ea61">data</a>;</div>
<div class="line"><a name="l00067"></a><span class="lineno"><a class="code" href="../../d4/da4/struct_data_structures_1_1_ordered_channel_heap_1_1_heap_channel_and_data.xhtml#abe0f345d5b43d1df33b2830ea520a401">   67</a></span>&#160;            channel_key_type <a class="code" href="../../d4/da4/struct_data_structures_1_1_ordered_channel_heap_1_1_heap_channel_and_data.xhtml#abe0f345d5b43d1df33b2830ea520a401">channel</a>;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        };</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00071"></a><span class="lineno"><a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#af858574a5f2f7b6618ae58f0cb4af52d">   71</a></span>&#160;        <a class="code" href="../../dc/da9/class_data_structures_1_1_map.xhtml">DataStructures::Map&lt;channel_key_type, QueueAndWeight*, channel_key_comparison_func&gt;</a> <a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#af858574a5f2f7b6618ae58f0cb4af52d">map</a>;</div>
<div class="line"><a name="l00072"></a><span class="lineno"><a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a71ec113d9527b267cf7f000ff17c330a">   72</a></span>&#160;        <a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml">DataStructures::Heap&lt;double, HeapChannelAndData, true&gt;</a> <a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a71ec113d9527b267cf7f000ff17c330a">heap</a>;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordtype">void</span> GreatestRandResult(<span class="keywordtype">void</span>);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    };</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> channel_key_type, <span class="keyword">class</span> heap_data_type, <span class="keywordtype">int</span> (*channel_key_comparison_func)(const channel_key_type&amp;, const channel_key_type&amp;)&gt;</div>
<div class="line"><a name="l00077"></a><span class="lineno"><a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a26034476bf17dcc86e79c05e7ce761b3">   77</a></span>&#160;        <a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a26034476bf17dcc86e79c05e7ce761b3">OrderedChannelHeap&lt;channel_key_type, heap_data_type, channel_key_comparison_func&gt;::OrderedChannelHeap</a>()</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> channel_key_type, <span class="keyword">class</span> heap_data_type, <span class="keywordtype">int</span> (*channel_key_comparison_func)(const channel_key_type&amp;, const channel_key_type&amp;)&gt;</div>
<div class="line"><a name="l00082"></a><span class="lineno"><a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a2fe40b812e8b80d5baf8c72067238467">   82</a></span>&#160;        <a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a2fe40b812e8b80d5baf8c72067238467">OrderedChannelHeap&lt;channel_key_type, heap_data_type, channel_key_comparison_func&gt;::~OrderedChannelHeap</a>()</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        Clear();</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    }</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> channel_key_type, <span class="keyword">class</span> heap_data_type, <span class="keywordtype">int</span> (*channel_key_comparison_func)(const channel_key_type&amp;, const channel_key_type&amp;)&gt;</div>
<div class="line"><a name="l00088"></a><span class="lineno"><a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#ad8cc882acdd1045a805418b893fb65f2">   88</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#ad8cc882acdd1045a805418b893fb65f2">OrderedChannelHeap&lt;channel_key_type, heap_data_type, channel_key_comparison_func&gt;::Push</a>(<span class="keyword">const</span> channel_key_type &amp;channelID, <span class="keyword">const</span> heap_data_type &amp;data)</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        PushAtHead(<a class="code" href="../../d9/d7f/_d_s___list_8h.xhtml#afc42e3d98c21b07bd24b47aeb8ef2561" title="Maximum unsigned long.">MAX_UNSIGNED_LONG</a>, channelID, data);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> channel_key_type, <span class="keyword">class</span> heap_data_type, <span class="keywordtype">int</span> (*channel_key_comparison_func)(const channel_key_type&amp;, const channel_key_type&amp;)&gt;</div>
<div class="line"><a name="l00094"></a><span class="lineno"><a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a9e92458dd3bf27589f621ae4cfac76da">   94</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a9e92458dd3bf27589f621ae4cfac76da">OrderedChannelHeap&lt;channel_key_type, heap_data_type, channel_key_comparison_func&gt;::GreatestRandResult</a>(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordtype">double</span> greatest;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordtype">unsigned</span> i;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        greatest=0.0;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordflow">for</span> (i=0; i &lt; map.Size(); i++)</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="keywordflow">if</span> (map[i]-&gt;randResultQueue.Size() &amp;&amp; map[i]-&gt;randResultQueue[0]&gt;greatest)</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                greatest=map[i]-&gt;randResultQueue[0];</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        }</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">return</span> greatest;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    }</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> channel_key_type, <span class="keyword">class</span> heap_data_type, <span class="keywordtype">int</span> (*channel_key_comparison_func)(const channel_key_type&amp;, const channel_key_type&amp;)&gt;</div>
<div class="line"><a name="l00108"></a><span class="lineno"><a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a789c8a7b948ef02ca1513c830c16a358">  108</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a789c8a7b948ef02ca1513c830c16a358">OrderedChannelHeap&lt;channel_key_type, heap_data_type, channel_key_comparison_func&gt;::PushAtHead</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> index, <span class="keyword">const</span> channel_key_type &amp;channelID, <span class="keyword">const</span> heap_data_type &amp;data)</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    {</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="comment">// If an assert hits here then this is an unknown channel.  Call AddChannel first.</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#d2/df0/struct_data_structures_1_1_ordered_channel_heap_1_1_queue_and_weight">QueueAndWeight</a> *queueAndWeight=map.Get(channelID);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordtype">double</span> maxRange, minRange, rnd;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordflow">if</span> (queueAndWeight-&gt;<a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#aa2613a2d88d02022920c7e1e35acff14">randResultQueue</a>.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#ae2aec093c82f780558c23f8ae9f296b8">Size</a>()==0)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="comment">// Set maxRange to the greatest random number waiting to be returned, rather than 1.0 necessarily</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="comment">// This is so weights are scaled similarly among channels.  For example, if the head weight for a used channel was .25</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="comment">// and then we added another channel, the new channel would need to choose between .25 and 0</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="comment">// If we chose between 1.0 and 0, it would be 1/.25 (4x) more likely to be at the head of the heap than it should be</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            maxRange=GreatestRandResult();</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keywordflow">if</span> (maxRange==0.0)</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                maxRange=1.0;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            minRange=0.0;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        }</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (index &gt;= queueAndWeight-&gt;<a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#aa2613a2d88d02022920c7e1e35acff14">randResultQueue</a>.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#ae2aec093c82f780558c23f8ae9f296b8">Size</a>())</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        {</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            maxRange=queueAndWeight-&gt;<a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#aa2613a2d88d02022920c7e1e35acff14">randResultQueue</a>[queueAndWeight-&gt;<a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#aa2613a2d88d02022920c7e1e35acff14">randResultQueue</a>.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#ae2aec093c82f780558c23f8ae9f296b8">Size</a>()-1]*.99999999;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            minRange=0.0;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        }</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keywordflow">if</span> (index==0)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                maxRange=GreatestRandResult();</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                <span class="keywordflow">if</span> (maxRange==queueAndWeight-&gt;<a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#aa2613a2d88d02022920c7e1e35acff14">randResultQueue</a>[0])</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                    maxRange=1.0;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            }</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (index &gt;= queueAndWeight-&gt;<a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#aa2613a2d88d02022920c7e1e35acff14">randResultQueue</a>.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#ae2aec093c82f780558c23f8ae9f296b8">Size</a>())</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                maxRange=queueAndWeight-&gt;<a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#aa2613a2d88d02022920c7e1e35acff14">randResultQueue</a>[queueAndWeight-&gt;<a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#aa2613a2d88d02022920c7e1e35acff14">randResultQueue</a>.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#ae2aec093c82f780558c23f8ae9f296b8">Size</a>()-1]*.99999999;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                maxRange=queueAndWeight-&gt;<a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#aa2613a2d88d02022920c7e1e35acff14">randResultQueue</a>[index-1]*.99999999;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            minRange=maxRange=queueAndWeight-&gt;<a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#aa2613a2d88d02022920c7e1e35acff14">randResultQueue</a>[index]*1.00000001;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        }</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="preprocessor">#ifdef _DEBUG</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="preprocessor"></span>        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(maxRange!=0.0);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="preprocessor"></span>        rnd=<a class="code" href="../../da/d82/_rand_8cpp.xhtml#ae1893c71ce567b99bb84624d323368e2">frandomMT</a>() * (maxRange - minRange);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">if</span> (rnd==0.0)</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            rnd=maxRange/2.0;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">if</span> (index &gt;= queueAndWeight-&gt;<a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#aa2613a2d88d02022920c7e1e35acff14">randResultQueue</a>.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#ae2aec093c82f780558c23f8ae9f296b8">Size</a>())</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            queueAndWeight-&gt;<a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#aa2613a2d88d02022920c7e1e35acff14">randResultQueue</a>.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#ae564a88f3367a786777694e778a4500d">Push</a>(rnd);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            queueAndWeight-&gt;<a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#aa2613a2d88d02022920c7e1e35acff14">randResultQueue</a>.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#a3980613e44a80982708b9d1f49fa0fea">PushAtHead</a>(rnd, index);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        heap.Push(rnd*queueAndWeight-&gt;<a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a223f9fd06aea86618c8cc771e374d82d">weight</a>, <a class="code" href="../../d4/da4/struct_data_structures_1_1_ordered_channel_heap_1_1_heap_channel_and_data.xhtml">HeapChannelAndData</a>(channelID, data));</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    }</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> channel_key_type, <span class="keyword">class</span> heap_data_type, <span class="keywordtype">int</span> (*channel_key_comparison_func)(const channel_key_type&amp;, const channel_key_type&amp;)&gt;</div>
<div class="line"><a name="l00161"></a><span class="lineno"><a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a61633143d38c47fedf2b5522f815437e">  161</a></span>&#160;    heap_data_type <a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a61633143d38c47fedf2b5522f815437e">OrderedChannelHeap&lt;channel_key_type, heap_data_type, channel_key_comparison_func&gt;::Pop</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> startingIndex)</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(startingIndex &lt; heap.Size());</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#d2/df0/struct_data_structures_1_1_ordered_channel_heap_1_1_queue_and_weight">QueueAndWeight</a> *queueAndWeight=map.Get(heap[startingIndex].channel);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordflow">if</span> (startingIndex!=0)</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        {</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="comment">// Ugly - have to count in the heap how many nodes have the same channel, so we know where to delete from in the queue</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="keywordtype">unsigned</span> indiceCount=0;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keywordtype">unsigned</span> i;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="keywordflow">for</span> (i=0; i &lt; startingIndex; i++)</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                <span class="keywordflow">if</span> (channel_key_comparison_func(heap[i].channel,heap[startingIndex].channel)==0)</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                    indiceCount++;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            queueAndWeight-&gt;<a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#aa2613a2d88d02022920c7e1e35acff14">randResultQueue</a>.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#a8be7c3107161bb2ad869a9a6bb60605a">RemoveAtIndex</a>(indiceCount);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        }</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        {</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="comment">// TODO - ordered channel heap uses progressively lower values as items are inserted.  But this won&#39;t give relative ordering among channels.  I have to renormalize after every pop.</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            queueAndWeight-&gt;randResultQueue.Pop();</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="comment">// Try to remove the channel after every pop, because doing so is not valid while there are elements in the list.</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keywordflow">if</span> (queueAndWeight-&gt;signalDeletion)</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            RemoveChannel(heap[startingIndex].channel);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keywordflow">return</span> heap.Pop(startingIndex).data;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    }</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> channel_key_type, <span class="keyword">class</span> heap_data_type, <span class="keywordtype">int</span> (*channel_key_comparison_func)(const channel_key_type&amp;, const channel_key_type&amp;)&gt;</div>
<div class="line"><a name="l00190"></a><span class="lineno"><a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#abfba44a3f552ddc905e686e97d91dedd">  190</a></span>&#160;    heap_data_type <a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#abfba44a3f552ddc905e686e97d91dedd">OrderedChannelHeap&lt;channel_key_type, heap_data_type, channel_key_comparison_func&gt;::Peek</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> startingIndex)<span class="keyword"> const</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <a class="code" href="../../d4/da4/struct_data_structures_1_1_ordered_channel_heap_1_1_heap_channel_and_data.xhtml">HeapChannelAndData</a> heapChannelAndData = heap.Peek(startingIndex);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keywordflow">return</span> heapChannelAndData.<a class="code" href="../../d4/da4/struct_data_structures_1_1_ordered_channel_heap_1_1_heap_channel_and_data.xhtml#a64530eaa3b1a5893d83b87d074b2ea61">data</a>;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    }</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> channel_key_type, <span class="keyword">class</span> heap_data_type, <span class="keywordtype">int</span> (*channel_key_comparison_func)(const channel_key_type&amp;, const channel_key_type&amp;)&gt;</div>
<div class="line"><a name="l00197"></a><span class="lineno"><a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a77415d10c497a89faaf05022f7c68b48">  197</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a77415d10c497a89faaf05022f7c68b48">OrderedChannelHeap&lt;channel_key_type, heap_data_type, channel_key_comparison_func&gt;::AddChannel</a>(<span class="keyword">const</span> channel_key_type &amp;channelID, <span class="keyword">const</span> <span class="keywordtype">double</span> weight)</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    {</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#d2/df0/struct_data_structures_1_1_ordered_channel_heap_1_1_queue_and_weight">QueueAndWeight</a> *qaw = SLNet::OP_NEW&lt;QueueAndWeight&gt;( <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        qaw-&gt;<a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a223f9fd06aea86618c8cc771e374d82d">weight</a>=weight;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        qaw-&gt;<a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a2906f6b6bb0f53c33dfd1ce8a7c3d3ba">signalDeletion</a>=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        map.SetNew(channelID, qaw);</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    }</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> channel_key_type, <span class="keyword">class</span> heap_data_type, <span class="keywordtype">int</span> (*channel_key_comparison_func)(const channel_key_type&amp;, const channel_key_type&amp;)&gt;</div>
<div class="line"><a name="l00206"></a><span class="lineno"><a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a6a4af0cc8c59949997588d8efc04c5ee">  206</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a6a4af0cc8c59949997588d8efc04c5ee">OrderedChannelHeap&lt;channel_key_type, heap_data_type, channel_key_comparison_func&gt;::RemoveChannel</a>(channel_key_type channelID)</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    {</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keywordflow">if</span> (map.Has(channelID))</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <span class="keywordtype">unsigned</span> i;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            i=map.GetIndexAtKey(channelID);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <span class="keywordflow">if</span> (map[i]-&gt;randResultQueue.Size()==0)</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            {</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a79772d09451f784e87bec85694fad1ed">SLNet::OP_DELETE</a>(map[i], <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                map.RemoveAtIndex(i);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            }</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            {</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                <span class="comment">// Signal this channel for deletion later, because the heap has nodes with this channel right now</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                map[i]-&gt;signalDeletion=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            }</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        }</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    }</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> channel_key_type, <span class="keyword">class</span> heap_data_type, <span class="keywordtype">int</span> (*channel_key_comparison_func)(const channel_key_type&amp;, const channel_key_type&amp;)&gt;</div>
<div class="line"><a name="l00226"></a><span class="lineno"><a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#af8a9a0b891209e681e13d293b0fe3149">  226</a></span>&#160;        <span class="keywordtype">unsigned</span> <a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#af8a9a0b891209e681e13d293b0fe3149">OrderedChannelHeap&lt;channel_key_type, heap_data_type, channel_key_comparison_func&gt;::Size</a>(<span class="keywordtype">void</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <span class="keywordflow">return</span> heap.Size();</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    }</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> channel_key_type, <span class="keyword">class</span> heap_data_type, <span class="keywordtype">int</span> (*channel_key_comparison_func)(const channel_key_type&amp;, const channel_key_type&amp;)&gt;</div>
<div class="line"><a name="l00232"></a><span class="lineno"><a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a538d385a1eeaeee648511be50d93b88f">  232</a></span>&#160;        heap_data_type&amp; <a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a538d385a1eeaeee648511be50d93b88f">OrderedChannelHeap&lt;channel_key_type, heap_data_type, channel_key_comparison_func&gt;::operator[]</a>( <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> position )<span class="keyword"> const</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keywordflow">return</span> heap[position].data;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    }</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> channel_key_type, <span class="keyword">class</span> heap_data_type, <span class="keywordtype">int</span> (*channel_key_comparison_func)(const channel_key_type&amp;, const channel_key_type&amp;)&gt;</div>
<div class="line"><a name="l00239"></a><span class="lineno"><a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a67f40384fe67108550b6152144b207dc">  239</a></span>&#160;        <span class="keywordtype">unsigned</span> <a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#a67f40384fe67108550b6152144b207dc">OrderedChannelHeap&lt;channel_key_type, heap_data_type, channel_key_comparison_func&gt;::ChannelSize</a>(<span class="keyword">const</span> channel_key_type &amp;channelID)</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    {</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#d2/df0/struct_data_structures_1_1_ordered_channel_heap_1_1_queue_and_weight">QueueAndWeight</a> *queueAndWeight=map.Get(channelID);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keywordflow">return</span> queueAndWeight-&gt;<a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#aa2613a2d88d02022920c7e1e35acff14">randResultQueue</a>.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#ae2aec093c82f780558c23f8ae9f296b8">Size</a>();</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    }</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> channel_key_type, <span class="keyword">class</span> heap_data_type, <span class="keywordtype">int</span> (*channel_key_comparison_func)(const channel_key_type&amp;, const channel_key_type&amp;)&gt;</div>
<div class="line"><a name="l00246"></a><span class="lineno"><a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#aa027bd584a0d968e999ab4cbaf851304">  246</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../de/d25/class_data_structures_1_1_ordered_channel_heap.xhtml#aa027bd584a0d968e999ab4cbaf851304">OrderedChannelHeap&lt;channel_key_type, heap_data_type, channel_key_comparison_func&gt;::Clear</a>(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    {</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="keywordtype">unsigned</span> i;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keywordflow">for</span> (i=0; i &lt; map.Size(); i++)</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a79772d09451f784e87bec85694fad1ed">SLNet::OP_DELETE</a>(map[i], <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        map.Clear(<a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        heap.Clear(<a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    }</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;}</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="preprocessor">#endif</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_74389ed8173ad57b461b9d623a1f3867.xhtml">Source</a></li><li class="navelem"><a class="el" href="../../dir_bbb90e3ef9167a594ae33323139a2595.xhtml">include</a></li><li class="navelem"><a class="el" href="../../dir_88467e66686deb9d3756fe4fc298e321.xhtml">slikenet</a></li><li class="navelem"><a class="el" href="../../d8/db6/_d_s___ordered_channel_heap_8h.xhtml">DS_OrderedChannelHeap.h</a></li>
    <li class="footer">Generated on Wed Aug 14 2019 22:09:46 for SLikeNet by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.2 </li>
  </ul>
</div>
</body>
</html>
