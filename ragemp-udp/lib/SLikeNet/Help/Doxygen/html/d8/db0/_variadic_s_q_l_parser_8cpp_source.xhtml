<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>SLikeNet: Source/src/VariadicSQLParser.cpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SLikeNet
   &#160;<span id="projectnumber">0.1.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../modules.xhtml"><span>Modules</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="../../files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="../../globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('d8/db0/_variadic_s_q_l_parser_8cpp_source.xhtml','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">VariadicSQLParser.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d8/db0/_variadic_s_q_l_parser_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *  Original work: Copyright (c) 2014, Oculus VR, Inc.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  All rights reserved.</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  This source code is licensed under the BSD-style license found in the</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *  RakNet License.txt file in the licenses directory of this source tree. An additional grant </span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  of patent rights can be found in the RakNet Patents.txt file in the same directory.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *  Modified work: Copyright (c) 2017, SLikeSoft UG (haftungsbeschr√§nkt)</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  This source code was modified by SLikeSoft. Modifications are licensed under the MIT-style</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  license found in the license.txt file in the root directory of this source tree.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../dc/da9/_variadic_s_q_l_parser_8h.xhtml">slikenet/VariadicSQLParser.h</a>&quot;</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d7/dc3/_bit_stream_8h.xhtml" title="This class allows you to write and read native types as a string of bits.">slikenet/BitStream.h</a>&quot;</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;stdarg.h&gt;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">using namespace </span>VariadicSQLParser;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">struct </span>TypeMapping</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;{</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="keywordtype">char</span> inputType;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span> *type;</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;};</div>
<div class="line"><a name="l00027"></a><span class="lineno"><a class="code" href="../../d8/db0/_variadic_s_q_l_parser_8cpp.xhtml#a99dc61c43488c10c05fab385c458beb3">   27</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="../../d8/db0/_variadic_s_q_l_parser_8cpp.xhtml#a99dc61c43488c10c05fab385c458beb3">NUM_TYPE_MAPPINGS</a>=7;</div>
<div class="line"><a name="l00028"></a><span class="lineno"><a class="code" href="../../d8/db0/_variadic_s_q_l_parser_8cpp.xhtml#a2eb2cf12967ff0c7404029154c9bbe99">   28</a></span>&#160;TypeMapping <a class="code" href="../../d8/db0/_variadic_s_q_l_parser_8cpp.xhtml#a2eb2cf12967ff0c7404029154c9bbe99">typeMappings</a>[<a class="code" href="../../d8/db0/_variadic_s_q_l_parser_8cpp.xhtml#a99dc61c43488c10c05fab385c458beb3">NUM_TYPE_MAPPINGS</a>] =</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;{</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    {<span class="charliteral">&#39;i&#39;</span>, <span class="stringliteral">&quot;int&quot;</span>},</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    {<span class="charliteral">&#39;d&#39;</span>, <span class="stringliteral">&quot;int&quot;</span>},</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    {<span class="charliteral">&#39;s&#39;</span>, <span class="stringliteral">&quot;text&quot;</span>},</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    {<span class="charliteral">&#39;b&#39;</span>, <span class="stringliteral">&quot;bool&quot;</span>},</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    {<span class="charliteral">&#39;f&#39;</span>, <span class="stringliteral">&quot;numeric&quot;</span>},</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    {<span class="charliteral">&#39;g&#39;</span>, <span class="stringliteral">&quot;double precision&quot;</span>},</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    {<span class="charliteral">&#39;a&#39;</span>, <span class="stringliteral">&quot;bytea&quot;</span>},</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;};</div>
<div class="line"><a name="l00038"></a><span class="lineno"><a class="code" href="../../d8/db0/_variadic_s_q_l_parser_8cpp.xhtml#a40e23accf6b537d39c845a706dbd0939">   38</a></span>&#160;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="../../d8/db0/_variadic_s_q_l_parser_8cpp.xhtml#a40e23accf6b537d39c845a706dbd0939">GetTypeMappingIndex</a>(<span class="keywordtype">char</span> c)</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">for</span> (i=0; i &lt; (<span class="keywordtype">unsigned</span> int) <a class="code" href="../../d8/db0/_variadic_s_q_l_parser_8cpp.xhtml#a99dc61c43488c10c05fab385c458beb3">NUM_TYPE_MAPPINGS</a>; i++ )</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="../../d8/db0/_variadic_s_q_l_parser_8cpp.xhtml#a2eb2cf12967ff0c7404029154c9bbe99">typeMappings</a>[i].inputType==c)</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)-1;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div>
<div class="line"><a name="l00046"></a><span class="lineno"><a class="code" href="../../d4/d4e/namespace_variadic_s_q_l_parser.xhtml#a4ed55da72e30a870bf5f3330ac729afd">   46</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../d4/d4e/namespace_variadic_s_q_l_parser.xhtml#a4ed55da72e30a870bf5f3330ac729afd">VariadicSQLParser::GetTypeMappingAtIndex</a>(<span class="keywordtype">int</span> i)</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d8/db0/_variadic_s_q_l_parser_8cpp.xhtml#a2eb2cf12967ff0c7404029154c9bbe99">typeMappings</a>[i].type;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div>
<div class="line"><a name="l00050"></a><span class="lineno"><a class="code" href="../../d4/d4e/namespace_variadic_s_q_l_parser.xhtml#a0bd6079d53e7682a3db950b9fbd135bf">   50</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/d4e/namespace_variadic_s_q_l_parser.xhtml#a0bd6079d53e7682a3db950b9fbd135bf">VariadicSQLParser::GetTypeMappingIndices</a>( <span class="keyword">const</span> <span class="keywordtype">char</span> *format, <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml" title="Array based implementation of a list.">DataStructures::List&lt;IndexAndType&gt;</a> &amp;indices )</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordtype">bool</span> previousCharWasPercentSign;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> typeMappingIndex;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    indices.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a34219a5ce92981102d06fb1da7842a6b" title="Clear the list.">Clear</a>(<span class="keyword">false</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> len = (<span class="keywordtype">unsigned</span> int) strlen(format);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    previousCharWasPercentSign=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">for</span> (i=0; i &lt; len; i++)</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    {</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordflow">if</span> (previousCharWasPercentSign==<span class="keyword">true</span> )</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        {</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            typeMappingIndex = <a class="code" href="../../d8/db0/_variadic_s_q_l_parser_8cpp.xhtml#a40e23accf6b537d39c845a706dbd0939">GetTypeMappingIndex</a>(format[i]);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="keywordflow">if</span> (typeMappingIndex!=(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>) -1)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                <a class="code" href="../../d4/d4e/namespace_variadic_s_q_l_parser.xhtml#de/d0f/struct_variadic_s_q_l_parser_1_1_index_and_type">IndexAndType</a> iat;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                iat.<a class="code" href="../../d4/d4e/namespace_variadic_s_q_l_parser.xhtml#aac47b5fb94abaa046821cd7c422a7708">strIndex</a>=i-1;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                iat.<a class="code" href="../../d4/d4e/namespace_variadic_s_q_l_parser.xhtml#a2b3dd0aa69baa4626c2fb2aa0c09109c">typeMappingIndex</a>=typeMappingIndex;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                indices.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a5cb7d8b68d8d020a34f2186ea8d5b1c6" title="Insert an element at position position in the list.">Insert</a>(iat, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            }</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        }</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        previousCharWasPercentSign=format[i]==<span class="charliteral">&#39;%&#39;</span>;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    }</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div>
<div class="line"><a name="l00075"></a><span class="lineno"><a class="code" href="../../d4/d4e/namespace_variadic_s_q_l_parser.xhtml#a0341ca389a63b8a76acbed14c5d6161b">   75</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/d4e/namespace_variadic_s_q_l_parser.xhtml#a0341ca389a63b8a76acbed14c5d6161b">VariadicSQLParser::ExtractArguments</a>( va_list argptr, <span class="keyword">const</span> <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml" title="Array based implementation of a list.">DataStructures::List&lt;IndexAndType&gt;</a> &amp;indices, <span class="keywordtype">char</span> ***argumentBinary, <span class="keywordtype">int</span> **argumentLengths )</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">if</span> (indices.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>()==0)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    *argumentBinary= SLNet::OP_NEW_ARRAY&lt;char *&gt;(indices.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(), <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    *argumentLengths= SLNet::OP_NEW_ARRAY&lt;int&gt;(indices.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(), <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordtype">char</span> **paramData=*argumentBinary;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordtype">int</span> *paramLength=*argumentLengths;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordtype">int</span> variadicArgIndex;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">for</span> (variadicArgIndex=0, i=0; i &lt; indices.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); i++, variadicArgIndex++)</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">switch</span> (<a class="code" href="../../d8/db0/_variadic_s_q_l_parser_8cpp.xhtml#a2eb2cf12967ff0c7404029154c9bbe99">typeMappings</a>[indices[i].typeMappingIndex].inputType)</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        {</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">case</span> <span class="charliteral">&#39;i&#39;</span>:</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">case</span> <span class="charliteral">&#39;d&#39;</span>:</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            {</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                <span class="keywordtype">int</span> val = va_arg( argptr, <span class="keywordtype">int</span> );</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                paramLength[i]=<span class="keyword">sizeof</span>(val);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                paramData[i]=(<span class="keywordtype">char</span>*) <a class="code" href="../../d9/d4c/_rak_memory_override_8cpp.xhtml#aebeb2e4754399ea3e2c7af3dd9bbe8c3">rakMalloc_Ex</a>(paramLength[i], <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                memcpy(paramData[i], &amp;val, paramLength[i]);</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ae15a547910af2c67bf6398ae1995cfb6">SLNet::BitStream::IsNetworkOrder</a>()==<span class="keyword">false</span>) <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a3ba4c1a60776e63dcf17396b536d3fe8">SLNet::BitStream::ReverseBytesInPlace</a>((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*) paramData[i], paramLength[i]);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            }</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keywordflow">case</span> <span class="charliteral">&#39;s&#39;</span>:</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            {</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                <span class="keywordtype">char</span>* val = va_arg( argptr, <span class="keywordtype">char</span>* );</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                paramLength[i]=(int) strlen(val);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                paramData[i]=(<span class="keywordtype">char</span>*) <a class="code" href="../../d9/d4c/_rak_memory_override_8cpp.xhtml#aebeb2e4754399ea3e2c7af3dd9bbe8c3">rakMalloc_Ex</a>(paramLength[i]+1, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                memcpy(paramData[i], val, paramLength[i]+1);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordflow">case</span> <span class="charliteral">&#39;b&#39;</span>:</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            {</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                <span class="keywordtype">bool</span> val = (va_arg( argptr, <span class="keywordtype">int</span> )!=0);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                paramLength[i]=<span class="keyword">sizeof</span>(val);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                paramData[i]=(<span class="keywordtype">char</span>*) <a class="code" href="../../d9/d4c/_rak_memory_override_8cpp.xhtml#aebeb2e4754399ea3e2c7af3dd9bbe8c3">rakMalloc_Ex</a>(paramLength[i], <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                memcpy(paramData[i], &amp;val, paramLength[i]);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ae15a547910af2c67bf6398ae1995cfb6">SLNet::BitStream::IsNetworkOrder</a>()==<span class="keyword">false</span>) <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a3ba4c1a60776e63dcf17396b536d3fe8">SLNet::BitStream::ReverseBytesInPlace</a>((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*) paramData[i], paramLength[i]);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            }</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="comment">/*</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">        case &#39;f&#39;:</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">            {</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">                // On MSVC at least, this only works with double as the 2nd param</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">                float val = (float) va_arg( argptr, double );</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">                //float val = va_arg( argptr, float );</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">                paramLength[i]=sizeof(val);</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">                paramData[i]=(char*) rakMalloc_Ex(paramLength[i], _FILE_AND_LINE_);</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">                memcpy(paramData[i], &amp;val, paramLength[i]);</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">                if (SLNet::BitStream::IsNetworkOrder()==false) SLNet::BitStream::ReverseBytesInPlace((unsigned char*) paramData[i], paramLength[i]);</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">            }</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">            break;</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">            */</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="comment">// On MSVC at least, this only works with double as the 2nd param</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">case</span> <span class="charliteral">&#39;f&#39;</span>:</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordflow">case</span> <span class="charliteral">&#39;g&#39;</span>:</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                <span class="keywordtype">double</span> val = va_arg( argptr, <span class="keywordtype">double</span> );</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                paramLength[i]=<span class="keyword">sizeof</span>(val);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                paramData[i]=(<span class="keywordtype">char</span>*) <a class="code" href="../../d9/d4c/_rak_memory_override_8cpp.xhtml#aebeb2e4754399ea3e2c7af3dd9bbe8c3">rakMalloc_Ex</a>(paramLength[i], <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                memcpy(paramData[i], &amp;val, paramLength[i]);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ae15a547910af2c67bf6398ae1995cfb6">SLNet::BitStream::IsNetworkOrder</a>()==<span class="keyword">false</span>) <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a3ba4c1a60776e63dcf17396b536d3fe8">SLNet::BitStream::ReverseBytesInPlace</a>((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*) paramData[i], paramLength[i]);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            }</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordflow">case</span> <span class="charliteral">&#39;a&#39;</span>:</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            {</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                <span class="keywordtype">char</span>* val = va_arg( argptr, <span class="keywordtype">char</span>* );</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                paramLength[i]=va_arg( argptr, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> );</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                paramData[i]=(<span class="keywordtype">char</span>*) <a class="code" href="../../d9/d4c/_rak_memory_override_8cpp.xhtml#aebeb2e4754399ea3e2c7af3dd9bbe8c3">rakMalloc_Ex</a>(paramLength[i], <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                memcpy(paramData[i], val, paramLength[i]);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            }</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        }</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    }</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;}</div>
<div class="line"><a name="l00155"></a><span class="lineno"><a class="code" href="../../d4/d4e/namespace_variadic_s_q_l_parser.xhtml#a722f357d6841bef7839746a3ed3f5852">  155</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/d4e/namespace_variadic_s_q_l_parser.xhtml#a722f357d6841bef7839746a3ed3f5852">VariadicSQLParser::FreeArguments</a>(<span class="keyword">const</span> <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml" title="Array based implementation of a list.">DataStructures::List&lt;IndexAndType&gt;</a> &amp;indices, <span class="keywordtype">char</span> **argumentBinary, <span class="keywordtype">int</span> *argumentLengths)</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;{</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordflow">if</span> (indices.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>()==0)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordflow">for</span> (i=0; i &lt; indices.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); i++)</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <a class="code" href="../../d9/d4c/_rak_memory_override_8cpp.xhtml#ab91fbe0570bf501cd97a53c6cffcef8f">rakFree_Ex</a>(argumentBinary[i],<a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#acd53258ab2c0b731df325c91b2e85c9b">SLNet::OP_DELETE_ARRAY</a>(argumentBinary,<a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#acd53258ab2c0b731df325c91b2e85c9b">SLNet::OP_DELETE_ARRAY</a>(argumentLengths,<a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_74389ed8173ad57b461b9d623a1f3867.xhtml">Source</a></li><li class="navelem"><a class="el" href="../../dir_d1eb22c2ecfd8b50f59e9cbaf8260105.xhtml">src</a></li><li class="navelem"><a class="el" href="../../d8/db0/_variadic_s_q_l_parser_8cpp.xhtml">VariadicSQLParser.cpp</a></li>
    <li class="footer">Generated on Wed Aug 14 2019 22:09:48 for SLikeNet by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.2 </li>
  </ul>
</div>
</body>
</html>
