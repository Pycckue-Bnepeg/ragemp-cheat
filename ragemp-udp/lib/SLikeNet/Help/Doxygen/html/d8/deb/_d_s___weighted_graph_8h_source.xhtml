<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>SLikeNet: Source/include/slikenet/DS_WeightedGraph.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SLikeNet
   &#160;<span id="projectnumber">0.1.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../modules.xhtml"><span>Modules</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="../../files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="../../globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('d8/deb/_d_s___weighted_graph_8h_source.xhtml','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">DS_WeightedGraph.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d8/deb/_d_s___weighted_graph_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *  Original work: Copyright (c) 2014, Oculus VR, Inc.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  All rights reserved.</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  This source code is licensed under the BSD-style license found in the</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *  RakNet License.txt file in the licenses directory of this source tree. An additional grant </span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  of patent rights can be found in the RakNet Patents.txt file in the same directory.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *  Modified work: Copyright (c) 2016-2017, SLikeSoft UG (haftungsbeschr√§nkt)</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  This source code was modified by SLikeSoft. Modifications are licensed under the MIT-style</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  license found in the license.txt file in the root directory of this source tree.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#ifndef __WEIGHTED_GRAPH_H</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define __WEIGHTED_GRAPH_H</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d6/d4d/_d_s___ordered_list_8h.xhtml">DS_OrderedList.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../de/dbe/_d_s___map_8h.xhtml">DS_Map.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../da/dcb/_d_s___heap_8h.xhtml">DS_Heap.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../dc/d8d/_d_s___queue_8h.xhtml">DS_Queue.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d1/df4/_d_s___tree_8h.xhtml">DS_Tree.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../dc/da7/assert_8h.xhtml">assert.h</a>&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../dd/dc5/memoryoverride_8h.xhtml" title="If _USE_RAK_MEMORY_OVERRIDE is defined, memory allocations go through rakMalloc, rakRealloc, and rakFree.">memoryoverride.h</a>&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#ifdef _DEBUG</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#ifdef _MSC_VER</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma warning( push )</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">namespace </span>DataStructures</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> node_type, <span class="keyword">class</span> weight_type, <span class="keywordtype">bool</span> allow_unlinkedNodes&gt;</div>
<div class="line"><a name="l00046"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml">   46</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../db/dbd/_export_8h.xhtml#ab0579394e418800d5c85e46ad6fcd61d">RAK_DLL_EXPORT</a> <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml">WeightedGraph</a></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    {</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a6b27537b51fc124f107b1ab44ad81f76">   49</a></span>&#160;        <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a6b27537b51fc124f107b1ab44ad81f76">IMPLEMENT_DEFAULT_COMPARISON</a>(<span class="keywordtype">void</span>) {DataStructures::defaultMapKeyComparison&lt;node_type&gt;(node_type(),node_type());}</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml">WeightedGraph</a>();</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        ~<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml">WeightedGraph</a>();</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml">WeightedGraph</a>( <span class="keyword">const</span> <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml">WeightedGraph</a>&amp; original_copy );</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml">WeightedGraph</a>&amp; operator= ( <span class="keyword">const</span> <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml">WeightedGraph</a>&amp; original_copy );</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordtype">void</span> AddNode(<span class="keyword">const</span> node_type &amp;node);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordtype">void</span> RemoveNode(<span class="keyword">const</span> node_type &amp;node);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordtype">void</span> AddConnection(<span class="keyword">const</span> node_type &amp;node1, <span class="keyword">const</span> node_type &amp;node2, weight_type weight);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keywordtype">void</span> RemoveConnection(<span class="keyword">const</span> node_type &amp;node1, <span class="keyword">const</span> node_type &amp;node2);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="keywordtype">bool</span> HasConnection(<span class="keyword">const</span> node_type &amp;node1, <span class="keyword">const</span> node_type &amp;node2);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordtype">void</span> Print(<span class="keywordtype">void</span>);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordtype">void</span> Clear(<span class="keywordtype">void</span>);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordtype">bool</span> GetShortestPath(<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List&lt;node_type&gt;</a> &amp;path, node_type startNode, node_type endNode, weight_type INFINITE_WEIGHT);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordtype">bool</span> GetSpanningTree(<a class="code" href="../../de/d2c/class_data_structures_1_1_tree.xhtml">DataStructures::Tree&lt;node_type&gt;</a> &amp;outTree, <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List&lt;node_type&gt;</a> *inputNodes, node_type startNode, weight_type INFINITE_WEIGHT );</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordtype">unsigned</span> GetNodeCount(<span class="keywordtype">void</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordtype">unsigned</span> GetConnectionCount(<span class="keywordtype">unsigned</span> nodeIndex) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordtype">void</span> GetConnectionAtIndex(<span class="keywordtype">unsigned</span> nodeIndex, <span class="keywordtype">unsigned</span> connectionIndex, node_type &amp;outNode, weight_type &amp;outWeight) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        node_type GetNodeAtIndex(<span class="keywordtype">unsigned</span> nodeIndex) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordtype">void</span> ClearDijkstra(<span class="keywordtype">void</span>);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordtype">void</span> GenerateDisjktraMatrix(node_type startNode, weight_type INFINITE_WEIGHT);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div>
<div class="line"><a name="l00073"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a9b7213f0f01a226cd7033d4a84b7cdf8">   73</a></span>&#160;        <a class="code" href="../../dc/da9/class_data_structures_1_1_map.xhtml">DataStructures::Map&lt;node_type, DataStructures::Map&lt;node_type, weight_type&gt;</a> *&gt; <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a9b7213f0f01a226cd7033d4a84b7cdf8">adjacencyLists</a>;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="comment">// All these variables are for path finding with Dijkstra</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="comment">// 08/23/06 Won&#39;t compile as a DLL inside this struct</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="comment">//  struct  </span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="comment">//  {</span></div>
<div class="line"><a name="l00079"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ac48608c2c44bfa4f9655c05eddd56940">   79</a></span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ac48608c2c44bfa4f9655c05eddd56940">isValidPath</a>;</div>
<div class="line"><a name="l00080"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a2f42d391d260dabc17b2c6096753839a">   80</a></span>&#160;            node_type <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a2f42d391d260dabc17b2c6096753839a">rootNode</a>;</div>
<div class="line"><a name="l00081"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ac034f7d08bcf8f4c63fe4f5e7d888cd9">   81</a></span>&#160;            <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml">DataStructures::OrderedList&lt;node_type, node_type&gt;</a> <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ac034f7d08bcf8f4c63fe4f5e7d888cd9">costMatrixIndices</a>;</div>
<div class="line"><a name="l00082"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a121ddaacaed31a2ad5e3f5313f3561d0">   82</a></span>&#160;            weight_type *<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a121ddaacaed31a2ad5e3f5313f3561d0">costMatrix</a>;</div>
<div class="line"><a name="l00083"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a685964d9ffea0f84739693b569db80fa">   83</a></span>&#160;            node_type *<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a685964d9ffea0f84739693b569db80fa">leastNodeArray</a>;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="comment">//  } dijkstra;</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div>
<div class="line"><a name="l00086"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml">   86</a></span>&#160;        <span class="keyword">struct </span><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#d2/d49/struct_data_structures_1_1_weighted_graph_1_1_node_and_parent">NodeAndParent</a></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        {</div>
<div class="line"><a name="l00088"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a29bb0785f3cb3448280b17fe457e7ad1">   88</a></span>&#160;            <a class="code" href="../../de/d2c/class_data_structures_1_1_tree.xhtml">DataStructures::Tree&lt;node_type&gt;</a>*<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a29bb0785f3cb3448280b17fe457e7ad1">node</a>;</div>
<div class="line"><a name="l00089"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ac09b09f98e636f289ac435f0c9c46bc0">   89</a></span>&#160;            <a class="code" href="../../de/d2c/class_data_structures_1_1_tree.xhtml">DataStructures::Tree&lt;node_type&gt;</a>*<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ac09b09f98e636f289ac435f0c9c46bc0">parent</a>;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        };</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    };</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> node_type, <span class="keyword">class</span> weight_type, <span class="keywordtype">bool</span> allow_unlinkedNodes&gt;</div>
<div class="line"><a name="l00094"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a9f070c4eeb822ea4747d312170aa6bae">   94</a></span>&#160;        <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a9f070c4eeb822ea4747d312170aa6bae">WeightedGraph&lt;node_type, weight_type, allow_unlinkedNodes&gt;::WeightedGraph</a>()</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        isValidPath=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        costMatrix=0;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> node_type, <span class="keyword">class</span> weight_type, <span class="keywordtype">bool</span> allow_unlinkedNodes&gt;</div>
<div class="line"><a name="l00101"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#aa4e5739e4643b62a847f262032db51c1">  101</a></span>&#160;        <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#aa4e5739e4643b62a847f262032db51c1">WeightedGraph&lt;node_type, weight_type, allow_unlinkedNodes&gt;::~WeightedGraph</a>()</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    {</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        Clear();</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> node_type, <span class="keyword">class</span> weight_type, <span class="keywordtype">bool</span> allow_unlinkedNodes&gt;</div>
<div class="line"><a name="l00107"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ab697e42de015f040beafe130da1b76b5">  107</a></span>&#160;    <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a9f070c4eeb822ea4747d312170aa6bae">WeightedGraph&lt;node_type, weight_type, allow_unlinkedNodes&gt;::WeightedGraph</a>( <span class="keyword">const</span> <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml">WeightedGraph</a>&amp; original_copy )</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        adjacencyLists=original_copy.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a9b7213f0f01a226cd7033d4a84b7cdf8">adjacencyLists</a>;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        </div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        isValidPath=original_copy.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ac48608c2c44bfa4f9655c05eddd56940">isValidPath</a>;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">if</span> (isValidPath)</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        {</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            rootNode=original_copy.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a2f42d391d260dabc17b2c6096753839a">rootNode</a>;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            costMatrixIndices=original_copy.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ac034f7d08bcf8f4c63fe4f5e7d888cd9">costMatrixIndices</a>;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            costMatrix = SLNet::OP_NEW_ARRAY&lt;weight_type&gt;(costMatrixIndices.Size() * costMatrixIndices.Size(), <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            leastNodeArray = SLNet::OP_NEW_ARRAY&lt;node_type&gt;(costMatrixIndices.Size(), <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            memcpy(costMatrix, original_copy.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a121ddaacaed31a2ad5e3f5313f3561d0">costMatrix</a>, costMatrixIndices.Size() * costMatrixIndices.Size() * <span class="keyword">sizeof</span>(weight_type));</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            memcpy(leastNodeArray, original_copy.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a685964d9ffea0f84739693b569db80fa">leastNodeArray</a>, costMatrixIndices.Size() * <span class="keyword">sizeof</span>(weight_type));</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        }</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> node_type, <span class="keyword">class</span> weight_type, <span class="keywordtype">bool</span> allow_unlinkedNodes&gt;</div>
<div class="line"><a name="l00124"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#acbae80df6e3d282616e24b47b6fb10de">  124</a></span>&#160;    <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml">WeightedGraph&lt;node_type, weight_type, allow_unlinkedNodes&gt;</a>&amp; <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#acbae80df6e3d282616e24b47b6fb10de">WeightedGraph&lt;node_type, weight_type, allow_unlinkedNodes&gt;::operator=</a>( <span class="keyword">const</span> <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml">WeightedGraph</a>&amp; original_copy )</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    {</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        adjacencyLists=original_copy.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a9b7213f0f01a226cd7033d4a84b7cdf8">adjacencyLists</a>;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        isValidPath=original_copy.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ac48608c2c44bfa4f9655c05eddd56940">isValidPath</a>;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">if</span> (isValidPath)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            rootNode=original_copy.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a2f42d391d260dabc17b2c6096753839a">rootNode</a>;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            costMatrixIndices=original_copy.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ac034f7d08bcf8f4c63fe4f5e7d888cd9">costMatrixIndices</a>;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            costMatrix = SLNet::OP_NEW_ARRAY&lt;weight_type&gt;(costMatrixIndices.Size() * costMatrixIndices.Size(), <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            leastNodeArray = SLNet::OP_NEW_ARRAY&lt;node_type&gt;(costMatrixIndices.Size(), <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            memcpy(costMatrix, original_copy.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a121ddaacaed31a2ad5e3f5313f3561d0">costMatrix</a>, costMatrixIndices.Size() * costMatrixIndices.Size() * <span class="keyword">sizeof</span>(weight_type));</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            memcpy(leastNodeArray, original_copy.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a685964d9ffea0f84739693b569db80fa">leastNodeArray</a>, costMatrixIndices.Size() * <span class="keyword">sizeof</span>(weight_type));</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        }</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    }</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> node_type, <span class="keyword">class</span> weight_type, <span class="keywordtype">bool</span> allow_unlinkedNodes&gt;</div>
<div class="line"><a name="l00143"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ac2f5ba3910a6cfd634e6a33e8c68f89d">  143</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ac2f5ba3910a6cfd634e6a33e8c68f89d">WeightedGraph&lt;node_type, weight_type, allow_unlinkedNodes&gt;::AddNode</a>(<span class="keyword">const</span> node_type &amp;node)</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    {</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        adjacencyLists.SetNew(node, <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#af78c01538ca9bd144136bdce3dfd174d">SLNet::OP_NEW</a>&lt;<a class="code" href="../../dc/da9/class_data_structures_1_1_map.xhtml">DataStructures::Map&lt;node_type, weight_type&gt;</a> &gt;( <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>) );</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    }</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> node_type, <span class="keyword">class</span> weight_type, <span class="keywordtype">bool</span> allow_unlinkedNodes&gt;</div>
<div class="line"><a name="l00149"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#abf55d60605fb5ad3deca6fb7a1cf38ac">  149</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#abf55d60605fb5ad3deca6fb7a1cf38ac">WeightedGraph&lt;node_type, weight_type, allow_unlinkedNodes&gt;::RemoveNode</a>(<span class="keyword">const</span> node_type &amp;node)</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    {</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordtype">unsigned</span> i;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml" title="A queue implemented as an array with a read and write index.">DataStructures::Queue&lt;node_type&gt;</a> removeNodeQueue;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        removeNodeQueue.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#ae564a88f3367a786777694e778a4500d">Push</a>(node, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordflow">while</span> (removeNodeQueue.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#ae2aec093c82f780558c23f8ae9f296b8">Size</a>())</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        {</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a79772d09451f784e87bec85694fad1ed">SLNet::OP_DELETE</a>(adjacencyLists.Pop(removeNodeQueue.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#a25272370e684388afd807c5369e4ef87">Pop</a>()), <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="comment">// Remove this node from all of the other lists as well</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="keywordflow">for</span> (i=0; i &lt; adjacencyLists.Size(); i++)</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            {</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                adjacencyLists[i]-&gt;Delete(node);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="preprocessor">#ifdef _MSC_VER</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma warning( disable : 4127 ) // warning C4127: conditional expression is constant</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="preprocessor"></span>                <span class="keywordflow">if</span> (allow_unlinkedNodes==<span class="keyword">false</span> &amp;&amp; adjacencyLists[i]-&gt;Size()==0)</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                    removeNodeQueue.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#ae564a88f3367a786777694e778a4500d">Push</a>(adjacencyLists.GetKeyAtIndex(i), <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            }</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        }</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        ClearDijkstra();</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    }</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> node_type, <span class="keyword">class</span> weight_type, <span class="keywordtype">bool</span> allow_unlinkedNodes&gt;</div>
<div class="line"><a name="l00176"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a7b598441f4ed3ff1ffbda47d5e6f3153">  176</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a7b598441f4ed3ff1ffbda47d5e6f3153">WeightedGraph&lt;node_type, weight_type, allow_unlinkedNodes&gt;::HasConnection</a>(<span class="keyword">const</span> node_type &amp;node1, <span class="keyword">const</span> node_type &amp;node2)</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    {</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordflow">if</span> (node1==node2)</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keywordflow">if</span> (adjacencyLists.Has(node1)==<span class="keyword">false</span>)</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keywordflow">return</span> adjacencyLists.Get(node1)-&gt;Has(node2);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    }</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> node_type, <span class="keyword">class</span> weight_type, <span class="keywordtype">bool</span> allow_unlinkedNodes&gt;</div>
<div class="line"><a name="l00186"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#adc378f34b57faf0885d7edacea35d9d8">  186</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#adc378f34b57faf0885d7edacea35d9d8">WeightedGraph&lt;node_type, weight_type, allow_unlinkedNodes&gt;::AddConnection</a>(<span class="keyword">const</span> node_type &amp;node1, <span class="keyword">const</span> node_type &amp;node2, weight_type weight)</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    {</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keywordflow">if</span> (node1==node2)</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keywordflow">if</span> (adjacencyLists.Has(node1)==<span class="keyword">false</span>)</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            AddNode(node1);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        adjacencyLists.Get(node1)-&gt;Set(node2, weight);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="keywordflow">if</span> (adjacencyLists.Has(node2)==<span class="keyword">false</span>)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            AddNode(node2);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        adjacencyLists.Get(node2)-&gt;Set(node1, weight);</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    }</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> node_type, <span class="keyword">class</span> weight_type, <span class="keywordtype">bool</span> allow_unlinkedNodes&gt;</div>
<div class="line"><a name="l00200"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a3e6a2a94aa9cf4c3c46922e51a9e8cc8">  200</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a3e6a2a94aa9cf4c3c46922e51a9e8cc8">WeightedGraph&lt;node_type, weight_type, allow_unlinkedNodes&gt;::RemoveConnection</a>(<span class="keyword">const</span> node_type &amp;node1, <span class="keyword">const</span> node_type &amp;node2)</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    {</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        adjacencyLists.Get(node2)-&gt;Delete(node1);</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        adjacencyLists.Get(node1)-&gt;Delete(node2);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="preprocessor">#ifdef _MSC_VER</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma warning( disable : 4127 ) // warning C4127: conditional expression is constant</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="preprocessor"></span>        <span class="keywordflow">if</span> (allow_unlinkedNodes==<span class="keyword">false</span>) <span class="comment">// If we do not allow _unlinked nodes, then if there are no connections, remove the node</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <span class="keywordflow">if</span> (adjacencyLists.Get(node1)-&gt;Size()==0)</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                RemoveNode(node1); <span class="comment">// Will also remove node1 from the adjacency list of node2</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <span class="keywordflow">if</span> (adjacencyLists.Has(node2) &amp;&amp; adjacencyLists.Get(node2)-&gt;Size()==0)</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                RemoveNode(node2);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        }</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        ClearDijkstra();</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    }</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> node_type, <span class="keyword">class</span> weight_type, <span class="keywordtype">bool</span> allow_unlinkedNodes&gt;</div>
<div class="line"><a name="l00220"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ae728c1f41989d531588829916f7b28ae">  220</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ae728c1f41989d531588829916f7b28ae">WeightedGraph&lt;node_type, weight_type, allow_unlinkedNodes&gt;::Clear</a>(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    {</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="keywordtype">unsigned</span> i;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <span class="keywordflow">for</span> (i=0; i &lt; adjacencyLists.Size(); i++)</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a79772d09451f784e87bec85694fad1ed">SLNet::OP_DELETE</a>(adjacencyLists[i], <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        adjacencyLists.Clear();</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        ClearDijkstra();</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    }</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> node_type, <span class="keyword">class</span> weight_type, <span class="keywordtype">bool</span> allow_unlinkedNodes&gt;</div>
<div class="line"><a name="l00231"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ae7fcebbbd48228744e31a6c4d1750e9e">  231</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ae7fcebbbd48228744e31a6c4d1750e9e">WeightedGraph&lt;node_type, weight_type, allow_unlinkedNodes&gt;::GetShortestPath</a>(<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List&lt;node_type&gt;</a> &amp;path, node_type startNode, node_type endNode, weight_type INFINITE_WEIGHT)</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    {</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        path.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a34219a5ce92981102d06fb1da7842a6b" title="Clear the list.">Clear</a>(<span class="keyword">false</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keywordflow">if</span> (startNode==endNode)</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        {</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            path.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a5cb7d8b68d8d020a34f2186ea8d5b1c6" title="Insert an element at position position in the list.">Insert</a>(startNode, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            path.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a5cb7d8b68d8d020a34f2186ea8d5b1c6" title="Insert an element at position position in the list.">Insert</a>(endNode, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        }</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keywordflow">if</span> (isValidPath==<span class="keyword">false</span> || rootNode!=startNode)</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        {</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            ClearDijkstra();</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            GenerateDisjktraMatrix(startNode, INFINITE_WEIGHT);</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        }</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="comment">// return the results</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="keywordtype">bool</span> objectExists;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keywordtype">unsigned</span> col,row;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        weight_type currentWeight;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml" title="A queue implemented as an array with a read and write index.">DataStructures::Queue&lt;node_type&gt;</a> outputQueue;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        col=costMatrixIndices.GetIndexFromKey(endNode, &amp;objectExists);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="keywordflow">if</span> (costMatrixIndices.Size()&lt;2)</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        {</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        }</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <span class="keywordflow">if</span> (objectExists==<span class="keyword">false</span>)</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        {</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        }</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        node_type vertex;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        row=costMatrixIndices.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#ae2aec093c82f780558c23f8ae9f296b8">Size</a>()-2;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="keywordflow">if</span> (row==0)</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        {</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            path.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a5cb7d8b68d8d020a34f2186ea8d5b1c6" title="Insert an element at position position in the list.">Insert</a>(startNode, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            path.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a5cb7d8b68d8d020a34f2186ea8d5b1c6" title="Insert an element at position position in the list.">Insert</a>(endNode, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        }</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        currentWeight=costMatrix[row*adjacencyLists.Size() + col];</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="keywordflow">if</span> (currentWeight==INFINITE_WEIGHT)</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        {</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            <span class="comment">// No path</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        }</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        vertex=endNode;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        outputQueue.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#a3980613e44a80982708b9d1f49fa0fea">PushAtHead</a>(vertex, 0, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        row--;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="keywordflow">for</span>(;;)</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        {</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            <span class="keywordflow">while</span> (costMatrix[row*adjacencyLists.Size() + col] == currentWeight)</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            {</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                <span class="keywordflow">if</span> (row==0)</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                {</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                    path.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a5cb7d8b68d8d020a34f2186ea8d5b1c6" title="Insert an element at position position in the list.">Insert</a>(startNode, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                    <span class="keywordflow">while</span>(!outputQueue.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#a8a535ff9f0dceecedf31401490da3a31">IsEmpty</a>())</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                        path.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a5cb7d8b68d8d020a34f2186ea8d5b1c6" title="Insert an element at position position in the list.">Insert</a>(outputQueue.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#a25272370e684388afd807c5369e4ef87">Pop</a>(), <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                }</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                --row;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            }</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            vertex=leastNodeArray[row];</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            outputQueue.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#a3980613e44a80982708b9d1f49fa0fea">PushAtHead</a>(vertex, 0, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            <span class="keywordflow">if</span> (row==0)</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            col=costMatrixIndices.GetIndexFromKey(vertex, &amp;objectExists);</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            currentWeight=costMatrix[row*adjacencyLists.Size() + col];</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        }</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        path.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a5cb7d8b68d8d020a34f2186ea8d5b1c6" title="Insert an element at position position in the list.">Insert</a>(startNode, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <span class="keywordflow">while</span>(!outputQueue.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#a8a535ff9f0dceecedf31401490da3a31">IsEmpty</a>())</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            path.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a5cb7d8b68d8d020a34f2186ea8d5b1c6" title="Insert an element at position position in the list.">Insert</a>(outputQueue.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#a25272370e684388afd807c5369e4ef87">Pop</a>(), <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    }</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> node_type, <span class="keyword">class</span> weight_type, <span class="keywordtype">bool</span> allow_unlinkedNodes&gt;</div>
<div class="line"><a name="l00307"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ad53ce73bf226c91905d0d81c97c1a4db">  307</a></span>&#160;        node_type <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ad53ce73bf226c91905d0d81c97c1a4db">WeightedGraph&lt;node_type, weight_type, allow_unlinkedNodes&gt;::GetNodeAtIndex</a>(<span class="keywordtype">unsigned</span> nodeIndex)<span class="keyword"> const</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <span class="keywordflow">return</span> adjacencyLists.GetKeyAtIndex(nodeIndex);</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    }</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> node_type, <span class="keyword">class</span> weight_type, <span class="keywordtype">bool</span> allow_unlinkedNodes&gt;</div>
<div class="line"><a name="l00313"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a66f4034521b47d5e331b0f08a37afc36">  313</a></span>&#160;    <span class="keywordtype">unsigned</span> <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a66f4034521b47d5e331b0f08a37afc36">WeightedGraph&lt;node_type, weight_type, allow_unlinkedNodes&gt;::GetNodeCount</a>(<span class="keywordtype">void</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <span class="keywordflow">return</span> adjacencyLists.Size();</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    }</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> node_type, <span class="keyword">class</span> weight_type, <span class="keywordtype">bool</span> allow_unlinkedNodes&gt;</div>
<div class="line"><a name="l00319"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a67427257d69b16e530f8e9bdfed7e6bb">  319</a></span>&#160;    <span class="keywordtype">unsigned</span> <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a67427257d69b16e530f8e9bdfed7e6bb">WeightedGraph&lt;node_type, weight_type, allow_unlinkedNodes&gt;::GetConnectionCount</a>(<span class="keywordtype">unsigned</span> nodeIndex)<span class="keyword"> const</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <span class="keywordflow">return</span> adjacencyLists[nodeIndex]-&gt;Size();</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    }</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> node_type, <span class="keyword">class</span> weight_type, <span class="keywordtype">bool</span> allow_unlinkedNodes&gt;</div>
<div class="line"><a name="l00325"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a3a2958a36405b1c4e441c5560e660813">  325</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a3a2958a36405b1c4e441c5560e660813">WeightedGraph&lt;node_type, weight_type, allow_unlinkedNodes&gt;::GetConnectionAtIndex</a>(<span class="keywordtype">unsigned</span> nodeIndex, <span class="keywordtype">unsigned</span> connectionIndex, node_type &amp;outNode, weight_type &amp;outWeight)<span class="keyword"> const</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        outWeight=adjacencyLists[nodeIndex]-&gt;operator[](connectionIndex);</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        outNode=adjacencyLists[nodeIndex]-&gt;GetKeyAtIndex(connectionIndex);</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    }</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> node_type, <span class="keyword">class</span> weight_type, <span class="keywordtype">bool</span> allow_unlinkedNodes&gt;</div>
<div class="line"><a name="l00332"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#af6ae09481c0c13f41def60dc4ed6a9f1">  332</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#af6ae09481c0c13f41def60dc4ed6a9f1">WeightedGraph&lt;node_type, weight_type, allow_unlinkedNodes&gt;::GetSpanningTree</a>(<a class="code" href="../../de/d2c/class_data_structures_1_1_tree.xhtml">DataStructures::Tree&lt;node_type&gt;</a> &amp;outTree, <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List&lt;node_type&gt;</a> *inputNodes, node_type startNode, weight_type INFINITE_WEIGHT )</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    {</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        <span class="comment">// Find the shortest path from the start node to each of the input nodes.  Add this path to a new WeightedGraph if the result is reachable</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List&lt;node_type&gt;</a> path;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml">DataStructures::WeightedGraph&lt;node_type, weight_type, allow_unlinkedNodes&gt;</a> outGraph;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        <span class="keywordtype">bool</span> res;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        <span class="keywordtype">unsigned</span> i,j;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        <span class="keywordflow">for</span> (i=0; i &lt; inputNodes-&gt;<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>(); i++)</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        {</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            res=GetShortestPath(path, startNode, (*inputNodes)[i], INFINITE_WEIGHT);</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            <span class="keywordflow">if</span> (res &amp;&amp; path.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>()&gt;0)</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            {</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                <span class="keywordflow">for</span> (j=0; j &lt; path.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a>()-1; j++)</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                {</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                    <span class="comment">// Don&#39;t bother looking up the weight</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                    outGraph.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#adc378f34b57faf0885d7edacea35d9d8">AddConnection</a>(path[j], path[j+1], INFINITE_WEIGHT);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                }</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            }</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        }</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        <span class="comment">// Copy the graph to a tree.</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        <a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml" title="A queue implemented as an array with a read and write index.">DataStructures::Queue&lt;NodeAndParent&gt;</a> nodesToProcess;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        <a class="code" href="../../de/d2c/class_data_structures_1_1_tree.xhtml">DataStructures::Tree&lt;node_type&gt;</a> *current;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        <a class="code" href="../../dc/da9/class_data_structures_1_1_map.xhtml">DataStructures::Map&lt;node_type, weight_type&gt;</a> *adjacencyList;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        node_type key;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#d2/d49/struct_data_structures_1_1_weighted_graph_1_1_node_and_parent">NodeAndParent</a> nap, nap2;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        outTree.<a class="code" href="../../de/d2c/class_data_structures_1_1_tree.xhtml#a9c5a255e506458607a63c30e25c51281">DeleteDecendants</a>();</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        outTree.<a class="code" href="../../de/d2c/class_data_structures_1_1_tree.xhtml#aa0ddb15c34075d02357b08c917bd4196">data</a>=startNode;</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        current=&amp;outTree;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="keywordflow">if</span> (outGraph.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a9b7213f0f01a226cd7033d4a84b7cdf8">adjacencyLists</a>.<a class="code" href="../../dc/da9/class_data_structures_1_1_map.xhtml#ac4620bb554cace55c0f093abafad01d9">Has</a>(startNode)==<span class="keyword">false</span>)</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        adjacencyList = outGraph.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a9b7213f0f01a226cd7033d4a84b7cdf8">adjacencyLists</a>.<a class="code" href="../../dc/da9/class_data_structures_1_1_map.xhtml#a3514ebacc6a333e824d4fda7382275df">Get</a>(startNode);</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        <span class="keywordflow">for</span> (i=0; i &lt; adjacencyList-&gt;<a class="code" href="../../dc/da9/class_data_structures_1_1_map.xhtml#ad33475fbf642a7df45a48d9f453c3566">Size</a>(); i++)</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        {</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            nap2.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a29bb0785f3cb3448280b17fe457e7ad1">node</a>= SLNet::OP_NEW&lt;DataStructures::Tree&lt;node_type&gt; &gt;( <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            nap2.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a29bb0785f3cb3448280b17fe457e7ad1">node</a>-&gt;<a class="code" href="../../de/d2c/class_data_structures_1_1_tree.xhtml#aa0ddb15c34075d02357b08c917bd4196">data</a>=adjacencyList-&gt;<a class="code" href="../../dc/da9/class_data_structures_1_1_map.xhtml#a9472d4b96dd3a7919819120c6a1c1466">GetKeyAtIndex</a>(i);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            nap2.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ac09b09f98e636f289ac435f0c9c46bc0">parent</a>=current;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            nodesToProcess.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#ae564a88f3367a786777694e778a4500d">Push</a>(nap2, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            current-&gt;<a class="code" href="../../de/d2c/class_data_structures_1_1_tree.xhtml#a13b78d683620e94033d89fa950f4bda6">children</a>.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a5cb7d8b68d8d020a34f2186ea8d5b1c6" title="Insert an element at position position in the list.">Insert</a>(nap2.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a29bb0785f3cb3448280b17fe457e7ad1">node</a>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        }</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        <span class="keywordflow">while</span> (nodesToProcess.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#ae2aec093c82f780558c23f8ae9f296b8">Size</a>())</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        {</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;            nap=nodesToProcess.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#a25272370e684388afd807c5369e4ef87">Pop</a>();</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            current=nap.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a29bb0785f3cb3448280b17fe457e7ad1">node</a>;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            adjacencyList = outGraph.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a9b7213f0f01a226cd7033d4a84b7cdf8">adjacencyLists</a>.<a class="code" href="../../dc/da9/class_data_structures_1_1_map.xhtml#a3514ebacc6a333e824d4fda7382275df">Get</a>(nap.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a29bb0785f3cb3448280b17fe457e7ad1">node</a>-&gt;<a class="code" href="../../de/d2c/class_data_structures_1_1_tree.xhtml#aa0ddb15c34075d02357b08c917bd4196">data</a>);</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            <span class="keywordflow">for</span> (i=0; i &lt; adjacencyList-&gt;<a class="code" href="../../dc/da9/class_data_structures_1_1_map.xhtml#ad33475fbf642a7df45a48d9f453c3566">Size</a>(); i++)</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            {</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                key=adjacencyList-&gt;<a class="code" href="../../dc/da9/class_data_structures_1_1_map.xhtml#a9472d4b96dd3a7919819120c6a1c1466">GetKeyAtIndex</a>(i);</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                <span class="keywordflow">if</span> (key!=nap.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ac09b09f98e636f289ac435f0c9c46bc0">parent</a>-&gt;<a class="code" href="../../de/d2c/class_data_structures_1_1_tree.xhtml#aa0ddb15c34075d02357b08c917bd4196">data</a>)</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                {</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                    nap2.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a29bb0785f3cb3448280b17fe457e7ad1">node</a>= SLNet::OP_NEW&lt;DataStructures::Tree&lt;node_type&gt; &gt;( <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                    nap2.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a29bb0785f3cb3448280b17fe457e7ad1">node</a>-&gt;<a class="code" href="../../de/d2c/class_data_structures_1_1_tree.xhtml#aa0ddb15c34075d02357b08c917bd4196">data</a>=key;</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                    nap2.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ac09b09f98e636f289ac435f0c9c46bc0">parent</a>=current;</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                    nodesToProcess.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#ae564a88f3367a786777694e778a4500d">Push</a>(nap2, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                    current-&gt;<a class="code" href="../../de/d2c/class_data_structures_1_1_tree.xhtml#a13b78d683620e94033d89fa950f4bda6">children</a>.<a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a5cb7d8b68d8d020a34f2186ea8d5b1c6" title="Insert an element at position position in the list.">Insert</a>(nap2.<a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#a29bb0785f3cb3448280b17fe457e7ad1">node</a>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                }               </div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            }</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        }</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    }</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> node_type, <span class="keyword">class</span> weight_type, <span class="keywordtype">bool</span> allow_unlinkedNodes&gt;</div>
<div class="line"><a name="l00398"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ac1f514b3abe06d47cb5991d592f16e17">  398</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ac1f514b3abe06d47cb5991d592f16e17">WeightedGraph&lt;node_type, weight_type, allow_unlinkedNodes&gt;::GenerateDisjktraMatrix</a>(node_type startNode, weight_type INFINITE_WEIGHT)</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    {</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        <span class="keywordflow">if</span> (adjacencyLists.Size()==0)</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        costMatrix = SLNet::OP_NEW_ARRAY&lt;weight_type&gt;(adjacencyLists.Size() * adjacencyLists.Size(), <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        leastNodeArray = SLNet::OP_NEW_ARRAY&lt;node_type&gt;(adjacencyLists.Size(), <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        node_type currentNode;</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        <span class="keywordtype">unsigned</span> col, row, row2, openSetIndex;</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        node_type adjacentKey;</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        <span class="keywordtype">unsigned</span> adjacentIndex;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        weight_type edgeWeight, currentNodeWeight, adjacentNodeWeight;</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        <a class="code" href="../../dc/da9/class_data_structures_1_1_map.xhtml">DataStructures::Map&lt;node_type, weight_type&gt;</a> *adjacencyList;</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        <a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml">DataStructures::Heap&lt;weight_type, node_type, false&gt;</a> minHeap;</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        <a class="code" href="../../dc/da9/class_data_structures_1_1_map.xhtml">DataStructures::Map&lt;node_type, weight_type&gt;</a> openSet;</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        <span class="keywordflow">for</span> (col=0; col &lt; adjacencyLists.Size(); col++)</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        {</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            <span class="comment">// This should be already sorted, so it&#39;s a bit inefficient to do an insertion sort, but what the heck</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            costMatrixIndices.Insert(adjacencyLists.GetKeyAtIndex(col),adjacencyLists.GetKeyAtIndex(col), <span class="keyword">true</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        }</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        <span class="keywordflow">for</span> (col=0; col &lt; adjacencyLists.Size() * adjacencyLists.Size(); col++)</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;            costMatrix[col]=INFINITE_WEIGHT;</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        currentNode=startNode;</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        row=0;</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        currentNodeWeight=0;</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        rootNode=startNode;</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        <span class="comment">// Clear the starting node column</span></div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        <span class="keywordflow">if</span> (adjacencyLists.Size())</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        {</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            adjacentIndex=adjacencyLists.<a class="code" href="../../dc/da9/class_data_structures_1_1_map.xhtml#aacb6191d7d678267acc8bf6286033b21">GetIndexAtKey</a>(startNode);</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;            <span class="keywordflow">for</span> (row2=0; row2 &lt; adjacencyLists.Size(); row2++)</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                costMatrix[row2*adjacencyLists.Size() + adjacentIndex]=0;</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        }</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        <span class="keywordflow">while</span> (row &lt; adjacencyLists.Size()-1)</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        {</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;            adjacencyList = adjacencyLists.<a class="code" href="../../dc/da9/class_data_structures_1_1_map.xhtml#a3514ebacc6a333e824d4fda7382275df">Get</a>(currentNode);</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;            <span class="comment">// Go through all connections from the current node.  If the new weight is less than the current weight, then update that weight.</span></div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;            <span class="keywordflow">for</span> (col=0; col &lt; adjacencyList-&gt;<a class="code" href="../../dc/da9/class_data_structures_1_1_map.xhtml#ad33475fbf642a7df45a48d9f453c3566">Size</a>(); col++)</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            {</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                edgeWeight=(*adjacencyList)[col];</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                adjacentKey=adjacencyList-&gt;<a class="code" href="../../dc/da9/class_data_structures_1_1_map.xhtml#a9472d4b96dd3a7919819120c6a1c1466">GetKeyAtIndex</a>(col);</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                adjacentIndex=adjacencyLists.GetIndexAtKey(adjacentKey);</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                adjacentNodeWeight=costMatrix[row*adjacencyLists.Size() + adjacentIndex];</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                <span class="keywordflow">if</span> (currentNodeWeight + edgeWeight &lt; adjacentNodeWeight)</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                {</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                    <span class="comment">// Update the weight for the adjacent node</span></div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                    <span class="keywordflow">for</span> (row2=row; row2 &lt; adjacencyLists.Size(); row2++)</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                        costMatrix[row2*adjacencyLists.Size() + adjacentIndex]=currentNodeWeight + edgeWeight;</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                    openSet.<a class="code" href="../../dc/da9/class_data_structures_1_1_map.xhtml#a835a751752d457c333853bfecd30e9b0">Set</a>(adjacentKey, currentNodeWeight + edgeWeight);</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                }</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;            }</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;            <span class="comment">// Find the lowest in the open set</span></div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;            minHeap.<a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#ab573390b91ff42db9465a289f1c417de">Clear</a>(<span class="keyword">true</span>,<a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;            <span class="keywordflow">for</span> (openSetIndex=0; openSetIndex &lt; openSet.<a class="code" href="../../dc/da9/class_data_structures_1_1_map.xhtml#ad33475fbf642a7df45a48d9f453c3566">Size</a>(); openSetIndex++)</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                minHeap.<a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#aa01a134957e811c1af719805d493b700">Push</a>(openSet[openSetIndex], openSet.<a class="code" href="../../dc/da9/class_data_structures_1_1_map.xhtml#a9472d4b96dd3a7919819120c6a1c1466">GetKeyAtIndex</a>(openSetIndex),<a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            <span class="comment">/*</span></div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="comment">            unsigned i,j;</span></div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="comment">            for (i=0; i &lt; adjacencyLists.Size()-1; i++)</span></div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="comment">            {</span></div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="comment">                for (j=0; j &lt; adjacencyLists.Size(); j++)</span></div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="comment">                {</span></div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="comment">                    RAKNET_DEBUG_PRINTF(&quot;%2i &quot;, costMatrix[i*adjacencyLists.Size() + j]);</span></div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="comment">                }</span></div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="comment">                RAKNET_DEBUG_PRINTF(&quot;Node=%i&quot;, leastNodeArray[i]);</span></div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="comment">                RAKNET_DEBUG_PRINTF(&quot;\n&quot;);</span></div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="comment">            }</span></div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;<span class="comment">            */</span></div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            <span class="keywordflow">if</span> (minHeap.<a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#acdb7d16c52998d6fc8a7b1a8602b8906">Size</a>()==0)</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            {</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                <span class="comment">// Unreachable nodes</span></div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                isValidPath=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;            }</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;            currentNodeWeight=minHeap.<a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#a50ae6f55a75156e2ab679a0575ebe7ef">PeekWeight</a>(0);</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;            leastNodeArray[row]=minHeap.<a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#a9ce961937f06f77b7ad82a02ce8d64ac">Pop</a>(0);</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;            currentNode=leastNodeArray[row];</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;            openSet.<a class="code" href="../../dc/da9/class_data_structures_1_1_map.xhtml#af7be78b0821c0a775b3f0acfd7560abe">Delete</a>(currentNode);        </div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            row++;</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        }</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        <span class="comment">/*</span></div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="comment">#ifdef _DEBUG</span></div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="comment">        unsigned i,j;</span></div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="comment">        for (i=0; i &lt; adjacencyLists.Size()-1; i++)</span></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;<span class="comment">        {</span></div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="comment">            for (j=0; j &lt; adjacencyLists.Size(); j++)</span></div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="comment">            {</span></div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="comment">                RAKNET_DEBUG_PRINTF(&quot;%2i &quot;, costMatrix[i*adjacencyLists.Size() + j]);</span></div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="comment">            }</span></div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="comment">            RAKNET_DEBUG_PRINTF(&quot;Node=%i&quot;, leastNodeArray[i]);</span></div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="comment">            RAKNET_DEBUG_PRINTF(&quot;\n&quot;);</span></div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="comment">        }</span></div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="comment">#endif</span></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="comment">        */</span></div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        isValidPath=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    }</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> node_type, <span class="keyword">class</span> weight_type, <span class="keywordtype">bool</span> allow_unlinkedNodes&gt;</div>
<div class="line"><a name="l00506"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#abb95a374208eb9c62101aae4c00f9072">  506</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#abb95a374208eb9c62101aae4c00f9072">WeightedGraph&lt;node_type, weight_type, allow_unlinkedNodes&gt;::ClearDijkstra</a>(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    {</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        <span class="keywordflow">if</span> (isValidPath)</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        {</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;            isValidPath=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;            <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#acd53258ab2c0b731df325c91b2e85c9b">SLNet::OP_DELETE_ARRAY</a>(costMatrix, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;            <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#acd53258ab2c0b731df325c91b2e85c9b">SLNet::OP_DELETE_ARRAY</a>(leastNodeArray, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;            costMatrixIndices.Clear(<span class="keyword">false</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        }</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    }</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> node_type, <span class="keyword">class</span> weight_type, <span class="keywordtype">bool</span> allow_unlinkedNodes&gt;</div>
<div class="line"><a name="l00518"></a><span class="lineno"><a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ae3903323e2315b7cb2850a8ff1fcbf76">  518</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../dd/d9f/class_data_structures_1_1_weighted_graph.xhtml#ae3903323e2315b7cb2850a8ff1fcbf76">WeightedGraph&lt;node_type, weight_type, allow_unlinkedNodes&gt;::Print</a>(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    {</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;<span class="preprocessor">#ifdef _DEBUG</span></div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;<span class="preprocessor"></span>        <span class="keywordtype">unsigned</span> i,j;</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        <span class="keywordflow">for</span> (i=0; i &lt; adjacencyLists.Size(); i++)</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;        {</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;            <span class="comment">//RAKNET_DEBUG_PRINTF(&quot;%i connected to &quot;, i);</span></div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;            <a class="code" href="../../d8/db0/defines_8h.xhtml#a2a5d867f7ae6521f217847a78f17ab4a">RAKNET_DEBUG_PRINTF</a>(<span class="stringliteral">&quot;%s connected to &quot;</span>, adjacencyLists.GetKeyAtIndex(i).systemAddress.ToString());</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;            <span class="keywordflow">if</span> (adjacencyLists[i]-&gt;Size()==0)</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                <a class="code" href="../../d8/db0/defines_8h.xhtml#a2a5d867f7ae6521f217847a78f17ab4a">RAKNET_DEBUG_PRINTF</a>(<span class="stringliteral">&quot;&lt;Empty&gt;&quot;</span>);</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;            {</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                <span class="keywordflow">for</span> (j=0; j &lt; adjacencyLists[i]-&gt;Size(); j++)</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                <span class="comment">//  RAKNET_DEBUG_PRINTF(&quot;%i (%.2f) &quot;, adjacencyLists.GetIndexAtKey(adjacencyLists[i]-&gt;GetKeyAtIndex(j)), (float) adjacencyLists[i]-&gt;operator[](j) );</span></div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                    <a class="code" href="../../d8/db0/defines_8h.xhtml#a2a5d867f7ae6521f217847a78f17ab4a">RAKNET_DEBUG_PRINTF</a>(<span class="stringliteral">&quot;%s (%.2f) &quot;</span>, adjacencyLists[i]-&gt;GetKeyAtIndex(j).systemAddress.ToString(), (float) adjacencyLists[i]-&gt;<span class="keyword">operator</span>[](j) );</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;            }</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;            <a class="code" href="../../d8/db0/defines_8h.xhtml#a2a5d867f7ae6521f217847a78f17ab4a">RAKNET_DEBUG_PRINTF</a>(<span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        }</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;<span class="preprocessor"></span>    }</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;}</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="preprocessor">#ifdef _MSC_VER</span></div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma warning( pop )</span></div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;<span class="preprocessor">#endif</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_74389ed8173ad57b461b9d623a1f3867.xhtml">Source</a></li><li class="navelem"><a class="el" href="../../dir_bbb90e3ef9167a594ae33323139a2595.xhtml">include</a></li><li class="navelem"><a class="el" href="../../dir_88467e66686deb9d3756fe4fc298e321.xhtml">slikenet</a></li><li class="navelem"><a class="el" href="../../d8/deb/_d_s___weighted_graph_8h.xhtml">DS_WeightedGraph.h</a></li>
    <li class="footer">Generated on Wed Aug 14 2019 22:09:46 for SLikeNet by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.2 </li>
  </ul>
</div>
</body>
</html>
