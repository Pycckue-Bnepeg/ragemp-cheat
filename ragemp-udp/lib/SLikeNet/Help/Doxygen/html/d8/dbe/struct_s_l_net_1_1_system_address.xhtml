<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>SLikeNet: SLNet::SystemAddress Struct Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SLikeNet
   &#160;<span id="projectnumber">0.1.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../modules.xhtml"><span>Modules</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="../../files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="../../classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="../../inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="../../functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('d8/dbe/struct_s_l_net_1_1_system_address.xhtml','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="../../df/d23/struct_s_l_net_1_1_system_address-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">SLNet::SystemAddress Struct Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Network address for a system.  
 <a href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d9/d49/types_8h_source.xhtml">slikenet/types.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ac8ef76a0c6926f3aa26768ad7d40ed5d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#ac8ef76a0c6926f3aa26768ad7d40ed5d">SystemAddress</a> ()</td></tr>
<tr class="memdesc:ac8ef76a0c6926f3aa26768ad7d40ed5d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructors.  <a href="#ac8ef76a0c6926f3aa26768ad7d40ed5d"></a><br/></td></tr>
<tr class="separator:ac8ef76a0c6926f3aa26768ad7d40ed5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28f83756754f6396af6eb22121611247"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#a28f83756754f6396af6eb22121611247">SystemAddress</a> (const char *str)</td></tr>
<tr class="separator:a28f83756754f6396af6eb22121611247"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a942e43d24989def5c1a49c97bb8ecfbe"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#a942e43d24989def5c1a49c97bb8ecfbe">SystemAddress</a> (const char *str, unsigned short port)</td></tr>
<tr class="separator:a942e43d24989def5c1a49c97bb8ecfbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5b388ed6b6716d09042dcf3e363733a"><td class="memItemLeft" align="right" valign="top">unsigned char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#ad5b388ed6b6716d09042dcf3e363733a">GetIPVersion</a> (void) const </td></tr>
<tr class="separator:ad5b388ed6b6716d09042dcf3e363733a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e5cd976c057d99cd0cfd972cd9f9789"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#a3e5cd976c057d99cd0cfd972cd9f9789">GetIPPROTO</a> (void) const </td></tr>
<tr class="separator:a3e5cd976c057d99cd0cfd972cd9f9789"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca7760ea7186a59a70697634d9d585d7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#aca7760ea7186a59a70697634d9d585d7">SetToLoopback</a> (void)</td></tr>
<tr class="memdesc:aca7760ea7186a59a70697634d9d585d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Call <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#aca7760ea7186a59a70697634d9d585d7" title="Call SetToLoopback(), with whatever IP version is currently held. Defaults to IPV4.">SetToLoopback()</a>, with whatever IP version is currently held. Defaults to IPV4.  <a href="#aca7760ea7186a59a70697634d9d585d7"></a><br/></td></tr>
<tr class="separator:aca7760ea7186a59a70697634d9d585d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a889998f29cf6e547e5fccd7da2e2c0a6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#a889998f29cf6e547e5fccd7da2e2c0a6">SetToLoopback</a> (unsigned char ipVersion)</td></tr>
<tr class="separator:a889998f29cf6e547e5fccd7da2e2c0a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9d938134d82e42d216903e2d4bc152f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#ac9d938134d82e42d216903e2d4bc152f">IsLoopback</a> (void) const </td></tr>
<tr class="separator:ac9d938134d82e42d216903e2d4bc152f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a994f9c414b5fd7094017b43e7c102b"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#a7a994f9c414b5fd7094017b43e7c102b">ToString</a> (bool writePort=true, char portDelineator='|') const </td></tr>
<tr class="separator:a7a994f9c414b5fd7094017b43e7c102b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ed3718bc19678614905b94c2396edd5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#a1ed3718bc19678614905b94c2396edd5">ToString</a> (bool writePort, char *dest, char portDelineator= '|') const </td></tr>
<tr class="separator:a1ed3718bc19678614905b94c2396edd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a930f9743c27f8c88f4dd445baf2eba39"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#a930f9743c27f8c88f4dd445baf2eba39">ToString</a> (bool writePort, char *dest, size_t destLength, char portDelineator='|') const </td></tr>
<tr class="separator:a930f9743c27f8c88f4dd445baf2eba39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acdd52cd5981fd1b58ff68ba52a98a13e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#acdd52cd5981fd1b58ff68ba52a98a13e">FromString</a> (const char *str, char portDelineator='|', int ipVersion=0)</td></tr>
<tr class="separator:acdd52cd5981fd1b58ff68ba52a98a13e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a7cfd12b532b744d42bad6ed6b5f089"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#a8a7cfd12b532b744d42bad6ed6b5f089">FromStringExplicitPort</a> (const char *str, unsigned short port, int ipVersion=0)</td></tr>
<tr class="memdesc:a8a7cfd12b532b744d42bad6ed6b5f089"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#acdd52cd5981fd1b58ff68ba52a98a13e">FromString()</a>, but you explicitly set a port at the same time.  <a href="#a8a7cfd12b532b744d42bad6ed6b5f089"></a><br/></td></tr>
<tr class="separator:a8a7cfd12b532b744d42bad6ed6b5f089"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9750eb4a3b71d71ff00d6ed856a1c5c9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#a9750eb4a3b71d71ff00d6ed856a1c5c9">CopyPort</a> (const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;right)</td></tr>
<tr class="memdesc:a9750eb4a3b71d71ff00d6ed856a1c5c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy the port from another <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml" title="Network address for a system.">SystemAddress</a> structure.  <a href="#a9750eb4a3b71d71ff00d6ed856a1c5c9"></a><br/></td></tr>
<tr class="separator:a9750eb4a3b71d71ff00d6ed856a1c5c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5915af5dc768047a85938ae1a7a9b034"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#a5915af5dc768047a85938ae1a7a9b034">EqualsExcludingPort</a> (const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;right) const </td></tr>
<tr class="memdesc:a5915af5dc768047a85938ae1a7a9b034"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns if two system addresses have the same IP (port is not checked)  <a href="#a5915af5dc768047a85938ae1a7a9b034"></a><br/></td></tr>
<tr class="separator:a5915af5dc768047a85938ae1a7a9b034"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afdd4a14b98b7e7b9f69afc30e8fe0d47"><td class="memItemLeft" align="right" valign="top">unsigned short&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#afdd4a14b98b7e7b9f69afc30e8fe0d47">GetPort</a> (void) const </td></tr>
<tr class="memdesc:afdd4a14b98b7e7b9f69afc30e8fe0d47"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the port in host order (this is what you normally use)  <a href="#afdd4a14b98b7e7b9f69afc30e8fe0d47"></a><br/></td></tr>
<tr class="separator:afdd4a14b98b7e7b9f69afc30e8fe0d47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a311649e2a5619e10ddfb3585d5874e38"><td class="memItemLeft" align="right" valign="top">unsigned short&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#a311649e2a5619e10ddfb3585d5874e38">GetPortNetworkOrder</a> (void) const </td></tr>
<tr class="separator:a311649e2a5619e10ddfb3585d5874e38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f42b847875bcf297eda4ebadeda7abe"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#a5f42b847875bcf297eda4ebadeda7abe">SetPortHostOrder</a> (unsigned short s)</td></tr>
<tr class="separator:a5f42b847875bcf297eda4ebadeda7abe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aabe9a3741607e1e6772cae6ed1443ef1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#aabe9a3741607e1e6772cae6ed1443ef1">SetPortNetworkOrder</a> (unsigned short s)</td></tr>
<tr class="separator:aabe9a3741607e1e6772cae6ed1443ef1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34071dfa14d9faa8a7e28e6d1491cb92"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#a34071dfa14d9faa8a7e28e6d1491cb92">SetBinaryAddress</a> (const char *str, char portDelineator=':')</td></tr>
<tr class="memdesc:a34071dfa14d9faa8a7e28e6d1491cb92"><td class="mdescLeft">&#160;</td><td class="mdescRight">Old version, for crap platforms that don't support newer socket functions.  <a href="#a34071dfa14d9faa8a7e28e6d1491cb92"></a><br/></td></tr>
<tr class="separator:a34071dfa14d9faa8a7e28e6d1491cb92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6fa77027c7b71489430e9acc6bcdd0c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#ae6fa77027c7b71489430e9acc6bcdd0c">ToString_Old</a> (bool writePort, char *dest, char portDelineator= ':') const </td></tr>
<tr class="memdesc:ae6fa77027c7b71489430e9acc6bcdd0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Old version, for crap platforms that don't support newer socket functions.  <a href="#ae6fa77027c7b71489430e9acc6bcdd0c"></a><br/></td></tr>
<tr class="separator:ae6fa77027c7b71489430e9acc6bcdd0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44b753f9891b3e7ca67129b5ba18609d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#a44b753f9891b3e7ca67129b5ba18609d">ToString_Old</a> (bool writePort, char *dest, size_t destLength, char portDelineator= ':') const </td></tr>
<tr class="separator:a44b753f9891b3e7ca67129b5ba18609d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa583d4ecc056ca5430eec9081213d52e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#aa583d4ecc056ca5430eec9081213d52e">FixForIPVersion</a> (const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;boundAddressToSocket)</td></tr>
<tr class="separator:aa583d4ecc056ca5430eec9081213d52e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4de69b4e577f31f50aba4a4d9a7f0a19"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#a4de69b4e577f31f50aba4a4d9a7f0a19">IsLANAddress</a> (void)</td></tr>
<tr class="separator:a4de69b4e577f31f50aba4a4d9a7f0a19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad32d4ac04f8def766f9c8a937b72d943"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#ad32d4ac04f8def766f9c8a937b72d943">operator=</a> (const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;input)</td></tr>
<tr class="separator:ad32d4ac04f8def766f9c8a937b72d943"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4663fcb0034686cf46857c39bf45de90"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#a4663fcb0034686cf46857c39bf45de90">operator==</a> (const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;right) const </td></tr>
<tr class="separator:a4663fcb0034686cf46857c39bf45de90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad42f34e7780fa5f102cad67cc1438454"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#ad42f34e7780fa5f102cad67cc1438454">operator!=</a> (const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;right) const </td></tr>
<tr class="separator:ad42f34e7780fa5f102cad67cc1438454"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abebf47196ae436746197098514854e81"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#abebf47196ae436746197098514854e81">operator&gt;</a> (const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;right) const </td></tr>
<tr class="separator:abebf47196ae436746197098514854e81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29b81b769ffd8578dd5fd73824b9b803"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#a29b81b769ffd8578dd5fd73824b9b803">operator&lt;</a> (const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;right) const </td></tr>
<tr class="separator:a29b81b769ffd8578dd5fd73824b9b803"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a095761d85f4ccef00a46c6c5d45d3cc7"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#a095761d85f4ccef00a46c6c5d45d3cc7">size</a> (void)</td></tr>
<tr class="separator:a095761d85f4ccef00a46c6c5d45d3cc7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae283da58448d126c440fee04dfdce2c6"><td class="memItemLeft" align="right" valign="top">static unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#ae283da58448d126c440fee04dfdce2c6">ToInteger</a> (const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;sa)</td></tr>
<tr class="memdesc:ae283da58448d126c440fee04dfdce2c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Hash the system address.  <a href="#ae283da58448d126c440fee04dfdce2c6"></a><br/></td></tr>
<tr class="separator:ae283da58448d126c440fee04dfdce2c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:a844163fff310f34520db616f9c9a50ff"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#a844163fff310f34520db616f9c9a50ff">union</a></td></tr>
<tr class="memdesc:a844163fff310f34520db616f9c9a50ff"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml" title="Network address for a system.">SystemAddress</a>, with RAKNET_SUPPORT_IPV6 defined, holds both an sockaddr_in6 and a sockaddr_in.  <a href="#a844163fff310f34520db616f9c9a50ff"></a><br/></td></tr>
<tr class="separator:a844163fff310f34520db616f9c9a50ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9652ec65cfbbf702d84ff340b12da47"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#ab9652ec65cfbbf702d84ff340b12da47">address</a></td></tr>
<tr class="separator:ab9652ec65cfbbf702d84ff340b12da47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2707e26293ed8eabfb8a699ac24ce14e"><td class="memItemLeft" align="right" valign="top">unsigned short&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#a2707e26293ed8eabfb8a699ac24ce14e">debugPort</a></td></tr>
<tr class="memdesc:a2707e26293ed8eabfb8a699ac24ce14e"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is not used internally, but holds a copy of the port held in the address union, so for debugging it's easier to check what port is being held.  <a href="#a2707e26293ed8eabfb8a699ac24ce14e"></a><br/></td></tr>
<tr class="separator:a2707e26293ed8eabfb8a699ac24ce14e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac702cdf872b7c57376b2e379845c150"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#aaebbed028894590d770e7fcf8518c441">SystemIndex</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#aac702cdf872b7c57376b2e379845c150">systemIndex</a></td></tr>
<tr class="separator:aac702cdf872b7c57376b2e379845c150"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Network address for a system. </p>
<p>Corresponds to a network address<br/>
 This is not necessarily a unique identifier. For example, if a system has both LAN and internet connections, the system may be identified by either one, depending on who is communicating<br/>
 Therefore, you should not transmit the <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml" title="Network address for a system.">SystemAddress</a> over the network and expect it to identify a system, or use it to connect to that system, except in the case where that system is not behind a NAT (such as with a dedciated server) Use <a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> for a unique per-instance of <a class="el" href="../../d5/dbf/class_s_l_net_1_1_rak_peer.xhtml" title="Main interface for network communications.">RakPeer</a> to identify systems </p>

<p>Definition at line <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00195">195</a> of file <a class="el" href="../../d9/d49/types_8h_source.xhtml">types.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ac8ef76a0c6926f3aa26768ad7d40ed5d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SystemAddress::SystemAddress </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructors. </p>

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00436">436</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00220">address</a>, <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00223">debugPort</a>, and <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00311">systemIndex</a>.</p>

</div>
</div>
<a class="anchor" id="a28f83756754f6396af6eb22121611247"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SystemAddress::SystemAddress </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00444">444</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00220">address</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00605">FromString()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00155">SetPortHostOrder()</a>, and <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00311">systemIndex</a>.</p>

</div>
</div>
<a class="anchor" id="a942e43d24989def5c1a49c97bb8ecfbe"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SystemAddress::SystemAddress </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned short&#160;</td>
          <td class="paramname"><em>port</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00451">451</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00220">address</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00727">FromStringExplicitPort()</a>, and <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00311">systemIndex</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a9750eb4a3b71d71ff00d6ed856a1c5c9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SystemAddress::CopyPort </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy the port from another <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml" title="Network address for a system.">SystemAddress</a> structure. </p>

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00739">739</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00220">address</a>, and <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00223">debugPort</a>.</p>

<p>Referenced by <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l03579">SLNet::RakPeer::AssignSystemAddressToRemoteSystemList()</a>.</p>

</div>
</div>
<a class="anchor" id="a5915af5dc768047a85938ae1a7a9b034"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SystemAddress::EqualsExcludingPort </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns if two system addresses have the same IP (port is not checked) </p>

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00139">139</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00220">address</a>.</p>

<p>Referenced by <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l03579">SLNet::RakPeer::AssignSystemAddressToRemoteSystemList()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l03990">SLNet::RakPeer::IsLoopbackAddress()</a>, and <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00165">operator==()</a>.</p>

</div>
</div>
<a class="anchor" id="aa583d4ecc056ca5430eec9081213d52e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SystemAddress::FixForIPVersion </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>boundAddressToSocket</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00495">495</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00605">FromString()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00224">GetIPVersion()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00053">IPV4_LOOPBACK</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00052">IPV6_LOOPBACK</a>, and <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00330">ToString()</a>.</p>

<p>Referenced by <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l04101">SLNet::RakPeer::CloseConnectionInternal()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l02079">SLNet::RakPeer::Ping()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l05540">SLNet::RakPeer::RunUpdateCycle()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l02981">SLNet::RakPeer::SendOutOfBand()</a>, and <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l02715">SLNet::RakPeer::SendTTL()</a>.</p>

</div>
</div>
<a class="anchor" id="acdd52cd5981fd1b58ff68ba52a98a13e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SystemAddress::FromString </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>portDelineator</em> = <code>'|'</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ipVersion</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set the system address from a printable IP string, for example "192.0.2.1" or "2001:db8:63b3:1::3490" You can write the port as well, using the portDelineator, for example "192.0.2.1|1234" </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>A printable IP string, for example "192.0.2.1" or "2001:db8:63b3:1::3490". Pass 0 for <em>str</em> to set to UNASSIGNED_SYSTEM_ADDRESS </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">portDelineator</td><td>if <em>str</em> contains a port, delineate the port with this character. portDelineator should not be '.', ':', '', '-', '/', a number, or a-f </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ipVersion</td><td>Only used if str is a pre-defined address in the wrong format, such as 127.0.0.1 but you want ip version 6, so you can pass 6 here to do the conversion </td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>The current port is unchanged if a port is not specified in <em>str</em> </dd></dl>
<dl class="section return"><dt>Returns</dt><dd>True on success, false on ipVersion does not match type of passed string </dd></dl>

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00605">605</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../dc/d26/_w_s_a_startup_singleton_8cpp_source.xhtml#l00046">WSAStartupSingleton::AddRef()</a>, <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00220">address</a>, <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00223">debugPort</a>, <a class="el" href="../../dc/d26/_w_s_a_startup_singleton_8cpp_source.xhtml#l00077">WSAStartupSingleton::Deref()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00053">IPV4_LOOPBACK</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00052">IPV6_LOOPBACK</a>, <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>, and <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00532">SetBinaryAddress()</a>.</p>

<p>Referenced by <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00495">FixForIPVersion()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00727">FromStringExplicitPort()</a>, <a class="el" href="../../d8/d4f/_socket_layer_8cpp_source.xhtml#l00529">SLNet::SocketLayer::GetSystemAddress()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00244">SetToLoopback()</a>, and <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00444">SystemAddress()</a>.</p>

</div>
</div>
<a class="anchor" id="a8a7cfd12b532b744d42bad6ed6b5f089"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SystemAddress::FromStringExplicitPort </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned short&#160;</td>
          <td class="paramname"><em>port</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ipVersion</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Same as <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#acdd52cd5981fd1b58ff68ba52a98a13e">FromString()</a>, but you explicitly set a port at the same time. </p>

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00727">727</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00220">address</a>, <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00223">debugPort</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00605">FromString()</a>, and <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00368">SLNet::UNASSIGNED_SYSTEM_ADDRESS</a>.</p>

<p>Referenced by <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l02079">SLNet::RakPeer::Ping()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l03250">SLNet::RakPeer::SendConnectionRequest()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l02981">SLNet::RakPeer::SendOutOfBand()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l02715">SLNet::RakPeer::SendTTL()</a>, and <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00451">SystemAddress()</a>.</p>

</div>
</div>
<a class="anchor" id="a3e5cd976c057d99cd0cfd972cd9f9789"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int SystemAddress::GetIPPROTO </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00230">230</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00220">address</a>.</p>

</div>
</div>
<a class="anchor" id="ad5b388ed6b6716d09042dcf3e363733a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned char SystemAddress::GetIPVersion </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Return the IP version, either IPV4 or IPV6 </p>
<dl class="section return"><dt>Returns</dt><dd>Either 4 or 6 </dd></dl>

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00224">224</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00220">address</a>.</p>

<p>Referenced by <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00495">FixForIPVersion()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00255">IsLoopback()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00240">SetToLoopback()</a>, and <a class="el" href="../../d7/dc3/_bit_stream_8h_source.xhtml#l00982">SLNet::BitStream::Write()</a>.</p>

</div>
</div>
<a class="anchor" id="afdd4a14b98b7e7b9f69afc30e8fe0d47"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned short SystemAddress::GetPort </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the port in host order (this is what you normally use) </p>

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00147">147</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00220">address</a>.</p>

<p>Referenced by <a class="el" href="../../d8/d4f/_socket_layer_8cpp_source.xhtml#l00487">SLNet::SocketLayer::GetLocalPort()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l05402">SLNet::ProcessNetworkPacket()</a>, <a class="el" href="../../d5/dd3/_rak_net_socket2_8cpp_source.xhtml#l00351">SLNet::RNS2_Berkley::RecvFromLoopInt()</a>, <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml#l00161">SLNet::CommandParserInterface::ReturnResult()</a>, and <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00275">ToString_Old()</a>.</p>

</div>
</div>
<a class="anchor" id="a311649e2a5619e10ddfb3585d5874e38"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned short SystemAddress::GetPortNetworkOrder </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00151">151</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00220">address</a>.</p>

<p>Referenced by <a class="el" href="../../d7/dc3/_bit_stream_8h_source.xhtml#l00982">SLNet::BitStream::Write()</a>.</p>

</div>
</div>
<a class="anchor" id="a4de69b4e577f31f50aba4a4d9a7f0a19"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SystemAddress::IsLANAddress </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00523">523</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00220">address</a>.</p>

</div>
</div>
<a class="anchor" id="ac9d938134d82e42d216903e2d4bc152f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SystemAddress::IsLoopback </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>If was set to 127.0.0.1 or ::1 </dd></dl>

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00255">255</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00220">address</a>, and <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00224">GetIPVersion()</a>.</p>

</div>
</div>
<a class="anchor" id="ad42f34e7780fa5f102cad67cc1438454"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SystemAddress::operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00170">170</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a29b81b769ffd8578dd5fd73824b9b803"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SystemAddress::operator&lt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00190">190</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00220">address</a>.</p>

</div>
</div>
<a class="anchor" id="ad32d4ac04f8def766f9c8a937b72d943"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp; SystemAddress::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00132">132</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00220">address</a>, <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00223">debugPort</a>, and <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00311">systemIndex</a>.</p>

</div>
</div>
<a class="anchor" id="a4663fcb0034686cf46857c39bf45de90"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SystemAddress::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00165">165</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00220">address</a>, and <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00139">EqualsExcludingPort()</a>.</p>

</div>
</div>
<a class="anchor" id="abebf47196ae436746197098514854e81"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SystemAddress::operator&gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00175">175</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00220">address</a>.</p>

</div>
</div>
<a class="anchor" id="a34071dfa14d9faa8a7e28e6d1491cb92"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SystemAddress::SetBinaryAddress </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>portDelineator</em> = <code>':'</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Old version, for crap platforms that don't support newer socket functions. </p>

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00532">532</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00047">_FILE_AND_LINE_</a>, <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00220">address</a>, <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00223">debugPort</a>, <a class="el" href="../../d5/dd3/_rak_net_socket2_8cpp_source.xhtml#l00135">SLNet::RakNetSocket2::DomainNameToIP()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00085">SLNet::NonNumericHostString()</a>, <a class="el" href="../../dd/dc5/memoryoverride_8h_source.xhtml#l00197">SLNet::OP_DELETE_ARRAY()</a>, and <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00368">SLNet::UNASSIGNED_SYSTEM_ADDRESS</a>.</p>

<p>Referenced by <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00605">FromString()</a>.</p>

</div>
</div>
<a class="anchor" id="a5f42b847875bcf297eda4ebadeda7abe"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SystemAddress::SetPortHostOrder </td>
          <td>(</td>
          <td class="paramtype">unsigned short&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sets the port. The port value should be in host order (this is what you normally use) Renamed from SetPort because of winspool.h <a href="http://edn.embarcadero.com/article/21494">http://edn.embarcadero.com/article/21494</a> </p>

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00155">155</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00220">address</a>, and <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00223">debugPort</a>.</p>

<p>Referenced by <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l00372">SLNet::RakPeer::Startup()</a>, and <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00444">SystemAddress()</a>.</p>

</div>
</div>
<a class="anchor" id="aabe9a3741607e1e6772cae6ed1443ef1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SystemAddress::SetPortNetworkOrder </td>
          <td>(</td>
          <td class="paramtype">unsigned short&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00160">160</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00220">address</a>, and <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00223">debugPort</a>.</p>

<p>Referenced by <a class="el" href="../../d8/d4f/_socket_layer_8cpp_source.xhtml#l00493">SLNet::SocketLayer::GetSystemAddress_Old()</a>.</p>

</div>
</div>
<a class="anchor" id="aca7760ea7186a59a70697634d9d585d7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SystemAddress::SetToLoopback </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Call <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#aca7760ea7186a59a70697634d9d585d7" title="Call SetToLoopback(), with whatever IP version is currently held. Defaults to IPV4.">SetToLoopback()</a>, with whatever IP version is currently held. Defaults to IPV4. </p>

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00240">240</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00224">GetIPVersion()</a>.</p>

<p>Referenced by <a class="el" href="../../d8/d4f/_socket_layer_8cpp_source.xhtml#l00529">SLNet::SocketLayer::GetSystemAddress()</a>.</p>

</div>
</div>
<a class="anchor" id="a889998f29cf6e547e5fccd7da2e2c0a6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SystemAddress::SetToLoopback </td>
          <td>(</td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>ipVersion</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Call <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#aca7760ea7186a59a70697634d9d585d7" title="Call SetToLoopback(), with whatever IP version is currently held. Defaults to IPV4.">SetToLoopback()</a> with a specific IP version </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ipVersion</td><td>Either 4 for IPV4 or 6 for IPV6 </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00244">244</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00605">FromString()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00053">IPV4_LOOPBACK</a>, and <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00052">IPV6_LOOPBACK</a>.</p>

</div>
</div>
<a class="anchor" id="a095761d85f4ccef00a46c6c5d45d3cc7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int SystemAddress::size </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00204">204</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ae283da58448d126c440fee04dfdce2c6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long SystemAddress::ToInteger </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>sa</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Hash the system address. </p>

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00212">212</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00220">address</a>, and <a class="el" href="../../d4/dcf/_super_fast_hash_8cpp_source.xhtml#l00058">SuperFastHashIncremental()</a>.</p>

<p>Referenced by <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l03785">SLNet::RakPeer::RemoteSystemLookupHashIndex()</a>, and <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00061">SLNet::AddressOrGUID::ToInteger()</a>.</p>

</div>
</div>
<a class="anchor" id="a7a994f9c414b5fd7094017b43e7c102b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * SystemAddress::ToString </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>writePort</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>portDelineator</em> = <code>'|'</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00330">330</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>Referenced by <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l03579">SLNet::RakPeer::AssignSystemAddressToRemoteSystemList()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00495">FixForIPVersion()</a>, <a class="el" href="../../d8/d4f/_socket_layer_8cpp_source.xhtml#l00592">SLNet::SocketLayer::GetFirstBindableIP()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l02595">SLNet::RakPeer::GetLocalIP()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l04524">SLNet::ProcessOfflineNetworkPacket()</a>, <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml#l00161">SLNet::CommandParserInterface::ReturnResult()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l05540">SLNet::RakPeer::RunUpdateCycle()</a>, and <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00067">SLNet::AddressOrGUID::ToString()</a>.</p>

</div>
</div>
<a class="anchor" id="a1ed3718bc19678614905b94c2396edd5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SystemAddress::ToString </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>writePort</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>dest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>portDelineator</em> = <code>'|'</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00419">419</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00275">ToString_Old()</a>.</p>

</div>
</div>
<a class="anchor" id="a930f9743c27f8c88f4dd445baf2eba39"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SystemAddress::ToString </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>writePort</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>dest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>destLength</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>portDelineator</em> = <code>'|'</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00427">427</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00275">ToString_Old()</a>.</p>

</div>
</div>
<a class="anchor" id="ae6fa77027c7b71489430e9acc6bcdd0c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SystemAddress::ToString_Old </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>writePort</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>dest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>portDelineator</em> = <code>':'</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Old version, for crap platforms that don't support newer socket functions. </p>

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00275">275</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00220">address</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00147">GetPort()</a>, <a class="el" href="../../db/dad/_itoa_8cpp_source.xhtml#l00024">Itoa()</a>, and <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00368">SLNet::UNASSIGNED_SYSTEM_ADDRESS</a>.</p>

<p>Referenced by <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00419">ToString()</a>.</p>

</div>
</div>
<a class="anchor" id="a44b753f9891b3e7ca67129b5ba18609d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SystemAddress::ToString_Old </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>writePort</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>dest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>destLength</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>portDelineator</em> = <code>':'</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00308">308</a> of file <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a>.</p>

<p>References <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00220">address</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00147">GetPort()</a>, <a class="el" href="../../db/dad/_itoa_8cpp_source.xhtml#l00024">Itoa()</a>, and <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00368">SLNet::UNASSIGNED_SYSTEM_ADDRESS</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="ab9652ec65cfbbf702d84ff340b12da47"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SLNet::SystemAddress::address</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00220">220</a> of file <a class="el" href="../../d9/d49/types_8h_source.xhtml">types.h</a>.</p>

<p>Referenced by <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00739">CopyPort()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00139">EqualsExcludingPort()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00605">FromString()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00727">FromStringExplicitPort()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00230">GetIPPROTO()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00224">GetIPVersion()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00147">GetPort()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00151">GetPortNetworkOrder()</a>, <a class="el" href="../../d8/d4f/_socket_layer_8cpp_source.xhtml#l00529">SLNet::SocketLayer::GetSystemAddress()</a>, <a class="el" href="../../d8/d4f/_socket_layer_8cpp_source.xhtml#l00493">SLNet::SocketLayer::GetSystemAddress_Old()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00523">IsLANAddress()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00255">IsLoopback()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00190">operator&lt;()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00132">operator=()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00165">operator==()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00175">operator&gt;()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l04524">SLNet::ProcessOfflineNetworkPacket()</a>, <a class="el" href="../../d7/dc3/_bit_stream_8h_source.xhtml#l01327">SLNet::BitStream::Read()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l05540">SLNet::RakPeer::RunUpdateCycle()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00532">SetBinaryAddress()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00155">SetPortHostOrder()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00160">SetPortNetworkOrder()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00436">SystemAddress()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00212">ToInteger()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00275">ToString_Old()</a>, and <a class="el" href="../../d7/dc3/_bit_stream_8h_source.xhtml#l00982">SLNet::BitStream::Write()</a>.</p>

</div>
</div>
<a class="anchor" id="a2707e26293ed8eabfb8a699ac24ce14e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned short SLNet::SystemAddress::debugPort</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This is not used internally, but holds a copy of the port held in the address union, so for debugging it's easier to check what port is being held. </p>

<p>Definition at line <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00223">223</a> of file <a class="el" href="../../d9/d49/types_8h_source.xhtml">types.h</a>.</p>

<p>Referenced by <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00739">CopyPort()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00605">FromString()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00727">FromStringExplicitPort()</a>, <a class="el" href="../../d8/d4f/_socket_layer_8cpp_source.xhtml#l00529">SLNet::SocketLayer::GetSystemAddress()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00132">operator=()</a>, <a class="el" href="../../d7/dc3/_bit_stream_8h_source.xhtml#l01327">SLNet::BitStream::Read()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l05540">SLNet::RakPeer::RunUpdateCycle()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00532">SetBinaryAddress()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00155">SetPortHostOrder()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00160">SetPortNetworkOrder()</a>, and <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00436">SystemAddress()</a>.</p>

</div>
</div>
<a class="anchor" id="aac702cdf872b7c57376b2e379845c150"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#aaebbed028894590d770e7fcf8518c441">SystemIndex</a> SLNet::SystemAddress::systemIndex</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00311">311</a> of file <a class="el" href="../../d9/d49/types_8h_source.xhtml">types.h</a>.</p>

<p>Referenced by <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l01647">SLNet::RakPeer::CloseConnection()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l02464">SLNet::RakPeer::GetClientPublicKeyFromSystemAddress()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l02383">SLNet::RakPeer::GetGuidFromSystemAddress()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l03123">SLNet::RakPeer::GetIndexFromSystemAddress()</a>, <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00132">operator=()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l04524">SLNet::ProcessOfflineNetworkPacket()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l05540">SLNet::RakPeer::RunUpdateCycle()</a>, and <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00436">SystemAddress()</a>.</p>

</div>
</div>
<a class="anchor" id="a844163fff310f34520db616f9c9a50ff"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SLNet::SystemAddress::union</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{</div>
<div class="line"></div>
<div class="line"></div>
<div class="line"></div>
<div class="line"></div>
<div class="line"></div>
<div class="line">        sockaddr_in addr4</div>
</div><!-- fragment -->
<p><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml" title="Network address for a system.">SystemAddress</a>, with RAKNET_SUPPORT_IPV6 defined, holds both an sockaddr_in6 and a sockaddr_in. </p>

<p>Definition at line <a class="el" href="../../d9/d49/types_8h_source.xhtml#l00213">213</a> of file <a class="el" href="../../d9/d49/types_8h_source.xhtml">types.h</a>.</p>

</div>
</div>
<hr/>The documentation for this struct was generated from the following files:<ul>
<li>Source/include/slikenet/<a class="el" href="../../d9/d49/types_8h_source.xhtml">types.h</a></li>
<li>Source/src/<a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml">RakNetTypes.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml">SLNet</a></li><li class="navelem"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a></li>
    <li class="footer">Generated on Wed Aug 14 2019 22:09:50 for SLikeNet by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.2 </li>
  </ul>
</div>
</body>
</html>
