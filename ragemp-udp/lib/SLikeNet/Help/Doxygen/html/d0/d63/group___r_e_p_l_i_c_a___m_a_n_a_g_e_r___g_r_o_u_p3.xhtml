<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>SLikeNet: ReplicaManager3</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SLikeNet
   &#160;<span id="projectnumber">0.1.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../modules.xhtml"><span>Modules</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="../../files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a>  </div>
  <div class="headertitle">
<div class="title">ReplicaManager3</div>  </div>
<div class="ingroups"><a class="el" href="../../df/db6/group___p_l_u_g_i_n_s___g_r_o_u_p.xhtml">Plugins</a></div></div><!--header-->
<div class="contents">

<p>Third implementation of object replication.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:d4/d18/class_s_l_net_1_1_replica_manager3"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">SLNet::ReplicaManager3</a></td></tr>
<tr class="memdesc:d4/d18/class_s_l_net_1_1_replica_manager3"><td class="mdescLeft">&#160;</td><td class="mdescRight">System to help automate game object construction, destruction, and serialization.  <a href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">More...</a><br/></td></tr>
<tr class="separator:d4/d18/class_s_l_net_1_1_replica_manager3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:dd/da8/struct_s_l_net_1_1_last_serialization_result_b_s"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#dd/da8/struct_s_l_net_1_1_last_serialization_result_b_s">SLNet::LastSerializationResultBS</a></td></tr>
<tr class="separator:dd/da8/struct_s_l_net_1_1_last_serialization_result_b_s"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:d7/d35/struct_s_l_net_1_1_last_serialization_result"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d7/d35/struct_s_l_net_1_1_last_serialization_result">SLNet::LastSerializationResult</a></td></tr>
<tr class="separator:d7/d35/struct_s_l_net_1_1_last_serialization_result"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:d5/dad/struct_s_l_net_1_1_serialize_parameters"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d5/dad/struct_s_l_net_1_1_serialize_parameters">SLNet::SerializeParameters</a></td></tr>
<tr class="separator:d5/dad/struct_s_l_net_1_1_serialize_parameters"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:df/d99/struct_s_l_net_1_1_deserialize_parameters"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#df/d99/struct_s_l_net_1_1_deserialize_parameters">SLNet::DeserializeParameters</a></td></tr>
<tr class="separator:df/d99/struct_s_l_net_1_1_deserialize_parameters"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:da/d47/class_s_l_net_1_1_connection___r_m3"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a></td></tr>
<tr class="memdesc:da/d47/class_s_l_net_1_1_connection___r_m3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Each remote system is represented by <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3" title="Each remote system is represented by Connection_RM3. Used to allocate Replica3 and track which instan...">Connection_RM3</a>. Used to allocate <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> and track which instances have been allocated.  <a href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">More...</a><br/></td></tr>
<tr class="separator:da/d47/class_s_l_net_1_1_connection___r_m3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:d3/d5b/class_s_l_net_1_1_replica3"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">SLNet::Replica3</a></td></tr>
<tr class="memdesc:d3/d5b/class_s_l_net_1_1_replica3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for your replicated objects for the <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3" title="System to help automate game object construction, destruction, and serialization.">ReplicaManager3</a> system.  <a href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">More...</a><br/></td></tr>
<tr class="separator:d3/d5b/class_s_l_net_1_1_replica3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:df/d59/struct_s_l_net_1_1_replica_manager3_1_1_r_m3_world"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#df/d59/struct_s_l_net_1_1_replica_manager3_1_1_r_m3_world">SLNet::ReplicaManager3::RM3World</a></td></tr>
<tr class="separator:df/d59/struct_s_l_net_1_1_replica_manager3_1_1_r_m3_world"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:gaebe2570c80721d22c71e20cef4236e83"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="../../df/df2/_native_types_8h.xhtml#aba7bc1797add20fe3efdf37ced1182c5">uint8_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">SLNet::WorldId</a></td></tr>
<tr class="separator:gaebe2570c80721d22c71e20cef4236e83"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:ga3c77f49d3ff6a39bb62cb2efd2d3474a"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga3c77f49d3ff6a39bb62cb2efd2d3474a">SLNet::SendSerializeIfChangedResult</a> { <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gga3c77f49d3ff6a39bb62cb2efd2d3474aabc15a3c2d66a71959798f99d2e7335c5">SLNet::SSICR_SENT_DATA</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gga3c77f49d3ff6a39bb62cb2efd2d3474aa3d21bf14ba60d134853562e670644727">SLNet::SSICR_DID_NOT_SEND_DATA</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gga3c77f49d3ff6a39bb62cb2efd2d3474aa8a05aa3a6555e71aed9db68310fd5940">SLNet::SSICR_NEVER_SERIALIZE</a>
 }</td></tr>
<tr class="separator:ga3c77f49d3ff6a39bb62cb2efd2d3474a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadf975dd8a1352bc64cfa8f4de8054c48"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gadf975dd8a1352bc64cfa8f4de8054c48">SLNet::RM3ConstructionState</a> { <br/>
&#160;&#160;<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ggadf975dd8a1352bc64cfa8f4de8054c48aa4b4b25a9aaa3806462c1c74fbf6dc22">SLNet::RM3CS_SEND_CONSTRUCTION</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ggadf975dd8a1352bc64cfa8f4de8054c48a943b4da6dbfd372382b997e60c141ba8">SLNet::RM3CS_ALREADY_EXISTS_REMOTELY</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ggadf975dd8a1352bc64cfa8f4de8054c48a31408128d8c6f8abad212db60c296589">SLNet::RM3CS_ALREADY_EXISTS_REMOTELY_DO_NOT_CONSTRUCT</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ggadf975dd8a1352bc64cfa8f4de8054c48a058c05314316d8c2d9e70f01548ff8c9">SLNet::RM3CS_NEVER_CONSTRUCT</a>, 
<br/>
&#160;&#160;<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ggadf975dd8a1352bc64cfa8f4de8054c48a28cc8a1b6b45f13805bc5853fa1cfa01">SLNet::RM3CS_NO_ACTION</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ggadf975dd8a1352bc64cfa8f4de8054c48a16b59613fbc9cc318f6ba1850ce0e5c4">SLNet::RM3CS_MAX</a>
<br/>
 }</td></tr>
<tr class="memdesc:gadf975dd8a1352bc64cfa8f4de8054c48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return codes for Connection_RM3::GetConstructionState() and Replica3::QueryConstruction()  <a href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gadf975dd8a1352bc64cfa8f4de8054c48">More...</a><br/></td></tr>
<tr class="separator:gadf975dd8a1352bc64cfa8f4de8054c48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga77f11ba8783033d5b9644257cbb996d3"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga77f11ba8783033d5b9644257cbb996d3">SLNet::RM3DestructionState</a> { <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gga77f11ba8783033d5b9644257cbb996d3a3d912fff20521a7206f48ae5989e768f">SLNet::RM3DS_SEND_DESTRUCTION</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gga77f11ba8783033d5b9644257cbb996d3af0239e909d7413b148bedd47560fd51d">SLNet::RM3DS_DO_NOT_QUERY_DESTRUCTION</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gga77f11ba8783033d5b9644257cbb996d3a57afb4616979ea16f07a5b243cd4962c">SLNet::RM3DS_NO_ACTION</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gga77f11ba8783033d5b9644257cbb996d3a06c76b4d659d071a6eccd64d7e706ace">SLNet::RM3DS_MAX</a>
 }</td></tr>
<tr class="separator:ga77f11ba8783033d5b9644257cbb996d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4d0f10f0e557bd96237574321b79a68a"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga4d0f10f0e557bd96237574321b79a68a">SLNet::RM3SerializationResult</a> { <br/>
&#160;&#160;<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gga4d0f10f0e557bd96237574321b79a68aa82f6a6b5d3b5ae80741c5dbce7914afd">SLNet::RM3SR_BROADCAST_IDENTICALLY</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gga4d0f10f0e557bd96237574321b79a68aa1adadddc22bfe0944f050454f9293a2e">SLNet::RM3SR_BROADCAST_IDENTICALLY_FORCE_SERIALIZATION</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gga4d0f10f0e557bd96237574321b79a68aa95572b7e0833ff73cd4c839d6440db4e">SLNet::RM3SR_SERIALIZED_UNIQUELY</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gga4d0f10f0e557bd96237574321b79a68aa2b7eba1b79cfbe6e07b1077e654e18ef">SLNet::RM3SR_SERIALIZED_ALWAYS</a>, 
<br/>
&#160;&#160;<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gga4d0f10f0e557bd96237574321b79a68aa3cb3f36d6ab3a00980ce84184e02887a">SLNet::RM3SR_SERIALIZED_ALWAYS_IDENTICALLY</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gga4d0f10f0e557bd96237574321b79a68aac51a04908dce1e085f16c4fd0b69637a">SLNet::RM3SR_DO_NOT_SERIALIZE</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gga4d0f10f0e557bd96237574321b79a68aad5ebe6c34750670ba21bed1bd9e247af">SLNet::RM3SR_NEVER_SERIALIZE_FOR_THIS_CONNECTION</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gga4d0f10f0e557bd96237574321b79a68aaa26af3cbf4d081f1c432c5991a5768d1">SLNet::RM3SR_MAX</a>
<br/>
 }</td></tr>
<tr class="separator:ga4d0f10f0e557bd96237574321b79a68a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga134c0f5cbd0cb8c0182ffeeebb2aea59"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga134c0f5cbd0cb8c0182ffeeebb2aea59">SLNet::RM3QuerySerializationResult</a> { <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gga134c0f5cbd0cb8c0182ffeeebb2aea59a47cf5f95d4777169312158f71daca687">SLNet::RM3QSR_CALL_SERIALIZE</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gga134c0f5cbd0cb8c0182ffeeebb2aea59a4aba2526c69dac367c829a3cd42c22b9">SLNet::RM3QSR_DO_NOT_CALL_SERIALIZE</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gga134c0f5cbd0cb8c0182ffeeebb2aea59a280170fa88e7666207d08cf2790271a6">SLNet::RM3QSR_NEVER_CALL_SERIALIZE</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gga134c0f5cbd0cb8c0182ffeeebb2aea59a39ddd8229d904ee07d4076b3e889f2c8">SLNet::RM3QSR_MAX</a>
 }</td></tr>
<tr class="separator:ga134c0f5cbd0cb8c0182ffeeebb2aea59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga698075ced173fa417a7df5f9d1be15e8"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga698075ced173fa417a7df5f9d1be15e8">SLNet::RM3ActionOnPopConnection</a> { <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gga698075ced173fa417a7df5f9d1be15e8a9b3a5d23ca77bd4d4af7eb35424cf5ac">SLNet::RM3AOPC_DO_NOTHING</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gga698075ced173fa417a7df5f9d1be15e8afec43dd56887396433293f4ef145a56a">SLNet::RM3AOPC_DELETE_REPLICA</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gga698075ced173fa417a7df5f9d1be15e8ae3a7b8a70b29eb26185a82c33b2b362f">SLNet::RM3AOPC_DELETE_REPLICA_AND_BROADCAST_DESTRUCTION</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gga698075ced173fa417a7df5f9d1be15e8aa2656dfe5543e1d22195e60d4b34a3b6">SLNet::RM3AOPC_MAX</a>
 }</td></tr>
<tr class="separator:ga698075ced173fa417a7df5f9d1be15e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab6ddc529b3713b27f8d9addde9114a7c"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gab6ddc529b3713b27f8d9addde9114a7c">SLNet::Replica3P2PMode</a> { <br/>
&#160;&#160;<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ggab6ddc529b3713b27f8d9addde9114a7ca913e6305dae6ce3163eda78b4c5bb64a">SLNet::R3P2PM_SINGLE_OWNER</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ggab6ddc529b3713b27f8d9addde9114a7ca439b431e38b1a52dad82e22383a9d277">SLNet::R3P2PM_MULTI_OWNER_CURRENTLY_AUTHORITATIVE</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ggab6ddc529b3713b27f8d9addde9114a7ca9956b5c01f67d9a379062e243eb32e54">SLNet::R3P2PM_MULTI_OWNER_NOT_CURRENTLY_AUTHORITATIVE</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ggab6ddc529b3713b27f8d9addde9114a7cabb05ca8e2b803d08fb04cb9b3e348e2b">SLNet::R3P2PM_STATIC_OBJECT_CURRENTLY_AUTHORITATIVE</a>, 
<br/>
&#160;&#160;<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ggab6ddc529b3713b27f8d9addde9114a7ca3fd6c08c9e1cd451e00f3c4dce5b032d">SLNet::R3P2PM_STATIC_OBJECT_NOT_CURRENTLY_AUTHORITATIVE</a>
<br/>
 }</td></tr>
<tr class="separator:gab6ddc529b3713b27f8d9addde9114a7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Third implementation of object replication. </p>
<hr/><h2 class="groupheader">Class Documentation</h2>
<a name="d4/d18/class_s_l_net_1_1_replica_manager3" id="d4/d18/class_s_l_net_1_1_replica_manager3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">class SLNet::ReplicaManager3</td>
        </tr>
      </table>
</div><div class="memdoc">
<div class="textblock"><p>System to help automate game object construction, destruction, and serialization. </p>
<p><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3" title="System to help automate game object construction, destruction, and serialization.">ReplicaManager3</a> tracks your game objects and automates the networking for replicating them across the network<br/>
 As objects are created, destroyed, or serialized differently, those changes are pushed out to other systems.<br/>
 To use:<br/>
 </p>
<ol>
<li>
Derive from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3" title="Each remote system is represented by Connection_RM3. Used to allocate Replica3 and track which instan...">Connection_RM3</a> and implement <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a56535f2cd8fafd109ffbb69c3597ebca" title="Class factory to create a Replica3 instance, given a user-defined identifier.">Connection_RM3::AllocReplica()</a>. This is a factory function where given a user-supplied identifier for a class (such as name) return an instance of that class. Should be able to return any networked object in your game. </li>
<li>
Derive from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3" title="System to help automate game object construction, destruction, and serialization.">ReplicaManager3</a> and implement <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a002d1792ae0a1b08bfb84711c6441c9e" title="Implement to return a game specific derivation of Connection_RM3.">AllocConnection()</a> and <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a40bc143ea7bb423c0045f0bbbfe88b06" title="Implement to destroy a class instanced returned by AllocConnection()">DeallocConnection()</a> to return the class you created in step 1. </li>
<li>
Derive your networked game objects from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a>. All pure virtuals have to be implemented, however defaults are provided for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9cd4c94d916baf34960fe4e396a9a402" title="Ask if this object, which does not exist on destinationConnection should (now) be sent to that system...">Replica3::QueryConstruction()</a>, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#af2ee7d5a78ce055e365a2a303fd80718" title="We&#39;re about to call DeserializeConstruction() on this Replica3. If QueryRemoteConstruction() returns ...">Replica3::QueryRemoteConstruction()</a>, and <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a899d87b3aeb957648a049d1aba47c42a" title="Implement with QuerySerialization_ClientSerializable(), QuerySerialization_ServerSerializable(), or QuerySerialization_PeerToPeer()">Replica3::QuerySerialization()</a> depending on your network architecture. </li>
<li>
When a new game object is created on the local system, pass it to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab822b30a99de1c9ee1cb3835f726fe7c" title="Adds a replicated object to the system.">ReplicaManager3::Reference()</a>. </li>
<li>
When a game object is destroyed on the local system, and you want other systems to know about it, call <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab5096b364b6e47f5dc3e49734208fbd0">Replica3::BroadcastDestruction()</a> </li>
</ol>
<p><br/>
 At this point, all new connections will automatically download, get construction messages, get destruction messages, and update serialization automatically. </p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00086">86</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>
</div><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="../../closed.png" alt="+"/> Inheritance diagram for SLNet::ReplicaManager3:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d5/d16/class_s_l_net_1_1_replica_manager3__inherit__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<table class="memberdecls">
<tr><td colspan="2"><h3>Public Member Functions</h3></td></tr>
<tr class="memitem:add9c78ef14d530ac2b45e766051cc2bd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#add9c78ef14d530ac2b45e766051cc2bd">ReplicaManager3</a> ()</td></tr>
<tr class="separator:add9c78ef14d530ac2b45e766051cc2bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad87634b45c53f99856437f34479f8abb"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ad87634b45c53f99856437f34479f8abb">~ReplicaManager3</a> ()</td></tr>
<tr class="separator:ad87634b45c53f99856437f34479f8abb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a002d1792ae0a1b08bfb84711c6441c9e"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">Connection_RM3</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a002d1792ae0a1b08bfb84711c6441c9e">AllocConnection</a> (const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;systemAddress, <a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> rakNetGUID) const =0</td></tr>
<tr class="memdesc:a002d1792ae0a1b08bfb84711c6441c9e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implement to return a game specific derivation of <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3" title="Each remote system is represented by Connection_RM3. Used to allocate Replica3 and track which instan...">Connection_RM3</a>.  <a href="#a002d1792ae0a1b08bfb84711c6441c9e"></a><br/></td></tr>
<tr class="separator:a002d1792ae0a1b08bfb84711c6441c9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40bc143ea7bb423c0045f0bbbfe88b06"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a40bc143ea7bb423c0045f0bbbfe88b06">DeallocConnection</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">Connection_RM3</a> *connection) const =0</td></tr>
<tr class="memdesc:a40bc143ea7bb423c0045f0bbbfe88b06"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implement to destroy a class instanced returned by <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a002d1792ae0a1b08bfb84711c6441c9e" title="Implement to return a game specific derivation of Connection_RM3.">AllocConnection()</a>  <a href="#a40bc143ea7bb423c0045f0bbbfe88b06"></a><br/></td></tr>
<tr class="separator:a40bc143ea7bb423c0045f0bbbfe88b06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a9827b1942a87ab2f797d32a6365fbb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a5a9827b1942a87ab2f797d32a6365fbb">SetAutoManageConnections</a> (bool autoCreate, bool autoDestroy)</td></tr>
<tr class="memdesc:a5a9827b1942a87ab2f797d32a6365fbb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable or disable automatically assigning connections to new instances of <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3" title="Each remote system is represented by Connection_RM3. Used to allocate Replica3 and track which instan...">Connection_RM3</a>.  <a href="#a5a9827b1942a87ab2f797d32a6365fbb"></a><br/></td></tr>
<tr class="separator:a5a9827b1942a87ab2f797d32a6365fbb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5336ddb1577378019317a8352a3350db"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a5336ddb1577378019317a8352a3350db">GetAutoCreateConnections</a> (void) const </td></tr>
<tr class="separator:a5336ddb1577378019317a8352a3350db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf93ef578af7ca67d13a1bcd65dffa25"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#adf93ef578af7ca67d13a1bcd65dffa25">GetAutoDestroyConnections</a> (void) const </td></tr>
<tr class="separator:adf93ef578af7ca67d13a1bcd65dffa25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe6897c4bc4e3f6286cb7c3e37dc5bad"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#abe6897c4bc4e3f6286cb7c3e37dc5bad">AutoCreateConnectionList</a> (<a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> &gt; &amp;participantListIn, <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">Connection_RM3</a> * &gt; &amp;participantListOut, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId=0)</td></tr>
<tr class="memdesc:abe6897c4bc4e3f6286cb7c3e37dc5bad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Call <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a002d1792ae0a1b08bfb84711c6441c9e" title="Implement to return a game specific derivation of Connection_RM3.">AllocConnection()</a> and <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a8449acd594530f6d46688ed23ea340e5" title="Track a new Connection_RM3 instance.">PushConnection()</a> for each connection in <em>participantList</em>.  <a href="#abe6897c4bc4e3f6286cb7c3e37dc5bad"></a><br/></td></tr>
<tr class="separator:abe6897c4bc4e3f6286cb7c3e37dc5bad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8449acd594530f6d46688ed23ea340e5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a8449acd594530f6d46688ed23ea340e5">PushConnection</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *newConnection, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId=0)</td></tr>
<tr class="memdesc:a8449acd594530f6d46688ed23ea340e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Track a new <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3" title="Each remote system is represented by Connection_RM3. Used to allocate Replica3 and track which instan...">Connection_RM3</a> instance.  <a href="#a8449acd594530f6d46688ed23ea340e5"></a><br/></td></tr>
<tr class="separator:a8449acd594530f6d46688ed23ea340e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c6b9fee6f684c7ff3431d8bfca9e305"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a7c6b9fee6f684c7ff3431d8bfca9e305">PopConnection</a> (<a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> guid, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId=0)</td></tr>
<tr class="memdesc:a7c6b9fee6f684c7ff3431d8bfca9e305"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stop tracking a connection.  <a href="#a7c6b9fee6f684c7ff3431d8bfca9e305"></a><br/></td></tr>
<tr class="separator:a7c6b9fee6f684c7ff3431d8bfca9e305"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab822b30a99de1c9ee1cb3835f726fe7c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab822b30a99de1c9ee1cb3835f726fe7c">Reference</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">SLNet::Replica3</a> *replica3, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId=0)</td></tr>
<tr class="memdesc:ab822b30a99de1c9ee1cb3835f726fe7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a replicated object to the system.  <a href="#ab822b30a99de1c9ee1cb3835f726fe7c"></a><br/></td></tr>
<tr class="separator:ab822b30a99de1c9ee1cb3835f726fe7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71365c215814a8926b3f13e95fe9e5a0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a71365c215814a8926b3f13e95fe9e5a0">Dereference</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">SLNet::Replica3</a> *replica3, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId=0)</td></tr>
<tr class="memdesc:a71365c215814a8926b3f13e95fe9e5a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes a replicated object from the system.  <a href="#a71365c215814a8926b3f13e95fe9e5a0"></a><br/></td></tr>
<tr class="separator:a71365c215814a8926b3f13e95fe9e5a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a550f4b5d0cc01f98ceda575ac796dcf1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a550f4b5d0cc01f98ceda575ac796dcf1">DereferenceList</a> (<a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> * &gt; &amp;replicaListIn, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId=0)</td></tr>
<tr class="memdesc:a550f4b5d0cc01f98ceda575ac796dcf1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes multiple replicated objects from the system.  <a href="#a550f4b5d0cc01f98ceda575ac796dcf1"></a><br/></td></tr>
<tr class="separator:a550f4b5d0cc01f98ceda575ac796dcf1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0e82077ed014d01cb0c40dd6aa7df36"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ae0e82077ed014d01cb0c40dd6aa7df36">GetReplicasCreatedByGuid</a> (<a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> guid, <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> * &gt; &amp;replicaListOut, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId=0)</td></tr>
<tr class="memdesc:ae0e82077ed014d01cb0c40dd6aa7df36"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns all objects originally created by a particular system.  <a href="#ae0e82077ed014d01cb0c40dd6aa7df36"></a><br/></td></tr>
<tr class="separator:ae0e82077ed014d01cb0c40dd6aa7df36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bfdf3e0912f162f50f84a59d22dcef0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a4bfdf3e0912f162f50f84a59d22dcef0">GetReplicasCreatedByMe</a> (<a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> * &gt; &amp;replicaListOut, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId=0)</td></tr>
<tr class="memdesc:a4bfdf3e0912f162f50f84a59d22dcef0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns all objects originally created by your system.  <a href="#a4bfdf3e0912f162f50f84a59d22dcef0"></a><br/></td></tr>
<tr class="separator:a4bfdf3e0912f162f50f84a59d22dcef0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a994701d39826fe527c3ff8762e130642"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a994701d39826fe527c3ff8762e130642">GetReferencedReplicaList</a> (<a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> * &gt; &amp;replicaListOut, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId=0)</td></tr>
<tr class="memdesc:a994701d39826fe527c3ff8762e130642"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the entire list of Replicas that we know about.  <a href="#a994701d39826fe527c3ff8762e130642"></a><br/></td></tr>
<tr class="separator:a994701d39826fe527c3ff8762e130642"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a424b08888e2f0ff87b97e1b8abf1515c"><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a424b08888e2f0ff87b97e1b8abf1515c">GetReplicaCount</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId=0) const </td></tr>
<tr class="memdesc:a424b08888e2f0ff87b97e1b8abf1515c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of replicas known about.  <a href="#a424b08888e2f0ff87b97e1b8abf1515c"></a><br/></td></tr>
<tr class="separator:a424b08888e2f0ff87b97e1b8abf1515c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0423f3f0a3b9831f404817b634433534"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a0423f3f0a3b9831f404817b634433534">GetReplicaAtIndex</a> (unsigned index, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId=0)</td></tr>
<tr class="memdesc:a0423f3f0a3b9831f404817b634433534"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a replica by index.  <a href="#a0423f3f0a3b9831f404817b634433534"></a><br/></td></tr>
<tr class="separator:a0423f3f0a3b9831f404817b634433534"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33a358ece36931980afcc74379475087"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a33a358ece36931980afcc74379475087">GetConnectionCount</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId=0) const </td></tr>
<tr class="memdesc:a33a358ece36931980afcc74379475087"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of connections.  <a href="#a33a358ece36931980afcc74379475087"></a><br/></td></tr>
<tr class="separator:a33a358ece36931980afcc74379475087"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad81267978c5eacc06c1abd0d10089ad"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">Connection_RM3</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#aad81267978c5eacc06c1abd0d10089ad">GetConnectionAtIndex</a> (unsigned index, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId=0) const </td></tr>
<tr class="memdesc:aad81267978c5eacc06c1abd0d10089ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a connection pointer previously added with <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a8449acd594530f6d46688ed23ea340e5" title="Track a new Connection_RM3 instance.">PushConnection()</a>  <a href="#aad81267978c5eacc06c1abd0d10089ad"></a><br/></td></tr>
<tr class="separator:aad81267978c5eacc06c1abd0d10089ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a620393f0b5c7c593229a7e17e06f181c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">Connection_RM3</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a620393f0b5c7c593229a7e17e06f181c">GetConnectionBySystemAddress</a> (const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;sa, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId=0) const </td></tr>
<tr class="memdesc:a620393f0b5c7c593229a7e17e06f181c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a connection pointer previously added with <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a8449acd594530f6d46688ed23ea340e5" title="Track a new Connection_RM3 instance.">PushConnection()</a>  <a href="#a620393f0b5c7c593229a7e17e06f181c"></a><br/></td></tr>
<tr class="separator:a620393f0b5c7c593229a7e17e06f181c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab86791d372fce797083480638617a886"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">Connection_RM3</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab86791d372fce797083480638617a886">GetConnectionByGUID</a> (<a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> guid, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId=0) const </td></tr>
<tr class="memdesc:ab86791d372fce797083480638617a886"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a connection pointer previously added with PushConnection.()  <a href="#ab86791d372fce797083480638617a886"></a><br/></td></tr>
<tr class="separator:ab86791d372fce797083480638617a886"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24223d16824c9c0968d3e61746abdfac"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a24223d16824c9c0968d3e61746abdfac">SetDefaultOrderingChannel</a> (char def)</td></tr>
<tr class="separator:a24223d16824c9c0968d3e61746abdfac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00c1eae9167f011dd4446073610b5fef"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a00c1eae9167f011dd4446073610b5fef">SetDefaultPacketPriority</a> (<a class="el" href="../../d7/d03/_packet_priority_8h.xhtml#a659378374e516180f93640c79f59705c">PacketPriority</a> def)</td></tr>
<tr class="separator:a00c1eae9167f011dd4446073610b5fef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac903fb76f3fa12aadd311284c83e88a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#aac903fb76f3fa12aadd311284c83e88a">SetDefaultPacketReliability</a> (<a class="el" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7e">PacketReliability</a> def)</td></tr>
<tr class="separator:aac903fb76f3fa12aadd311284c83e88a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0168b8c51dff68b084af5ba83ddcf677"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a0168b8c51dff68b084af5ba83ddcf677">SetAutoSerializeInterval</a> (<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">SLNet::Time</a> intervalMS)</td></tr>
<tr class="separator:a0168b8c51dff68b084af5ba83ddcf677"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3eff39ec2284e30b122f5cc138914b0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ae3eff39ec2284e30b122f5cc138914b0">GetConnectionsThatHaveReplicaConstructed</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> *replica, <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">Connection_RM3</a> * &gt; &amp;connectionsThatHaveConstructedThisReplica, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId=0)</td></tr>
<tr class="memdesc:ae3eff39ec2284e30b122f5cc138914b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the connections that we think have an instance of the specified <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> instance.  <a href="#ae3eff39ec2284e30b122f5cc138914b0"></a><br/></td></tr>
<tr class="separator:ae3eff39ec2284e30b122f5cc138914b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57696a456f64eb3f677f5ec2c386a68a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a57696a456f64eb3f677f5ec2c386a68a">GetAllConnectionDownloadsCompleted</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId=0) const </td></tr>
<tr class="memdesc:a57696a456f64eb3f677f5ec2c386a68a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns if GetDownloadWasCompleted() returns true for all connections.  <a href="#a57696a456f64eb3f677f5ec2c386a68a"></a><br/></td></tr>
<tr class="separator:a57696a456f64eb3f677f5ec2c386a68a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22f249940cb80f3fdbffdd08c17ca760"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760">AddWorld</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId)</td></tr>
<tr class="memdesc:a22f249940cb80f3fdbffdd08c17ca760"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3" title="System to help automate game object construction, destruction, and serialization.">ReplicaManager3</a> can support multiple worlds, where each world has a separate <a class="el" href="../../d9/dbd/class_s_l_net_1_1_network_i_d_manager.xhtml">NetworkIDManager</a>, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#adbb31ebc9a52d515576475baacd7c158">ReplicaManager3::SetNetworkIDManager()</a> to have a different <a class="el" href="../../d9/dbd/class_s_l_net_1_1_network_i_d_manager.xhtml">NetworkIDManager</a> instance per world.  <a href="#a22f249940cb80f3fdbffdd08c17ca760"></a><br/></td></tr>
<tr class="separator:a22f249940cb80f3fdbffdd08c17ca760"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e1b9d8a7b942a08937bff2b97ca9526"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9e1b9d8a7b942a08937bff2b97ca9526">RemoveWorld</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId)</td></tr>
<tr class="memdesc:a9e1b9d8a7b942a08937bff2b97ca9526"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deallocate a world added with AddWorld, or the default world with id 0 Deallocating a world will also stop tracking and updating all connections and replicas associated with that world.  <a href="#a9e1b9d8a7b942a08937bff2b97ca9526"></a><br/></td></tr>
<tr class="separator:a9e1b9d8a7b942a08937bff2b97ca9526"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a828e3357903576ad653e8d8267e6acf9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a828e3357903576ad653e8d8267e6acf9">GetWorldIdAtIndex</a> (unsigned int index)</td></tr>
<tr class="memdesc:a828e3357903576ad653e8d8267e6acf9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get one of the WorldId values added with <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a>  <a href="#a828e3357903576ad653e8d8267e6acf9"></a><br/></td></tr>
<tr class="separator:a828e3357903576ad653e8d8267e6acf9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72934e0c802a04635760296cb679e72f"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a72934e0c802a04635760296cb679e72f">GetWorldCount</a> (void) const </td></tr>
<tr class="memdesc:a72934e0c802a04635760296cb679e72f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of world id specifiers in memory, added with <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a> and removed with <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9e1b9d8a7b942a08937bff2b97ca9526" title="Deallocate a world added with AddWorld, or the default world with id 0 Deallocating a world will also...">RemoveWorld()</a>  <a href="#a72934e0c802a04635760296cb679e72f"></a><br/></td></tr>
<tr class="separator:a72934e0c802a04635760296cb679e72f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbb31ebc9a52d515576475baacd7c158"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#adbb31ebc9a52d515576475baacd7c158">SetNetworkIDManager</a> (<a class="el" href="../../d9/dbd/class_s_l_net_1_1_network_i_d_manager.xhtml">NetworkIDManager</a> *_networkIDManager, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId=0)</td></tr>
<tr class="separator:adbb31ebc9a52d515576475baacd7c158"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d769e9bc68e5bc0d96e395d4081ce66"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dbd/class_s_l_net_1_1_network_i_d_manager.xhtml">NetworkIDManager</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a6d769e9bc68e5bc0d96e395d4081ce66">GetNetworkIDManager</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId=0) const </td></tr>
<tr class="separator:a6d769e9bc68e5bc0d96e395d4081ce66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3870a4bec7653ad6f3aa9944ca88dd8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ae3870a4bec7653ad6f3aa9944ca88dd8">BroadcastDestructionList</a> (<a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> * &gt; &amp;replicaListSource, const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;exclusionAddress, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId=0)</td></tr>
<tr class="separator:ae3870a4bec7653ad6f3aa9944ca88dd8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a281e77e895891dbf5b7092f2071529da"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a281e77e895891dbf5b7092f2071529da">BroadcastDestruction</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> *replica, const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;exclusionAddress)</td></tr>
<tr class="separator:a281e77e895891dbf5b7092f2071529da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf5f1aed5bfa681bc2ac9245355a4cf0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#adf5f1aed5bfa681bc2ac9245355a4cf0">Clear</a> (bool deleteWorlds=false)</td></tr>
<tr class="separator:adf5f1aed5bfa681bc2ac9245355a4cf0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25d952b7aa621f0756cc1697df3e5e4c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d2/db7/struct_s_l_net_1_1_p_r_o.xhtml">PRO</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a25d952b7aa621f0756cc1697df3e5e4c">GetDefaultSendParameters</a> (void) const </td></tr>
<tr class="separator:a25d952b7aa621f0756cc1697df3e5e4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50c8eeeff65c3c2ebb3680ed7c287a1f"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a50c8eeeff65c3c2ebb3680ed7c287a1f">Update</a> (void)</td></tr>
<tr class="memdesc:a50c8eeeff65c3c2ebb3680ed7c287a1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Call interfaces, send data.  <a href="#a50c8eeeff65c3c2ebb3680ed7c287a1f"></a><br/></td></tr>
<tr class="separator:a50c8eeeff65c3c2ebb3680ed7c287a1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#db/d5e/class_s_l_net_1_1_plugin_interface2">SLNet::PluginInterface2</a></td></tr>
<tr class="memitem:a2df222e1167c6290dd6d1af585154e73 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a2df222e1167c6290dd6d1af585154e73">PluginInterface2</a> ()</td></tr>
<tr class="separator:a2df222e1167c6290dd6d1af585154e73 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae97f06b1fcaa2cc45de4394b89ba3a41 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#ae97f06b1fcaa2cc45de4394b89ba3a41">~PluginInterface2</a> ()</td></tr>
<tr class="separator:ae97f06b1fcaa2cc45de4394b89ba3a41 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe33b32b1729289a809ada304227cbd8 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#afe33b32b1729289a809ada304227cbd8">OnAttach</a> (void)</td></tr>
<tr class="memdesc:afe33b32b1729289a809ada304227cbd8 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when the interface is attached.  <a href="#afe33b32b1729289a809ada304227cbd8"></a><br/></td></tr>
<tr class="separator:afe33b32b1729289a809ada304227cbd8 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9943065789510f76737975203f4d05bc inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a9943065789510f76737975203f4d05bc">OnRakPeerStartup</a> (void)</td></tr>
<tr class="memdesc:a9943065789510f76737975203f4d05bc inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when <a class="el" href="../../d5/dbf/class_s_l_net_1_1_rak_peer.xhtml" title="Main interface for network communications.">RakPeer</a> is initialized.  <a href="#a9943065789510f76737975203f4d05bc"></a><br/></td></tr>
<tr class="separator:a9943065789510f76737975203f4d05bc inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa95d4714e97480ac51a87b6b34161db7 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#aa95d4714e97480ac51a87b6b34161db7">OnFailedConnectionAttempt</a> (<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *packet, <a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#ga111ccf3400cb3830cc7ef8c042c9b26c">PI2_FailedConnectionAttemptReason</a> failedConnectionAttemptReason)</td></tr>
<tr class="separator:aa95d4714e97480ac51a87b6b34161db7 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bed8468dd7d3624c9d8b6e17737ba77 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a4bed8468dd7d3624c9d8b6e17737ba77">UsesReliabilityLayer</a> (void) const </td></tr>
<tr class="separator:a4bed8468dd7d3624c9d8b6e17737ba77 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd6172fa97f484a0b874ebbe4f32de0e inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#acd6172fa97f484a0b874ebbe4f32de0e">OnDirectSocketSend</a> (const char *data, const <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> bitsUsed, <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> remoteSystemAddress)</td></tr>
<tr class="separator:acd6172fa97f484a0b874ebbe4f32de0e inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe625ccabbbfea5b8d0dd717748ef857 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#afe625ccabbbfea5b8d0dd717748ef857">OnDirectSocketReceive</a> (const char *data, const <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> bitsUsed, <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> remoteSystemAddress)</td></tr>
<tr class="separator:afe625ccabbbfea5b8d0dd717748ef857 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a775d3c4bf7e924a510becfa85b3f1f00 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a775d3c4bf7e924a510becfa85b3f1f00">OnReliabilityLayerNotification</a> (const char *errorMessage, const <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> bitsUsed, <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> remoteSystemAddress, bool isError)</td></tr>
<tr class="separator:a775d3c4bf7e924a510becfa85b3f1f00 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb5ebc232cc45b62ea61ee7cde758a22 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#abb5ebc232cc45b62ea61ee7cde758a22">OnInternalPacket</a> (<a class="el" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *internalPacket, unsigned frameNumber, <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> remoteSystemAddress, <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a> time, int isSend)</td></tr>
<tr class="separator:abb5ebc232cc45b62ea61ee7cde758a22 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc1f6b096fd6d98064a1f1a4af8500d1 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#acc1f6b096fd6d98064a1f1a4af8500d1">OnAck</a> (unsigned int messageNumber, <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> remoteSystemAddress, <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a> time)</td></tr>
<tr class="separator:acc1f6b096fd6d98064a1f1a4af8500d1 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b7373aa27360743e697c5afa38fc541 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a6b7373aa27360743e697c5afa38fc541">OnPushBackPacket</a> (const char *data, const <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> bitsUsed, <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> remoteSystemAddress)</td></tr>
<tr class="separator:a6b7373aa27360743e697c5afa38fc541 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd3c54782ccc647432571e5e5bae5e48 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../da/d27/class_s_l_net_1_1_rak_peer_interface.xhtml">RakPeerInterface</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#acd3c54782ccc647432571e5e5bae5e48">GetRakPeerInterface</a> (void) const </td></tr>
<tr class="separator:acd3c54782ccc647432571e5e5bae5e48 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a917f7caf3bcd763620cce934761aa8a8 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a917f7caf3bcd763620cce934761aa8a8">GetMyGUIDUnified</a> (void) const </td></tr>
<tr class="separator:a917f7caf3bcd763620cce934761aa8a8 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a462426e3996a2f1038cac5505ed11fca inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a462426e3996a2f1038cac5505ed11fca">SetRakPeerInterface</a> (<a class="el" href="../../da/d27/class_s_l_net_1_1_rak_peer_interface.xhtml">RakPeerInterface</a> *ptr)</td></tr>
<tr class="separator:a462426e3996a2f1038cac5505ed11fca inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa278807355590c171e787be943dbb520 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#aa278807355590c171e787be943dbb520">SetTCPInterface</a> (<a class="el" href="../../df/dd8/class_s_l_net_1_1_t_c_p_interface.xhtml">TCPInterface</a> *ptr)</td></tr>
<tr class="separator:aa278807355590c171e787be943dbb520 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><h3>Protected Member Functions</h3></td></tr>
<tr class="memitem:adc868fb7755dc7ffdb5bbee3b1d675b3"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#ga5c8f613a7c294e0b96deccbdabc38f18">PluginReceiveResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#adc868fb7755dc7ffdb5bbee3b1d675b3">OnReceive</a> (<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *packet)</td></tr>
<tr class="separator:adc868fb7755dc7ffdb5bbee3b1d675b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a192ec5c9927ba71cdc77f34945b41f6d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a192ec5c9927ba71cdc77f34945b41f6d">OnClosedConnection</a> (const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;systemAddress, <a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> rakNetGUID, <a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#ga4d3ac5ca8821fadad6d22d0267e06803">PI2_LostConnectionReason</a> lostConnectionReason)</td></tr>
<tr class="separator:a192ec5c9927ba71cdc77f34945b41f6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a904a972e2388bfa4eda89bde26385bb2"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a904a972e2388bfa4eda89bde26385bb2">OnNewConnection</a> (const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;systemAddress, <a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> rakNetGUID, bool isIncoming)</td></tr>
<tr class="separator:a904a972e2388bfa4eda89bde26385bb2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c1414d5ab277a3d7e796b77bc00d2fe"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a5c1414d5ab277a3d7e796b77bc00d2fe">OnRakPeerShutdown</a> (void)</td></tr>
<tr class="memdesc:a5c1414d5ab277a3d7e796b77bc00d2fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when <a class="el" href="../../d5/dbf/class_s_l_net_1_1_rak_peer.xhtml" title="Main interface for network communications.">RakPeer</a> is shutdown.  <a href="#a5c1414d5ab277a3d7e796b77bc00d2fe"></a><br/></td></tr>
<tr class="separator:a5c1414d5ab277a3d7e796b77bc00d2fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f9294366a1ef6f3d9719537c19c19c3"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a5f9294366a1ef6f3d9719537c19c19c3">OnDetach</a> (void)</td></tr>
<tr class="memdesc:a5f9294366a1ef6f3d9719537c19c19c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when the interface is detached.  <a href="#a5f9294366a1ef6f3d9719537c19c19c3"></a><br/></td></tr>
<tr class="separator:a5f9294366a1ef6f3d9719537c19c19c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39c4d3789115c427bc5fc7a1acc11b2f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#ga5c8f613a7c294e0b96deccbdabc38f18">PluginReceiveResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a39c4d3789115c427bc5fc7a1acc11b2f">OnConstruction</a> (<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *packet, unsigned char *packetData, int packetDataLength, <a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> senderGuid, unsigned char packetDataOffset, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId)</td></tr>
<tr class="separator:a39c4d3789115c427bc5fc7a1acc11b2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f9a63fe9bb4f899dbbcd49f6b426c8d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#ga5c8f613a7c294e0b96deccbdabc38f18">PluginReceiveResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a0f9a63fe9bb4f899dbbcd49f6b426c8d">OnSerialize</a> (<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *packet, unsigned char *packetData, int packetDataLength, <a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> senderGuid, <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">SLNet::Time</a> timestamp, unsigned char packetDataOffset, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId)</td></tr>
<tr class="separator:a0f9a63fe9bb4f899dbbcd49f6b426c8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae89ce03ebef11076c1bd15deb77034b8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#ga5c8f613a7c294e0b96deccbdabc38f18">PluginReceiveResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ae89ce03ebef11076c1bd15deb77034b8">OnDownloadStarted</a> (<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *packet, unsigned char *packetData, int packetDataLength, <a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> senderGuid, unsigned char packetDataOffset, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId)</td></tr>
<tr class="separator:ae89ce03ebef11076c1bd15deb77034b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeae408340dfe77edbbfeceb2dc69d765"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#ga5c8f613a7c294e0b96deccbdabc38f18">PluginReceiveResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#aeae408340dfe77edbbfeceb2dc69d765">OnDownloadComplete</a> (<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *packet, unsigned char *packetData, int packetDataLength, <a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> senderGuid, unsigned char packetDataOffset, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId)</td></tr>
<tr class="separator:aeae408340dfe77edbbfeceb2dc69d765"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbcd65df3a55e1f4bdddc30a94c308dc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#afbcd65df3a55e1f4bdddc30a94c308dc">DeallocReplicaNoBroadcastDestruction</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *connection, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">SLNet::Replica3</a> *replica3)</td></tr>
<tr class="separator:afbcd65df3a55e1f4bdddc30a94c308dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8af6474dbffef52763ee9f42dbc96b3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ad8af6474dbffef52763ee9f42dbc96b3">PopConnection</a> (unsigned int index, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId)</td></tr>
<tr class="separator:ad8af6474dbffef52763ee9f42dbc96b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19c9aab1f3ef6f1233ccd1d7aa8b5cf3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a19c9aab1f3ef6f1233ccd1d7aa8b5cf3">GetReplicaByNetworkID</a> (<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#aa616a13e58b2ffd2c3161609610b256d">NetworkID</a> networkId, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId)</td></tr>
<tr class="separator:a19c9aab1f3ef6f1233ccd1d7aa8b5cf3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a971a6fc747cf4f26a72360d8bc7d9a1a"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a971a6fc747cf4f26a72360d8bc7d9a1a">ReferenceInternal</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">SLNet::Replica3</a> *replica3, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId)</td></tr>
<tr class="separator:a971a6fc747cf4f26a72360d8bc7d9a1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p')"><img src="../../closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#db/d5e/class_s_l_net_1_1_plugin_interface2">SLNet::PluginInterface2</a></td></tr>
<tr class="memitem:aa9c79c0d16ece39114231d680190d39a inherit pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#aa9c79c0d16ece39114231d680190d39a">SendUnified</a> (const <a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *bitStream, <a class="el" href="../../d7/d03/_packet_priority_8h.xhtml#a659378374e516180f93640c79f59705c">PacketPriority</a> priority, <a class="el" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7e">PacketReliability</a> reliability, char orderingChannel, const <a class="el" href="../../d3/da8/struct_s_l_net_1_1_address_or_g_u_i_d.xhtml">AddressOrGUID</a> systemIdentifier, bool broadcast)</td></tr>
<tr class="separator:aa9c79c0d16ece39114231d680190d39a inherit pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30f7650d8045852663c46dc72c740043 inherit pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a30f7650d8045852663c46dc72c740043">SendUnified</a> (const char *data, const int length, <a class="el" href="../../d7/d03/_packet_priority_8h.xhtml#a659378374e516180f93640c79f59705c">PacketPriority</a> priority, <a class="el" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7e">PacketReliability</a> reliability, char orderingChannel, const <a class="el" href="../../d3/da8/struct_s_l_net_1_1_address_or_g_u_i_d.xhtml">AddressOrGUID</a> systemIdentifier, bool broadcast)</td></tr>
<tr class="separator:a30f7650d8045852663c46dc72c740043 inherit pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0e4aabc93a77dfb2ec7af08710961b5 inherit pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#ad0e4aabc93a77dfb2ec7af08710961b5">SendListUnified</a> (const char **data, const int *lengths, const int numParameters, <a class="el" href="../../d7/d03/_packet_priority_8h.xhtml#a659378374e516180f93640c79f59705c">PacketPriority</a> priority, <a class="el" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7e">PacketReliability</a> reliability, char orderingChannel, const <a class="el" href="../../d3/da8/struct_s_l_net_1_1_address_or_g_u_i_d.xhtml">AddressOrGUID</a> systemIdentifier, bool broadcast)</td></tr>
<tr class="separator:ad0e4aabc93a77dfb2ec7af08710961b5 inherit pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed235e7933ca7f30448eb9c91cefab63 inherit pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#aed235e7933ca7f30448eb9c91cefab63">AllocatePacketUnified</a> (unsigned dataSize)</td></tr>
<tr class="separator:aed235e7933ca7f30448eb9c91cefab63 inherit pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00bb796b830ec2130b4c11ed13c3e838 inherit pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a00bb796b830ec2130b4c11ed13c3e838">PushBackPacketUnified</a> (<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *packet, bool pushAtHead)</td></tr>
<tr class="separator:a00bb796b830ec2130b4c11ed13c3e838 inherit pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71b375de9093e4116b57bf3780d1615b inherit pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a71b375de9093e4116b57bf3780d1615b">DeallocPacketUnified</a> (<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *packet)</td></tr>
<tr class="separator:a71b375de9093e4116b57bf3780d1615b inherit pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><h3>Protected Attributes</h3></td></tr>
<tr class="memitem:ab4a2aad10cd7bbf59bdbe7651a076885"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d2/db7/struct_s_l_net_1_1_p_r_o.xhtml">PRO</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab4a2aad10cd7bbf59bdbe7651a076885">defaultSendParameters</a></td></tr>
<tr class="separator:ab4a2aad10cd7bbf59bdbe7651a076885"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e3a3181ca27db0de1b1fa818254a2c8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">SLNet::Time</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a6e3a3181ca27db0de1b1fa818254a2c8">autoSerializeInterval</a></td></tr>
<tr class="separator:a6e3a3181ca27db0de1b1fa818254a2c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a039a6e26d55eb09a15da46f239a68c61"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">SLNet::Time</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a039a6e26d55eb09a15da46f239a68c61">lastAutoSerializeOccurance</a></td></tr>
<tr class="separator:a039a6e26d55eb09a15da46f239a68c61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad480576715cc372f2921af3330eb26ae"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ad480576715cc372f2921af3330eb26ae">autoCreateConnections</a></td></tr>
<tr class="separator:ad480576715cc372f2921af3330eb26ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adef615545ebaccf2ec4836cb52a382a2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#adef615545ebaccf2ec4836cb52a382a2">autoDestroyConnections</a></td></tr>
<tr class="separator:adef615545ebaccf2ec4836cb52a382a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39dc10bdeadf2120888333af42429b32"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a39dc10bdeadf2120888333af42429b32">currentlyDeallocatingReplica</a></td></tr>
<tr class="separator:a39dc10bdeadf2120888333af42429b32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a167234670aeb424c355e719b691107"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../df/df2/_native_types_8h.xhtml#a6eb1e68cc391dd753bc8ce896dbb8315">uint32_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a2a167234670aeb424c355e719b691107">nextReferenceIndex</a></td></tr>
<tr class="separator:a2a167234670aeb424c355e719b691107"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e118d9c8d7a9f6a111d7fc7d10ff115"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#df/d59/struct_s_l_net_1_1_replica_manager3_1_1_r_m3_world">RM3World</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a6e118d9c8d7a9f6a111d7fc7d10ff115">worldsArray</a> [255]</td></tr>
<tr class="separator:a6e118d9c8d7a9f6a111d7fc7d10ff115"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21f2689433dc17b76ba6f509c85686e5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#df/d59/struct_s_l_net_1_1_replica_manager3_1_1_r_m3_world">RM3World</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a21f2689433dc17b76ba6f509c85686e5">worldsList</a></td></tr>
<tr class="separator:a21f2689433dc17b76ba6f509c85686e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p')"><img src="../../closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#db/d5e/class_s_l_net_1_1_plugin_interface2">SLNet::PluginInterface2</a></td></tr>
<tr class="memitem:adac8deadf450a4e1d69c11b1db588bec inherit pro_attribs_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../da/d27/class_s_l_net_1_1_rak_peer_interface.xhtml">RakPeerInterface</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#adac8deadf450a4e1d69c11b1db588bec">rakPeerInterface</a></td></tr>
<tr class="separator:adac8deadf450a4e1d69c11b1db588bec inherit pro_attribs_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac298ef92904df807a3248e380e8edf43 inherit pro_attribs_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../df/dd8/class_s_l_net_1_1_t_c_p_interface.xhtml">TCPInterface</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#ac298ef92904df807a3248e380e8edf43">tcpInterface</a></td></tr>
<tr class="separator:ac298ef92904df807a3248e380e8edf43 inherit pro_attribs_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h4 class="groupheader">Constructor &amp; Destructor Documentation</h4>
<a class="anchor" id="add9c78ef14d530ac2b45e766051cc2bd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SLNet::ReplicaManager3::ReplicaManager3 </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="ad87634b45c53f99856437f34479f8abb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual SLNet::ReplicaManager3::~ReplicaManager3 </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h4 class="groupheader">Member Function Documentation</h4>
<a class="anchor" id="a22f249940cb80f3fdbffdd08c17ca760"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReplicaManager3::AddWorld </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3" title="System to help automate game object construction, destruction, and serialization.">ReplicaManager3</a> can support multiple worlds, where each world has a separate <a class="el" href="../../d9/dbd/class_s_l_net_1_1_network_i_d_manager.xhtml">NetworkIDManager</a>, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#adbb31ebc9a52d515576475baacd7c158">ReplicaManager3::SetNetworkIDManager()</a> to have a different <a class="el" href="../../d9/dbd/class_s_l_net_1_1_network_i_d_manager.xhtml">NetworkIDManager</a> instance per world. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">worldId</td><td>A unique identifier for this world. User-defined </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a002d1792ae0a1b08bfb84711c6441c9e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">Connection_RM3</a>* SLNet::ReplicaManager3::AllocConnection </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>systemAddress</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td>
          <td class="paramname"><em>rakNetGUID</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implement to return a game specific derivation of <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3" title="Each remote system is represented by Connection_RM3. Used to allocate Replica3 and track which instan...">Connection_RM3</a>. </p>
<p>The connection object represents a remote system connected to you that is using the <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3" title="System to help automate game object construction, destruction, and serialization.">ReplicaManager3</a> system.<br/>
 It has functions to perform operations per-connection.<br/>
 <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a002d1792ae0a1b08bfb84711c6441c9e" title="Implement to return a game specific derivation of Connection_RM3.">AllocConnection()</a> and <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a40bc143ea7bb423c0045f0bbbfe88b06" title="Implement to destroy a class instanced returned by AllocConnection()">DeallocConnection()</a> are factory functions to create and destroy instances of the connection object.<br/>
 It is used if autoCreate is true via <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a5a9827b1942a87ab2f797d32a6365fbb" title="Enable or disable automatically assigning connections to new instances of Connection_RM3.">SetAutoManageConnections()</a> (true by default). Otherwise, the function is not called, and you will have to call <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a8449acd594530f6d46688ed23ea340e5" title="Track a new Connection_RM3 instance.">PushConnection()</a> manually<br/>
 </p>
<dl class="section note"><dt>Note</dt><dd>If you do not want a new network connection to immediately download game objects, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a5a9827b1942a87ab2f797d32a6365fbb" title="Enable or disable automatically assigning connections to new instances of Connection_RM3.">SetAutoManageConnections()</a> and <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a8449acd594530f6d46688ed23ea340e5" title="Track a new Connection_RM3 instance.">PushConnection()</a> are how you do this. </dd></dl>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a5a9827b1942a87ab2f797d32a6365fbb" title="Enable or disable automatically assigning connections to new instances of Connection_RM3.">SetAutoManageConnections()</a> </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">systemAddress</td><td>Address of the system you are adding </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rakNetGUID</td><td>GUID of the system you are adding. See Packet::rakNetGUID or RakPeerInterface::GetGUIDFromSystemAddress() </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The new connection instance. </dd></dl>

</div>
</div>
<a class="anchor" id="abe6897c4bc4e3f6286cb7c3e37dc5bad"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReplicaManager3::AutoCreateConnectionList </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>participantListIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">Connection_RM3</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>participantListOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Call <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a002d1792ae0a1b08bfb84711c6441c9e" title="Implement to return a game specific derivation of Connection_RM3.">AllocConnection()</a> and <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a8449acd594530f6d46688ed23ea340e5" title="Track a new Connection_RM3 instance.">PushConnection()</a> for each connection in <em>participantList</em>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">participantListIn</td><td>The list of connections to allocate </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">participantListOut</td><td>The connections allocated, if any </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">worldId</td><td>Used for multiple worlds. World 0 is created automatically by default. See <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a281e77e895891dbf5b7092f2071529da"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReplicaManager3::BroadcastDestruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> *&#160;</td>
          <td class="paramname"><em>replica</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>exclusionAddress</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="ae3870a4bec7653ad6f3aa9944ca88dd8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReplicaManager3::BroadcastDestructionList </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>replicaListSource</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>exclusionAddress</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Send a network command to destroy one or more <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> instances Usually you won't need this, but use <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab5096b364b6e47f5dc3e49734208fbd0">Replica3::BroadcastDestruction()</a> instead. The objects are unaffected locally </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">replicaList</td><td>List of <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> objects to tell other systems to destroy. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">exclusionAddress</td><td>Which system to not send to. UNASSIGNED_SYSTEM_ADDRESS to send to all. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">worldId</td><td>Used for multiple worlds. World 0 is created automatically by default. See <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="adf5f1aed5bfa681bc2ac9245355a4cf0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReplicaManager3::Clear </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>deleteWorlds</em> = <code>false</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a40bc143ea7bb423c0045f0bbbfe88b06"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::ReplicaManager3::DeallocConnection </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>connection</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implement to destroy a class instanced returned by <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a002d1792ae0a1b08bfb84711c6441c9e" title="Implement to return a game specific derivation of Connection_RM3.">AllocConnection()</a> </p>
<p>Most likely just implement as {delete connection;}<br/>
 It is used if autoDestroy is true via <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a5a9827b1942a87ab2f797d32a6365fbb" title="Enable or disable automatically assigning connections to new instances of Connection_RM3.">SetAutoManageConnections()</a> (true by default). Otherwise, the function is not called and you would then be responsible for deleting your own connection objects. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">connection</td><td>The pointer instance to delete </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="afbcd65df3a55e1f4bdddc30a94c308dc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReplicaManager3::DeallocReplicaNoBroadcastDestruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>connection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">SLNet::Replica3</a> *&#160;</td>
          <td class="paramname"><em>replica3</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a71365c215814a8926b3f13e95fe9e5a0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReplicaManager3::Dereference </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">SLNet::Replica3</a> *&#160;</td>
          <td class="paramname"><em>replica3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes a replicated object from the system. </p>
<p>The object is not deallocated, it is up to the caller to do so.<br/>
 This is called automatically from the destructor of <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a>, so you don't need to call it manually unless you want to stop tracking an object before it is destroyed. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">replica3</td><td>The object to stop tracking </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">worldId</td><td>Used for multiple worlds. World 0 is created automatically by default. See <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a550f4b5d0cc01f98ceda575ac796dcf1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReplicaManager3::DereferenceList </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>replicaListIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes multiple replicated objects from the system. </p>
<p>Same as <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a71365c215814a8926b3f13e95fe9e5a0" title="Removes a replicated object from the system.">Dereference()</a>, but for a list of objects.<br/>
 Useful with the lists returned by <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ae0e82077ed014d01cb0c40dd6aa7df36" title="Returns all objects originally created by a particular system.">GetReplicasCreatedByGuid()</a>, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a4bfdf3e0912f162f50f84a59d22dcef0" title="Returns all objects originally created by your system.">GetReplicasCreatedByMe()</a>, or <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a994701d39826fe527c3ff8762e130642" title="Returns the entire list of Replicas that we know about.">GetReferencedReplicaList()</a>.<br/>
 </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">replicaListIn</td><td>List of objects </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">worldId</td><td>Used for multiple worlds. World 0 is created automatically by default. See <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a57696a456f64eb3f677f5ec2c386a68a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::ReplicaManager3::GetAllConnectionDownloadsCompleted </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em> = <code>0</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns if GetDownloadWasCompleted() returns true for all connections. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">worldId</td><td>Used for multiple worlds. World 0 is created automatically by default. See <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True when all downloads have been completed </dd></dl>

</div>
</div>
<a class="anchor" id="a5336ddb1577378019317a8352a3350db"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::ReplicaManager3::GetAutoCreateConnections </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>What was passed to the autoCreate parameter of <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a5a9827b1942a87ab2f797d32a6365fbb" title="Enable or disable automatically assigning connections to new instances of Connection_RM3.">SetAutoManageConnections()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="adf93ef578af7ca67d13a1bcd65dffa25"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::ReplicaManager3::GetAutoDestroyConnections </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>What was passed to the autoDestroy parameter of <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a5a9827b1942a87ab2f797d32a6365fbb" title="Enable or disable automatically assigning connections to new instances of Connection_RM3.">SetAutoManageConnections()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aad81267978c5eacc06c1abd0d10089ad"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">Connection_RM3</a>* SLNet::ReplicaManager3::GetConnectionAtIndex </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns a connection pointer previously added with <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a8449acd594530f6d46688ed23ea340e5" title="Track a new Connection_RM3 instance.">PushConnection()</a> </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>An index, from 0 to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a33a358ece36931980afcc74379475087" title="Returns the number of connections.">GetConnectionCount()</a>-1. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">worldId</td><td>Used for multiple worlds. World 0 is created automatically by default. See <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3" title="Each remote system is represented by Connection_RM3. Used to allocate Replica3 and track which instan...">Connection_RM3</a> pointer </dd></dl>

</div>
</div>
<a class="anchor" id="ab86791d372fce797083480638617a886"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">Connection_RM3</a>* SLNet::ReplicaManager3::GetConnectionByGUID </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td>
          <td class="paramname"><em>guid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns a connection pointer previously added with PushConnection.() </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">guid</td><td>The guid of the connection to return </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">worldId</td><td>Used for multiple worlds. World 0 is created automatically by default. See <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3" title="Each remote system is represented by Connection_RM3. Used to allocate Replica3 and track which instan...">Connection_RM3</a> pointer, or 0 if not found </dd></dl>

</div>
</div>
<a class="anchor" id="a620393f0b5c7c593229a7e17e06f181c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">Connection_RM3</a>* SLNet::ReplicaManager3::GetConnectionBySystemAddress </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>sa</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns a connection pointer previously added with <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a8449acd594530f6d46688ed23ea340e5" title="Track a new Connection_RM3 instance.">PushConnection()</a> </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sa</td><td>The system address of the connection to return </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">worldId</td><td>Used for multiple worlds. World 0 is created automatically by default. See <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3" title="Each remote system is represented by Connection_RM3. Used to allocate Replica3 and track which instan...">Connection_RM3</a> pointer, or 0 if not found </dd></dl>

</div>
</div>
<a class="anchor" id="a33a358ece36931980afcc74379475087"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int SLNet::ReplicaManager3::GetConnectionCount </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em> = <code>0</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the number of connections. </p>
<p>Returns the number of connections added with <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a8449acd594530f6d46688ed23ea340e5" title="Track a new Connection_RM3 instance.">ReplicaManager3::PushConnection()</a>, minus the number removed with <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a7c6b9fee6f684c7ff3431d8bfca9e305" title="Stop tracking a connection.">ReplicaManager3::PopConnection()</a> </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">worldId</td><td>Used for multiple worlds. World 0 is created automatically by default. See <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The number of registered connections </dd></dl>

</div>
</div>
<a class="anchor" id="ae3eff39ec2284e30b122f5cc138914b0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReplicaManager3::GetConnectionsThatHaveReplicaConstructed </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> *&#160;</td>
          <td class="paramname"><em>replica</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">Connection_RM3</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>connectionsThatHaveConstructedThisReplica</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the connections that we think have an instance of the specified <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> instance. </p>
<p>This can be wrong, for example if that system locally deleted the outside the scope of <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3" title="System to help automate game object construction, destruction, and serialization.">ReplicaManager3</a>, if QueryRemoteConstruction() returned false, or if DeserializeConstruction() returned false. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">replica</td><td>The replica to check against. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">worldId</td><td>Used for multiple worlds. World 0 is created automatically by default. See <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a> </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">connectionsThatHaveConstructedThisReplica</td><td>Populated with connection instances that we believe have <em>replica</em> allocated </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a25d952b7aa621f0756cc1697df3e5e4c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d2/db7/struct_s_l_net_1_1_p_r_o.xhtml">PRO</a> SLNet::ReplicaManager3::GetDefaultSendParameters </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a6d769e9bc68e5bc0d96e395d4081ce66"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dbd/class_s_l_net_1_1_network_i_d_manager.xhtml">NetworkIDManager</a>* SLNet::ReplicaManager3::GetNetworkIDManager </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em> = <code>0</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns what was passed to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#adbb31ebc9a52d515576475baacd7c158">SetNetworkIDManager()</a>, or the instance on <a class="el" href="../../da/d27/class_s_l_net_1_1_rak_peer_interface.xhtml" title="The main interface for network communications.">RakPeerInterface</a> if unset. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">worldId</td><td>Used for multiple worlds. World 0 is created automatically by default. See <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a994701d39826fe527c3ff8762e130642"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReplicaManager3::GetReferencedReplicaList </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>replicaListOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the entire list of Replicas that we know about. </p>
<p>This is all <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> instances passed to Reference, as well as instances we downloaded and created via Connection_RM3::AllocReference() </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">List</td><td>of <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> instances to be returned </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">worldId</td><td>Used for multiple worlds. World 0 is created automatically by default. See <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a0423f3f0a3b9831f404817b634433534"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a>* SLNet::ReplicaManager3::GetReplicaAtIndex </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns a replica by index. </p>
<p>Returns one of the items in the list that would be returned by <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a994701d39826fe527c3ff8762e130642" title="Returns the entire list of Replicas that we know about.">GetReferencedReplicaList()</a> </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>An index, from 0 to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a424b08888e2f0ff87b97e1b8abf1515c" title="Returns the number of replicas known about.">GetReplicaCount()</a>-1. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">worldId</td><td>Used for multiple worlds. World 0 is created automatically by default. See <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> instance </dd></dl>

</div>
</div>
<a class="anchor" id="a19c9aab1f3ef6f1233ccd1d7aa8b5cf3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a>* SLNet::ReplicaManager3::GetReplicaByNetworkID </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#aa616a13e58b2ffd2c3161609610b256d">NetworkID</a>&#160;</td>
          <td class="paramname"><em>networkId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a424b08888e2f0ff87b97e1b8abf1515c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned SLNet::ReplicaManager3::GetReplicaCount </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em> = <code>0</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the number of replicas known about. </p>
<p>Returns the size of the list that would be returned by <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a994701d39826fe527c3ff8762e130642" title="Returns the entire list of Replicas that we know about.">GetReferencedReplicaList()</a> </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">worldId</td><td>Used for multiple worlds. World 0 is created automatically by default. See <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>How many replica objects are in the list of replica objects </dd></dl>

</div>
</div>
<a class="anchor" id="ae0e82077ed014d01cb0c40dd6aa7df36"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReplicaManager3::GetReplicasCreatedByGuid </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td>
          <td class="paramname"><em>guid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>replicaListOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns all objects originally created by a particular system. </p>
<p>Originally created is defined as the value of <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#af4735cc644d4142a5cbf609603abc0dd">Replica3::creatingSystemGUID</a>, which is automatically assigned in <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab822b30a99de1c9ee1cb3835f726fe7c" title="Adds a replicated object to the system.">ReplicaManager3::Reference()</a>.<br/>
 You do not have to be directly connected to that system to get the objects originally created by that system.<br/>
 </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">guid</td><td>GUID of the system we are referring to. Originally passed as the <em>guid</em> parameter to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a002d1792ae0a1b08bfb84711c6441c9e" title="Implement to return a game specific derivation of Connection_RM3.">ReplicaManager3::AllocConnection()</a> </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">List</td><td>of <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> instances to be returned </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">worldId</td><td>Used for multiple worlds. World 0 is created automatically by default. See <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4bfdf3e0912f162f50f84a59d22dcef0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReplicaManager3::GetReplicasCreatedByMe </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>replicaListOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns all objects originally created by your system. </p>
<p>Calls <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ae0e82077ed014d01cb0c40dd6aa7df36" title="Returns all objects originally created by a particular system.">GetReplicasCreatedByGuid()</a> for your own system guid. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">List</td><td>of <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> instances to be returned </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">worldId</td><td>Used for multiple worlds. World 0 is created automatically by default. See <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a72934e0c802a04635760296cb679e72f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int SLNet::ReplicaManager3::GetWorldCount </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the number of world id specifiers in memory, added with <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a> and removed with <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9e1b9d8a7b942a08937bff2b97ca9526" title="Deallocate a world added with AddWorld, or the default world with id 0 Deallocating a world will also...">RemoveWorld()</a> </p>
<dl class="section return"><dt>Returns</dt><dd>The number of worlds added </dd></dl>

</div>
</div>
<a class="anchor" id="a828e3357903576ad653e8d8267e6acf9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> SLNet::ReplicaManager3::GetWorldIdAtIndex </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get one of the WorldId values added with <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a> </p>
<p>WorldId 0 is created by default. Worlds will not necessarily be in the order added with <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a>. Edit <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9e1b9d8a7b942a08937bff2b97ca9526" title="Deallocate a world added with AddWorld, or the default world with id 0 Deallocating a world will also...">RemoveWorld()</a> changing RemoveAtIndexFast() to RemoveAtIndex() to preserve order. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>A value between 0 and <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a72934e0c802a04635760296cb679e72f" title="Returns the number of world id specifiers in memory, added with AddWorld() and removed with RemoveWor...">GetWorldCount()</a>-1 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>One of the WorldId values added with <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a192ec5c9927ba71cdc77f34945b41f6d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::ReplicaManager3::OnClosedConnection </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>systemAddress</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td>
          <td class="paramname"><em>rakNetGUID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#ga4d3ac5ca8821fadad6d22d0267e06803">PI2_LostConnectionReason</a>&#160;</td>
          <td class="paramname"><em>lostConnectionReason</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Called when a connection is dropped because the user called <a class="el" href="../../d5/dbf/class_s_l_net_1_1_rak_peer.xhtml#adda8200ca715f0d15db7d2e599365408" title="Close the connection to another host (if we initiated the connection it will disconnect, if they did it will kick them out).">RakPeer::CloseConnection()</a> for a particular system </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">systemAddress</td><td>The system whose connection was closed </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rakNetGuid</td><td>The guid of the specified system </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lostConnectionReason</td><td>How the connection was closed: manually, connection lost, or notification of disconnection </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented from <a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a95cb6fb37ada42840dafdbf6ffe078e4">SLNet::PluginInterface2</a>.</p>

</div>
</div>
<a class="anchor" id="a39c4d3789115c427bc5fc7a1acc11b2f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#ga5c8f613a7c294e0b96deccbdabc38f18">PluginReceiveResult</a> SLNet::ReplicaManager3::OnConstruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *&#160;</td>
          <td class="paramname"><em>packet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char *&#160;</td>
          <td class="paramname"><em>packetData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>packetDataLength</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td>
          <td class="paramname"><em>senderGuid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>packetDataOffset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a5f9294366a1ef6f3d9719537c19c19c3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::ReplicaManager3::OnDetach </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when the interface is detached. </p>

<p>Reimplemented from <a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#aad23dec19f2567a5b64c2108f73be0e4">SLNet::PluginInterface2</a>.</p>

</div>
</div>
<a class="anchor" id="aeae408340dfe77edbbfeceb2dc69d765"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#ga5c8f613a7c294e0b96deccbdabc38f18">PluginReceiveResult</a> SLNet::ReplicaManager3::OnDownloadComplete </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *&#160;</td>
          <td class="paramname"><em>packet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char *&#160;</td>
          <td class="paramname"><em>packetData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>packetDataLength</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td>
          <td class="paramname"><em>senderGuid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>packetDataOffset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="ae89ce03ebef11076c1bd15deb77034b8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#ga5c8f613a7c294e0b96deccbdabc38f18">PluginReceiveResult</a> SLNet::ReplicaManager3::OnDownloadStarted </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *&#160;</td>
          <td class="paramname"><em>packet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char *&#160;</td>
          <td class="paramname"><em>packetData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>packetDataLength</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td>
          <td class="paramname"><em>senderGuid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>packetDataOffset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a904a972e2388bfa4eda89bde26385bb2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::ReplicaManager3::OnNewConnection </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>systemAddress</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td>
          <td class="paramname"><em>rakNetGUID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>isIncoming</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Called when we got a new connection </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">systemAddress</td><td>Address of the new connection </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rakNetGuid</td><td>The guid of the specified system </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">isIncoming</td><td>If true, this is ID_NEW_INCOMING_CONNECTION, or the equivalent </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented from <a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a225b5a285e1cf2b0f9b03f6133c409e8">SLNet::PluginInterface2</a>.</p>

</div>
</div>
<a class="anchor" id="a5c1414d5ab277a3d7e796b77bc00d2fe"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::ReplicaManager3::OnRakPeerShutdown </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when <a class="el" href="../../d5/dbf/class_s_l_net_1_1_rak_peer.xhtml" title="Main interface for network communications.">RakPeer</a> is shutdown. </p>

<p>Reimplemented from <a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#aea8a90c4078ecc0db77545e44531b1de">SLNet::PluginInterface2</a>.</p>

</div>
</div>
<a class="anchor" id="adc868fb7755dc7ffdb5bbee3b1d675b3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#ga5c8f613a7c294e0b96deccbdabc38f18">PluginReceiveResult</a> SLNet::ReplicaManager3::OnReceive </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *&#160;</td>
          <td class="paramname"><em>packet</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>OnReceive is called for every packet. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">packet</td><td>the packet that is being returned to the user </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True to allow the game and other plugins to get this message, false to absorb it </dd></dl>

<p>Reimplemented from <a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a3a401ad0acd5d326d7307e2f4fce20ea">SLNet::PluginInterface2</a>.</p>

</div>
</div>
<a class="anchor" id="a0f9a63fe9bb4f899dbbcd49f6b426c8d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#ga5c8f613a7c294e0b96deccbdabc38f18">PluginReceiveResult</a> SLNet::ReplicaManager3::OnSerialize </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *&#160;</td>
          <td class="paramname"><em>packet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char *&#160;</td>
          <td class="paramname"><em>packetData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>packetDataLength</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td>
          <td class="paramname"><em>senderGuid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">SLNet::Time</a>&#160;</td>
          <td class="paramname"><em>timestamp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>packetDataOffset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a7c6b9fee6f684c7ff3431d8bfca9e305"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a>* SLNet::ReplicaManager3::PopConnection </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td>
          <td class="paramname"><em>guid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Stop tracking a connection. </p>
<p>On call, for each replica returned by <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ae0e82077ed014d01cb0c40dd6aa7df36" title="Returns all objects originally created by a particular system.">GetReplicasCreatedByGuid()</a>, QueryActionOnPopConnection() will be called. Depending on the return value, this may delete the corresponding replica.<br/>
 If autoDestroy is true in the call to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a5a9827b1942a87ab2f797d32a6365fbb" title="Enable or disable automatically assigning connections to new instances of Connection_RM3.">SetAutoManageConnections()</a> (true by default) then this is called automatically when the connection is lost. In that case, the returned connection instance is deleted.<br/>
 </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">guid</td><td>of the connection to get. Passed to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a002d1792ae0a1b08bfb84711c6441c9e" title="Implement to return a game specific derivation of Connection_RM3.">ReplicaManager3::AllocConnection()</a> originally. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">worldId</td><td>Used for multiple worlds. World 0 is created automatically by default. See <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad8af6474dbffef52763ee9f42dbc96b3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a>* SLNet::ReplicaManager3::PopConnection </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a8449acd594530f6d46688ed23ea340e5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::ReplicaManager3::PushConnection </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>newConnection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Track a new <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3" title="Each remote system is represented by Connection_RM3. Used to allocate Replica3 and track which instan...">Connection_RM3</a> instance. </p>
<p>If <em>autoCreate</em> is false for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a5a9827b1942a87ab2f797d32a6365fbb" title="Enable or disable automatically assigning connections to new instances of Connection_RM3.">SetAutoManageConnections()</a>, then you need this function to add new instances of <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3" title="Each remote system is represented by Connection_RM3. Used to allocate Replica3 and track which instan...">Connection_RM3</a> yourself.<br/>
 You don't need to track this pointer yourself, you can get it with <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#aad81267978c5eacc06c1abd0d10089ad" title="Returns a connection pointer previously added with PushConnection()">GetConnectionAtIndex()</a>, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab86791d372fce797083480638617a886" title="Returns a connection pointer previously added with PushConnection.()">GetConnectionByGUID()</a>, or <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a620393f0b5c7c593229a7e17e06f181c" title="Returns a connection pointer previously added with PushConnection()">GetConnectionBySystemAddress()</a>.<br/>
 </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">newConnection</td><td>The new connection instance to track. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">worldId</td><td>Used for multiple worlds. World 0 is created automatically by default. See <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab822b30a99de1c9ee1cb3835f726fe7c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReplicaManager3::Reference </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">SLNet::Replica3</a> *&#160;</td>
          <td class="paramname"><em>replica3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a replicated object to the system. </p>
<p>Anytime you create a new object that derives from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a>, and you want <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3" title="System to help automate game object construction, destruction, and serialization.">ReplicaManager3</a> to use it, pass it to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab822b30a99de1c9ee1cb3835f726fe7c" title="Adds a replicated object to the system.">Reference()</a>.<br/>
 Remote systems already connected will potentially download this object the next time <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a50c8eeeff65c3c2ebb3680ed7c287a1f" title="Call interfaces, send data.">ReplicaManager3::Update()</a> is called, which happens every time you call <a class="el" href="../../da/d27/class_s_l_net_1_1_rak_peer_interface.xhtml#a99738a11165d8d6feda63f2dfde1bf28">RakPeerInterface::Receive()</a>.<br/>
 You can also call <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a50c8eeeff65c3c2ebb3680ed7c287a1f" title="Call interfaces, send data.">ReplicaManager3::Update()</a> manually to send referenced objects right away </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">replica3</td><td>The object to start tracking </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">worldId</td><td>Used for multiple worlds. World 0 is created automatically by default. See <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a971a6fc747cf4f26a72360d8bc7d9a1a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int SLNet::ReplicaManager3::ReferenceInternal </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">SLNet::Replica3</a> *&#160;</td>
          <td class="paramname"><em>replica3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a9e1b9d8a7b942a08937bff2b97ca9526"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReplicaManager3::RemoveWorld </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Deallocate a world added with AddWorld, or the default world with id 0 Deallocating a world will also stop tracking and updating all connections and replicas associated with that world. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">worldId</td><td>A <em>worldId</em> value previously added with <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a5a9827b1942a87ab2f797d32a6365fbb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReplicaManager3::SetAutoManageConnections </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>autoCreate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>autoDestroy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enable or disable automatically assigning connections to new instances of <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3" title="Each remote system is represented by Connection_RM3. Used to allocate Replica3 and track which instan...">Connection_RM3</a>. </p>
<p><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3" title="System to help automate game object construction, destruction, and serialization.">ReplicaManager3</a> can automatically create and/or destroy <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3" title="Each remote system is represented by Connection_RM3. Used to allocate Replica3 and track which instan...">Connection_RM3</a> as systems connect or disconnect from <a class="el" href="../../da/d27/class_s_l_net_1_1_rak_peer_interface.xhtml" title="The main interface for network communications.">RakPeerInterface</a>.<br/>
 By default this is on, to make the system easier to learn and setup.<br/>
 If you don't want all connections to take part in the game, or you want to delay when a connection downloads the game, set <em>autoCreate</em> to false.<br/>
 If you want to delay deleting a connection that has dropped, set <em>autoDestroy</em> to false. If you do this, then you must call <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a7c6b9fee6f684c7ff3431d8bfca9e305" title="Stop tracking a connection.">PopConnection()</a> to remove that connection from being internally tracked. You'll also have to delete the connection instance on your own.<br/>
 </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">autoCreate</td><td>Automatically call <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a002d1792ae0a1b08bfb84711c6441c9e" title="Implement to return a game specific derivation of Connection_RM3.">ReplicaManager3::AllocConnection()</a> for each new connection. Defaults to true. Also see <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#abe6897c4bc4e3f6286cb7c3e37dc5bad" title="Call AllocConnection() and PushConnection() for each connection in participantList.">AutoCreateConnectionList()</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">autoDestroy</td><td>Automatically call <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a40bc143ea7bb423c0045f0bbbfe88b06" title="Implement to destroy a class instanced returned by AllocConnection()">ReplicaManager3::DeallocConnection()</a> for each dropped connection. Defaults to true. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a0168b8c51dff68b084af5ba83ddcf677"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReplicaManager3::SetAutoSerializeInterval </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">SLNet::Time</a>&#160;</td>
          <td class="paramname"><em>intervalMS</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Every <em>intervalMS</em> milliseconds, Connection_RM3::OnAutoserializeInterval() will be called.<br/>
 Defaults to 30.<br/>
 Pass with &lt;0 to disable. Pass 0 to Serialize() every time RakPeer::Recieve() is called<br/>
 If you want to control the update interval with more granularity, use the return values from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a90a3755d677079ec3718ddd6f8df32f1" title="Serialize our class to a bitstream.">Replica3::Serialize()</a>.<br/>
 </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">intervalMS</td><td>How frequently to autoserialize all objects. This controls the maximum number of game object updates per second. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a24223d16824c9c0968d3e61746abdfac"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReplicaManager3::SetDefaultOrderingChannel </td>
          <td>(</td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>def</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">Default</td><td>ordering channel to use for object creation, destruction, and serializations </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a00c1eae9167f011dd4446073610b5fef"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReplicaManager3::SetDefaultPacketPriority </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d7/d03/_packet_priority_8h.xhtml#a659378374e516180f93640c79f59705c">PacketPriority</a>&#160;</td>
          <td class="paramname"><em>def</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">Default</td><td>packet priority to use for object creation, destruction, and serializations </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aac903fb76f3fa12aadd311284c83e88a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReplicaManager3::SetDefaultPacketReliability </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7e">PacketReliability</a>&#160;</td>
          <td class="paramname"><em>def</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">Default</td><td>packet reliability to use for object creation, destruction, and serializations </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="adbb31ebc9a52d515576475baacd7c158"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReplicaManager3::SetNetworkIDManager </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/dbd/class_s_l_net_1_1_network_i_d_manager.xhtml">NetworkIDManager</a> *&#160;</td>
          <td class="paramname"><em>_networkIDManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sets the networkIDManager instance that this plugin relys upon.<br/>
 Uses whatever instance is attached to <a class="el" href="../../da/d27/class_s_l_net_1_1_rak_peer_interface.xhtml" title="The main interface for network communications.">RakPeerInterface</a> if unset.<br/>
 To support multiple worlds, you should set it to a different manager for each instance of the plugin </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">_networkIDManager</td><td>The externally allocated <a class="el" href="../../d9/dbd/class_s_l_net_1_1_network_i_d_manager.xhtml">NetworkIDManager</a> instance for this plugin to use. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">worldId</td><td>Used for multiple worlds. World 0 is created automatically by default. See <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a22f249940cb80f3fdbffdd08c17ca760" title="ReplicaManager3 can support multiple worlds, where each world has a separate NetworkIDManager, list of connections, replicas, etc A world with id 0 is created automatically. If you want multiple worlds, use this function, and ReplicaManager3::SetNetworkIDManager() to have a different NetworkIDManager instance per world.">AddWorld()</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a50c8eeeff65c3c2ebb3680ed7c287a1f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::ReplicaManager3::Update </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Call interfaces, send data. </p>

<p>Reimplemented from <a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#aa181a0ff58765c3d7878ac6dfd5e5a10">SLNet::PluginInterface2</a>.</p>

</div>
</div>
<h4 class="groupheader">Member Data Documentation</h4>
<a class="anchor" id="ad480576715cc372f2921af3330eb26ae"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::ReplicaManager3::autoCreateConnections</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00342">342</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="adef615545ebaccf2ec4836cb52a382a2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::ReplicaManager3::autoDestroyConnections</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00342">342</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a6e3a3181ca27db0de1b1fa818254a2c8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">SLNet::Time</a> SLNet::ReplicaManager3::autoSerializeInterval</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00340">340</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a39dc10bdeadf2120888333af42429b32"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a>* SLNet::ReplicaManager3::currentlyDeallocatingReplica</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00343">343</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="ab4a2aad10cd7bbf59bdbe7651a076885"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d2/db7/struct_s_l_net_1_1_p_r_o.xhtml">PRO</a> SLNet::ReplicaManager3::defaultSendParameters</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00339">339</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a039a6e26d55eb09a15da46f239a68c61"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">SLNet::Time</a> SLNet::ReplicaManager3::lastAutoSerializeOccurance</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00341">341</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a2a167234670aeb424c355e719b691107"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../df/df2/_native_types_8h.xhtml#a6eb1e68cc391dd753bc8ce896dbb8315">uint32_t</a> SLNet::ReplicaManager3::nextReferenceIndex</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00346">346</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a6e118d9c8d7a9f6a111d7fc7d10ff115"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#df/d59/struct_s_l_net_1_1_replica_manager3_1_1_r_m3_world">RM3World</a>* SLNet::ReplicaManager3::worldsArray[255]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00349">349</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a21f2689433dc17b76ba6f509c85686e5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt;<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#df/d59/struct_s_l_net_1_1_replica_manager3_1_1_r_m3_world">RM3World</a> *&gt; SLNet::ReplicaManager3::worldsList</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00351">351</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>

</div>
</div>
<a name="dd/da8/struct_s_l_net_1_1_last_serialization_result_b_s" id="dd/da8/struct_s_l_net_1_1_last_serialization_result_b_s"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct SLNet::LastSerializationResultBS</td>
        </tr>
      </table>
</div><div class="memdoc">
<div class="textblock">
<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00359">359</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>
</div><table class="fieldtable">
<tr><th colspan="3">Class Members</th></tr>
<tr><td class="fieldtype">
<a class="anchor" id="a47872975ad5d8bdc301e771a81b8305d"></a><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a></td>
<td class="fieldname">
bitStream</td>
<td class="fielddoc">
</td></tr>
<tr><td class="fieldtype">
<a class="anchor" id="a2672ae5ed82122487e30087284bcca84"></a>bool</td>
<td class="fieldname">
indicesToSend</td>
<td class="fielddoc">
</td></tr>
</table>

</div>
</div>
<a name="d7/d35/struct_s_l_net_1_1_last_serialization_result" id="d7/d35/struct_s_l_net_1_1_last_serialization_result"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct SLNet::LastSerializationResult</td>
        </tr>
      </table>
</div><div class="memdoc">
<div class="textblock"><p>Represents the serialized data for an object the last time it was sent. Used by Connection_RM3::OnAutoserializeInterval() and <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#af574d36fe5ec51e236225fa523be85bc">Connection_RM3::SendSerializeIfChanged()</a> </p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00367">367</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>
</div><table class="memberdecls">
<tr><td colspan="2"><h3>Public Member Functions</h3></td></tr>
<tr class="memitem:a077d9c2a8a22a2432882336ce7d7bcc8"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a077d9c2a8a22a2432882336ce7d7bcc8">LastSerializationResult</a> ()</td></tr>
<tr class="separator:a077d9c2a8a22a2432882336ce7d7bcc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56ce8dd61fe8bbb959106b18c779d4b7"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a56ce8dd61fe8bbb959106b18c779d4b7">~LastSerializationResult</a> ()</td></tr>
<tr class="separator:a56ce8dd61fe8bbb959106b18c779d4b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1dd244b10aeba756ba9c25cfa768b80"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#af1dd244b10aeba756ba9c25cfa768b80">AllocBS</a> (void)</td></tr>
<tr class="separator:af1dd244b10aeba756ba9c25cfa768b80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><h3>Public Attributes</h3></td></tr>
<tr class="memitem:ada3f6b0a129fa1936dd9881c7dcf9fa8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">SLNet::Replica3</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ada3f6b0a129fa1936dd9881c7dcf9fa8">replica</a></td></tr>
<tr class="separator:ada3f6b0a129fa1936dd9881c7dcf9fa8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a992bdaab705d4d21782c8cafcddf3029"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">SLNet::Time</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a992bdaab705d4d21782c8cafcddf3029">whenLastSerialized</a></td></tr>
<tr class="separator:a992bdaab705d4d21782c8cafcddf3029"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30645f5566a14858be91bde0d3d39779"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#dd/da8/struct_s_l_net_1_1_last_serialization_result_b_s">LastSerializationResultBS</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a30645f5566a14858be91bde0d3d39779">lastSerializationResultBS</a></td></tr>
<tr class="separator:a30645f5566a14858be91bde0d3d39779"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h4 class="groupheader">Constructor &amp; Destructor Documentation</h4>
<a class="anchor" id="a077d9c2a8a22a2432882336ce7d7bcc8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SLNet::LastSerializationResult::LastSerializationResult </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a56ce8dd61fe8bbb959106b18c779d4b7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SLNet::LastSerializationResult::~LastSerializationResult </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h4 class="groupheader">Member Function Documentation</h4>
<a class="anchor" id="af1dd244b10aeba756ba9c25cfa768b80"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::LastSerializationResult::AllocBS </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h4 class="groupheader">Member Data Documentation</h4>
<a class="anchor" id="a30645f5566a14858be91bde0d3d39779"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#dd/da8/struct_s_l_net_1_1_last_serialization_result_b_s">LastSerializationResultBS</a>* SLNet::LastSerializationResult::lastSerializationResultBS</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00380">380</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="ada3f6b0a129fa1936dd9881c7dcf9fa8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">SLNet::Replica3</a>* SLNet::LastSerializationResult::replica</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>The replica instance we serialized </p>
<dl class="section note"><dt>Note</dt><dd>replica MUST be the first member of this struct because I cast from replica to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d7/d35/struct_s_l_net_1_1_last_serialization_result">LastSerializationResult</a> in Update() </dd></dl>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00374">374</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a992bdaab705d4d21782c8cafcddf3029"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">SLNet::Time</a> SLNet::LastSerializationResult::whenLastSerialized</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00377">377</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>

</div>
</div>
<a name="d5/dad/struct_s_l_net_1_1_serialize_parameters" id="d5/dad/struct_s_l_net_1_1_serialize_parameters"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct SLNet::SerializeParameters</td>
        </tr>
      </table>
</div><div class="memdoc">
<div class="textblock"><p>Parameters passed to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a90a3755d677079ec3718ddd6f8df32f1" title="Serialize our class to a bitstream.">Replica3::Serialize()</a> </p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00385">385</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>
</div><table class="fieldtable">
<tr><th colspan="3">Class Members</th></tr>
<tr><td class="fieldtype">
<a class="anchor" id="ae8b3676cfdd0080325034e129ce34aa9"></a><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a></td>
<td class="fieldname">
bitsWrittenSoFar</td>
<td class="fielddoc">
For prior serializations this tick, for the same connection, how many bits have we written so far? Use this to limit how many objects you send to update per-tick if desired </td></tr>
<tr><td class="fieldtype">
<a class="anchor" id="a3ac17703348c171160655b9e3435776f"></a><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">Time</a></td>
<td class="fieldname">
curTime</td>
<td class="fielddoc">
Current time, in milliseconds. curTime - whenLastSerialized is how long it has been since this object was last sent </td></tr>
<tr><td class="fieldtype">
<a class="anchor" id="a21834abe5691a6337f0bd45109ae6a75"></a><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">Connection_RM3</a> *</td>
<td class="fieldname">
destinationConnection</td>
<td class="fielddoc">
Passed to <a class="el" href="../../da/d27/class_s_l_net_1_1_rak_peer_interface.xhtml#ab817d74d4aa4ff1edf593543bbf7b8fb">RakPeerInterface::Send()</a>. </td></tr>
<tr><td class="fieldtype">
<a class="anchor" id="a1f9e9ec54a32a6c4aa4dac6a66c183c5"></a><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a> *</td>
<td class="fieldname">
lastSentBitstream</td>
<td class="fielddoc">
Last bitstream we sent for this replica to this system. Read, but DO NOT MODIFY </td></tr>
<tr><td class="fieldtype">
<a class="anchor" id="abd6f01ddbc03ffb38229426987dd9f6c"></a><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">Time</a></td>
<td class="fieldname">
messageTimestamp</td>
<td class="fielddoc">
Set to non-zero to transmit a timestamp with this message. Defaults to 0 Use <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a2de556bb780580b7b7f07e99e382818d">SLNet::GetTime()</a> for this </td></tr>
<tr><td class="fieldtype">
<a class="anchor" id="ad3aee909a580294d8527aa0577f975d8"></a><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a></td>
<td class="fieldname">
outputBitstream</td>
<td class="fielddoc">
Write your output for serialization here If nothing is written, the serialization will not occur Write to any or all of the NUM_OUTPUT_BITSTREAM_CHANNELS channels available. Channels can hold independent data </td></tr>
<tr><td class="fieldtype">
<a class="anchor" id="a8b050ef1e4444ca919353b9c6ecf8481"></a><a class="el" href="../../d2/db7/struct_s_l_net_1_1_p_r_o.xhtml">PRO</a></td>
<td class="fieldname">
pro</td>
<td class="fielddoc">
Passed to <a class="el" href="../../da/d27/class_s_l_net_1_1_rak_peer_interface.xhtml#ab817d74d4aa4ff1edf593543bbf7b8fb">RakPeerInterface::Send()</a>. Defaults to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a00c1eae9167f011dd4446073610b5fef">ReplicaManager3::SetDefaultPacketPriority()</a>. Passed to <a class="el" href="../../da/d27/class_s_l_net_1_1_rak_peer_interface.xhtml#ab817d74d4aa4ff1edf593543bbf7b8fb">RakPeerInterface::Send()</a>. Defaults to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#aac903fb76f3fa12aadd311284c83e88a">ReplicaManager3::SetDefaultPacketReliability()</a>. Passed to <a class="el" href="../../da/d27/class_s_l_net_1_1_rak_peer_interface.xhtml#ab817d74d4aa4ff1edf593543bbf7b8fb">RakPeerInterface::Send()</a>. Defaults to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a24223d16824c9c0968d3e61746abdfac">ReplicaManager3::SetDefaultOrderingChannel()</a>. </td></tr>
<tr><td class="fieldtype">
<a class="anchor" id="a23996bc9295dac4ab88431e3aa9b50d3"></a><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">Time</a></td>
<td class="fieldname">
whenLastSerialized</td>
<td class="fielddoc">
When this object was last serialized to the connection 0 means never </td></tr>
</table>

</div>
</div>
<a name="df/d99/struct_s_l_net_1_1_deserialize_parameters" id="df/d99/struct_s_l_net_1_1_deserialize_parameters"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct SLNet::DeserializeParameters</td>
        </tr>
      </table>
</div><div class="memdoc">
<div class="textblock">
<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00423">423</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>
</div><table class="fieldtable">
<tr><th colspan="3">Class Members</th></tr>
<tr><td class="fieldtype">
<a class="anchor" id="a1215360f8321958726aba3503c23d3b9"></a>bool</td>
<td class="fieldname">
bitstreamWrittenTo</td>
<td class="fielddoc">
</td></tr>
<tr><td class="fieldtype">
<a class="anchor" id="a9c6498a0d7192b7ee6d6d06e6ee60947"></a><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a></td>
<td class="fieldname">
serializationBitstream</td>
<td class="fielddoc">
</td></tr>
<tr><td class="fieldtype">
<a class="anchor" id="a56c33042546370debb07b98aea751763"></a><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">Connection_RM3</a> *</td>
<td class="fieldname">
sourceConnection</td>
<td class="fielddoc">
</td></tr>
<tr><td class="fieldtype">
<a class="anchor" id="a2e9344777fe7113dd714bb2b76a5656d"></a><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">Time</a></td>
<td class="fieldname">
timeStamp</td>
<td class="fielddoc">
</td></tr>
</table>

</div>
</div>
<a name="da/d47/class_s_l_net_1_1_connection___r_m3" id="da/d47/class_s_l_net_1_1_connection___r_m3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">class SLNet::Connection_RM3</td>
        </tr>
      </table>
</div><div class="memdoc">
<div class="textblock"><p>Each remote system is represented by <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3" title="Each remote system is represented by Connection_RM3. Used to allocate Replica3 and track which instan...">Connection_RM3</a>. Used to allocate <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> and track which instances have been allocated. </p>
<p>Important function: <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a56535f2cd8fafd109ffbb69c3597ebca" title="Class factory to create a Replica3 instance, given a user-defined identifier.">AllocReplica()</a> - must be overridden to create an object given an identifier for that object, which you define for all objects in your game </p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00442">442</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>
</div><table class="memberdecls">
<tr><td colspan="2"><h3>Public Types</h3></td></tr>
<tr class="memitem:a3530679cf9800e3bd0125e3cadcb66dd"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a3530679cf9800e3bd0125e3cadcb66dd">ConstructionMode</a> { <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a3530679cf9800e3bd0125e3cadcb66dda6cf7515ad6b7724ce9fb3c72a4d3767b">QUERY_REPLICA_FOR_CONSTRUCTION</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a3530679cf9800e3bd0125e3cadcb66ddaa7de19aeec85f556575f82f6e1c09e09">QUERY_REPLICA_FOR_CONSTRUCTION_AND_DESTRUCTION</a>, 
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a3530679cf9800e3bd0125e3cadcb66dda827426493de447db71cacb6bfcd1fe9c">QUERY_CONNECTION_FOR_REPLICA_LIST</a>
 }</td></tr>
<tr class="memdesc:a3530679cf9800e3bd0125e3cadcb66dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">List of enumerations for how to get the list of valid objects for other systems.  <a href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a3530679cf9800e3bd0125e3cadcb66dd">More...</a><br/></td></tr>
<tr class="separator:a3530679cf9800e3bd0125e3cadcb66dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><h3>Public Member Functions</h3></td></tr>
<tr class="memitem:a85afe04fd30110dad29b9126b9ade957"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a85afe04fd30110dad29b9126b9ade957">Connection_RM3</a> (const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;_systemAddress, <a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> _guid)</td></tr>
<tr class="separator:a85afe04fd30110dad29b9126b9ade957"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adac5d25dcc7e385ded5172a675df50ff"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#adac5d25dcc7e385ded5172a675df50ff">~Connection_RM3</a> ()</td></tr>
<tr class="separator:adac5d25dcc7e385ded5172a675df50ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56535f2cd8fafd109ffbb69c3597ebca"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a56535f2cd8fafd109ffbb69c3597ebca">AllocReplica</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *allocationIdBitstream, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *replicaManager3)=0</td></tr>
<tr class="memdesc:a56535f2cd8fafd109ffbb69c3597ebca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class factory to create a <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> instance, given a user-defined identifier.  <a href="#a56535f2cd8fafd109ffbb69c3597ebca"></a><br/></td></tr>
<tr class="separator:a56535f2cd8fafd109ffbb69c3597ebca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab39fe8d9c386523a082a7650c8c7fd97"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab39fe8d9c386523a082a7650c8c7fd97">GetConstructedReplicas</a> (<a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> * &gt; &amp;objectsTheyDoHave)</td></tr>
<tr class="memdesc:ab39fe8d9c386523a082a7650c8c7fd97"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get list of all replicas that are constructed for this connection.  <a href="#ab39fe8d9c386523a082a7650c8c7fd97"></a><br/></td></tr>
<tr class="separator:ab39fe8d9c386523a082a7650c8c7fd97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e1a6a2b6fc97ee2c9fdc5791807d8af"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a0e1a6a2b6fc97ee2c9fdc5791807d8af">HasReplicaConstructed</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">SLNet::Replica3</a> *replica)</td></tr>
<tr class="separator:a0e1a6a2b6fc97ee2c9fdc5791807d8af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23bcd093dee199713ed54a27b0778dd6"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a23bcd093dee199713ed54a27b0778dd6">SerializeOnDownloadStarted</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *bitStream)</td></tr>
<tr class="separator:a23bcd093dee199713ed54a27b0778dd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7dd9e5a4b509be43c2ab5511b2b9d5a8"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a7dd9e5a4b509be43c2ab5511b2b9d5a8">DeserializeOnDownloadStarted</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *bitStream)</td></tr>
<tr class="separator:a7dd9e5a4b509be43c2ab5511b2b9d5a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0535b20761037f4321d6754b6ab52749"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a0535b20761037f4321d6754b6ab52749">SerializeOnDownloadComplete</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *bitStream)</td></tr>
<tr class="separator:a0535b20761037f4321d6754b6ab52749"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ad54cc68d8b77d98d1eab0a0dc3d3f4"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9ad54cc68d8b77d98d1eab0a0dc3d3f4">DeserializeOnDownloadComplete</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *bitStream)</td></tr>
<tr class="separator:a9ad54cc68d8b77d98d1eab0a0dc3d3f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b431aa816db459fd278f29ae8995eda"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a1b431aa816db459fd278f29ae8995eda">GetSystemAddress</a> (void) const </td></tr>
<tr class="separator:a1b431aa816db459fd278f29ae8995eda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada9966bd114833cfdab02c9b8dc9cddb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ada9966bd114833cfdab02c9b8dc9cddb">GetRakNetGUID</a> (void) const </td></tr>
<tr class="separator:ada9966bd114833cfdab02c9b8dc9cddb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e366112532ff73175e8f6723a9b037f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a6e366112532ff73175e8f6723a9b037f">GetDownloadWasCompleted</a> (void) const </td></tr>
<tr class="separator:a6e366112532ff73175e8f6723a9b037f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa00239ced7e3b6fa7fa058ecbb81fe1a"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#aa00239ced7e3b6fa7fa058ecbb81fe1a">QueryGroupDownloadMessages</a> (void) const </td></tr>
<tr class="memdesc:aa00239ced7e3b6fa7fa058ecbb81fe1a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return whether or not downloads to our system should all be processed the same tick (call to <a class="el" href="../../d5/dbf/class_s_l_net_1_1_rak_peer.xhtml#a30f9b6c0108bae2b860776136f6aece7" title="Gets a message from the incoming message queue.">RakPeer::Receive()</a> )  <a href="#aa00239ced7e3b6fa7fa058ecbb81fe1a"></a><br/></td></tr>
<tr class="separator:aa00239ced7e3b6fa7fa058ecbb81fe1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a777c20ba9df81ac46e390cb34c5c972e"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a3530679cf9800e3bd0125e3cadcb66dd">ConstructionMode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a777c20ba9df81ac46e390cb34c5c972e">QueryConstructionMode</a> (void) const </td></tr>
<tr class="memdesc:a777c20ba9df81ac46e390cb34c5c972e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Queries how to get the list of objects that exist on remote systems.  <a href="#a777c20ba9df81ac46e390cb34c5c972e"></a><br/></td></tr>
<tr class="separator:a777c20ba9df81ac46e390cb34c5c972e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a02fa837394785d784f7cee5a204ae0"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a6a02fa837394785d784f7cee5a204ae0">QueryReplicaList</a> (<a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> * &gt; &amp;newReplicasToCreate, <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> * &gt; &amp;existingReplicasToDestroy)</td></tr>
<tr class="memdesc:a6a02fa837394785d784f7cee5a204ae0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Callback used when <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a777c20ba9df81ac46e390cb34c5c972e" title="Queries how to get the list of objects that exist on remote systems.">QueryConstructionMode()</a> returns QUERY_CONNECTION_FOR_REPLICA_LIST.  <a href="#a6a02fa837394785d784f7cee5a204ae0"></a><br/></td></tr>
<tr class="separator:a6a02fa837394785d784f7cee5a204ae0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95a6fcc04cef01f895ce11f955934a5f"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a95a6fcc04cef01f895ce11f955934a5f">QuerySerializationList</a> (<a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> * &gt; &amp;replicasToSerialize)</td></tr>
<tr class="memdesc:a95a6fcc04cef01f895ce11f955934a5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override which replicas to serialize and in what order for a connection for a <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a50c8eeeff65c3c2ebb3680ed7c287a1f" title="Call interfaces, send data.">ReplicaManager3::Update()</a> cycle.  <a href="#a95a6fcc04cef01f895ce11f955934a5f"></a><br/></td></tr>
<tr class="separator:a95a6fcc04cef01f895ce11f955934a5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea5fd8ce51ecf4c101a3def10cc2e9d3"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga3c77f49d3ff6a39bb62cb2efd2d3474a">SendSerializeIfChangedResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#aea5fd8ce51ecf4c101a3def10cc2e9d3">SendSerialize</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">SLNet::Replica3</a> *replica, bool indicesToSend[<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#ab44c634dfee8b57213d26249218ea2cd">RM3_NUM_OUTPUT_BITSTREAM_CHANNELS</a>], <a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> serializationData[<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#ab44c634dfee8b57213d26249218ea2cd">RM3_NUM_OUTPUT_BITSTREAM_CHANNELS</a>], <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">SLNet::Time</a> timestamp, <a class="el" href="../../d2/db7/struct_s_l_net_1_1_p_r_o.xhtml">PRO</a> sendParameters[<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#ab44c634dfee8b57213d26249218ea2cd">RM3_NUM_OUTPUT_BITSTREAM_CHANNELS</a>], <a class="el" href="../../da/d27/class_s_l_net_1_1_rak_peer_interface.xhtml">SLNet::RakPeerInterface</a> *rakPeer, unsigned char worldId, <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">SLNet::Time</a> curTime)</td></tr>
<tr class="separator:aea5fd8ce51ecf4c101a3def10cc2e9d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af574d36fe5ec51e236225fa523be85bc"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga3c77f49d3ff6a39bb62cb2efd2d3474a">SendSerializeIfChangedResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#af574d36fe5ec51e236225fa523be85bc">SendSerializeIfChanged</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d7/d35/struct_s_l_net_1_1_last_serialization_result">LastSerializationResult</a> *lsr, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d5/dad/struct_s_l_net_1_1_serialize_parameters">SerializeParameters</a> *sp, <a class="el" href="../../da/d27/class_s_l_net_1_1_rak_peer_interface.xhtml">SLNet::RakPeerInterface</a> *rakPeer, unsigned char worldId, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *replicaManager, <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">SLNet::Time</a> curTime)</td></tr>
<tr class="separator:af574d36fe5ec51e236225fa523be85bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d3aef2018b7c6fd7a9a6419f92e4a85"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a4d3aef2018b7c6fd7a9a6419f92e4a85">SendConstruction</a> (<a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> * &gt; &amp;newObjects, <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> * &gt; &amp;deletedObjects, <a class="el" href="../../d2/db7/struct_s_l_net_1_1_p_r_o.xhtml">PRO</a> sendParameters, <a class="el" href="../../da/d27/class_s_l_net_1_1_rak_peer_interface.xhtml">SLNet::RakPeerInterface</a> *rakPeer, unsigned char worldId, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *replicaManager3)</td></tr>
<tr class="separator:a4d3aef2018b7c6fd7a9a6419f92e4a85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e5a55149d3154f0f877deee0709a224"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a1e5a55149d3154f0f877deee0709a224">SendValidation</a> (<a class="el" href="../../da/d27/class_s_l_net_1_1_rak_peer_interface.xhtml">SLNet::RakPeerInterface</a> *rakPeer, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId)</td></tr>
<tr class="separator:a1e5a55149d3154f0f877deee0709a224"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97cc215e62d928b67d3c137e53487351"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a97cc215e62d928b67d3c137e53487351">AutoConstructByQuery</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *replicaManager3, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId)</td></tr>
<tr class="separator:a97cc215e62d928b67d3c137e53487351"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5734530365e895cdb647e9abd93422da"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a5734530365e895cdb647e9abd93422da">ClearDownloadGroup</a> (<a class="el" href="../../da/d27/class_s_l_net_1_1_rak_peer_interface.xhtml">RakPeerInterface</a> *rakPeerInterface)</td></tr>
<tr class="separator:a5734530365e895cdb647e9abd93422da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><h3>Static Public Member Functions</h3></td></tr>
<tr class="memitem:aa899bd4ac31198e8f22169e80cc4aeb1"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#aa899bd4ac31198e8f22169e80cc4aeb1">Replica3LSRComp</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> *const &amp;replica3, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d7/d35/struct_s_l_net_1_1_last_serialization_result">LastSerializationResult</a> *const &amp;data)</td></tr>
<tr class="separator:aa899bd4ac31198e8f22169e80cc4aeb1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><h3>Public Attributes</h3></td></tr>
<tr class="memitem:af713225641af86fa0d4bd6e419858a0f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#af713225641af86fa0d4bd6e419858a0f">isValidated</a></td></tr>
<tr class="separator:af713225641af86fa0d4bd6e419858a0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54ba577f3d4989e9d8a4046d5759f365"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a54ba577f3d4989e9d8a4046d5759f365">isFirstConstruction</a></td></tr>
<tr class="separator:a54ba577f3d4989e9d8a4046d5759f365"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><h3>Protected Member Functions</h3></td></tr>
<tr class="memitem:ab89451234a35e01ebf77576461e700bf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab89451234a35e01ebf77576461e700bf">OnLocalReference</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> *replica3, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *replicaManager)</td></tr>
<tr class="separator:ab89451234a35e01ebf77576461e700bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64694dc49ec4f510745e04feb09a5bba"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a64694dc49ec4f510745e04feb09a5bba">OnDereference</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> *replica3, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *replicaManager)</td></tr>
<tr class="separator:a64694dc49ec4f510745e04feb09a5bba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c18bc4303f7738b25bdef7bb8b548a2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a1c18bc4303f7738b25bdef7bb8b548a2">OnDownloadFromThisSystem</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> *replica3, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *replicaManager)</td></tr>
<tr class="separator:a1c18bc4303f7738b25bdef7bb8b548a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa10e64db8c7b9e968bdfe2ee2fad40d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#afa10e64db8c7b9e968bdfe2ee2fad40d">OnDownloadFromOtherSystem</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> *replica3, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *replicaManager)</td></tr>
<tr class="separator:afa10e64db8c7b9e968bdfe2ee2fad40d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abdd2ed22a9466f406a6616a003804926"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#abdd2ed22a9466f406a6616a003804926">OnNeverConstruct</a> (unsigned int queryToConstructIdx, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *replicaManager)</td></tr>
<tr class="separator:abdd2ed22a9466f406a6616a003804926"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e07545dd2f37ed5ce922ea215424676"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a5e07545dd2f37ed5ce922ea215424676">OnConstructToThisConnection</a> (unsigned int queryToConstructIdx, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *replicaManager)</td></tr>
<tr class="separator:a5e07545dd2f37ed5ce922ea215424676"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90070abdf3353e9d445878930ab5dc82"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a90070abdf3353e9d445878930ab5dc82">OnConstructToThisConnection</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> *replica, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *replicaManager)</td></tr>
<tr class="separator:a90070abdf3353e9d445878930ab5dc82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fcaca602d76ea1dbf7ea00ce46c834d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a2fcaca602d76ea1dbf7ea00ce46c834d">OnNeverSerialize</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d7/d35/struct_s_l_net_1_1_last_serialization_result">LastSerializationResult</a> *lsr, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *replicaManager)</td></tr>
<tr class="separator:a2fcaca602d76ea1dbf7ea00ce46c834d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a940192120e4be6e39756b411ea0a0bcd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a940192120e4be6e39756b411ea0a0bcd">OnReplicaAlreadyExists</a> (unsigned int queryToConstructIdx, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *replicaManager)</td></tr>
<tr class="separator:a940192120e4be6e39756b411ea0a0bcd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2dd613a5ea8e34ccaffb03cfb68d0d0d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a2dd613a5ea8e34ccaffb03cfb68d0d0d">OnDownloadExisting</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> *replica3, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *replicaManager)</td></tr>
<tr class="separator:a2dd613a5ea8e34ccaffb03cfb68d0d0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a727689f311cea2fc885277c4785d6858"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a727689f311cea2fc885277c4785d6858">OnSendDestructionFromQuery</a> (unsigned int queryToDestructIdx, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *replicaManager)</td></tr>
<tr class="separator:a727689f311cea2fc885277c4785d6858"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95c071538ff611b591a92afa7ec5233f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a95c071538ff611b591a92afa7ec5233f">OnDoNotQueryDestruction</a> (unsigned int queryToDestructIdx, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *replicaManager)</td></tr>
<tr class="separator:a95c071538ff611b591a92afa7ec5233f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c68063bcf68cb10ea64d5374fea19fb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9c68063bcf68cb10ea64d5374fea19fb">ValidateLists</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *replicaManager) const </td></tr>
<tr class="separator:a9c68063bcf68cb10ea64d5374fea19fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3168b8c5f566a043b6ff5a9b6fae16d5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a3168b8c5f566a043b6ff5a9b6fae16d5">SendSerializeHeader</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">SLNet::Replica3</a> *replica, <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">SLNet::Time</a> timestamp, <a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *bs, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> worldId)</td></tr>
<tr class="separator:a3168b8c5f566a043b6ff5a9b6fae16d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><h3>Protected Attributes</h3></td></tr>
<tr class="memitem:ae4e674c816dad2d4af8272de4f7ff15a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ae4e674c816dad2d4af8272de4f7ff15a">systemAddress</a></td></tr>
<tr class="separator:ae4e674c816dad2d4af8272de4f7ff15a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af04357537ff00adf0071363c524de3cd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#af04357537ff00adf0071363c524de3cd">guid</a></td></tr>
<tr class="separator:af04357537ff00adf0071363c524de3cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcd7b1c49f8469720faeea5b0d53ac96"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml">DataStructures::OrderedList</a><br class="typebreak"/>
&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> <br class="typebreak"/>
*, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d7/d35/struct_s_l_net_1_1_last_serialization_result">LastSerializationResult</a> <br class="typebreak"/>
*, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#aa899bd4ac31198e8f22169e80cc4aeb1">Connection_RM3::Replica3LSRComp</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#abcd7b1c49f8469720faeea5b0d53ac96">constructedReplicaList</a></td></tr>
<tr class="separator:abcd7b1c49f8469720faeea5b0d53ac96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20844fc21eafa7a912de536931dd8db3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a><br class="typebreak"/>
&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d7/d35/struct_s_l_net_1_1_last_serialization_result">LastSerializationResult</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a20844fc21eafa7a912de536931dd8db3">queryToConstructReplicaList</a></td></tr>
<tr class="separator:a20844fc21eafa7a912de536931dd8db3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae087d4bf56421cef6c679f23022c796b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a><br class="typebreak"/>
&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d7/d35/struct_s_l_net_1_1_last_serialization_result">LastSerializationResult</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ae087d4bf56421cef6c679f23022c796b">queryToSerializeReplicaList</a></td></tr>
<tr class="separator:ae087d4bf56421cef6c679f23022c796b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a972afdf25ff2b49c59c0cc29db02e209"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a><br class="typebreak"/>
&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d7/d35/struct_s_l_net_1_1_last_serialization_result">LastSerializationResult</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a972afdf25ff2b49c59c0cc29db02e209">queryToDestructReplicaList</a></td></tr>
<tr class="separator:a972afdf25ff2b49c59c0cc29db02e209"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a6716520909ce3c242b446075096a7b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a7a6716520909ce3c242b446075096a7b">constructedReplicasCulled</a></td></tr>
<tr class="separator:a7a6716520909ce3c242b446075096a7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed1b15936e21d10828ff7c182b74bce6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#aed1b15936e21d10828ff7c182b74bce6">destroyedReplicasCulled</a></td></tr>
<tr class="separator:aed1b15936e21d10828ff7c182b74bce6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a828a2e412d724ebe41856876941192b8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a828a2e412d724ebe41856876941192b8">groupConstructionAndSerialize</a></td></tr>
<tr class="separator:a828a2e412d724ebe41856876941192b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a088ad36e24e6e73b9791c7861da2f2ef"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d3/d87/class_data_structures_1_1_queue.xhtml">DataStructures::Queue</a>&lt; <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a088ad36e24e6e73b9791c7861da2f2ef">downloadGroup</a></td></tr>
<tr class="separator:a088ad36e24e6e73b9791c7861da2f2ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b9e198fb0c2a65874eab867dfdc5488"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a4b9e198fb0c2a65874eab867dfdc5488">gotDownloadComplete</a></td></tr>
<tr class="separator:a4b9e198fb0c2a65874eab867dfdc5488"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h4 class="groupheader">Member Enumeration Documentation</h4>
<a class="anchor" id="a3530679cf9800e3bd0125e3cadcb66dd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a3530679cf9800e3bd0125e3cadcb66dd">SLNet::Connection_RM3::ConstructionMode</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>List of enumerations for how to get the list of valid objects for other systems. </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="a3530679cf9800e3bd0125e3cadcb66dda6cf7515ad6b7724ce9fb3c72a4d3767b"></a>QUERY_REPLICA_FOR_CONSTRUCTION</em>&nbsp;</td><td>
<p>For every object that does not exist on the remote system, call <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9cd4c94d916baf34960fe4e396a9a402" title="Ask if this object, which does not exist on destinationConnection should (now) be sent to that system...">Replica3::QueryConstruction()</a> every tick. Do not call <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9345f9d4ea34a9710114930da692e62b" title="Ask if this object, which does exist on destinationConnection should be removed from the remote syste...">Replica3::QueryDestruction()</a> Do not call <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a6a02fa837394785d784f7cee5a204ae0" title="Callback used when QueryConstructionMode() returns QUERY_CONNECTION_FOR_REPLICA_LIST.">Connection_RM3::QueryReplicaList()</a> </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a3530679cf9800e3bd0125e3cadcb66ddaa7de19aeec85f556575f82f6e1c09e09"></a>QUERY_REPLICA_FOR_CONSTRUCTION_AND_DESTRUCTION</em>&nbsp;</td><td>
<p>For every object that does not exist on the remote system, call <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9cd4c94d916baf34960fe4e396a9a402" title="Ask if this object, which does not exist on destinationConnection should (now) be sent to that system...">Replica3::QueryConstruction()</a> every tick. Based on the call, the object may be sent to the other system. For every object that does exist on the remote system, call <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9345f9d4ea34a9710114930da692e62b" title="Ask if this object, which does exist on destinationConnection should be removed from the remote syste...">Replica3::QueryDestruction()</a> every tick. Based on the call, the object may be deleted on the other system. Do not call <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a6a02fa837394785d784f7cee5a204ae0" title="Callback used when QueryConstructionMode() returns QUERY_CONNECTION_FOR_REPLICA_LIST.">Connection_RM3::QueryReplicaList()</a> </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a3530679cf9800e3bd0125e3cadcb66dda827426493de447db71cacb6bfcd1fe9c"></a>QUERY_CONNECTION_FOR_REPLICA_LIST</em>&nbsp;</td><td>
<p>Do not call <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9cd4c94d916baf34960fe4e396a9a402" title="Ask if this object, which does not exist on destinationConnection should (now) be sent to that system...">Replica3::QueryConstruction()</a> or <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9345f9d4ea34a9710114930da692e62b" title="Ask if this object, which does exist on destinationConnection should be removed from the remote syste...">Replica3::QueryDestruction()</a> Call <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a6a02fa837394785d784f7cee5a204ae0" title="Callback used when QueryConstructionMode() returns QUERY_CONNECTION_FOR_REPLICA_LIST.">Connection_RM3::QueryReplicaList()</a> to determine which objects exist on remote systems This can be faster than QUERY_REPLICA_FOR_CONSTRUCTION and QUERY_REPLICA_FOR_CONSTRUCTION_AND_DESTRUCTION for large worlds See <a class="el" href="../../d1/d6c/_grid_sectorizer_8h.xhtml">GridSectorizer.h</a> under /Source for code that can help with this </p>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00497">497</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<h4 class="groupheader">Constructor &amp; Destructor Documentation</h4>
<a class="anchor" id="a85afe04fd30110dad29b9126b9ade957"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SLNet::Connection_RM3::Connection_RM3 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>_systemAddress</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td>
          <td class="paramname"><em>_guid</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="adac5d25dcc7e385ded5172a675df50ff"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual SLNet::Connection_RM3::~Connection_RM3 </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h4 class="groupheader">Member Function Documentation</h4>
<a class="anchor" id="a56535f2cd8fafd109ffbb69c3597ebca"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a>* SLNet::Connection_RM3::AllocReplica </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>allocationIdBitstream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *&#160;</td>
          <td class="paramname"><em>replicaManager3</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Class factory to create a <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> instance, given a user-defined identifier. </p>
<p>Identifier is returned by <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a78976b7fd5bb43519ad123af18fe3924" title="Write a unique identifer that can be read on a remote system to create an object of this same class...">Replica3::WriteAllocationID()</a> for what type of class to create.<br/>
 This is called when you download a replica from another system.<br/>
 See Replica3::Dealloc for the corresponding destruction message.<br/>
 Return 0 if unable to create the intended object. Note, in that case the other system will still think we have the object and will try to serialize object updates to us. Generally, you should not send objects the other system cannot create.<br/>
 </p>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a78976b7fd5bb43519ad123af18fe3924" title="Write a unique identifer that can be read on a remote system to create an object of this same class...">Replica3::WriteAllocationID()</a>. Sample implementation:<br/>
 {<a class="el" href="../../d2/d66/class_s_l_net_1_1_rak_string.xhtml" title="String class.">SLNet::RakString</a> typeName; allocationIdBitstream-&gt;Read(typeName); <a class="el" href="../../dc/d0b/_thread_pool_8h.xhtml#a35e6652907f33d8d77bdbdfbbddac127">if</a> (typeName=="Soldier") <a class="el" href="../../dc/d0b/_thread_pool_8h.xhtml#a9717e7bbecb906637e86cef6da3d83c2">return</a> new Soldier; <a class="el" href="../../dc/d0b/_thread_pool_8h.xhtml#a9717e7bbecb906637e86cef6da3d83c2">return</a> 0;}<br/>
 </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">allocationIdBitstream</td><td>user-defined bitstream uniquely identifying a game object type </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">replicaManager3</td><td>Instance of <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3" title="System to help automate game object construction, destruction, and serialization.">ReplicaManager3</a> that controls this connection </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The new replica instance </dd></dl>

</div>
</div>
<a class="anchor" id="a97cc215e62d928b67d3c137e53487351"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::Connection_RM3::AutoConstructByQuery </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *&#160;</td>
          <td class="paramname"><em>replicaManager3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a5734530365e895cdb647e9abd93422da"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::Connection_RM3::ClearDownloadGroup </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d27/class_s_l_net_1_1_rak_peer_interface.xhtml">RakPeerInterface</a> *&#160;</td>
          <td class="paramname"><em>rakPeerInterface</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a9ad54cc68d8b77d98d1eab0a0dc3d3f4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::Connection_RM3::DeserializeOnDownloadComplete </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>bitStream</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Receives whatever was written in <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9ad54cc68d8b77d98d1eab0a0dc3d3f4">DeserializeOnDownloadComplete()</a> </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bitStream</td><td>Written in <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a0535b20761037f4321d6754b6ab52749">SerializeOnDownloadComplete()</a> </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00485">485</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a7dd9e5a4b509be43c2ab5511b2b9d5a8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::Connection_RM3::DeserializeOnDownloadStarted </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>bitStream</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Receives whatever was written in <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a23bcd093dee199713ed54a27b0778dd6">SerializeOnDownloadStarted()</a> </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bitStream</td><td>Written in <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a23bcd093dee199713ed54a27b0778dd6">SerializeOnDownloadStarted()</a> </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00477">477</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="ab39fe8d9c386523a082a7650c8c7fd97"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::Connection_RM3::GetConstructedReplicas </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>objectsTheyDoHave</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get list of all replicas that are constructed for this connection. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">objectsTheyDoHave</td><td>Destination list. Returned in sorted ascending order, sorted on the value of the <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> pointer. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6e366112532ff73175e8f6723a9b037f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::Connection_RM3::GetDownloadWasCompleted </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>True if ID_REPLICA_MANAGER_DOWNLOAD_COMPLETE arrived for this connection </dd></dl>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00494">494</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="ada9966bd114833cfdab02c9b8dc9cddb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> SLNet::Connection_RM3::GetRakNetGUID </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>Returns the <a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> passed to the constructor of this object </dd></dl>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00491">491</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a1b431aa816db459fd278f29ae8995eda"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> SLNet::Connection_RM3::GetSystemAddress </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The system address passed to the constructor of this object </dd></dl>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00488">488</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a0e1a6a2b6fc97ee2c9fdc5791807d8af"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::Connection_RM3::HasReplicaConstructed </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">SLNet::Replica3</a> *&#160;</td>
          <td class="paramname"><em>replica</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns true if we think this remote connection has this replica constructed </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">replica3</td><td>Which replica we are querying </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if constructed, false othewise </dd></dl>

</div>
</div>
<a class="anchor" id="a5e07545dd2f37ed5ce922ea215424676"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::Connection_RM3::OnConstructToThisConnection </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>queryToConstructIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *&#160;</td>
          <td class="paramname"><em>replicaManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a90070abdf3353e9d445878930ab5dc82"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::Connection_RM3::OnConstructToThisConnection </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> *&#160;</td>
          <td class="paramname"><em>replica</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *&#160;</td>
          <td class="paramname"><em>replicaManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a64694dc49ec4f510745e04feb09a5bba"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::Connection_RM3::OnDereference </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> *&#160;</td>
          <td class="paramname"><em>replica3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *&#160;</td>
          <td class="paramname"><em>replicaManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a95c071538ff611b591a92afa7ec5233f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::Connection_RM3::OnDoNotQueryDestruction </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>queryToDestructIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *&#160;</td>
          <td class="paramname"><em>replicaManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a2dd613a5ea8e34ccaffb03cfb68d0d0d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::Connection_RM3::OnDownloadExisting </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> *&#160;</td>
          <td class="paramname"><em>replica3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *&#160;</td>
          <td class="paramname"><em>replicaManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="afa10e64db8c7b9e968bdfe2ee2fad40d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::Connection_RM3::OnDownloadFromOtherSystem </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> *&#160;</td>
          <td class="paramname"><em>replica3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *&#160;</td>
          <td class="paramname"><em>replicaManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a1c18bc4303f7738b25bdef7bb8b548a2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::Connection_RM3::OnDownloadFromThisSystem </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> *&#160;</td>
          <td class="paramname"><em>replica3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *&#160;</td>
          <td class="paramname"><em>replicaManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="ab89451234a35e01ebf77576461e700bf"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::Connection_RM3::OnLocalReference </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> *&#160;</td>
          <td class="paramname"><em>replica3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *&#160;</td>
          <td class="paramname"><em>replicaManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="abdd2ed22a9466f406a6616a003804926"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::Connection_RM3::OnNeverConstruct </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>queryToConstructIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *&#160;</td>
          <td class="paramname"><em>replicaManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a2fcaca602d76ea1dbf7ea00ce46c834d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::Connection_RM3::OnNeverSerialize </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d7/d35/struct_s_l_net_1_1_last_serialization_result">LastSerializationResult</a> *&#160;</td>
          <td class="paramname"><em>lsr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *&#160;</td>
          <td class="paramname"><em>replicaManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a940192120e4be6e39756b411ea0a0bcd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::Connection_RM3::OnReplicaAlreadyExists </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>queryToConstructIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *&#160;</td>
          <td class="paramname"><em>replicaManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a727689f311cea2fc885277c4785d6858"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::Connection_RM3::OnSendDestructionFromQuery </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>queryToDestructIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *&#160;</td>
          <td class="paramname"><em>replicaManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a777c20ba9df81ac46e390cb34c5c972e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a3530679cf9800e3bd0125e3cadcb66dd">ConstructionMode</a> SLNet::Connection_RM3::QueryConstructionMode </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Queries how to get the list of objects that exist on remote systems. </p>
<p>The default of calling QueryConstruction for every known object is easy to use, but not efficient, especially for large worlds where many objects are outside of the player's circle of influence.<br/>
 QueryDestruction is also not necessarily useful or efficient, as object destruction tends to happen in known cases, and can be accomplished by calling <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab5096b364b6e47f5dc3e49734208fbd0">Replica3::BroadcastDestruction()</a> <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a777c20ba9df81ac46e390cb34c5c972e" title="Queries how to get the list of objects that exist on remote systems.">QueryConstructionMode()</a> allows you to specify more efficient algorithms than the default when overriden. </p>
<dl class="section return"><dt>Returns</dt><dd>How to get the list of objects that exist on the remote system. You should always return the same value for a given connection </dd></dl>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00531">531</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="aa00239ced7e3b6fa7fa058ecbb81fe1a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool SLNet::Connection_RM3::QueryGroupDownloadMessages </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return whether or not downloads to our system should all be processed the same tick (call to <a class="el" href="../../d5/dbf/class_s_l_net_1_1_rak_peer.xhtml#a30f9b6c0108bae2b860776136f6aece7" title="Gets a message from the incoming message queue.">RakPeer::Receive()</a> ) </p>
<p>Normally the system will send ID_REPLICA_MANAGER_DOWNLOAD_STARTED, ID_REPLICA_MANAGER_CONSTRUCTION for all downloaded objects, ID_REPLICA_MANAGER_SERIALIZE for each downloaded object, and lastly ID_REPLICA_MANAGER_DOWNLOAD_COMPLETE. This enables the application to show a downloading splash screen on ID_REPLICA_MANAGER_DOWNLOAD_STARTED, a progress bar, and to close the splash screen and activate all objects on ID_REPLICA_MANAGER_DOWNLOAD_COMPLETE However, if the application was not set up for this then it would result in incomplete objects spread out over time, and cause problems If you return true from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#aa00239ced7e3b6fa7fa058ecbb81fe1a" title="Return whether or not downloads to our system should all be processed the same tick (call to RakPeer:...">QueryGroupDownloadMessages()</a>, then these messages will be returned all in one tick, returned only when the download is complete </p>
<dl class="section note"><dt>Note</dt><dd>ID_REPLICA_MANAGER_DOWNLOAD_STARTED calls the callback <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a7dd9e5a4b509be43c2ab5511b2b9d5a8">DeserializeOnDownloadStarted()</a> </dd>
<dd>
ID_REPLICA_MANAGER_DOWNLOAD_COMPLETE calls the callback <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9ad54cc68d8b77d98d1eab0a0dc3d3f4">DeserializeOnDownloadComplete()</a> </dd></dl>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00524">524</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a6a02fa837394785d784f7cee5a204ae0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::Connection_RM3::QueryReplicaList </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>newReplicasToCreate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>existingReplicasToDestroy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Callback used when <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a777c20ba9df81ac46e390cb34c5c972e" title="Queries how to get the list of objects that exist on remote systems.">QueryConstructionMode()</a> returns QUERY_CONNECTION_FOR_REPLICA_LIST. </p>
<p>This advantage of this callback is if that there are many objects that a particular connection does not have, then we do not have to iterate through those objects calling QueryConstruction() for each of them.<br/>
 BR&gt; See <a class="el" href="../../d2/d83/class_grid_sectorizer.xhtml">GridSectorizer</a> in the Source directory as a method to find all objects within a certain radius in a fast way.<br/>
 BR&gt; </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">newReplicasToCreate</td><td>Anything in this list will be created on the remote system </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">existingReplicasToDestroy</td><td>Anything in this list will be destroyed on the remote system </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00541">541</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a95a6fcc04cef01f895ce11f955934a5f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool SLNet::Connection_RM3::QuerySerializationList </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>replicasToSerialize</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override which replicas to serialize and in what order for a connection for a <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a50c8eeeff65c3c2ebb3680ed7c287a1f" title="Call interfaces, send data.">ReplicaManager3::Update()</a> cycle. </p>
<p>By default, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3" title="Each remote system is represented by Connection_RM3. Used to allocate Replica3 and track which instan...">Connection_RM3</a> will iterate through queryToSerializeReplicaList and call QuerySerialization() on each Replica in that list queryToSerializeReplicaList is populated in the order in which <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab822b30a99de1c9ee1cb3835f726fe7c" title="Adds a replicated object to the system.">ReplicaManager3::Reference()</a> is called for those objects. If you write to to <em>replicasToSerialize</em> and return true, you can control in what order and for which replicas to call QuerySerialization() Example use case: We have more data to send then the bandwidth supports, so want to prioritize sends. For example enemies shooting are more important than animation effects When <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a95a6fcc04cef01f895ce11f955934a5f" title="Override which replicas to serialize and in what order for a connection for a ReplicaManager3::Update...">QuerySerializationList()</a>, sort objects by priority, and write the list to <em>replicasToSerialize</em>, optionally skipping objects with a lower serialization frequency If you hit your bandwidth limit when checking <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ae8b3676cfdd0080325034e129ce34aa9">SerializeParameters::bitsWrittenSoFar</a>, you can return RM3SR_DO_NOT_SERIALIZE for all remaining items </p>
<dl class="section note"><dt>Note</dt><dd>Only replicas written to replicasToSerialize are transmitted. Even if you returned RM3SR_SERIALIZED_ALWAYS a prior <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a50c8eeeff65c3c2ebb3680ed7c287a1f" title="Call interfaces, send data.">ReplicaManager3::Update()</a> cycle, the replica will not be transmitted if it is not in replicasToSerialize </dd>
<dd>
If you do not know what objects are candidates for serialization, you can use queryToSerializeReplicaList as a source for your filtering or sorting operations </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">replicasToSerialize</td><td>List of replicas to call QuerySerialization() on </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return true to use replicasToSerialize (replicasToSerialize may be empty if desired). Otherwise return false. </dd></dl>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00557">557</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="aa899bd4ac31198e8f22169e80cc4aeb1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int SLNet::Connection_RM3::Replica3LSRComp </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> *const &amp;&#160;</td>
          <td class="paramname"><em>replica3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d7/d35/struct_s_l_net_1_1_last_serialization_result">LastSerializationResult</a> *const &amp;&#160;</td>
          <td class="paramname"><em>data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a4d3aef2018b7c6fd7a9a6419f92e4a85"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::Connection_RM3::SendConstruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>newObjects</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>deletedObjects</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d2/db7/struct_s_l_net_1_1_p_r_o.xhtml">PRO</a>&#160;</td>
          <td class="paramname"><em>sendParameters</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d27/class_s_l_net_1_1_rak_peer_interface.xhtml">SLNet::RakPeerInterface</a> *&#160;</td>
          <td class="paramname"><em>rakPeer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>worldId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *&#160;</td>
          <td class="paramname"><em>replicaManager3</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="aea5fd8ce51ecf4c101a3def10cc2e9d3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga3c77f49d3ff6a39bb62cb2efd2d3474a">SendSerializeIfChangedResult</a> SLNet::Connection_RM3::SendSerialize </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">SLNet::Replica3</a> *&#160;</td>
          <td class="paramname"><em>replica</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>indicesToSend</em>[RM3_NUM_OUTPUT_BITSTREAM_CHANNELS], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a>&#160;</td>
          <td class="paramname"><em>serializationData</em>[RM3_NUM_OUTPUT_BITSTREAM_CHANNELS], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">SLNet::Time</a>&#160;</td>
          <td class="paramname"><em>timestamp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d2/db7/struct_s_l_net_1_1_p_r_o.xhtml">PRO</a>&#160;</td>
          <td class="paramname"><em>sendParameters</em>[RM3_NUM_OUTPUT_BITSTREAM_CHANNELS], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d27/class_s_l_net_1_1_rak_peer_interface.xhtml">SLNet::RakPeerInterface</a> *&#160;</td>
          <td class="paramname"><em>rakPeer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>worldId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">SLNet::Time</a>&#160;</td>
          <td class="paramname"><em>curTime</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a3168b8c5f566a043b6ff5a9b6fae16d5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::Connection_RM3::SendSerializeHeader </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">SLNet::Replica3</a> *&#160;</td>
          <td class="paramname"><em>replica</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">SLNet::Time</a>&#160;</td>
          <td class="paramname"><em>timestamp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>bs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="af574d36fe5ec51e236225fa523be85bc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga3c77f49d3ff6a39bb62cb2efd2d3474a">SendSerializeIfChangedResult</a> SLNet::Connection_RM3::SendSerializeIfChanged </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d7/d35/struct_s_l_net_1_1_last_serialization_result">LastSerializationResult</a> *&#160;</td>
          <td class="paramname"><em>lsr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d5/dad/struct_s_l_net_1_1_serialize_parameters">SerializeParameters</a> *&#160;</td>
          <td class="paramname"><em>sp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d27/class_s_l_net_1_1_rak_peer_interface.xhtml">SLNet::RakPeerInterface</a> *&#160;</td>
          <td class="paramname"><em>rakPeer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>worldId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *&#160;</td>
          <td class="paramname"><em>replicaManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">SLNet::Time</a>&#160;</td>
          <td class="paramname"><em>curTime</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a1e5a55149d3154f0f877deee0709a224"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::Connection_RM3::SendValidation </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d27/class_s_l_net_1_1_rak_peer_interface.xhtml">SLNet::RakPeerInterface</a> *&#160;</td>
          <td class="paramname"><em>rakPeer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td>
          <td class="paramname"><em>worldId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a0535b20761037f4321d6754b6ab52749"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::Connection_RM3::SerializeOnDownloadComplete </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>bitStream</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>When a new connection connects, after constructing and serialization all objects, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a0535b20761037f4321d6754b6ab52749">SerializeOnDownloadComplete()</a> is called </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">bitStream</td><td>Passed to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9ad54cc68d8b77d98d1eab0a0dc3d3f4">DeserializeOnDownloadComplete()</a> </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00481">481</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a23bcd093dee199713ed54a27b0778dd6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::Connection_RM3::SerializeOnDownloadStarted </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>bitStream</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>When a new connection connects, before sending any objects, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a23bcd093dee199713ed54a27b0778dd6">SerializeOnDownloadStarted()</a> is called </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">bitStream</td><td>Passed to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a7dd9e5a4b509be43c2ab5511b2b9d5a8">DeserializeOnDownloadStarted()</a> </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00473">473</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a9c68063bcf68cb10ea64d5374fea19fb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::Connection_RM3::ValidateLists </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *&#160;</td>
          <td class="paramname"><em>replicaManager</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h4 class="groupheader">Member Data Documentation</h4>
<a class="anchor" id="abcd7b1c49f8469720faeea5b0d53ac96"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml">DataStructures::OrderedList</a>&lt;<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a>*, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d7/d35/struct_s_l_net_1_1_last_serialization_result">LastSerializationResult</a>*, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#aa899bd4ac31198e8f22169e80cc4aeb1">Connection_RM3::Replica3LSRComp</a>&gt; SLNet::Connection_RM3::constructedReplicaList</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00675">675</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a7a6716520909ce3c242b446075096a7b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt;<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a>*&gt; SLNet::Connection_RM3::constructedReplicasCulled</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00690">690</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="aed1b15936e21d10828ff7c182b74bce6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt;<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a>*&gt; SLNet::Connection_RM3::destroyedReplicasCulled</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00690">690</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a088ad36e24e6e73b9791c7861da2f2ef"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d3/d87/class_data_structures_1_1_queue.xhtml">DataStructures::Queue</a>&lt;<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a>*&gt; SLNet::Connection_RM3::downloadGroup</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00695">695</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a4b9e198fb0c2a65874eab867dfdc5488"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::Connection_RM3::gotDownloadComplete</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00698">698</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a828a2e412d724ebe41856876941192b8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::Connection_RM3::groupConstructionAndSerialize</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00694">694</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="af04357537ff00adf0071363c524de3cd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> SLNet::Connection_RM3::guid</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00610">610</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a54ba577f3d4989e9d8a4046d5759f365"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::Connection_RM3::isFirstConstruction</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00601">601</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="af713225641af86fa0d4bd6e419858a0f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::Connection_RM3::isValidated</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00599">599</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a20844fc21eafa7a912de536931dd8db3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt;<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d7/d35/struct_s_l_net_1_1_last_serialization_result">LastSerializationResult</a>*&gt; SLNet::Connection_RM3::queryToConstructReplicaList</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00680">680</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a972afdf25ff2b49c59c0cc29db02e209"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt;<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d7/d35/struct_s_l_net_1_1_last_serialization_result">LastSerializationResult</a>*&gt; SLNet::Connection_RM3::queryToDestructReplicaList</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00687">687</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="ae087d4bf56421cef6c679f23022c796b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt;<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d7/d35/struct_s_l_net_1_1_last_serialization_result">LastSerializationResult</a>*&gt; SLNet::Connection_RM3::queryToSerializeReplicaList</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00684">684</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="ae4e674c816dad2d4af8272de4f7ff15a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> SLNet::Connection_RM3::systemAddress</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00609">609</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>

</div>
</div>
<a name="d3/d5b/class_s_l_net_1_1_replica3" id="d3/d5b/class_s_l_net_1_1_replica3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">class SLNet::Replica3</td>
        </tr>
      </table>
</div><div class="memdoc">
<div class="textblock"><p>Base class for your replicated objects for the <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3" title="System to help automate game object construction, destruction, and serialization.">ReplicaManager3</a> system. </p>
<p>To use, derive your class, or a member of your class, from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a>.<br/>
 </p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00847">847</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>
</div><div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="../../closed.png" alt="+"/> Inheritance diagram for SLNet::Replica3:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d7/db7/class_s_l_net_1_1_replica3__inherit__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<table class="memberdecls">
<tr><td colspan="2"><h3>Public Member Functions</h3></td></tr>
<tr class="memitem:ad4b3858552d4559604ec793fa3b6a2d2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ad4b3858552d4559604ec793fa3b6a2d2">Replica3</a> ()</td></tr>
<tr class="separator:ad4b3858552d4559604ec793fa3b6a2d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac707ce1ae46b9b3e28bf3a63869e472d"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ac707ce1ae46b9b3e28bf3a63869e472d">~Replica3</a> ()</td></tr>
<tr class="separator:ac707ce1ae46b9b3e28bf3a63869e472d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78976b7fd5bb43519ad123af18fe3924"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a78976b7fd5bb43519ad123af18fe3924">WriteAllocationID</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection, <a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *allocationIdBitstream) const =0</td></tr>
<tr class="memdesc:a78976b7fd5bb43519ad123af18fe3924"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write a unique identifer that can be read on a remote system to create an object of this same class.  <a href="#a78976b7fd5bb43519ad123af18fe3924"></a><br/></td></tr>
<tr class="separator:a78976b7fd5bb43519ad123af18fe3924"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9cd4c94d916baf34960fe4e396a9a402"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gadf975dd8a1352bc64cfa8f4de8054c48">RM3ConstructionState</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9cd4c94d916baf34960fe4e396a9a402">QueryConstruction</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *replicaManager3)=0</td></tr>
<tr class="memdesc:a9cd4c94d916baf34960fe4e396a9a402"><td class="mdescLeft">&#160;</td><td class="mdescRight">Ask if this object, which does not exist on <em>destinationConnection</em> should (now) be sent to that system.  <a href="#a9cd4c94d916baf34960fe4e396a9a402"></a><br/></td></tr>
<tr class="separator:a9cd4c94d916baf34960fe4e396a9a402"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9345f9d4ea34a9710114930da692e62b"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga77f11ba8783033d5b9644257cbb996d3">RM3DestructionState</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9345f9d4ea34a9710114930da692e62b">QueryDestruction</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *replicaManager3)</td></tr>
<tr class="memdesc:a9345f9d4ea34a9710114930da692e62b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Ask if this object, which does exist on <em>destinationConnection</em> should be removed from the remote system.  <a href="#a9345f9d4ea34a9710114930da692e62b"></a><br/></td></tr>
<tr class="separator:a9345f9d4ea34a9710114930da692e62b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2ee7d5a78ce055e365a2a303fd80718"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#af2ee7d5a78ce055e365a2a303fd80718">QueryRemoteConstruction</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *sourceConnection)=0</td></tr>
<tr class="memdesc:af2ee7d5a78ce055e365a2a303fd80718"><td class="mdescLeft">&#160;</td><td class="mdescRight">We're about to call <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a8bbab0efc22644f55e56c3d1371e1184" title="Read data written by Replica3::SerializeConstruction()">DeserializeConstruction()</a> on this <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a>. If <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#af2ee7d5a78ce055e365a2a303fd80718" title="We&#39;re about to call DeserializeConstruction() on this Replica3. If QueryRemoteConstruction() returns ...">QueryRemoteConstruction()</a> returns false, this object is deleted instead.  <a href="#af2ee7d5a78ce055e365a2a303fd80718"></a><br/></td></tr>
<tr class="separator:af2ee7d5a78ce055e365a2a303fd80718"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e7094465033130883953c483ee33451"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a5e7094465033130883953c483ee33451">QueryRelayDestruction</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">Connection_RM3</a> *sourceConnection) const </td></tr>
<tr class="memdesc:a5e7094465033130883953c483ee33451"><td class="mdescLeft">&#160;</td><td class="mdescRight">We got a message from a connection to destroy this replica Return true to automatically relay the destruction message to all our other connections For a client in client/server, it does not matter what this funtion returns For a server in client/server, this should normally return true For a peer in peer to peer, you can normally return false since the original destroying peer would have told all other peers about the destruction If a system gets a destruction command for an object that was already destroyed, the destruction message is ignored.  <a href="#a5e7094465033130883953c483ee33451"></a><br/></td></tr>
<tr class="separator:a5e7094465033130883953c483ee33451"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc5fe35f637eeb607f6b76de4a6372c0"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#adc5fe35f637eeb607f6b76de4a6372c0">SerializeConstruction</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *constructionBitstream, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection)=0</td></tr>
<tr class="memdesc:adc5fe35f637eeb607f6b76de4a6372c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write data to be sent only when the object is constructed on a remote system.  <a href="#adc5fe35f637eeb607f6b76de4a6372c0"></a><br/></td></tr>
<tr class="separator:adc5fe35f637eeb607f6b76de4a6372c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8bbab0efc22644f55e56c3d1371e1184"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a8bbab0efc22644f55e56c3d1371e1184">DeserializeConstruction</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *constructionBitstream, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *sourceConnection)=0</td></tr>
<tr class="memdesc:a8bbab0efc22644f55e56c3d1371e1184"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read data written by <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#adc5fe35f637eeb607f6b76de4a6372c0" title="Write data to be sent only when the object is constructed on a remote system.">Replica3::SerializeConstruction()</a>  <a href="#a8bbab0efc22644f55e56c3d1371e1184"></a><br/></td></tr>
<tr class="separator:a8bbab0efc22644f55e56c3d1371e1184"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e39158c90ff631c29a28571b2b1a7f9"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a6e39158c90ff631c29a28571b2b1a7f9">SerializeConstructionExisting</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *constructionBitstream, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection)</td></tr>
<tr class="separator:a6e39158c90ff631c29a28571b2b1a7f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70e54fd7594b331113f36850bd0f8cfd"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a70e54fd7594b331113f36850bd0f8cfd">DeserializeConstructionExisting</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *constructionBitstream, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *sourceConnection)</td></tr>
<tr class="separator:a70e54fd7594b331113f36850bd0f8cfd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c0c9520c8192bfd87d0c560d8182248"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9c0c9520c8192bfd87d0c560d8182248">SerializeDestruction</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *destructionBitstream, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection)=0</td></tr>
<tr class="memdesc:a9c0c9520c8192bfd87d0c560d8182248"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write extra data to send with the object deletion event, if desired.  <a href="#a9c0c9520c8192bfd87d0c560d8182248"></a><br/></td></tr>
<tr class="separator:a9c0c9520c8192bfd87d0c560d8182248"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a315725c68ed0864d84ef28c27e8271bd"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a315725c68ed0864d84ef28c27e8271bd">DeserializeDestruction</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *destructionBitstream, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *sourceConnection)=0</td></tr>
<tr class="memdesc:a315725c68ed0864d84ef28c27e8271bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read data written by <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9c0c9520c8192bfd87d0c560d8182248" title="Write extra data to send with the object deletion event, if desired.">Replica3::SerializeDestruction()</a>  <a href="#a315725c68ed0864d84ef28c27e8271bd"></a><br/></td></tr>
<tr class="separator:a315725c68ed0864d84ef28c27e8271bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac844b1645cadd2d16e82b221d8c94d3a"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga698075ced173fa417a7df5f9d1be15e8">SLNet::RM3ActionOnPopConnection</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ac844b1645cadd2d16e82b221d8c94d3a">QueryActionOnPopConnection</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *droppedConnection) const =0</td></tr>
<tr class="memdesc:ac844b1645cadd2d16e82b221d8c94d3a"><td class="mdescLeft">&#160;</td><td class="mdescRight">The system is asking what to do with this replica when the connection is dropped.  <a href="#ac844b1645cadd2d16e82b221d8c94d3a"></a><br/></td></tr>
<tr class="separator:ac844b1645cadd2d16e82b221d8c94d3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6f5188fa39c0465313f514ea8fa9196"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#aa6f5188fa39c0465313f514ea8fa9196">OnPoppedConnection</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *droppedConnection)</td></tr>
<tr class="memdesc:aa6f5188fa39c0465313f514ea8fa9196"><td class="mdescLeft">&#160;</td><td class="mdescRight">Notification called for each of our replicas when a connection is popped.  <a href="#aa6f5188fa39c0465313f514ea8fa9196"></a><br/></td></tr>
<tr class="separator:aa6f5188fa39c0465313f514ea8fa9196"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac15ca71b47ab97af83d249c6bba723db"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ac15ca71b47ab97af83d249c6bba723db">DeallocReplica</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *sourceConnection)=0</td></tr>
<tr class="memdesc:ac15ca71b47ab97af83d249c6bba723db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override with {delete this;}.  <a href="#ac15ca71b47ab97af83d249c6bba723db"></a><br/></td></tr>
<tr class="separator:ac15ca71b47ab97af83d249c6bba723db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a899d87b3aeb957648a049d1aba47c42a"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga134c0f5cbd0cb8c0182ffeeebb2aea59">SLNet::RM3QuerySerializationResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a899d87b3aeb957648a049d1aba47c42a">QuerySerialization</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection)=0</td></tr>
<tr class="memdesc:a899d87b3aeb957648a049d1aba47c42a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implement with <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a36f9383b90b1074b9bd2decf8761538b" title="Default call for QuerySerialization().">QuerySerialization_ClientSerializable()</a>, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a6e01c91c7563d2572a1b6e65311284df" title="Default call for QuerySerialization().">QuerySerialization_ServerSerializable()</a>, or <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a1493100baac7dc035d7519d0b97c02ff" title="Default call for QuerySerialization().">QuerySerialization_PeerToPeer()</a>  <a href="#a899d87b3aeb957648a049d1aba47c42a"></a><br/></td></tr>
<tr class="separator:a899d87b3aeb957648a049d1aba47c42a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77949227b670fd4194472b80886da28b"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a77949227b670fd4194472b80886da28b">OnUserReplicaPreSerializeTick</a> (void)</td></tr>
<tr class="memdesc:a77949227b670fd4194472b80886da28b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called for each replica owned by the user, once per Serialization tick, before <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a90a3755d677079ec3718ddd6f8df32f1" title="Serialize our class to a bitstream.">Serialize()</a> is called. If you want to do some kind of operation on the Replica objects that you own, just before Serialization(), then overload this function.  <a href="#a77949227b670fd4194472b80886da28b"></a><br/></td></tr>
<tr class="separator:a77949227b670fd4194472b80886da28b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90a3755d677079ec3718ddd6f8df32f1"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga4d0f10f0e557bd96237574321b79a68a">RM3SerializationResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a90a3755d677079ec3718ddd6f8df32f1">Serialize</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d5/dad/struct_s_l_net_1_1_serialize_parameters">SLNet::SerializeParameters</a> *serializeParameters)=0</td></tr>
<tr class="memdesc:a90a3755d677079ec3718ddd6f8df32f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Serialize our class to a bitstream.  <a href="#a90a3755d677079ec3718ddd6f8df32f1"></a><br/></td></tr>
<tr class="separator:a90a3755d677079ec3718ddd6f8df32f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c4cfd8f4ca3d7e96887bf3cce948fb1"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a4c4cfd8f4ca3d7e96887bf3cce948fb1">OnSerializeTransmission</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *bitStream, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection, <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> bitsPerChannel[<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#ab44c634dfee8b57213d26249218ea2cd">RM3_NUM_OUTPUT_BITSTREAM_CHANNELS</a>], <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">SLNet::Time</a> curTime)</td></tr>
<tr class="memdesc:a4c4cfd8f4ca3d7e96887bf3cce948fb1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when the class is actually transmitted via <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a90a3755d677079ec3718ddd6f8df32f1" title="Serialize our class to a bitstream.">Serialize()</a>  <a href="#a4c4cfd8f4ca3d7e96887bf3cce948fb1"></a><br/></td></tr>
<tr class="separator:a4c4cfd8f4ca3d7e96887bf3cce948fb1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e8f58fd06cbca3952e30bf5aa6e7845"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a5e8f58fd06cbca3952e30bf5aa6e7845">Deserialize</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#df/d99/struct_s_l_net_1_1_deserialize_parameters">SLNet::DeserializeParameters</a> *deserializeParameters)=0</td></tr>
<tr class="memdesc:a5e8f58fd06cbca3952e30bf5aa6e7845"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read what was written in <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a90a3755d677079ec3718ddd6f8df32f1" title="Serialize our class to a bitstream.">Serialize()</a>  <a href="#a5e8f58fd06cbca3952e30bf5aa6e7845"></a><br/></td></tr>
<tr class="separator:a5e8f58fd06cbca3952e30bf5aa6e7845"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7affedba5965fcd293b4d4670be076d5"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a7affedba5965fcd293b4d4670be076d5">PostSerializeConstruction</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *constructionBitstream, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection)</td></tr>
<tr class="memdesc:a7affedba5965fcd293b4d4670be076d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called after SerializeConstruction completes for all objects in a given update tick.<br/>
 Writes to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a4ba2ab9cf628ff626753aed043c389d9">PostDeserializeConstruction()</a>, which is called after all objects are created for a given Construction tick(). Override to send data to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a4ba2ab9cf628ff626753aed043c389d9">PostDeserializeConstruction()</a>, such as the NetworkID of other objects to resolve pointers to.  <a href="#a7affedba5965fcd293b4d4670be076d5"></a><br/></td></tr>
<tr class="separator:a7affedba5965fcd293b4d4670be076d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ba2ab9cf628ff626753aed043c389d9"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a4ba2ab9cf628ff626753aed043c389d9">PostDeserializeConstruction</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *constructionBitstream, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *sourceConnection)</td></tr>
<tr class="separator:a4ba2ab9cf628ff626753aed043c389d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8054ebd850ddec6e1e0540a30048349"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ae8054ebd850ddec6e1e0540a30048349">PostSerializeConstructionExisting</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *constructionBitstream, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection)</td></tr>
<tr class="memdesc:ae8054ebd850ddec6e1e0540a30048349"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a7affedba5965fcd293b4d4670be076d5" title="Called after SerializeConstruction completes for all objects in a given update tick.  Writes to PostDeserializeConstruction(), which is called after all objects are created for a given Construction tick(). Override to send data to PostDeserializeConstruction(), such as the NetworkID of other objects to resolve pointers to.">PostSerializeConstruction()</a>, but for objects that returned RM3CS_ALREADY_EXISTS_REMOTELY from QueryConstruction.  <a href="#ae8054ebd850ddec6e1e0540a30048349"></a><br/></td></tr>
<tr class="separator:ae8054ebd850ddec6e1e0540a30048349"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1b61529c7b73e02c993ecb61944e3c2"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ac1b61529c7b73e02c993ecb61944e3c2">PostDeserializeConstructionExisting</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *constructionBitstream, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *sourceConnection)</td></tr>
<tr class="memdesc:ac1b61529c7b73e02c993ecb61944e3c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a4ba2ab9cf628ff626753aed043c389d9">PostDeserializeConstruction()</a>, but for objects that returned RM3CS_ALREADY_EXISTS_REMOTELY from QueryConstruction.  <a href="#ac1b61529c7b73e02c993ecb61944e3c2"></a><br/></td></tr>
<tr class="separator:ac1b61529c7b73e02c993ecb61944e3c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13fb764296d4cee63f20b81c57f0e6a8"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a13fb764296d4cee63f20b81c57f0e6a8">PreDestruction</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *sourceConnection)</td></tr>
<tr class="separator:a13fb764296d4cee63f20b81c57f0e6a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3c2aa34f8ff187c5d97762cd002bfbc"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gadf975dd8a1352bc64cfa8f4de8054c48">RM3ConstructionState</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab3c2aa34f8ff187c5d97762cd002bfbc">QueryConstruction_ClientConstruction</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection, bool isThisTheServer)</td></tr>
<tr class="memdesc:ab3c2aa34f8ff187c5d97762cd002bfbc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default call for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9cd4c94d916baf34960fe4e396a9a402" title="Ask if this object, which does not exist on destinationConnection should (now) be sent to that system...">QueryConstruction()</a>.  <a href="#ab3c2aa34f8ff187c5d97762cd002bfbc"></a><br/></td></tr>
<tr class="separator:ab3c2aa34f8ff187c5d97762cd002bfbc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d2c0dabc915f531c90a3a723cb8b2da"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a1d2c0dabc915f531c90a3a723cb8b2da">QueryRemoteConstruction_ClientConstruction</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *sourceConnection, bool isThisTheServer)</td></tr>
<tr class="separator:a1d2c0dabc915f531c90a3a723cb8b2da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad0cbd467cf38dcd8e74f1c6aa2b2a2e"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gadf975dd8a1352bc64cfa8f4de8054c48">RM3ConstructionState</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#aad0cbd467cf38dcd8e74f1c6aa2b2a2e">QueryConstruction_ServerConstruction</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection, bool isThisTheServer)</td></tr>
<tr class="memdesc:aad0cbd467cf38dcd8e74f1c6aa2b2a2e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default call for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9cd4c94d916baf34960fe4e396a9a402" title="Ask if this object, which does not exist on destinationConnection should (now) be sent to that system...">QueryConstruction()</a>.  <a href="#aad0cbd467cf38dcd8e74f1c6aa2b2a2e"></a><br/></td></tr>
<tr class="separator:aad0cbd467cf38dcd8e74f1c6aa2b2a2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a034013381bd9934335e6e37aa65f8fde"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a034013381bd9934335e6e37aa65f8fde">QueryRemoteConstruction_ServerConstruction</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *sourceConnection, bool isThisTheServer)</td></tr>
<tr class="memdesc:a034013381bd9934335e6e37aa65f8fde"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default call for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#af2ee7d5a78ce055e365a2a303fd80718" title="We&#39;re about to call DeserializeConstruction() on this Replica3. If QueryRemoteConstruction() returns ...">QueryRemoteConstruction()</a>. Allow the server to create this object, but not the client.  <a href="#a034013381bd9934335e6e37aa65f8fde"></a><br/></td></tr>
<tr class="separator:a034013381bd9934335e6e37aa65f8fde"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8841b580b53b03d6adb1712f9b0f55d9"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gadf975dd8a1352bc64cfa8f4de8054c48">RM3ConstructionState</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a8841b580b53b03d6adb1712f9b0f55d9">QueryConstruction_PeerToPeer</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gab6ddc529b3713b27f8d9addde9114a7c">Replica3P2PMode</a> p2pMode=<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ggab6ddc529b3713b27f8d9addde9114a7ca913e6305dae6ce3163eda78b4c5bb64a">R3P2PM_SINGLE_OWNER</a>)</td></tr>
<tr class="memdesc:a8841b580b53b03d6adb1712f9b0f55d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default call for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9cd4c94d916baf34960fe4e396a9a402" title="Ask if this object, which does not exist on destinationConnection should (now) be sent to that system...">QueryConstruction()</a>.  <a href="#a8841b580b53b03d6adb1712f9b0f55d9"></a><br/></td></tr>
<tr class="separator:a8841b580b53b03d6adb1712f9b0f55d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc36beededae615df71857dfc535162c"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#abc36beededae615df71857dfc535162c">QueryRemoteConstruction_PeerToPeer</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *sourceConnection)</td></tr>
<tr class="memdesc:abc36beededae615df71857dfc535162c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default call for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#af2ee7d5a78ce055e365a2a303fd80718" title="We&#39;re about to call DeserializeConstruction() on this Replica3. If QueryRemoteConstruction() returns ...">QueryRemoteConstruction()</a>.  <a href="#abc36beededae615df71857dfc535162c"></a><br/></td></tr>
<tr class="separator:abc36beededae615df71857dfc535162c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36f9383b90b1074b9bd2decf8761538b"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga134c0f5cbd0cb8c0182ffeeebb2aea59">SLNet::RM3QuerySerializationResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a36f9383b90b1074b9bd2decf8761538b">QuerySerialization_ClientSerializable</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection, bool isThisTheServer)</td></tr>
<tr class="memdesc:a36f9383b90b1074b9bd2decf8761538b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default call for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a899d87b3aeb957648a049d1aba47c42a" title="Implement with QuerySerialization_ClientSerializable(), QuerySerialization_ServerSerializable(), or QuerySerialization_PeerToPeer()">QuerySerialization()</a>.  <a href="#a36f9383b90b1074b9bd2decf8761538b"></a><br/></td></tr>
<tr class="separator:a36f9383b90b1074b9bd2decf8761538b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e01c91c7563d2572a1b6e65311284df"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga134c0f5cbd0cb8c0182ffeeebb2aea59">SLNet::RM3QuerySerializationResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a6e01c91c7563d2572a1b6e65311284df">QuerySerialization_ServerSerializable</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection, bool isThisTheServer)</td></tr>
<tr class="memdesc:a6e01c91c7563d2572a1b6e65311284df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default call for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a899d87b3aeb957648a049d1aba47c42a" title="Implement with QuerySerialization_ClientSerializable(), QuerySerialization_ServerSerializable(), or QuerySerialization_PeerToPeer()">QuerySerialization()</a>.  <a href="#a6e01c91c7563d2572a1b6e65311284df"></a><br/></td></tr>
<tr class="separator:a6e01c91c7563d2572a1b6e65311284df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1493100baac7dc035d7519d0b97c02ff"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga134c0f5cbd0cb8c0182ffeeebb2aea59">SLNet::RM3QuerySerializationResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a1493100baac7dc035d7519d0b97c02ff">QuerySerialization_PeerToPeer</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gab6ddc529b3713b27f8d9addde9114a7c">Replica3P2PMode</a> p2pMode=<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ggab6ddc529b3713b27f8d9addde9114a7ca913e6305dae6ce3163eda78b4c5bb64a">R3P2PM_SINGLE_OWNER</a>)</td></tr>
<tr class="memdesc:a1493100baac7dc035d7519d0b97c02ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default call for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a899d87b3aeb957648a049d1aba47c42a" title="Implement with QuerySerialization_ClientSerializable(), QuerySerialization_ServerSerializable(), or QuerySerialization_PeerToPeer()">QuerySerialization()</a>.  <a href="#a1493100baac7dc035d7519d0b97c02ff"></a><br/></td></tr>
<tr class="separator:a1493100baac7dc035d7519d0b97c02ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59072625002d4878a4cd701ed616304b"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga698075ced173fa417a7df5f9d1be15e8">RM3ActionOnPopConnection</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a59072625002d4878a4cd701ed616304b">QueryActionOnPopConnection_Client</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *droppedConnection) const </td></tr>
<tr class="memdesc:a59072625002d4878a4cd701ed616304b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default: If we are a client, and the connection is lost, delete the server's objects.  <a href="#a59072625002d4878a4cd701ed616304b"></a><br/></td></tr>
<tr class="separator:a59072625002d4878a4cd701ed616304b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab92e9826218282c083174e015385ef65"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga698075ced173fa417a7df5f9d1be15e8">RM3ActionOnPopConnection</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab92e9826218282c083174e015385ef65">QueryActionOnPopConnection_Server</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *droppedConnection) const </td></tr>
<tr class="memdesc:ab92e9826218282c083174e015385ef65"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default: If we are a server, and the connection is lost, delete the client's objects and broadcast the destruction.  <a href="#ab92e9826218282c083174e015385ef65"></a><br/></td></tr>
<tr class="separator:ab92e9826218282c083174e015385ef65"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7f829294c60852632331337deb9083b"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga698075ced173fa417a7df5f9d1be15e8">RM3ActionOnPopConnection</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#af7f829294c60852632331337deb9083b">QueryActionOnPopConnection_PeerToPeer</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *droppedConnection) const </td></tr>
<tr class="memdesc:af7f829294c60852632331337deb9083b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default: If we are a peer, and the connection is lost, delete the peer's objects.  <a href="#af7f829294c60852632331337deb9083b"></a><br/></td></tr>
<tr class="separator:af7f829294c60852632331337deb9083b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5096b364b6e47f5dc3e49734208fbd0"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab5096b364b6e47f5dc3e49734208fbd0">BroadcastDestruction</a> (void)</td></tr>
<tr class="separator:ab5096b364b6e47f5dc3e49734208fbd0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4aaf7cc5690fb3493cae95641f5e7213"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a4aaf7cc5690fb3493cae95641f5e7213">GetCreatingSystemGUID</a> (void) const </td></tr>
<tr class="separator:a4aaf7cc5690fb3493cae95641f5e7213"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d1b5df1f2ed5af6f18619c509cefb77"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a7d1b5df1f2ed5af6f18619c509cefb77">WasReferenced</a> (void) const </td></tr>
<tr class="separator:a7d1b5df1f2ed5af6f18619c509cefb77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_class_s_l_net_1_1_network_i_d_object"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_class_s_l_net_1_1_network_i_d_object')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../db/d6d/class_s_l_net_1_1_network_i_d_object.xhtml">SLNet::NetworkIDObject</a></td></tr>
<tr class="memitem:a5144a4e252f8cbabb96597a0a4ab9585 inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d6d/class_s_l_net_1_1_network_i_d_object.xhtml#a5144a4e252f8cbabb96597a0a4ab9585">NetworkIDObject</a> ()</td></tr>
<tr class="separator:a5144a4e252f8cbabb96597a0a4ab9585 inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9c88e33440facce2589c023bbe7e21f inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d6d/class_s_l_net_1_1_network_i_d_object.xhtml#ae9c88e33440facce2589c023bbe7e21f">~NetworkIDObject</a> ()</td></tr>
<tr class="separator:ae9c88e33440facce2589c023bbe7e21f inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f1b74caa0ccc03c590be9ce363bf98d inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d6d/class_s_l_net_1_1_network_i_d_object.xhtml#a0f1b74caa0ccc03c590be9ce363bf98d">SetNetworkIDManager</a> (<a class="el" href="../../d9/dbd/class_s_l_net_1_1_network_i_d_manager.xhtml">NetworkIDManager</a> *manager)</td></tr>
<tr class="separator:a0f1b74caa0ccc03c590be9ce363bf98d inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70b4753f2b55dece5e08fc7122f5fb0a inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d9/dbd/class_s_l_net_1_1_network_i_d_manager.xhtml">NetworkIDManager</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d6d/class_s_l_net_1_1_network_i_d_object.xhtml#a70b4753f2b55dece5e08fc7122f5fb0a">GetNetworkIDManager</a> (void) const </td></tr>
<tr class="memdesc:a70b4753f2b55dece5e08fc7122f5fb0a inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns what was passed to SetNetworkIDManager.  <a href="#a70b4753f2b55dece5e08fc7122f5fb0a"></a><br/></td></tr>
<tr class="separator:a70b4753f2b55dece5e08fc7122f5fb0a inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d98d33a63964e2c7b566e472c121a6d inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#aa616a13e58b2ffd2c3161609610b256d">NetworkID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d6d/class_s_l_net_1_1_network_i_d_object.xhtml#a1d98d33a63964e2c7b566e472c121a6d">GetNetworkID</a> (void)</td></tr>
<tr class="separator:a1d98d33a63964e2c7b566e472c121a6d inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61d97a28ee8a5336fd9f55165c401a11 inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d6d/class_s_l_net_1_1_network_i_d_object.xhtml#a61d97a28ee8a5336fd9f55165c401a11">SetNetworkID</a> (<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#aa616a13e58b2ffd2c3161609610b256d">NetworkID</a> id)</td></tr>
<tr class="separator:a61d97a28ee8a5336fd9f55165c401a11 inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48e4297abc90c622b9647053356feb82 inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d6d/class_s_l_net_1_1_network_i_d_object.xhtml#a48e4297abc90c622b9647053356feb82">SetParent</a> (void *_parent)</td></tr>
<tr class="separator:a48e4297abc90c622b9647053356feb82 inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6d1dd6b4647f677b9c5a0031940d0a6 inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memItemLeft" align="right" valign="top">virtual void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d6d/class_s_l_net_1_1_network_i_d_object.xhtml#aa6d1dd6b4647f677b9c5a0031940d0a6">GetParent</a> (void) const </td></tr>
<tr class="separator:aa6d1dd6b4647f677b9c5a0031940d0a6 inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><h3>Public Attributes</h3></td></tr>
<tr class="memitem:af4735cc644d4142a5cbf609603abc0dd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#af4735cc644d4142a5cbf609603abc0dd">creatingSystemGUID</a></td></tr>
<tr class="separator:af4735cc644d4142a5cbf609603abc0dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb5f894caecd98383a50ebd7a56c9f45"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#adb5f894caecd98383a50ebd7a56c9f45">deletingSystemGUID</a></td></tr>
<tr class="memdesc:adb5f894caecd98383a50ebd7a56c9f45"><td class="mdescLeft">&#160;</td><td class="mdescRight">GUID of the system that caused the item to send a deletion command over the network.  <a href="#adb5f894caecd98383a50ebd7a56c9f45"></a><br/></td></tr>
<tr class="separator:adb5f894caecd98383a50ebd7a56c9f45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a330d9d27af5c0ae01dbf623456d5a3b4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a330d9d27af5c0ae01dbf623456d5a3b4">replicaManager</a></td></tr>
<tr class="separator:a330d9d27af5c0ae01dbf623456d5a3b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc114a79c424308febcb735fd711f304"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#dd/da8/struct_s_l_net_1_1_last_serialization_result_b_s">LastSerializationResultBS</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#abc114a79c424308febcb735fd711f304">lastSentSerialization</a></td></tr>
<tr class="separator:abc114a79c424308febcb735fd711f304"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a454a198e8ac91ea9ea06cae70d023b76"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a454a198e8ac91ea9ea06cae70d023b76">forceSendUntilNextUpdate</a></td></tr>
<tr class="separator:a454a198e8ac91ea9ea06cae70d023b76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68f9516df7ca933abf3e308376650b1c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d7/d35/struct_s_l_net_1_1_last_serialization_result">LastSerializationResult</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a68f9516df7ca933abf3e308376650b1c">lsr</a></td></tr>
<tr class="separator:a68f9516df7ca933abf3e308376650b1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1949539d341db2cf76a2bc82d7f21fc7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../df/df2/_native_types_8h.xhtml#a6eb1e68cc391dd753bc8ce896dbb8315">uint32_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a1949539d341db2cf76a2bc82d7f21fc7">referenceIndex</a></td></tr>
<tr class="separator:a1949539d341db2cf76a2bc82d7f21fc7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pro_attribs_class_s_l_net_1_1_network_i_d_object"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_class_s_l_net_1_1_network_i_d_object')"><img src="../../closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="../../db/d6d/class_s_l_net_1_1_network_i_d_object.xhtml">SLNet::NetworkIDObject</a></td></tr>
<tr class="memitem:a62a653fcb9f81171a2100f409cc0ccba inherit pro_attribs_class_s_l_net_1_1_network_i_d_object"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#aa616a13e58b2ffd2c3161609610b256d">NetworkID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d6d/class_s_l_net_1_1_network_i_d_object.xhtml#a62a653fcb9f81171a2100f409cc0ccba">networkID</a></td></tr>
<tr class="memdesc:a62a653fcb9f81171a2100f409cc0ccba inherit pro_attribs_class_s_l_net_1_1_network_i_d_object"><td class="mdescLeft">&#160;</td><td class="mdescRight">The network ID of this object.  <a href="#a62a653fcb9f81171a2100f409cc0ccba"></a><br/></td></tr>
<tr class="separator:a62a653fcb9f81171a2100f409cc0ccba inherit pro_attribs_class_s_l_net_1_1_network_i_d_object"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0932af4fc1002805d02283370d63da4 inherit pro_attribs_class_s_l_net_1_1_network_i_d_object"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dbd/class_s_l_net_1_1_network_i_d_manager.xhtml">NetworkIDManager</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d6d/class_s_l_net_1_1_network_i_d_object.xhtml#af0932af4fc1002805d02283370d63da4">networkIDManager</a></td></tr>
<tr class="separator:af0932af4fc1002805d02283370d63da4 inherit pro_attribs_class_s_l_net_1_1_network_i_d_object"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e614cffca5b18a7cda522796eec5ec8 inherit pro_attribs_class_s_l_net_1_1_network_i_d_object"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d6d/class_s_l_net_1_1_network_i_d_object.xhtml#a3e614cffca5b18a7cda522796eec5ec8">parent</a></td></tr>
<tr class="memdesc:a3e614cffca5b18a7cda522796eec5ec8 inherit pro_attribs_class_s_l_net_1_1_network_i_d_object"><td class="mdescLeft">&#160;</td><td class="mdescRight">The parent set by <a class="el" href="../../db/d6d/class_s_l_net_1_1_network_i_d_object.xhtml#a48e4297abc90c622b9647053356feb82">SetParent()</a>  <a href="#a3e614cffca5b18a7cda522796eec5ec8"></a><br/></td></tr>
<tr class="separator:a3e614cffca5b18a7cda522796eec5ec8 inherit pro_attribs_class_s_l_net_1_1_network_i_d_object"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a2e914b251ae251a27b0f6bfd7c3414 inherit pro_attribs_class_s_l_net_1_1_network_i_d_object"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../db/d6d/class_s_l_net_1_1_network_i_d_object.xhtml">NetworkIDObject</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d6d/class_s_l_net_1_1_network_i_d_object.xhtml#a2a2e914b251ae251a27b0f6bfd7c3414">nextInstanceForNetworkIDManager</a></td></tr>
<tr class="separator:a2a2e914b251ae251a27b0f6bfd7c3414 inherit pro_attribs_class_s_l_net_1_1_network_i_d_object"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h4 class="groupheader">Constructor &amp; Destructor Documentation</h4>
<a class="anchor" id="ad4b3858552d4559604ec793fa3b6a2d2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SLNet::Replica3::Replica3 </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="ac707ce1ae46b9b3e28bf3a63869e472d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual SLNet::Replica3::~Replica3 </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Before deleting a local instance of <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a>, call <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab5096b364b6e47f5dc3e49734208fbd0">Replica3::BroadcastDestruction()</a> for the deletion notification to go out on the network. It is not necessary to call <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a71365c215814a8926b3f13e95fe9e5a0" title="Removes a replicated object from the system.">ReplicaManager3::Dereference()</a>, as this happens automatically in the destructor </p>

</div>
</div>
<h4 class="groupheader">Member Function Documentation</h4>
<a class="anchor" id="ab5096b364b6e47f5dc3e49734208fbd0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::Replica3::BroadcastDestruction </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Call to send a network message to delete this object on other systems.<br/>
 Call it before deleting the object </p>

</div>
</div>
<a class="anchor" id="ac15ca71b47ab97af83d249c6bba723db"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::Replica3::DeallocReplica </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>sourceConnection</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override with {delete this;}. </p>
<ol>
<li>
Got a remote message to delete this object which passed <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a315725c68ed0864d84ef28c27e8271bd" title="Read data written by Replica3::SerializeDestruction()">DeserializeDestruction()</a>, OR </li>
<li>
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a5a9827b1942a87ab2f797d32a6365fbb" title="Enable or disable automatically assigning connections to new instances of Connection_RM3.">ReplicaManager3::SetAutoManageConnections()</a> was called autoDestroy true (which is the default setting), and a remote system that owns this object disconnected) OR &lt;&gt; <br/>
 Override with {delete this;} to actually delete the object (and any other processing you wish).<br/>
 If you don't want to delete the object, just do nothing, however, the system will not know this. You may wish to call Dereference() if the object should no longer be networked, but remain in memory. You are responsible for deleting it yoruself later.<br/>
 destructionBitstream may be 0 if the object was deleted locally </li>
</ol>

<p>Implemented in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#afe19935fcfea23a3d3527e24ff45cca9">SLNet::Replica3Composite&lt; parent_type &gt;</a>.</p>

</div>
</div>
<a class="anchor" id="a5e8f58fd06cbca3952e30bf5aa6e7845"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::Replica3::Deserialize </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#df/d99/struct_s_l_net_1_1_deserialize_parameters">SLNet::DeserializeParameters</a> *&#160;</td>
          <td class="paramname"><em>deserializeParameters</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Read what was written in <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a90a3755d677079ec3718ddd6f8df32f1" title="Serialize our class to a bitstream.">Serialize()</a> </p>
<p>Reads the contents of the class from SerializationParamters::serializationBitstream.<br/>
 Called whenever <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a90a3755d677079ec3718ddd6f8df32f1" title="Serialize our class to a bitstream.">Serialize()</a> is called with different data from the last send. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">serializationBitstream</td><td>Bitstream passed to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a90a3755d677079ec3718ddd6f8df32f1" title="Serialize our class to a bitstream.">Serialize()</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">timeStamp</td><td>0 if unused, else contains the time the message originated on the remote system </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sourceConnection</td><td>Which system sent to us </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a05c471b6c6d744bb487bd836b48cf228">SLNet::Replica3Composite&lt; parent_type &gt;</a>.</p>

</div>
</div>
<a class="anchor" id="a8bbab0efc22644f55e56c3d1371e1184"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool SLNet::Replica3::DeserializeConstruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>constructionBitstream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>sourceConnection</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Read data written by <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#adc5fe35f637eeb607f6b76de4a6372c0" title="Write data to be sent only when the object is constructed on a remote system.">Replica3::SerializeConstruction()</a> </p>
<p>Reads whatever data was written to <em>constructionBitstream</em> in <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#adc5fe35f637eeb607f6b76de4a6372c0" title="Write data to be sent only when the object is constructed on a remote system.">Replica3::SerializeConstruction()</a> </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">constructionBitstream</td><td>Bitstream written to in <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#adc5fe35f637eeb607f6b76de4a6372c0" title="Write data to be sent only when the object is constructed on a remote system.">Replica3::SerializeConstruction()</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sourceConnection</td><td>System that sent us this network message. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true to accept construction of the object. false to reject, in which case the object will be deleted via <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ac15ca71b47ab97af83d249c6bba723db" title="Override with {delete this;}.">Replica3::DeallocReplica()</a> </dd></dl>

<p>Implemented in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#ad442eea446ad187681d8812eb5c66c43">SLNet::Replica3Composite&lt; parent_type &gt;</a>.</p>

</div>
</div>
<a class="anchor" id="a70e54fd7594b331113f36850bd0f8cfd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::Replica3::DeserializeConstructionExisting </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>constructionBitstream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>sourceConnection</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Same as <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a8bbab0efc22644f55e56c3d1371e1184" title="Read data written by Replica3::SerializeConstruction()">DeserializeConstruction()</a>, but for an object that already exists on the remote system. Used if you return RM3CS_ALREADY_EXISTS_REMOTELY from QueryConstruction </p>

<p>Reimplemented in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a5a01b24d92cae0411113b3c9930f209a">SLNet::Replica3Composite&lt; parent_type &gt;</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00924">924</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a315725c68ed0864d84ef28c27e8271bd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool SLNet::Replica3::DeserializeDestruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>destructionBitstream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>sourceConnection</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Read data written by <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9c0c9520c8192bfd87d0c560d8182248" title="Write extra data to send with the object deletion event, if desired.">Replica3::SerializeDestruction()</a> </p>
<p>Return true to delete the object. <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab5096b364b6e47f5dc3e49734208fbd0">BroadcastDestruction()</a> will be called automatically, followed by <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a71365c215814a8926b3f13e95fe9e5a0" title="Removes a replicated object from the system.">ReplicaManager3::Dereference</a>.<br/>
 Return false to not delete it. If you delete it at a later point, you are responsible for calling <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab5096b364b6e47f5dc3e49734208fbd0">BroadcastDestruction()</a> yourself. </p>

<p>Implemented in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a59d5c8e512a08cfe6f1ce592268fc05e">SLNet::Replica3Composite&lt; parent_type &gt;</a>.</p>

</div>
</div>
<a class="anchor" id="a4aaf7cc5690fb3493cae95641f5e7213"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> SLNet::Replica3::GetCreatingSystemGUID </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>creatingSystemGUID is set the first time Reference() is called, or if we get the object from another system </p>
<dl class="section return"><dt>Returns</dt><dd>System that originally created this object </dd></dl>

</div>
</div>
<a class="anchor" id="aa6f5188fa39c0465313f514ea8fa9196"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::Replica3::OnPoppedConnection </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>droppedConnection</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Notification called for each of our replicas when a connection is popped. </p>

<p>Reimplemented in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a2ba44d7be986fc9a2a65832d1fea644c">SLNet::Replica3Composite&lt; parent_type &gt;</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00943">943</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a4c4cfd8f4ca3d7e96887bf3cce948fb1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::Replica3::OnSerializeTransmission </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>bitStream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a>&#160;</td>
          <td class="paramname"><em>bitsPerChannel</em>[RM3_NUM_OUTPUT_BITSTREAM_CHANNELS], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">SLNet::Time</a>&#160;</td>
          <td class="paramname"><em>curTime</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when the class is actually transmitted via <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a90a3755d677079ec3718ddd6f8df32f1" title="Serialize our class to a bitstream.">Serialize()</a> </p>
<p>Use to track how much bandwidth this class it taking </p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00979">979</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a77949227b670fd4194472b80886da28b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::Replica3::OnUserReplicaPreSerializeTick </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called for each replica owned by the user, once per Serialization tick, before <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a90a3755d677079ec3718ddd6f8df32f1" title="Serialize our class to a bitstream.">Serialize()</a> is called. If you want to do some kind of operation on the Replica objects that you own, just before Serialization(), then overload this function. </p>

<p>Reimplemented in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a4ca87ca259b10100d3bc1557379e32b4">SLNet::Replica3Composite&lt; parent_type &gt;</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00966">966</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a4ba2ab9cf628ff626753aed043c389d9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::Replica3::PostDeserializeConstruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>constructionBitstream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>sourceConnection</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Called after DeserializeConstruction completes for all objects in a given update tick.<br/>
 This is used to resolve dependency chains, where two objects would refer to each other in DeserializeConstruction, yet one had not been constructed yet In <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a4ba2ab9cf628ff626753aed043c389d9">PostDeserializeConstruction()</a>, you know that all objects have already been created, so can resolve NetworkIDs to pointers safely. You can also use it to trigger some sort of event when you know the object has completed deserialization. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">constructionBitstream</td><td><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a> written in <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a7affedba5965fcd293b4d4670be076d5" title="Called after SerializeConstruction completes for all objects in a given update tick.  Writes to PostDeserializeConstruction(), which is called after all objects are created for a given Construction tick(). Override to send data to PostDeserializeConstruction(), such as the NetworkID of other objects to resolve pointers to.">PostSerializeConstruction()</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sourceConnection</td><td>System that sent us this network message. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#abde90440a05ad0a6b7593f20456cfb78">SLNet::Replica3Composite&lt; parent_type &gt;</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01000">1000</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="ac1b61529c7b73e02c993ecb61944e3c2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::Replica3::PostDeserializeConstructionExisting </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>constructionBitstream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>sourceConnection</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Same as <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a4ba2ab9cf628ff626753aed043c389d9">PostDeserializeConstruction()</a>, but for objects that returned RM3CS_ALREADY_EXISTS_REMOTELY from QueryConstruction. </p>

<p>Reimplemented in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a091313e4eb8fa0a3a2a5e630a29eb0e2">SLNet::Replica3Composite&lt; parent_type &gt;</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01006">1006</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a7affedba5965fcd293b4d4670be076d5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::Replica3::PostSerializeConstruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>constructionBitstream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called after SerializeConstruction completes for all objects in a given update tick.<br/>
 Writes to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a4ba2ab9cf628ff626753aed043c389d9">PostDeserializeConstruction()</a>, which is called after all objects are created for a given Construction tick(). Override to send data to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a4ba2ab9cf628ff626753aed043c389d9">PostDeserializeConstruction()</a>, such as the NetworkID of other objects to resolve pointers to. </p>

<p>Reimplemented in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#aa0ece5bfe5d6e0298f978e92bb794556">SLNet::Replica3Composite&lt; parent_type &gt;</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00992">992</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="ae8054ebd850ddec6e1e0540a30048349"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::Replica3::PostSerializeConstructionExisting </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>constructionBitstream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Same as <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a7affedba5965fcd293b4d4670be076d5" title="Called after SerializeConstruction completes for all objects in a given update tick.  Writes to PostDeserializeConstruction(), which is called after all objects are created for a given Construction tick(). Override to send data to PostDeserializeConstruction(), such as the NetworkID of other objects to resolve pointers to.">PostSerializeConstruction()</a>, but for objects that returned RM3CS_ALREADY_EXISTS_REMOTELY from QueryConstruction. </p>

<p>Reimplemented in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#abc3e0001f3169e5ceb7cc16fd7399da8">SLNet::Replica3Composite&lt; parent_type &gt;</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01003">1003</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a13fb764296d4cee63f20b81c57f0e6a8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::Replica3::PreDestruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>sourceConnection</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Called after DeserializeDestruction completes for the object successfully, but obviously before the object is deleted.<br/>
 Override to trigger some sort of event when you know the object has completed destruction. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sourceConnection</td><td>System that sent us this network message. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a648a8ec3efa4267b793aa525812e1575">SLNet::Replica3Composite&lt; parent_type &gt;</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01011">1011</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="ac844b1645cadd2d16e82b221d8c94d3a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga698075ced173fa417a7df5f9d1be15e8">SLNet::RM3ActionOnPopConnection</a> SLNet::Replica3::QueryActionOnPopConnection </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>droppedConnection</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The system is asking what to do with this replica when the connection is dropped. </p>
<p>Return QueryActionOnPopConnection_Client, QueryActionOnPopConnection_Server, or QueryActionOnPopConnection_PeerToPeer </p>

<p>Implemented in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#aa95265145a7464dbd8d33a8cb433814d">SLNet::Replica3Composite&lt; parent_type &gt;</a>.</p>

</div>
</div>
<a class="anchor" id="a59072625002d4878a4cd701ed616304b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga698075ced173fa417a7df5f9d1be15e8">RM3ActionOnPopConnection</a> SLNet::Replica3::QueryActionOnPopConnection_Client </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>droppedConnection</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default: If we are a client, and the connection is lost, delete the server's objects. </p>

</div>
</div>
<a class="anchor" id="af7f829294c60852632331337deb9083b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga698075ced173fa417a7df5f9d1be15e8">RM3ActionOnPopConnection</a> SLNet::Replica3::QueryActionOnPopConnection_PeerToPeer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>droppedConnection</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default: If we are a peer, and the connection is lost, delete the peer's objects. </p>

</div>
</div>
<a class="anchor" id="ab92e9826218282c083174e015385ef65"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga698075ced173fa417a7df5f9d1be15e8">RM3ActionOnPopConnection</a> SLNet::Replica3::QueryActionOnPopConnection_Server </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>droppedConnection</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default: If we are a server, and the connection is lost, delete the client's objects and broadcast the destruction. </p>

</div>
</div>
<a class="anchor" id="a9cd4c94d916baf34960fe4e396a9a402"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gadf975dd8a1352bc64cfa8f4de8054c48">RM3ConstructionState</a> SLNet::Replica3::QueryConstruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *&#160;</td>
          <td class="paramname"><em>replicaManager3</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Ask if this object, which does not exist on <em>destinationConnection</em> should (now) be sent to that system. </p>
<p>If ReplicaManager3::QueryConstructionMode() returns QUERY_CONNECTION_FOR_REPLICA_LIST or QUERY_REPLICA_FOR_CONSTRUCTION_AND_DESTRUCTION (default), then QueyrConstruction() is called once per tick from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a50c8eeeff65c3c2ebb3680ed7c287a1f" title="Call interfaces, send data.">ReplicaManager3::Update()</a> to determine if an object should exist on a given system.<br/>
 Based on the return value, a network message may be sent to the other system to create the object.<br/>
 If QueryConstructionMode() is overriden to return QUERY_CONNECTION_FOR_REPLICA_LIST, this function is unused.<br/>
 </p>
<dl class="section note"><dt>Note</dt><dd>Defaults are provided: <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a8841b580b53b03d6adb1712f9b0f55d9" title="Default call for QueryConstruction().">QueryConstruction_PeerToPeer()</a>, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#aad0cbd467cf38dcd8e74f1c6aa2b2a2e" title="Default call for QueryConstruction().">QueryConstruction_ServerConstruction()</a>, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab3c2aa34f8ff187c5d97762cd002bfbc" title="Default call for QueryConstruction().">QueryConstruction_ClientConstruction()</a>. Return one of these functions for a working default for the relevant topology. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">destinationConnection</td><td>Which system we will send to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">replicaManager3</td><td>Plugin instance for this <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>What action to take </dd></dl>

<p>Implemented in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#acc4616f18d9526a0554ef72025bd92e2">SLNet::Replica3Composite&lt; parent_type &gt;</a>.</p>

</div>
</div>
<a class="anchor" id="ab3c2aa34f8ff187c5d97762cd002bfbc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gadf975dd8a1352bc64cfa8f4de8054c48">RM3ConstructionState</a> SLNet::Replica3::QueryConstruction_ClientConstruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>isThisTheServer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default call for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9cd4c94d916baf34960fe4e396a9a402" title="Ask if this object, which does not exist on destinationConnection should (now) be sent to that system...">QueryConstruction()</a>. </p>
<p>Both the client and the server is allowed to create this object. The network topology is client/server </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">destinationConnection</td><td>destinationConnection parameter passed to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9cd4c94d916baf34960fe4e396a9a402" title="Ask if this object, which does not exist on destinationConnection should (now) be sent to that system...">QueryConstruction()</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">isThisTheServer</td><td>True if this system is the server, false if not. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8841b580b53b03d6adb1712f9b0f55d9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gadf975dd8a1352bc64cfa8f4de8054c48">RM3ConstructionState</a> SLNet::Replica3::QueryConstruction_PeerToPeer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gab6ddc529b3713b27f8d9addde9114a7c">Replica3P2PMode</a>&#160;</td>
          <td class="paramname"><em>p2pMode</em> = <code><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ggab6ddc529b3713b27f8d9addde9114a7ca913e6305dae6ce3163eda78b4c5bb64a">R3P2PM_SINGLE_OWNER</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default call for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9cd4c94d916baf34960fe4e396a9a402" title="Ask if this object, which does not exist on destinationConnection should (now) be sent to that system...">QueryConstruction()</a>. </p>
<p>All clients are allowed to create all objects. The object is not relayed when remotely created </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">destinationConnection</td><td>destinationConnection parameter passed to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9cd4c94d916baf34960fe4e396a9a402" title="Ask if this object, which does not exist on destinationConnection should (now) be sent to that system...">QueryConstruction()</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">p2pMode</td><td>If controlled only by this system ever, pass R3P2PM_SINGLE_OWNER. Otherwise pass R3P2PM_MULTI_OWNER_CURRENTLY_AUTHORITATIVE or R3P2PM_MULTI_OWNER_NOT_CURRENTLY_AUTHORITATIVE </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aad0cbd467cf38dcd8e74f1c6aa2b2a2e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gadf975dd8a1352bc64cfa8f4de8054c48">RM3ConstructionState</a> SLNet::Replica3::QueryConstruction_ServerConstruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>isThisTheServer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default call for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9cd4c94d916baf34960fe4e396a9a402" title="Ask if this object, which does not exist on destinationConnection should (now) be sent to that system...">QueryConstruction()</a>. </p>
<p>Only the server is allowed to create this object. The network topology is client/server </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">destinationConnection</td><td>destinationConnection parameter passed to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9cd4c94d916baf34960fe4e396a9a402" title="Ask if this object, which does not exist on destinationConnection should (now) be sent to that system...">QueryConstruction()</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">isThisTheServer</td><td>True if this system is the server, false if not. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9345f9d4ea34a9710114930da692e62b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga77f11ba8783033d5b9644257cbb996d3">RM3DestructionState</a> SLNet::Replica3::QueryDestruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *&#160;</td>
          <td class="paramname"><em>replicaManager3</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Ask if this object, which does exist on <em>destinationConnection</em> should be removed from the remote system. </p>
<p>If ReplicaManager3::QueryConstructionMode() returns QUERY_REPLICA_FOR_CONSTRUCTION_AND_DESTRUCTION (default), then <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9345f9d4ea34a9710114930da692e62b" title="Ask if this object, which does exist on destinationConnection should be removed from the remote syste...">QueryDestruction()</a> is called once per tick from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a50c8eeeff65c3c2ebb3680ed7c287a1f" title="Call interfaces, send data.">ReplicaManager3::Update()</a> to determine if an object that exists on a remote system should be destroyed for a given system.<br/>
 Based on the return value, a network message may be sent to the other system to destroy the object.<br/>
 Note that you can also destroy objects with <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab5096b364b6e47f5dc3e49734208fbd0">BroadcastDestruction()</a>, so this function is not useful unless you plan to delete objects for only a particular connection.<br/>
 If QueryConstructionMode() is overriden to return QUERY_CONNECTION_FOR_REPLICA_LIST, this function is unused.<br/>
 </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">destinationConnection</td><td>Which system we will send to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">replicaManager3</td><td>Plugin instance for this <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>What action to take. Only RM3CS_SEND_DESTRUCTION does anything at this time. </dd></dl>

<p>Reimplemented in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#acc6380a679846d0e496a507ee884ffce">SLNet::Replica3Composite&lt; parent_type &gt;</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00883">883</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

<p>References <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00746">SLNet::RM3DS_DO_NOT_QUERY_DESTRUCTION</a>.</p>

</div>
</div>
<a class="anchor" id="a5e7094465033130883953c483ee33451"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool SLNet::Replica3::QueryRelayDestruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>sourceConnection</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>We got a message from a connection to destroy this replica Return true to automatically relay the destruction message to all our other connections For a client in client/server, it does not matter what this funtion returns For a server in client/server, this should normally return true For a peer in peer to peer, you can normally return false since the original destroying peer would have told all other peers about the destruction If a system gets a destruction command for an object that was already destroyed, the destruction message is ignored. </p>

<p>Reimplemented in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a8dd6381a64895144ebc129bf9b3dcd25">SLNet::Replica3Composite&lt; parent_type &gt;</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00900">900</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="af2ee7d5a78ce055e365a2a303fd80718"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool SLNet::Replica3::QueryRemoteConstruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>sourceConnection</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>We're about to call <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a8bbab0efc22644f55e56c3d1371e1184" title="Read data written by Replica3::SerializeConstruction()">DeserializeConstruction()</a> on this <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a>. If <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#af2ee7d5a78ce055e365a2a303fd80718" title="We&#39;re about to call DeserializeConstruction() on this Replica3. If QueryRemoteConstruction() returns ...">QueryRemoteConstruction()</a> returns false, this object is deleted instead. </p>
<p>By default, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a034013381bd9934335e6e37aa65f8fde" title="Default call for QueryRemoteConstruction(). Allow the server to create this object, but not the client.">QueryRemoteConstruction_ServerConstruction()</a> does not allow clients to create objects. The client will get Replica3::DeserializeConstructionRequestRejected().<br/>
 If you want the client to be able to potentially create objects for client/server, override accordingly.<br/>
 Other variants of QueryRemoteConstruction_* just return true. </p>
<dl class="section note"><dt>Note</dt><dd>Defaults are provided: <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#abc36beededae615df71857dfc535162c" title="Default call for QueryRemoteConstruction().">QueryRemoteConstruction_PeerToPeer()</a>, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a034013381bd9934335e6e37aa65f8fde" title="Default call for QueryRemoteConstruction(). Allow the server to create this object, but not the client.">QueryRemoteConstruction_ServerConstruction()</a>, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a1d2c0dabc915f531c90a3a723cb8b2da">QueryRemoteConstruction_ClientConstruction()</a>. Return one of these functions for a working default for the relevant topology. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sourceConnection</td><td>Which system sent us the object creation request message. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True to allow the object to pass onto <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a8bbab0efc22644f55e56c3d1371e1184" title="Read data written by Replica3::SerializeConstruction()">DeserializeConstruction()</a> (where it may also be rejected), false to immediately reject the remote construction request </dd></dl>

<p>Implemented in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a3d3ecca89023a52e073d587d1d62779f">SLNet::Replica3Composite&lt; parent_type &gt;</a>.</p>

</div>
</div>
<a class="anchor" id="a1d2c0dabc915f531c90a3a723cb8b2da"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool SLNet::Replica3::QueryRemoteConstruction_ClientConstruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>sourceConnection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>isThisTheServer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Default call for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#af2ee7d5a78ce055e365a2a303fd80718" title="We&#39;re about to call DeserializeConstruction() on this Replica3. If QueryRemoteConstruction() returns ...">QueryRemoteConstruction()</a>.</p>
<p>Both the client and the server is allowed to create this object. The network topology is client/server The code means on the client or the server, allow creation of <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> instances </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sourceConnection</td><td>destinationConnection parameter passed to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9cd4c94d916baf34960fe4e396a9a402" title="Ask if this object, which does not exist on destinationConnection should (now) be sent to that system...">QueryConstruction()</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">isThisTheServer</td><td>True if this system is the server, false if not. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="abc36beededae615df71857dfc535162c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool SLNet::Replica3::QueryRemoteConstruction_PeerToPeer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>sourceConnection</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default call for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#af2ee7d5a78ce055e365a2a303fd80718" title="We&#39;re about to call DeserializeConstruction() on this Replica3. If QueryRemoteConstruction() returns ...">QueryRemoteConstruction()</a>. </p>
<p>All clients are allowed to create all objects. The object is not relayed when remotely created </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sourceConnection</td><td>destinationConnection parameter passed to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9cd4c94d916baf34960fe4e396a9a402" title="Ask if this object, which does not exist on destinationConnection should (now) be sent to that system...">QueryConstruction()</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a034013381bd9934335e6e37aa65f8fde"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool SLNet::Replica3::QueryRemoteConstruction_ServerConstruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>sourceConnection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>isThisTheServer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default call for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#af2ee7d5a78ce055e365a2a303fd80718" title="We&#39;re about to call DeserializeConstruction() on this Replica3. If QueryRemoteConstruction() returns ...">QueryRemoteConstruction()</a>. Allow the server to create this object, but not the client. </p>
<p>Only the server is allowed to create this object. The network topology is client/server The code means if this is the server, and I got a command to create a <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> to ignore it. If this is the client, to allow it. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sourceConnection</td><td>destinationConnection parameter passed to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9cd4c94d916baf34960fe4e396a9a402" title="Ask if this object, which does not exist on destinationConnection should (now) be sent to that system...">QueryConstruction()</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">isThisTheServer</td><td>True if this system is the server, false if not. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a899d87b3aeb957648a049d1aba47c42a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga134c0f5cbd0cb8c0182ffeeebb2aea59">SLNet::RM3QuerySerializationResult</a> SLNet::Replica3::QuerySerialization </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implement with <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a36f9383b90b1074b9bd2decf8761538b" title="Default call for QuerySerialization().">QuerySerialization_ClientSerializable()</a>, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a6e01c91c7563d2572a1b6e65311284df" title="Default call for QuerySerialization().">QuerySerialization_ServerSerializable()</a>, or <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a1493100baac7dc035d7519d0b97c02ff" title="Default call for QuerySerialization().">QuerySerialization_PeerToPeer()</a> </p>
<p><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a899d87b3aeb957648a049d1aba47c42a" title="Implement with QuerySerialization_ClientSerializable(), QuerySerialization_ServerSerializable(), or QuerySerialization_PeerToPeer()">QuerySerialization()</a> is a first pass query to check if a given object should serializable to a given system. The intent is that the user implements with one of the defaults for client, server, or peer to peer.<br/>
 Without this function, a careless implementation would serialize an object anytime it changed to all systems. This would give you feedback loops as the sender gets the same message back from the recipient it just sent to.<br/>
 If more than one system can serialize the same object then you will need to override to return true, and control the serialization result from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a90a3755d677079ec3718ddd6f8df32f1" title="Serialize our class to a bitstream.">Replica3::Serialize()</a>. Be careful not to send back the same data to the system that just sent to you! </p>
<dl class="section return"><dt>Returns</dt><dd>True to allow calling <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a90a3755d677079ec3718ddd6f8df32f1" title="Serialize our class to a bitstream.">Replica3::Serialize()</a> for this connection, false to not call. </dd></dl>

<p>Implemented in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a9363d5b9aec96bb3a7805c603774cd59">SLNet::Replica3Composite&lt; parent_type &gt;</a>.</p>

</div>
</div>
<a class="anchor" id="a36f9383b90b1074b9bd2decf8761538b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga134c0f5cbd0cb8c0182ffeeebb2aea59">SLNet::RM3QuerySerializationResult</a> SLNet::Replica3::QuerySerialization_ClientSerializable </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>isThisTheServer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default call for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a899d87b3aeb957648a049d1aba47c42a" title="Implement with QuerySerialization_ClientSerializable(), QuerySerialization_ServerSerializable(), or QuerySerialization_PeerToPeer()">QuerySerialization()</a>. </p>
<p>Use if the values you are serializing are generated by the client that owns the object. The serialization will be relayed through the server to the other clients. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">destinationConnection</td><td>destinationConnection parameter passed to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9cd4c94d916baf34960fe4e396a9a402" title="Ask if this object, which does not exist on destinationConnection should (now) be sent to that system...">QueryConstruction()</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">isThisTheServer</td><td>True if this system is the server, false if not. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a1493100baac7dc035d7519d0b97c02ff"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga134c0f5cbd0cb8c0182ffeeebb2aea59">SLNet::RM3QuerySerializationResult</a> SLNet::Replica3::QuerySerialization_PeerToPeer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gab6ddc529b3713b27f8d9addde9114a7c">Replica3P2PMode</a>&#160;</td>
          <td class="paramname"><em>p2pMode</em> = <code><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ggab6ddc529b3713b27f8d9addde9114a7ca913e6305dae6ce3163eda78b4c5bb64a">R3P2PM_SINGLE_OWNER</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default call for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a899d87b3aeb957648a049d1aba47c42a" title="Implement with QuerySerialization_ClientSerializable(), QuerySerialization_ServerSerializable(), or QuerySerialization_PeerToPeer()">QuerySerialization()</a>. </p>
<p>Use if the values you are serializing are on a peer to peer network. The peer that owns the object will send to all. Remote peers will not send. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">destinationConnection</td><td>destinationConnection parameter passed to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9cd4c94d916baf34960fe4e396a9a402" title="Ask if this object, which does not exist on destinationConnection should (now) be sent to that system...">QueryConstruction()</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">p2pMode</td><td>If controlled only by this system ever, pass R3P2PM_SINGLE_OWNER. Otherwise pass R3P2PM_MULTI_OWNER_CURRENTLY_AUTHORITATIVE or R3P2PM_MULTI_OWNER_NOT_CURRENTLY_AUTHORITATIVE </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6e01c91c7563d2572a1b6e65311284df"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga134c0f5cbd0cb8c0182ffeeebb2aea59">SLNet::RM3QuerySerializationResult</a> SLNet::Replica3::QuerySerialization_ServerSerializable </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>isThisTheServer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default call for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a899d87b3aeb957648a049d1aba47c42a" title="Implement with QuerySerialization_ClientSerializable(), QuerySerialization_ServerSerializable(), or QuerySerialization_PeerToPeer()">QuerySerialization()</a>. </p>
<p>Use if the values you are serializing are generated only by the server. The serialization will be sent to all clients, but the clients will not send back to the server. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">destinationConnection</td><td>destinationConnection parameter passed to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9cd4c94d916baf34960fe4e396a9a402" title="Ask if this object, which does not exist on destinationConnection should (now) be sent to that system...">QueryConstruction()</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">isThisTheServer</td><td>True if this system is the server, false if not. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a90a3755d677079ec3718ddd6f8df32f1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga4d0f10f0e557bd96237574321b79a68a">RM3SerializationResult</a> SLNet::Replica3::Serialize </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d5/dad/struct_s_l_net_1_1_serialize_parameters">SLNet::SerializeParameters</a> *&#160;</td>
          <td class="paramname"><em>serializeParameters</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Serialize our class to a bitstream. </p>
<p>User should implement this function to write the contents of this class to SerializationParamters::serializationBitstream.<br/>
 If data only needs to be written once, you can write it to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#adc5fe35f637eeb607f6b76de4a6372c0" title="Write data to be sent only when the object is constructed on a remote system.">SerializeConstruction()</a> instead for efficiency.<br/>
 Transmitted over the network if it changed from the last time we called <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a90a3755d677079ec3718ddd6f8df32f1" title="Serialize our class to a bitstream.">Serialize()</a>.<br/>
 Called every time the time interval to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a0168b8c51dff68b084af5ba83ddcf677">ReplicaManager3::SetAutoSerializeInterval()</a> elapses and <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a50c8eeeff65c3c2ebb3680ed7c287a1f" title="Call interfaces, send data.">ReplicaManager3::Update</a> is subsequently called. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">in/out]</td><td>serializeParameters Parameters controlling the serialization, including destination bitstream to write to </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Whether to serialize, and if so, how to optimize the results </dd></dl>

<p>Implemented in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a6e7587fc3d2d09e82406e55cb9b2f6ff">SLNet::Replica3Composite&lt; parent_type &gt;</a>.</p>

</div>
</div>
<a class="anchor" id="adc5fe35f637eeb607f6b76de4a6372c0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::Replica3::SerializeConstruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>constructionBitstream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Write data to be sent only when the object is constructed on a remote system. </p>
<p>SerializeConstruction is used to write out data that you need to create this object in the context of your game, such as health, score, name. Use it for data you only need to send when the object is created.<br/>
 After <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#adc5fe35f637eeb607f6b76de4a6372c0" title="Write data to be sent only when the object is constructed on a remote system.">SerializeConstruction()</a> is called, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a90a3755d677079ec3718ddd6f8df32f1" title="Serialize our class to a bitstream.">Serialize()</a> will be called immediately thereafter. However, they are sent in different messages, so <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a90a3755d677079ec3718ddd6f8df32f1" title="Serialize our class to a bitstream.">Serialize()</a> may arrive a later frame than <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#adc5fe35f637eeb607f6b76de4a6372c0" title="Write data to be sent only when the object is constructed on a remote system.">SerializeConstruction()</a> For that reason, the object should be valid after a call to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a8bbab0efc22644f55e56c3d1371e1184" title="Read data written by Replica3::SerializeConstruction()">DeserializeConstruction()</a> for at least a short time.<br/>
 </p>
<dl class="section note"><dt>Note</dt><dd>The object's NetworkID and allocation id are handled by the system automatically, you do not need to write these values to <em>constructionBitstream</em> </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">constructionBitstream</td><td>Destination bitstream to write your data to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">destinationConnection</td><td>System that will receive this network message. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a4b05dcb8e721e594319c32f1a9b9db13">SLNet::Replica3Composite&lt; parent_type &gt;</a>.</p>

</div>
</div>
<a class="anchor" id="a6e39158c90ff631c29a28571b2b1a7f9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::Replica3::SerializeConstructionExisting </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>constructionBitstream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Same as <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#adc5fe35f637eeb607f6b76de4a6372c0" title="Write data to be sent only when the object is constructed on a remote system.">SerializeConstruction()</a>, but for an object that already exists on the remote system. Used if you return RM3CS_ALREADY_EXISTS_REMOTELY from QueryConstruction </p>

<p>Reimplemented in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a05dfbbe98ffb64ac52bd614fac672749">SLNet::Replica3Composite&lt; parent_type &gt;</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00920">920</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a9c0c9520c8192bfd87d0c560d8182248"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::Replica3::SerializeDestruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>destructionBitstream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Write extra data to send with the object deletion event, if desired. </p>
<p><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9c0c9520c8192bfd87d0c560d8182248" title="Write extra data to send with the object deletion event, if desired.">Replica3::SerializeDestruction()</a> will be called to write any object destruction specific data you want to send with this event. <em>destructionBitstream</em> can be read in <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a315725c68ed0864d84ef28c27e8271bd" title="Read data written by Replica3::SerializeDestruction()">DeserializeDestruction()</a> </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">destructionBitstream</td><td>Bitstream for you to write to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">destinationConnection</td><td>System that will receive this network message. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a96942e9814ebd48774ca261fbaa2f631">SLNet::Replica3Composite&lt; parent_type &gt;</a>.</p>

</div>
</div>
<a class="anchor" id="a7d1b5df1f2ed5af6f18619c509cefb77"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::Replica3::WasReferenced </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>If <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab822b30a99de1c9ee1cb3835f726fe7c" title="Adds a replicated object to the system.">ReplicaManager3::Reference()</a> was called on this object. </dd></dl>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01081">1081</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a78976b7fd5bb43519ad123af18fe3924"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::Replica3::WriteAllocationID </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>allocationIdBitstream</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Write a unique identifer that can be read on a remote system to create an object of this same class. </p>
<p>The value written to <em>allocationIdBitstream</em> will be passed to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a56535f2cd8fafd109ffbb69c3597ebca" title="Class factory to create a Replica3 instance, given a user-defined identifier.">Connection_RM3::AllocReplica()</a>.<br/>
 Sample implementation:<br/>
 {allocationIdBitstream-&gt;Write(<a class="el" href="../../d2/d66/class_s_l_net_1_1_rak_string.xhtml" title="String class.">SLNet::RakString</a>("Soldier");}<br/>
 </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">allocationIdBitstream</td><td>Bitstream for the user to write to, to identify this class </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a78c835d8559ec3f376bd95d36ecc4564">SLNet::Replica3Composite&lt; parent_type &gt;</a>.</p>

</div>
</div>
<h4 class="groupheader">Member Data Documentation</h4>
<a class="anchor" id="af4735cc644d4142a5cbf609603abc0dd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> SLNet::Replica3::creatingSystemGUID</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>GUID of the system that first called Reference() on this object. Transmitted automatically when the object is constructed </p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01085">1085</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="adb5f894caecd98383a50ebd7a56c9f45"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> SLNet::Replica3::deletingSystemGUID</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>GUID of the system that caused the item to send a deletion command over the network. </p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01087">1087</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a454a198e8ac91ea9ea06cae70d023b76"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::Replica3::forceSendUntilNextUpdate</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01094">1094</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="abc114a79c424308febcb735fd711f304"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#dd/da8/struct_s_l_net_1_1_last_serialization_result_b_s">LastSerializationResultBS</a> SLNet::Replica3::lastSentSerialization</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01093">1093</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a68f9516df7ca933abf3e308376650b1c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d7/d35/struct_s_l_net_1_1_last_serialization_result">LastSerializationResult</a>* SLNet::Replica3::lsr</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01095">1095</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a1949539d341db2cf76a2bc82d7f21fc7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../df/df2/_native_types_8h.xhtml#a6eb1e68cc391dd753bc8ce896dbb8315">uint32_t</a> SLNet::Replica3::referenceIndex</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01096">1096</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a330d9d27af5c0ae01dbf623456d5a3b4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a>* SLNet::Replica3::replicaManager</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01091">1091</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>

</div>
</div>
<a name="df/d59/struct_s_l_net_1_1_replica_manager3_1_1_r_m3_world" id="df/d59/struct_s_l_net_1_1_replica_manager3_1_1_r_m3_world"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct SLNet::ReplicaManager3::RM3World</td>
        </tr>
      </table>
</div><div class="memdoc">
<div class="textblock">
<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00312">312</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>
</div><table class="memberdecls">
<tr><td colspan="2"><h3>Public Member Functions</h3></td></tr>
<tr class="memitem:ab88ae43e480ea21b095a738394d894e0"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab88ae43e480ea21b095a738394d894e0">RM3World</a> ()</td></tr>
<tr class="separator:ab88ae43e480ea21b095a738394d894e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d068c31f932002c75a9b74c93d443fe"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a5d068c31f932002c75a9b74c93d443fe">Clear</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *replicaManager3)</td></tr>
<tr class="separator:a5d068c31f932002c75a9b74c93d443fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><h3>Public Attributes</h3></td></tr>
<tr class="memitem:a9af3bb9d8db125ffdd2718cce680335b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a><br class="typebreak"/>
&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">Connection_RM3</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9af3bb9d8db125ffdd2718cce680335b">connectionList</a></td></tr>
<tr class="separator:a9af3bb9d8db125ffdd2718cce680335b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30b7063e904514214774f1a2ee64104f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a30b7063e904514214774f1a2ee64104f">userReplicaList</a></td></tr>
<tr class="separator:a30b7063e904514214774f1a2ee64104f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ee7d9d135d2fef55c72abde1eaca217"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a3ee7d9d135d2fef55c72abde1eaca217">worldId</a></td></tr>
<tr class="separator:a3ee7d9d135d2fef55c72abde1eaca217"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af53198c59ee24d196ee1c333b4393524"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/dbd/class_s_l_net_1_1_network_i_d_manager.xhtml">NetworkIDManager</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#af53198c59ee24d196ee1c333b4393524">networkIDManager</a></td></tr>
<tr class="separator:af53198c59ee24d196ee1c333b4393524"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h4 class="groupheader">Constructor &amp; Destructor Documentation</h4>
<a class="anchor" id="ab88ae43e480ea21b095a738394d894e0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SLNet::ReplicaManager3::RM3World::RM3World </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h4 class="groupheader">Member Function Documentation</h4>
<a class="anchor" id="a5d068c31f932002c75a9b74c93d443fe"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReplicaManager3::RM3World::Clear </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *&#160;</td>
          <td class="paramname"><em>replicaManager3</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h4 class="groupheader">Member Data Documentation</h4>
<a class="anchor" id="a9af3bb9d8db125ffdd2718cce680335b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt;<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">Connection_RM3</a>*&gt; SLNet::ReplicaManager3::RM3World::connectionList</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00317">317</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="af53198c59ee24d196ee1c333b4393524"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/dbd/class_s_l_net_1_1_network_i_d_manager.xhtml">NetworkIDManager</a>* SLNet::ReplicaManager3::RM3World::networkIDManager</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00320">320</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a30b7063e904514214774f1a2ee64104f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt;<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">Replica3</a>*&gt; SLNet::ReplicaManager3::RM3World::userReplicaList</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00318">318</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a3ee7d9d135d2fef55c72abde1eaca217"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">WorldId</a> SLNet::ReplicaManager3::RM3World::worldId</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00319">319</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>

</div>
</div>
<h2 class="groupheader">Typedef Documentation</h2>
<a class="anchor" id="gaebe2570c80721d22c71e20cef4236e83"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="../../df/df2/_native_types_8h.xhtml#aba7bc1797add20fe3efdf37ced1182c5">uint8_t</a> <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gaebe2570c80721d22c71e20cef4236e83">SLNet::WorldId</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Used for multiple worlds. World 0 is created automatically by default</p>
<p>Used for multiple worlds. </p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00044">44</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a class="anchor" id="gab6ddc529b3713b27f8d9addde9114a7c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gab6ddc529b3713b27f8d9addde9114a7c">SLNet::Replica3P2PMode</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Used for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a8841b580b53b03d6adb1712f9b0f55d9" title="Default call for QueryConstruction().">Replica3::QueryConstruction_PeerToPeer()</a> and <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a1493100baac7dc035d7519d0b97c02ff" title="Default call for QuerySerialization().">Replica3::QuerySerialization_PeerToPeer()</a> to describe how the object replicates between hosts </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="ggab6ddc529b3713b27f8d9addde9114a7ca913e6305dae6ce3163eda78b4c5bb64a"></a>R3P2PM_SINGLE_OWNER</em>&nbsp;</td><td>
<p>The <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> instance is constructed and serialized by one system only. Example: Your avatar. No other player serializes or can create your avatar. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggab6ddc529b3713b27f8d9addde9114a7ca439b431e38b1a52dad82e22383a9d277"></a>R3P2PM_MULTI_OWNER_CURRENTLY_AUTHORITATIVE</em>&nbsp;</td><td>
<p>The <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> instance is constructed and/or serialized by different systems This system is currently in charge of construction and/or serialization Example: A pickup. When an avatar holds it, that avatar controls it. When it is on the ground, the host controls it. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggab6ddc529b3713b27f8d9addde9114a7ca9956b5c01f67d9a379062e243eb32e54"></a>R3P2PM_MULTI_OWNER_NOT_CURRENTLY_AUTHORITATIVE</em>&nbsp;</td><td>
<p>The <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> instance is constructed and/or serialized by different systems Another system is in charge of construction and/or serialization, but this system may be in charge at a later time Example: A pickup held by another player. That player sends creation of that object to new connections, and serializes it until it is dropped. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggab6ddc529b3713b27f8d9addde9114a7cabb05ca8e2b803d08fb04cb9b3e348e2b"></a>R3P2PM_STATIC_OBJECT_CURRENTLY_AUTHORITATIVE</em>&nbsp;</td><td>
<p>The <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> instance is a static object (already exists on the remote system). This system is currently in charge of construction and/or serialization </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggab6ddc529b3713b27f8d9addde9114a7ca3fd6c08c9e1cd451e00f3c4dce5b032d"></a>R3P2PM_STATIC_OBJECT_NOT_CURRENTLY_AUTHORITATIVE</em>&nbsp;</td><td>
<p>The <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> instance is a static object (already exists on the remote system). Another system is in charge of construction and/or serialization, but this system may be in charge at a later time </p>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00822">822</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga698075ced173fa417a7df5f9d1be15e8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga698075ced173fa417a7df5f9d1be15e8">SLNet::RM3ActionOnPopConnection</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="gga698075ced173fa417a7df5f9d1be15e8a9b3a5d23ca77bd4d4af7eb35424cf5ac"></a>RM3AOPC_DO_NOTHING</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga698075ced173fa417a7df5f9d1be15e8afec43dd56887396433293f4ef145a56a"></a>RM3AOPC_DELETE_REPLICA</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga698075ced173fa417a7df5f9d1be15e8ae3a7b8a70b29eb26185a82c33b2b362f"></a>RM3AOPC_DELETE_REPLICA_AND_BROADCAST_DESTRUCTION</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga698075ced173fa417a7df5f9d1be15e8aa2656dfe5543e1d22195e60d4b34a3b6"></a>RM3AOPC_MAX</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00812">812</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="gadf975dd8a1352bc64cfa8f4de8054c48"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gadf975dd8a1352bc64cfa8f4de8054c48">SLNet::RM3ConstructionState</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return codes for Connection_RM3::GetConstructionState() and <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9cd4c94d916baf34960fe4e396a9a402" title="Ask if this object, which does not exist on destinationConnection should (now) be sent to that system...">Replica3::QueryConstruction()</a> </p>
<p>Indicates what state the object should be in for the remote system </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="ggadf975dd8a1352bc64cfa8f4de8054c48aa4b4b25a9aaa3806462c1c74fbf6dc22"></a>RM3CS_SEND_CONSTRUCTION</em>&nbsp;</td><td>
<p>This object should exist on the remote system. Send a construction message if necessary If the NetworkID is already in use, it will not do anything If it is not in use, it will create the object, and then call DeserializeConstruction </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggadf975dd8a1352bc64cfa8f4de8054c48a943b4da6dbfd372382b997e60c141ba8"></a>RM3CS_ALREADY_EXISTS_REMOTELY</em>&nbsp;</td><td>
<p>This object should exist on the remote system. The other system already has the object, and the object will never be deleted. This is true of objects that are loaded with the level, for example. Treat it as if it existed, without sending a construction message. Will call Serialize() and SerializeConstructionExisting() to the object on the remote system </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggadf975dd8a1352bc64cfa8f4de8054c48a31408128d8c6f8abad212db60c296589"></a>RM3CS_ALREADY_EXISTS_REMOTELY_DO_NOT_CONSTRUCT</em>&nbsp;</td><td>
<p>Same as RM3CS_ALREADY_EXISTS_REMOTELY but does not call SerializeConstructionExisting() </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggadf975dd8a1352bc64cfa8f4de8054c48a058c05314316d8c2d9e70f01548ff8c9"></a>RM3CS_NEVER_CONSTRUCT</em>&nbsp;</td><td>
<p>This object will never be sent to the target system This object will never be serialized from this system to the target system </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggadf975dd8a1352bc64cfa8f4de8054c48a28cc8a1b6b45f13805bc5853fa1cfa01"></a>RM3CS_NO_ACTION</em>&nbsp;</td><td>
<p>Don't do anything this tick. Will query again next tick. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggadf975dd8a1352bc64cfa8f4de8054c48a16b59613fbc9cc318f6ba1850ce0e5c4"></a>RM3CS_MAX</em>&nbsp;</td><td>
<p>Max enum. </p>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00710">710</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga77f11ba8783033d5b9644257cbb996d3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga77f11ba8783033d5b9644257cbb996d3">SLNet::RM3DestructionState</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>If this object already exists for this system, should it be removed? </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="gga77f11ba8783033d5b9644257cbb996d3a3d912fff20521a7206f48ae5989e768f"></a>RM3DS_SEND_DESTRUCTION</em>&nbsp;</td><td>
<p>This object should not exist on the remote system. Send a destruction message if necessary. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga77f11ba8783033d5b9644257cbb996d3af0239e909d7413b148bedd47560fd51d"></a>RM3DS_DO_NOT_QUERY_DESTRUCTION</em>&nbsp;</td><td>
<p>This object will never be destroyed by a per-tick query. Don't call again. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga77f11ba8783033d5b9644257cbb996d3a57afb4616979ea16f07a5b243cd4962c"></a>RM3DS_NO_ACTION</em>&nbsp;</td><td>
<p>Don't do anything this tick. Will query again next tick. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga77f11ba8783033d5b9644257cbb996d3a06c76b4d659d071a6eccd64d7e706ace"></a>RM3DS_MAX</em>&nbsp;</td><td>
<p>Max enum. </p>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00740">740</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga134c0f5cbd0cb8c0182ffeeebb2aea59"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga134c0f5cbd0cb8c0182ffeeebb2aea59">SLNet::RM3QuerySerializationResult</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>First pass at topology to see if an object should be serialized </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="gga134c0f5cbd0cb8c0182ffeeebb2aea59a47cf5f95d4777169312158f71daca687"></a>RM3QSR_CALL_SERIALIZE</em>&nbsp;</td><td>
<p>Call Serialize() to see if this object should be serializable for this connection. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga134c0f5cbd0cb8c0182ffeeebb2aea59a4aba2526c69dac367c829a3cd42c22b9"></a>RM3QSR_DO_NOT_CALL_SERIALIZE</em>&nbsp;</td><td>
<p>Do not call Serialize() this tick to see if this object should be serializable for this connection. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga134c0f5cbd0cb8c0182ffeeebb2aea59a280170fa88e7666207d08cf2790271a6"></a>RM3QSR_NEVER_CALL_SERIALIZE</em>&nbsp;</td><td>
<p>Never call Serialize() for this object and connection. This system will not serialize this object for this topology. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga134c0f5cbd0cb8c0182ffeeebb2aea59a39ddd8229d904ee07d4076b3e889f2c8"></a>RM3QSR_MAX</em>&nbsp;</td><td>
<p>Max enum. </p>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00799">799</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga4d0f10f0e557bd96237574321b79a68a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga4d0f10f0e557bd96237574321b79a68a">SLNet::RM3SerializationResult</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Return codes when constructing an object </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="gga4d0f10f0e557bd96237574321b79a68aa82f6a6b5d3b5ae80741c5dbce7914afd"></a>RM3SR_BROADCAST_IDENTICALLY</em>&nbsp;</td><td>
<p>This object serializes identically no matter who we send to We also send it to every connection (broadcast). Efficient for memory, speed, and bandwidth but only if the object is always broadcast identically. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga4d0f10f0e557bd96237574321b79a68aa1adadddc22bfe0944f050454f9293a2e"></a>RM3SR_BROADCAST_IDENTICALLY_FORCE_SERIALIZATION</em>&nbsp;</td><td>
<p>Same as RM3SR_BROADCAST_IDENTICALLY, but assume the object needs to be serialized, do not check with a memcmp Assume the object changed, and serialize it Use this if you know exactly when your object needs to change. Can be faster than RM3SR_BROADCAST_IDENTICALLY. An example of this is if every member variable has an accessor, changing a member sets a flag, and you check that flag in <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a899d87b3aeb957648a049d1aba47c42a" title="Implement with QuerySerialization_ClientSerializable(), QuerySerialization_ServerSerializable(), or QuerySerialization_PeerToPeer()">Replica3::QuerySerialization()</a> The opposite of this is RM3SR_DO_NOT_SERIALIZE, in case the object did not change </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga4d0f10f0e557bd96237574321b79a68aa95572b7e0833ff73cd4c839d6440db4e"></a>RM3SR_SERIALIZED_UNIQUELY</em>&nbsp;</td><td>
<p>Either this object serializes differently depending on who we send to or we send it to some systems and not others. Inefficient for memory and speed, but efficient for bandwidth However, if you don't know what to return, return this </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga4d0f10f0e557bd96237574321b79a68aa2b7eba1b79cfbe6e07b1077e654e18ef"></a>RM3SR_SERIALIZED_ALWAYS</em>&nbsp;</td><td>
<p>Do not compare against last sent value. Just send even if the data is the same as the last tick If the data is always changing anyway, or you want to send unreliably, this is a good method of serialization Can send unique data per connection if desired. If same data is sent to all connections, use RM3SR_SERIALIZED_ALWAYS_IDENTICALLY for even better performance Efficient for memory and speed, but not necessarily bandwidth </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga4d0f10f0e557bd96237574321b79a68aa3cb3f36d6ab3a00980ce84184e02887a"></a>RM3SR_SERIALIZED_ALWAYS_IDENTICALLY</em>&nbsp;</td><td>
<dl class="deprecated"><dt><b><a class="el" href="../../da/d58/deprecated.xhtml#_deprecated000004">Deprecated:</a></b></dt><dd>, use RM3SR_BROADCAST_IDENTICALLY_FORCE_SERIALIZATION </dd></dl>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga4d0f10f0e557bd96237574321b79a68aac51a04908dce1e085f16c4fd0b69637a"></a>RM3SR_DO_NOT_SERIALIZE</em>&nbsp;</td><td>
<p>Do not serialize this object this tick, for this connection. Will query again next autoserialize timer. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga4d0f10f0e557bd96237574321b79a68aad5ebe6c34750670ba21bed1bd9e247af"></a>RM3SR_NEVER_SERIALIZE_FOR_THIS_CONNECTION</em>&nbsp;</td><td>
<p>Never serialize this object for this connection Useful for objects that are downloaded, and never change again Efficient </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga4d0f10f0e557bd96237574321b79a68aaa26af3cbf4d081f1c432c5991a5768d1"></a>RM3SR_MAX</em>&nbsp;</td><td>
<p>Max enum. </p>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00757">757</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga3c77f49d3ff6a39bb62cb2efd2d3474a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga3c77f49d3ff6a39bb62cb2efd2d3474a">SLNet::SendSerializeIfChangedResult</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="gga3c77f49d3ff6a39bb62cb2efd2d3474aabc15a3c2d66a71959798f99d2e7335c5"></a>SSICR_SENT_DATA</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga3c77f49d3ff6a39bb62cb2efd2d3474aa3d21bf14ba60d134853562e670644727"></a>SSICR_DID_NOT_SEND_DATA</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga3c77f49d3ff6a39bb62cb2efd2d3474aa8a05aa3a6555e71aed9db68310fd5940"></a>SSICR_NEVER_SERIALIZE</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l00432">432</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Wed Aug 14 2019 22:09:49 for SLikeNet by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.2 </li>
  </ul>
</div>
</body>
</html>
