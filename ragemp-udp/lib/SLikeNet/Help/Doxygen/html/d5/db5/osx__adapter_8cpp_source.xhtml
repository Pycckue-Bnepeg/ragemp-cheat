<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>SLikeNet: Source/src/osx_adapter.cpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SLikeNet
   &#160;<span id="projectnumber">0.1.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../modules.xhtml"><span>Modules</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="../../files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="../../globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('d5/db5/osx__adapter_8cpp_source.xhtml','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">osx_adapter.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d5/db5/osx__adapter_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *  Copyright (c) 2016-2019, SLikeSoft UG (haftungsbeschr√§nkt)</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *  This source code is licensed under the MIT-style license found in the</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  license.txt file in the root directory of this source tree.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *  This file defines adapters for all MS-specific functions used throughout SLikeNet.</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#ifdef __APPLE__</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;<a class="code" href="../../da/dff/osx__adapter_8h.xhtml">slikenet/osx_adapter.h</a>&quot;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span>    <span class="comment">// for std::max, std::min</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;cerrno&gt;</span>       <span class="comment">// for errno</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;cstdio&gt;</span>       <span class="comment">// for FILE, fopen, vsnprintf</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;</span>      <span class="comment">// for mbstowcs</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;cstring&gt;</span>      <span class="comment">// for strcat, strcpy, strerror, strncat, strncpy</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;cstdarg&gt;</span>      <span class="comment">// for va_start, va_end, va_list</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &lt;ctime&gt;</span>        <span class="comment">// for localtime, time_t</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;cwchar&gt;</span>       <span class="comment">// for wcscat, wcscpy, wcslen</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;errno_t fopen_s(FILE **pfile, <span class="keyword">const</span> <span class="keywordtype">char</span> *filename, <span class="keyword">const</span> <span class="keywordtype">char</span> *mode)</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;{</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keywordflow">if</span> ((pfile == <span class="keyword">nullptr</span>) || (filename == <span class="keyword">nullptr</span>) || (mode == <span class="keyword">nullptr</span>)) {</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        <span class="keywordflow">return</span> 22; <span class="comment">// error: EINVAL</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    }</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    FILE *file = fopen(filename, mode);</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordflow">if</span> (file == <span class="keyword">nullptr</span>) {</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        <span class="keywordflow">return</span> errno;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    }</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    *pfile = file;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;}</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;errno_t localtime_s(<span class="keyword">struct</span> tm *_tm, <span class="keyword">const</span> time_t *time)</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="comment">// #med - should actually also check for _*time &gt; _MAX_TIME64_T according to MSDN, but can&#39;t seem to find the</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="comment">// definition of _MAX_TIME64_T</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">if</span> ((_tm == <span class="keyword">nullptr</span>) || (time == <span class="keyword">nullptr</span>) || (*time == 0)) {</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keywordflow">if</span> (_tm != <span class="keyword">nullptr</span>) {</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            _tm-&gt;tm_hour  = -1;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            _tm-&gt;tm_isdst = -1;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            _tm-&gt;tm_mday  = -1;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            _tm-&gt;tm_min   = -1;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            _tm-&gt;tm_mon   = -1;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            _tm-&gt;tm_sec   = -1;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            _tm-&gt;tm_wday  = -1;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            _tm-&gt;tm_yday  = -1;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            _tm-&gt;tm_year  = -1;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        }</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">return</span> 22; <span class="comment">// error: EINVAL</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    }</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">struct </span>tm *curTime = localtime(time);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    *_tm = *curTime;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;errno_t mbstowcs_s(<span class="keywordtype">size_t</span> *pReturnValue, <span class="keywordtype">wchar_t</span> *wcstr, <span class="keywordtype">size_t</span> sizeInWords, <span class="keyword">const</span> <span class="keywordtype">char</span> *mbstr, <span class="keywordtype">size_t</span> count)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">if</span> ((mbstr == <span class="keyword">nullptr</span>) || ((wcstr == <span class="keyword">nullptr</span>) &amp;&amp; (sizeInWords &gt; 0)) || ((wcstr != <span class="keyword">nullptr</span>) &amp;&amp; (sizeInWords != 0))) {</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">if</span> (wcstr != <span class="keyword">nullptr</span>) {</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            wcstr[0] = L<span class="charliteral">&#39;\0&#39;</span>; <span class="comment">// ensure 0-termination</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        }</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">return</span> 22; <span class="comment">// error: EINVAL</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    }</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordtype">size_t</span> numMaxChars = sizeInWords;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">if</span> (count != _TRUNCATE) {</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        numMaxChars = std::min(numMaxChars, count);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    }</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordtype">size_t</span> numCharsWritten = mbstowcs(wcstr, mbstr, numMaxChars);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">if</span> (numCharsWritten == (<span class="keywordtype">size_t</span>)-1) {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="comment">// invalid multibyte character encountered</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordflow">if</span> (pReturnValue != <span class="keyword">nullptr</span>) {</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            *pReturnValue = 0;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        }</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">if</span> (wcstr != <span class="keyword">nullptr</span>) {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            wcstr[0] = L<span class="charliteral">&#39;\0&#39;</span>; <span class="comment">// ensure 0-termination</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        }</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">return</span> 42; <span class="comment">// error: EILSEQ</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">if</span> (numCharsWritten == numMaxChars) {</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">if</span> (wcstr != <span class="keyword">nullptr</span>) {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            wcstr[0] = L<span class="charliteral">&#39;\0&#39;</span>; <span class="comment">// ensure 0-termination</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        }</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">return</span> 34; <span class="comment">// error: ERANGE</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    }</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">if</span> (pReturnValue != <span class="keyword">nullptr</span>) {</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        *pReturnValue = numCharsWritten + 1; <span class="comment">// chars written, including terminating null character</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">// ensure we write a terminating null character (in case there was none in the original converted string)</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">if</span> (wcstr != <span class="keyword">nullptr</span>) {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        wcstr[numCharsWritten] = L<span class="charliteral">&#39;\0&#39;</span>; <span class="comment">// ensure 0-termination</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    }</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keywordtype">int</span> sprintf_s(<span class="keywordtype">char</span> *buffer, <span class="keywordtype">size_t</span> sizeOfBuffer, <span class="keyword">const</span> <span class="keywordtype">char</span> *format, ...)</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;{</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">if</span> ((buffer == <span class="keyword">nullptr</span>) || (sizeOfBuffer == 0) || (format == <span class="keyword">nullptr</span>)) {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    }</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    va_list arglist;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    va_start(arglist, format);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordtype">int</span> numCharsWritten = vsnprintf(buffer, sizeOfBuffer, format, arglist);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    va_end(arglist);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">if</span> (numCharsWritten == -1) {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        buffer[0] = <span class="charliteral">&#39;\0&#39;</span>; <span class="comment">// error occurred ensure terminating \0-character</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    }</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">if</span> (numCharsWritten &gt;= sizeOfBuffer) {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        buffer[0] = <span class="charliteral">&#39;\0&#39;</span>; <span class="comment">// buffer too small, write empty string to ensure terminating \0-char</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    }</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">return</span> numCharsWritten;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;}</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;errno_t strcat_s(<span class="keywordtype">char</span> *strDestination, <span class="keywordtype">size_t</span> numberOfElements, <span class="keyword">const</span> <span class="keywordtype">char</span> *strSource)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;{</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">if</span> ((strDestination == <span class="keyword">nullptr</span>) || (strSource == <span class="keyword">nullptr</span>)) {</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordflow">if</span> (strDestination != <span class="keyword">nullptr</span>) {</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            strDestination[0] = <span class="charliteral">&#39;\0&#39;</span>; <span class="comment">// ensure trailing \0 is written</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        }</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">return</span> 22; <span class="comment">// error: EINVAL</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    }</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">if</span> (numberOfElements == 0) {</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        strDestination[0] = <span class="charliteral">&#39;\0&#39;</span>; <span class="comment">// ensure trailing \0 is written</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">return</span> 34; <span class="comment">// error: ERANGE</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    }</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> destLen = strlen(strDestination);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> sourceLen = strlen(strSource);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">if</span> ((destLen &gt; numberOfElements - 1) || ((sourceLen &gt; 0) &amp;&amp; (destLen == numberOfElements - 1)) || (sourceLen &gt; numberOfElements - destLen - 1)) {</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        strDestination[0] = <span class="charliteral">&#39;\0&#39;</span>; <span class="comment">// ensure trailing \0 is written</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">return</span> 34; <span class="comment">// error: ERANGE</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    (void)strcat(strDestination, strSource);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;}</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;errno_t strcpy_s(<span class="keywordtype">char</span>* strDestination, <span class="keywordtype">size_t</span> numberOfElements, <span class="keyword">const</span> <span class="keywordtype">char</span> *strSource)</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;{</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordflow">if</span> ((strDestination == <span class="keyword">nullptr</span>) || (strSource == <span class="keyword">nullptr</span>)) {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordflow">if</span> (strDestination != <span class="keyword">nullptr</span>) {</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            strDestination[0] = <span class="charliteral">&#39;\0&#39;</span>; <span class="comment">// ensure trailing \0 is written</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        }</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keywordflow">return</span> 22; <span class="comment">// error: EINVAL</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    }</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">if</span> ((numberOfElements == 0) || (strlen(strSource) &gt;= numberOfElements)) {</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        strDestination[0] = <span class="charliteral">&#39;\0&#39;</span>; <span class="comment">// ensure trailing \0 is written</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">return</span> 34; <span class="comment">// error: ERANGE</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    }</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    (void)strcpy(strDestination, strSource);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;}</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;errno_t strerror_s(<span class="keywordtype">char</span>* buffer, <span class="keywordtype">size_t</span> numberOfElements, <span class="keywordtype">int</span> errnum)</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;{</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="comment">// check valid parameters</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordflow">if</span> ((buffer == <span class="keyword">nullptr</span>) || (numberOfElements == 0)) {</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordflow">return</span> 22; <span class="comment">// error: EINVAL</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    }</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span> *errorMessage = strerror(errnum);</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordflow">return</span> strcpy_s(buffer, numberOfElements, errorMessage);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;}</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;errno_t strncat_s(<span class="keywordtype">char</span> *strDest, <span class="keywordtype">size_t</span> numberOfElements, <span class="keyword">const</span> <span class="keywordtype">char</span> *strSource, <span class="keywordtype">size_t</span> count)</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;{</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="comment">// check valid parameters</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keywordflow">if</span> ((strDest == <span class="keyword">nullptr</span>) || (strSource == <span class="keyword">nullptr</span>)) {</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keywordflow">return</span> 22; <span class="comment">// error: EINVAL</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    }</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordflow">if</span> (numberOfElements == 0) {</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keywordflow">return</span> 34; <span class="comment">// error: ERANGE</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    }</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordtype">size_t</span> charsToWrite;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> sourceLen = strlen(strSource);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordflow">if</span> (count == _TRUNCATE) {</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        charsToWrite = sourceLen;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    }</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        charsToWrite = std::min(count, sourceLen);</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    }</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> destLen = strlen(strDest);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> sizeLeft = numberOfElements - destLen;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">if</span> (((count != _TRUNCATE) &amp;&amp; (charsToWrite &gt; sizeLeft - 1)) || ((sourceLen &gt; 0) &amp;&amp; (destLen == numberOfElements - 1))) {</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        strDest[0] = <span class="charliteral">&#39;\0&#39;</span>; <span class="comment">// ensure trailing \0 is written</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <span class="keywordflow">return</span> 34; <span class="comment">// error: ERANGE</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    }</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    (void)strncat(strDest, strSource, charsToWrite);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;}</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;errno_t strncpy_s(<span class="keywordtype">char</span> *strDest, <span class="keywordtype">size_t</span> numberOfElements, <span class="keyword">const</span> <span class="keywordtype">char</span> *strSource, <span class="keywordtype">size_t</span> count)</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;{</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="comment">// check valid parameters</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keywordflow">if</span> ((numberOfElements == 0) || (strDest == <span class="keyword">nullptr</span>) || (strSource == <span class="keyword">nullptr</span>)) {</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keywordflow">if</span> (strDest != <span class="keyword">nullptr</span>) {</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            strDest[0] = <span class="charliteral">&#39;\0&#39;</span>; <span class="comment">// ensure trailing \0 is written</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        }</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="keywordflow">return</span> 22; <span class="comment">// error: EINVAL</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    }</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordtype">size_t</span> numChars;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordtype">bool</span> truncated = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordflow">if</span> (count == _TRUNCATE) {</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <span class="comment">// if count == _TRUNCATE use the length of the source string</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        numChars = strlen(strSource);</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="comment">// ensure we are not exceeding numberOfElements</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keywordflow">if</span> (numChars &gt;= numberOfElements) {</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            numChars = numberOfElements - 1;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            truncated = <span class="keyword">true</span>; <span class="comment">// we are going to truncate the copied string</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        }</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    }</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="comment">// otherwise we use count, but have to check that the destination buffer is of sufficient size</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keywordflow">if</span> ((count &gt; numberOfElements) || ((count == numberOfElements) &amp;&amp; (strSource[count] != <span class="charliteral">&#39;\0&#39;</span>))) {</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            strDest[0] = <span class="charliteral">&#39;\0&#39;</span>; <span class="comment">// ensure trailing \0 is written</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            <span class="keywordflow">return</span> 34; <span class="comment">// error: ERANGE</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        }</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        numChars = count;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    }</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    (void)strncpy(strDest, strSource, numChars);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="comment">// enforce the trailing \0</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    strDest[numChars] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keywordflow">return</span> truncated ? 80 : 0; <span class="comment">// STRUNCATE, if we truncated the string, 0 otherwise</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;}</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="keywordtype">int</span> vsnprintf_s(<span class="keywordtype">char</span> *buffer, <span class="keywordtype">size_t</span> sizeOfBuffer, <span class="keywordtype">size_t</span> count, <span class="keyword">const</span> <span class="keywordtype">char</span> *format, va_list argptr)</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;{</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordflow">if</span> ((buffer == <span class="keyword">nullptr</span>) || (format == <span class="keyword">nullptr</span>) || (sizeOfBuffer == 0)) {</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    }</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordtype">size_t</span> maxChars = sizeOfBuffer;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordflow">if</span> (count != _TRUNCATE) {</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        <span class="keywordflow">if</span> (count &gt;= sizeOfBuffer) {</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            buffer[0] = <span class="charliteral">&#39;\0&#39;</span>; <span class="comment">// ensure trailing \0 is written</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        }</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        maxChars = count;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    }</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keywordtype">int</span> numCharsWritten = vsnprintf(buffer, maxChars, format, argptr);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordflow">if</span> (numCharsWritten &gt;= maxChars) {</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        <span class="keywordflow">if</span> (count != _TRUNCATE) {</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            buffer[0] = <span class="charliteral">&#39;\0&#39;</span>; <span class="comment">// buffer set to empty string</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        }</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="comment">// truncation occurred, add terminating \0</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        buffer[sizeOfBuffer] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    }</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keywordflow">return</span> numCharsWritten;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;}</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;errno_t wcscat_s(<span class="keywordtype">wchar_t</span> *strDestination, <span class="keywordtype">size_t</span> numberOfElements, <span class="keyword">const</span> <span class="keywordtype">wchar_t</span> *strSource)</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;{</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keywordflow">if</span> ((strDestination == <span class="keyword">nullptr</span>) || (strSource == <span class="keyword">nullptr</span>)) {</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        <span class="keywordflow">if</span> (strDestination != <span class="keyword">nullptr</span>) {</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            strDestination[0] = L<span class="charliteral">&#39;\0&#39;</span>; <span class="comment">// ensure trailing \0 is written</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        }</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        <span class="keywordflow">return</span> 22; <span class="comment">// error: EINVAL</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    }</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keywordflow">if</span> (numberOfElements == 0) {</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        strDestination[0] = L<span class="charliteral">&#39;\0&#39;</span>; <span class="comment">// ensure trailing \0 is written</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        <span class="keywordflow">return</span> 34; <span class="comment">// error: ERANGE</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    }</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> destLen = wcslen(strDestination);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> sourceLen = wcslen(strSource);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keywordflow">if</span> ((destLen &gt; numberOfElements - 1) || ((sourceLen &gt; 0) &amp;&amp; (destLen == numberOfElements)) || (sourceLen &gt; numberOfElements - destLen - 1)) {</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        strDestination[0] = L<span class="charliteral">&#39;\0&#39;</span>; <span class="comment">// ensure trailing \0 is written</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <span class="keywordflow">return</span> 34; <span class="comment">// error: ERANGE</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    }</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    (void)wcscat(strDestination, strSource);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;}</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;errno_t wcscpy_s(<span class="keywordtype">wchar_t</span>* strDestination, <span class="keywordtype">size_t</span> numberOfElements, <span class="keyword">const</span> <span class="keywordtype">wchar_t</span> *strSource)</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;{</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keywordflow">if</span> ((strDestination == <span class="keyword">nullptr</span>) || (strSource == <span class="keyword">nullptr</span>)) {</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        <span class="keywordflow">if</span> (strDestination != <span class="keyword">nullptr</span>) {</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            strDestination[0] = L<span class="charliteral">&#39;\0&#39;</span>; <span class="comment">// ensure trailing \0 is written</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        }</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="keywordflow">return</span> 22; <span class="comment">// error: EINVAL</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    }</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keywordflow">if</span> ((numberOfElements == 0) || (wcslen(strSource) &gt;= numberOfElements)) {</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        strDestination[0] = L<span class="charliteral">&#39;\0&#39;</span>; <span class="comment">// ensure trailing \0 is written</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <span class="keywordflow">return</span> 34; <span class="comment">// error: ERANGE</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    }</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    (void)wcscpy(strDestination, strSource);</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;}</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="preprocessor">#endif</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_74389ed8173ad57b461b9d623a1f3867.xhtml">Source</a></li><li class="navelem"><a class="el" href="../../dir_d1eb22c2ecfd8b50f59e9cbaf8260105.xhtml">src</a></li><li class="navelem"><a class="el" href="../../d5/db5/osx__adapter_8cpp.xhtml">osx_adapter.cpp</a></li>
    <li class="footer">Generated on Wed Aug 14 2019 22:09:47 for SLikeNet by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.2 </li>
  </ul>
</div>
</body>
</html>
