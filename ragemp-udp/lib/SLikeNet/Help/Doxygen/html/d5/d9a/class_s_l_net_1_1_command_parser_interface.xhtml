<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>SLikeNet: SLNet::CommandParserInterface Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SLikeNet
   &#160;<span id="projectnumber">0.1.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../modules.xhtml"><span>Modules</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="../../files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="../../classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="../../inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="../../functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('d5/d9a/class_s_l_net_1_1_command_parser_interface.xhtml','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="../../d1/d5a/class_s_l_net_1_1_command_parser_interface-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">SLNet::CommandParserInterface Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>The interface used by command parsers.  
 <a href="../../d5/d9a/class_s_l_net_1_1_command_parser_interface.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d5/d3b/_command_parser_interface_8h_source.xhtml">slikenet/CommandParserInterface.h</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="../../closed.png" alt="+"/> Inheritance diagram for SLNet::CommandParserInterface:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../df/dee/class_s_l_net_1_1_command_parser_interface__inherit__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a7ba9f06e187e9ddab5ae7c029ea79622"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d9a/class_s_l_net_1_1_command_parser_interface.xhtml#a7ba9f06e187e9ddab5ae7c029ea79622">CommandParserInterface</a> ()</td></tr>
<tr class="separator:a7ba9f06e187e9ddab5ae7c029ea79622"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ed8b0c6f394233b23c09ab24af22475"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d9a/class_s_l_net_1_1_command_parser_interface.xhtml#a9ed8b0c6f394233b23c09ab24af22475">~CommandParserInterface</a> ()</td></tr>
<tr class="separator:a9ed8b0c6f394233b23c09ab24af22475"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87574372b06eec8b442070ba105d9cdf"><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d9a/class_s_l_net_1_1_command_parser_interface.xhtml#a87574372b06eec8b442070ba105d9cdf">GetName</a> (void) const =0</td></tr>
<tr class="separator:a87574372b06eec8b442070ba105d9cdf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a7dcfe0cc123bfd8df26ba1bd8ab4f8"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d9a/class_s_l_net_1_1_command_parser_interface.xhtml#a9a7dcfe0cc123bfd8df26ba1bd8ab4f8">OnNewIncomingConnection</a> (const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;systemAddress, <a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml">TransportInterface</a> *transport)</td></tr>
<tr class="memdesc:a9a7dcfe0cc123bfd8df26ba1bd8ab4f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">A callback for when <em>systemAddress</em> has connected to us.  <a href="#a9a7dcfe0cc123bfd8df26ba1bd8ab4f8"></a><br/></td></tr>
<tr class="separator:a9a7dcfe0cc123bfd8df26ba1bd8ab4f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff1ffd9c6fed37db3b9e06f5cdda776c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d9a/class_s_l_net_1_1_command_parser_interface.xhtml#aff1ffd9c6fed37db3b9e06f5cdda776c">OnConnectionLost</a> (const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;systemAddress, <a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml">TransportInterface</a> *transport)</td></tr>
<tr class="memdesc:aff1ffd9c6fed37db3b9e06f5cdda776c"><td class="mdescLeft">&#160;</td><td class="mdescRight">A callback for when <em>systemAddress</em> has disconnected, either gracefully or forcefully.  <a href="#aff1ffd9c6fed37db3b9e06f5cdda776c"></a><br/></td></tr>
<tr class="separator:aff1ffd9c6fed37db3b9e06f5cdda776c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c76b3671cd43b506017568319dcc512"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d9a/class_s_l_net_1_1_command_parser_interface.xhtml#a7c76b3671cd43b506017568319dcc512">SendHelp</a> (<a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml">TransportInterface</a> *transport, const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;systemAddress)=0</td></tr>
<tr class="memdesc:a7c76b3671cd43b506017568319dcc512"><td class="mdescLeft">&#160;</td><td class="mdescRight">A callback for when you are expected to send a brief description of your parser to <em>systemAddress</em>.  <a href="#a7c76b3671cd43b506017568319dcc512"></a><br/></td></tr>
<tr class="separator:a7c76b3671cd43b506017568319dcc512"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6ddab07566765f7baadbfa5013e5228"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d9a/class_s_l_net_1_1_command_parser_interface.xhtml#ac6ddab07566765f7baadbfa5013e5228">OnCommand</a> (const char *command, unsigned numParameters, char **parameterList, <a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml">TransportInterface</a> *transport, const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;systemAddress, const char *originalString)=0</td></tr>
<tr class="memdesc:ac6ddab07566765f7baadbfa5013e5228"><td class="mdescLeft">&#160;</td><td class="mdescRight">Given <em>command</em> with parameters <em>parameterList</em> , do whatever processing you wish.  <a href="#ac6ddab07566765f7baadbfa5013e5228"></a><br/></td></tr>
<tr class="separator:ac6ddab07566765f7baadbfa5013e5228"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4910fac51a4b7c1180dd36251289def7"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d9a/class_s_l_net_1_1_command_parser_interface.xhtml#a4910fac51a4b7c1180dd36251289def7">OnTransportChange</a> (<a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml">TransportInterface</a> *transport)</td></tr>
<tr class="memdesc:a4910fac51a4b7c1180dd36251289def7"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is called every time transport interface is registered.  <a href="#a4910fac51a4b7c1180dd36251289def7"></a><br/></td></tr>
<tr class="separator:a4910fac51a4b7c1180dd36251289def7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af207b9dd2bd9dd57ae6263f26ae4736b"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d9a/class_s_l_net_1_1_command_parser_interface.xhtml#af207b9dd2bd9dd57ae6263f26ae4736b">GetRegisteredCommand</a> (const char *command, <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#db/db7/struct_s_l_net_1_1_registered_command">RegisteredCommand</a> *rc)</td></tr>
<tr class="separator:af207b9dd2bd9dd57ae6263f26ae4736b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e03d50221b92ab98b41d1f66b8001cb"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d9a/class_s_l_net_1_1_command_parser_interface.xhtml#a2e03d50221b92ab98b41d1f66b8001cb">SendCommandList</a> (<a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml">TransportInterface</a> *transport, const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;systemAddress)</td></tr>
<tr class="separator:a2e03d50221b92ab98b41d1f66b8001cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af567f77880a28f0662de71d2b115ee40"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d9a/class_s_l_net_1_1_command_parser_interface.xhtml#af567f77880a28f0662de71d2b115ee40">RegisterCommand</a> (unsigned char parameterCount, const char *command, const char *commandHelp)</td></tr>
<tr class="separator:af567f77880a28f0662de71d2b115ee40"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa19fe99cd9223c972ff11369cd9179c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d9a/class_s_l_net_1_1_command_parser_interface.xhtml#aaa19fe99cd9223c972ff11369cd9179c">ReturnResult</a> (bool res, const char *command, <a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml">TransportInterface</a> *transport, const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;systemAddress)</td></tr>
<tr class="memdesc:aaa19fe99cd9223c972ff11369cd9179c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Just writes a string to the remote system based on the result ( <em>res</em> ) of your operation.  <a href="#aaa19fe99cd9223c972ff11369cd9179c"></a><br/></td></tr>
<tr class="separator:aaa19fe99cd9223c972ff11369cd9179c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb34c1b3b505bc602fa7ecc0af8bad1a"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d9a/class_s_l_net_1_1_command_parser_interface.xhtml#acb34c1b3b505bc602fa7ecc0af8bad1a">ReturnResult</a> (char *res, const char *command, <a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml">TransportInterface</a> *transport, const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;systemAddress)</td></tr>
<tr class="separator:acb34c1b3b505bc602fa7ecc0af8bad1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7409a39e68431493d7194720cbae91f9"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d9a/class_s_l_net_1_1_command_parser_interface.xhtml#a7409a39e68431493d7194720cbae91f9">ReturnResult</a> (<a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> res, const char *command, <a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml">TransportInterface</a> *transport, const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;systemAddress)</td></tr>
<tr class="separator:a7409a39e68431493d7194720cbae91f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86419b3c8042227f0ad30335f4e35666"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d9a/class_s_l_net_1_1_command_parser_interface.xhtml#a86419b3c8042227f0ad30335f4e35666">ReturnResult</a> (int res, const char *command, <a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml">TransportInterface</a> *transport, const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;systemAddress)</td></tr>
<tr class="separator:a86419b3c8042227f0ad30335f4e35666"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a722b48ee2b088b3d471e978980babac6"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d9a/class_s_l_net_1_1_command_parser_interface.xhtml#a722b48ee2b088b3d471e978980babac6">ReturnResult</a> (const char *command, <a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml">TransportInterface</a> *transport, const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;systemAddress)</td></tr>
<tr class="memdesc:a722b48ee2b088b3d471e978980babac6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Just writes a string to the remote system when you are calling a function that has no return value.  <a href="#a722b48ee2b088b3d471e978980babac6"></a><br/></td></tr>
<tr class="separator:a722b48ee2b088b3d471e978980babac6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a5f24234afcc66d0591109ef74b4d1239"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d9a/class_s_l_net_1_1_command_parser_interface.xhtml#a5f24234afcc66d0591109ef74b4d1239">ParseConsoleString</a> (char *str, const char delineator, unsigned char delineatorToggle, unsigned *numParameters, char **parameterList, unsigned parameterListLength)</td></tr>
<tr class="separator:a5f24234afcc66d0591109ef74b4d1239"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:af22a712a9db931075f8ea8f6a6c5e930"><td class="memItemLeft" align="right" valign="top">static const unsigned char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d9a/class_s_l_net_1_1_command_parser_interface.xhtml#af22a712a9db931075f8ea8f6a6c5e930">VARIABLE_NUMBER_OF_PARAMETERS</a> =255</td></tr>
<tr class="separator:af22a712a9db931075f8ea8f6a6c5e930"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a9ebee7da1aed4260a4935e2954969239"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml">DataStructures::OrderedList</a><br class="typebreak"/>
&lt; const char <br class="typebreak"/>
*, <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#db/db7/struct_s_l_net_1_1_registered_command">RegisteredCommand</a>, <br class="typebreak"/>
<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a809564daeb0384197f70247776af8f9f">RegisteredCommandComp</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d9a/class_s_l_net_1_1_command_parser_interface.xhtml#a9ebee7da1aed4260a4935e2954969239">commandList</a></td></tr>
<tr class="separator:a9ebee7da1aed4260a4935e2954969239"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>The interface used by command parsers. </p>
<p><a class="el" href="../../d5/d9a/class_s_l_net_1_1_command_parser_interface.xhtml" title="The interface used by command parsers.">CommandParserInterface</a> provides a set of functions and interfaces that plug into the <a class="el" href="../../dc/dbe/class_s_l_net_1_1_console_server.xhtml" title="The main entry point for the server portion of your remote console application support.">ConsoleServer</a> class. Each <a class="el" href="../../d5/d9a/class_s_l_net_1_1_command_parser_interface.xhtml" title="The interface used by command parsers.">CommandParserInterface</a> works at the same time as other interfaces in the system. </p>

<p>Definition at line <a class="el" href="../../d5/d3b/_command_parser_interface_8h_source.xhtml#l00050">50</a> of file <a class="el" href="../../d5/d3b/_command_parser_interface_8h_source.xhtml">CommandParserInterface.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a7ba9f06e187e9ddab5ae7c029ea79622"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">CommandParserInterface::CommandParserInterface </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml#l00046">46</a> of file <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml">CommandParserInterface.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a9ed8b0c6f394233b23c09ab24af22475"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">CommandParserInterface::~CommandParserInterface </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml#l00047">47</a> of file <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml">CommandParserInterface.cpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a87574372b06eec8b442070ba105d9cdf"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* SLNet::CommandParserInterface::GetName </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>You are responsible for overriding this function and returning a static string, which will identifier your parser. This should return a static string </p>
<dl class="section return"><dt>Returns</dt><dd>The name that you return. </dd></dl>

<p>Implemented in <a class="el" href="../../d5/da2/class_s_l_net_1_1_log_command_parser.xhtml#a6f5c3ee5e99697a09aa4df82f568a6a3">SLNet::LogCommandParser</a>, and <a class="el" href="../../db/d79/class_s_l_net_1_1_rak_net_command_parser.xhtml#af3e9b29ca472451424c797cca4c558a8">SLNet::RakNetCommandParser</a>.</p>

</div>
</div>
<a class="anchor" id="af207b9dd2bd9dd57ae6263f26ae4736b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool CommandParserInterface::GetRegisteredCommand </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>command</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#db/db7/struct_s_l_net_1_1_registered_command">RegisteredCommand</a> *&#160;</td>
          <td class="paramname"><em>rc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml#l00119">119</a> of file <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml">CommandParserInterface.cpp</a>.</p>

<p>References <a class="el" href="../../d5/d3b/_command_parser_interface_8h_source.xhtml#l00146">commandList</a>, and <a class="el" href="../../d6/d4d/_d_s___ordered_list_8h_source.xhtml#l00124">DataStructures::OrderedList&lt; key_type, data_type, default_comparison_function &gt;::GetIndexFromKey()</a>.</p>

</div>
</div>
<a class="anchor" id="ac6ddab07566765f7baadbfa5013e5228"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool SLNet::CommandParserInterface::OnCommand </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>command</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>numParameters</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>parameterList</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml">TransportInterface</a> *&#160;</td>
          <td class="paramname"><em>transport</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>systemAddress</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>originalString</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Given <em>command</em> with parameters <em>parameterList</em> , do whatever processing you wish. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">command</td><td>The command to process </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">numParameters</td><td>How many parameters were passed along with the command </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">parameterList</td><td>The list of parameters. parameterList[0] is the first parameter and so on. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">transport</td><td>The transport interface we can use to write to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">systemAddress</td><td>The player that sent this command. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">originalString</td><td>The string that was actually sent over the network, in case you want to do your own parsing </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="../../d5/da2/class_s_l_net_1_1_log_command_parser.xhtml#ae2bd5f41fef87a9708e4cbd9eb5e909e">SLNet::LogCommandParser</a>, and <a class="el" href="../../db/d79/class_s_l_net_1_1_rak_net_command_parser.xhtml#af9165a826504c360aef3155dfaa1a4cb">SLNet::RakNetCommandParser</a>.</p>

</div>
</div>
<a class="anchor" id="aff1ffd9c6fed37db3b9e06f5cdda776c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CommandParserInterface::OnConnectionLost </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>systemAddress</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml">TransportInterface</a> *&#160;</td>
          <td class="paramname"><em>transport</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A callback for when <em>systemAddress</em> has disconnected, either gracefully or forcefully. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">systemAddress</td><td>The player that has disconnected. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">transport</td><td>The transport interface that sent us this information. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented in <a class="el" href="../../d5/da2/class_s_l_net_1_1_log_command_parser.xhtml#a69711e87288adfbeea4a48a4140a1275">SLNet::LogCommandParser</a>.</p>

<p>Definition at line <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml#l00137">137</a> of file <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml">CommandParserInterface.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a9a7dcfe0cc123bfd8df26ba1bd8ab4f8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CommandParserInterface::OnNewIncomingConnection </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>systemAddress</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml">TransportInterface</a> *&#160;</td>
          <td class="paramname"><em>transport</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A callback for when <em>systemAddress</em> has connected to us. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">systemAddress</td><td>The player that has connected. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">transport</td><td>The transport interface that sent us this information. Can be used to send messages to this or other players. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented in <a class="el" href="../../d5/da2/class_s_l_net_1_1_log_command_parser.xhtml#ae786c2d5be14376983a10c20468addc5">SLNet::LogCommandParser</a>.</p>

<p>Definition at line <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml#l00132">132</a> of file <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml">CommandParserInterface.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a4910fac51a4b7c1180dd36251289def7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CommandParserInterface::OnTransportChange </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml">TransportInterface</a> *&#160;</td>
          <td class="paramname"><em>transport</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This is called every time transport interface is registered. </p>
<p>If you want to save a copy of the <a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml" title="Defines an interface that is used to send and receive null-terminated strings.">TransportInterface</a> pointer This is the place to do it </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">transport</td><td>The new <a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml" title="Defines an interface that is used to send and receive null-terminated strings.">TransportInterface</a> </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented in <a class="el" href="../../d5/da2/class_s_l_net_1_1_log_command_parser.xhtml#a2223dae174d0f814521eb9f8f855d2f8">SLNet::LogCommandParser</a>.</p>

<p>Definition at line <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml#l00128">128</a> of file <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml">CommandParserInterface.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a5f24234afcc66d0591109ef74b4d1239"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CommandParserInterface::ParseConsoleString </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char&#160;</td>
          <td class="paramname"><em>delineator</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>delineatorToggle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned *&#160;</td>
          <td class="paramname"><em>numParameters</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>parameterList</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>parameterListLength</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml#l00049">49</a> of file <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml">CommandParserInterface.cpp</a>.</p>

<p>References <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>.</p>

</div>
</div>
<a class="anchor" id="af567f77880a28f0662de71d2b115ee40"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CommandParserInterface::RegisterCommand </td>
          <td>(</td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>parameterCount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>command</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>commandHelp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Registers a command. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">parameterCount</td><td>How many parameters your command requires. If you want to accept a variable number of commands, pass <a class="el" href="../../d5/d9a/class_s_l_net_1_1_command_parser_interface.xhtml#af22a712a9db931075f8ea8f6a6c5e930">CommandParserInterface::VARIABLE_NUMBER_OF_PARAMETERS</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">command</td><td>A pointer to a STATIC string that has your command. I keep a copy of the pointer here so don't deallocate the string. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">commandHelp</td><td>A pointer to a STATIC string that has the help information for your command. I keep a copy of the pointer here so don't deallocate the string. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml#l00111">111</a> of file <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml">CommandParserInterface.cpp</a>.</p>

<p>References <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00047">_FILE_AND_LINE_</a>, <a class="el" href="../../d5/d3b/_command_parser_interface_8h_source.xhtml#l00039">SLNet::RegisteredCommand::command</a>, <a class="el" href="../../d5/d3b/_command_parser_interface_8h_source.xhtml#l00040">SLNet::RegisteredCommand::commandHelp</a>, <a class="el" href="../../d5/d3b/_command_parser_interface_8h_source.xhtml#l00146">commandList</a>, <a class="el" href="../../d6/d4d/_d_s___ordered_list_8h_source.xhtml#l00176">DataStructures::OrderedList&lt; key_type, data_type, default_comparison_function &gt;::Insert()</a>, and <a class="el" href="../../d5/d3b/_command_parser_interface_8h_source.xhtml#l00041">SLNet::RegisteredCommand::parameterCount</a>.</p>

</div>
</div>
<a class="anchor" id="aaa19fe99cd9223c972ff11369cd9179c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CommandParserInterface::ReturnResult </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>res</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>command</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml">TransportInterface</a> *&#160;</td>
          <td class="paramname"><em>transport</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>systemAddress</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Just writes a string to the remote system based on the result ( <em>res</em> ) of your operation. </p>
<p>This is not necessary to call, but makes it easier to return results of function calls. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">res</td><td>The result to write </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">command</td><td>The command that this result came from </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">transport</td><td>The transport interface that will be written to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">systemAddress</td><td>The player this result will be sent to </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml#l00142">142</a> of file <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml">CommandParserInterface.cpp</a>.</p>

<p>References <a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml#ab6f5d46268e400149496babd9df74125">SLNet::TransportInterface::Send()</a>.</p>

</div>
</div>
<a class="anchor" id="acb34c1b3b505bc602fa7ecc0af8bad1a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CommandParserInterface::ReturnResult </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>res</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>command</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml">TransportInterface</a> *&#160;</td>
          <td class="paramname"><em>transport</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>systemAddress</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml#l00157">157</a> of file <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml">CommandParserInterface.cpp</a>.</p>

<p>References <a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml#ab6f5d46268e400149496babd9df74125">SLNet::TransportInterface::Send()</a>.</p>

</div>
</div>
<a class="anchor" id="a7409a39e68431493d7194720cbae91f9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CommandParserInterface::ReturnResult </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a>&#160;</td>
          <td class="paramname"><em>res</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>command</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml">TransportInterface</a> *&#160;</td>
          <td class="paramname"><em>transport</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>systemAddress</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml#l00161">161</a> of file <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml">CommandParserInterface.cpp</a>.</p>

<p>References <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00147">SLNet::SystemAddress::GetPort()</a>, <a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml#ab6f5d46268e400149496babd9df74125">SLNet::TransportInterface::Send()</a>, and <a class="el" href="../../d3/d93/_rak_net_types_8cpp_source.xhtml#l00330">SLNet::SystemAddress::ToString()</a>.</p>

</div>
</div>
<a class="anchor" id="a86419b3c8042227f0ad30335f4e35666"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CommandParserInterface::ReturnResult </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>res</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>command</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml">TransportInterface</a> *&#160;</td>
          <td class="paramname"><em>transport</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>systemAddress</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml#l00149">149</a> of file <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml">CommandParserInterface.cpp</a>.</p>

<p>References <a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml#ab6f5d46268e400149496babd9df74125">SLNet::TransportInterface::Send()</a>.</p>

</div>
</div>
<a class="anchor" id="a722b48ee2b088b3d471e978980babac6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CommandParserInterface::ReturnResult </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>command</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml">TransportInterface</a> *&#160;</td>
          <td class="paramname"><em>transport</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>systemAddress</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Just writes a string to the remote system when you are calling a function that has no return value. </p>
<p>This is not necessary to call, but makes it easier to return results of function calls. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">res</td><td>The result to write </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">command</td><td>The command that this result came from </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">transport</td><td>The transport interface that will be written to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">systemAddress</td><td>The player this result will be sent to </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml#l00153">153</a> of file <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml">CommandParserInterface.cpp</a>.</p>

<p>References <a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml#ab6f5d46268e400149496babd9df74125">SLNet::TransportInterface::Send()</a>.</p>

</div>
</div>
<a class="anchor" id="a2e03d50221b92ab98b41d1f66b8001cb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CommandParserInterface::SendCommandList </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml">TransportInterface</a> *&#160;</td>
          <td class="paramname"><em>transport</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>systemAddress</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml#l00095">95</a> of file <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml">CommandParserInterface.cpp</a>.</p>

<p>References <a class="el" href="../../d5/d3b/_command_parser_interface_8h_source.xhtml#l00146">commandList</a>, <a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml#ab6f5d46268e400149496babd9df74125">SLNet::TransportInterface::Send()</a>, and <a class="el" href="../../d6/d4d/_d_s___ordered_list_8h_source.xhtml#l00274">DataStructures::OrderedList&lt; key_type, data_type, default_comparison_function &gt;::Size()</a>.</p>

</div>
</div>
<a class="anchor" id="a7c76b3671cd43b506017568319dcc512"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::CommandParserInterface::SendHelp </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4e/class_s_l_net_1_1_transport_interface.xhtml">TransportInterface</a> *&#160;</td>
          <td class="paramname"><em>transport</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>systemAddress</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A callback for when you are expected to send a brief description of your parser to <em>systemAddress</em>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">transport</td><td>The transport interface we can use to write to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">systemAddress</td><td>The player that requested help. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="../../d5/da2/class_s_l_net_1_1_log_command_parser.xhtml#a394c92ba82a5f933216819a4b0f67961">SLNet::LogCommandParser</a>, and <a class="el" href="../../db/d79/class_s_l_net_1_1_rak_net_command_parser.xhtml#a5ee8241d1bd3572d5d923afddf5401aa">SLNet::RakNetCommandParser</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="a9ebee7da1aed4260a4935e2954969239"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml">DataStructures::OrderedList</a>&lt;const char*, <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#db/db7/struct_s_l_net_1_1_registered_command">RegisteredCommand</a>, <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a809564daeb0384197f70247776af8f9f">RegisteredCommandComp</a>&gt; SLNet::CommandParserInterface::commandList</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d5/d3b/_command_parser_interface_8h_source.xhtml#l00146">146</a> of file <a class="el" href="../../d5/d3b/_command_parser_interface_8h_source.xhtml">CommandParserInterface.h</a>.</p>

<p>Referenced by <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml#l00119">GetRegisteredCommand()</a>, <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml#l00111">RegisterCommand()</a>, and <a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml#l00095">SendCommandList()</a>.</p>

</div>
</div>
<a class="anchor" id="af22a712a9db931075f8ea8f6a6c5e930"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned char CommandParserInterface::VARIABLE_NUMBER_OF_PARAMETERS =255</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d5/d3b/_command_parser_interface_8h_source.xhtml#l00114">114</a> of file <a class="el" href="../../d5/d3b/_command_parser_interface_8h_source.xhtml">CommandParserInterface.h</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Source/include/slikenet/<a class="el" href="../../d5/d3b/_command_parser_interface_8h_source.xhtml">CommandParserInterface.h</a></li>
<li>Source/src/<a class="el" href="../../d9/daa/_command_parser_interface_8cpp_source.xhtml">CommandParserInterface.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml">SLNet</a></li><li class="navelem"><a class="el" href="../../d5/d9a/class_s_l_net_1_1_command_parser_interface.xhtml">CommandParserInterface</a></li>
    <li class="footer">Generated on Wed Aug 14 2019 22:09:49 for SLikeNet by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.2 </li>
  </ul>
</div>
</body>
</html>
