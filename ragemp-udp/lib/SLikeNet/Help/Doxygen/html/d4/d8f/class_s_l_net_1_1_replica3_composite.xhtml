<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>SLikeNet: SLNet::Replica3Composite&lt; parent_type &gt; Class Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SLikeNet
   &#160;<span id="projectnumber">0.1.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../modules.xhtml"><span>Modules</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="../../files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="../../classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="../../inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="../../functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="../../d6/db8/class_s_l_net_1_1_replica3_composite-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">SLNet::Replica3Composite&lt; parent_type &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Use <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> through composition instead of inheritance by containing an instance of this templated class Calls to parent class for all functions Parent class must still define and functions though!  
 <a href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">slikenet/ReplicaManager3.h</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="../../closed.png" alt="+"/> Inheritance diagram for SLNet::Replica3Composite&lt; parent_type &gt;:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d1/d87/class_s_l_net_1_1_replica3_composite__inherit__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a6fb5745c0a41cbe1cfb3955fbacbd673"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a6fb5745c0a41cbe1cfb3955fbacbd673">SetCompositeOwner</a> (parent_type *p)</td></tr>
<tr class="separator:a6fb5745c0a41cbe1cfb3955fbacbd673"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf3206f3a96234788fe4488fe1d14302"><td class="memItemLeft" align="right" valign="top">parent_type *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#abf3206f3a96234788fe4488fe1d14302">GetCompositeOwner</a> (void) const </td></tr>
<tr class="separator:abf3206f3a96234788fe4488fe1d14302"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78c835d8559ec3f376bd95d36ecc4564"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a78c835d8559ec3f376bd95d36ecc4564">WriteAllocationID</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection, <a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *allocationIdBitstream) const </td></tr>
<tr class="memdesc:a78c835d8559ec3f376bd95d36ecc4564"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write a unique identifer that can be read on a remote system to create an object of this same class.  <a href="#a78c835d8559ec3f376bd95d36ecc4564"></a><br/></td></tr>
<tr class="separator:a78c835d8559ec3f376bd95d36ecc4564"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc4616f18d9526a0554ef72025bd92e2"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gadf975dd8a1352bc64cfa8f4de8054c48">SLNet::RM3ConstructionState</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#acc4616f18d9526a0554ef72025bd92e2">QueryConstruction</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">SLNet::ReplicaManager3</a> *replicaManager3)</td></tr>
<tr class="memdesc:acc4616f18d9526a0554ef72025bd92e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Ask if this object, which does not exist on <em>destinationConnection</em> should (now) be sent to that system.  <a href="#acc4616f18d9526a0554ef72025bd92e2"></a><br/></td></tr>
<tr class="separator:acc4616f18d9526a0554ef72025bd92e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc6380a679846d0e496a507ee884ffce"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga77f11ba8783033d5b9644257cbb996d3">SLNet::RM3DestructionState</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#acc6380a679846d0e496a507ee884ffce">QueryDestruction</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">SLNet::ReplicaManager3</a> *replicaManager3)</td></tr>
<tr class="memdesc:acc6380a679846d0e496a507ee884ffce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Ask if this object, which does exist on <em>destinationConnection</em> should be removed from the remote system.  <a href="#acc6380a679846d0e496a507ee884ffce"></a><br/></td></tr>
<tr class="separator:acc6380a679846d0e496a507ee884ffce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d3ecca89023a52e073d587d1d62779f"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a3d3ecca89023a52e073d587d1d62779f">QueryRemoteConstruction</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *sourceConnection)</td></tr>
<tr class="memdesc:a3d3ecca89023a52e073d587d1d62779f"><td class="mdescLeft">&#160;</td><td class="mdescRight">We're about to call <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#ad442eea446ad187681d8812eb5c66c43" title="Read data written by Replica3::SerializeConstruction()">DeserializeConstruction()</a> on this <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a>. If <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a3d3ecca89023a52e073d587d1d62779f" title="We&#39;re about to call DeserializeConstruction() on this Replica3. If QueryRemoteConstruction() returns ...">QueryRemoteConstruction()</a> returns false, this object is deleted instead.  <a href="#a3d3ecca89023a52e073d587d1d62779f"></a><br/></td></tr>
<tr class="separator:a3d3ecca89023a52e073d587d1d62779f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8dd6381a64895144ebc129bf9b3dcd25"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a8dd6381a64895144ebc129bf9b3dcd25">QueryRelayDestruction</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *sourceConnection) const </td></tr>
<tr class="memdesc:a8dd6381a64895144ebc129bf9b3dcd25"><td class="mdescLeft">&#160;</td><td class="mdescRight">We got a message from a connection to destroy this replica Return true to automatically relay the destruction message to all our other connections For a client in client/server, it does not matter what this funtion returns For a server in client/server, this should normally return true For a peer in peer to peer, you can normally return false since the original destroying peer would have told all other peers about the destruction If a system gets a destruction command for an object that was already destroyed, the destruction message is ignored.  <a href="#a8dd6381a64895144ebc129bf9b3dcd25"></a><br/></td></tr>
<tr class="separator:a8dd6381a64895144ebc129bf9b3dcd25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b05dcb8e721e594319c32f1a9b9db13"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a4b05dcb8e721e594319c32f1a9b9db13">SerializeConstruction</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *constructionBitstream, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection)</td></tr>
<tr class="memdesc:a4b05dcb8e721e594319c32f1a9b9db13"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write data to be sent only when the object is constructed on a remote system.  <a href="#a4b05dcb8e721e594319c32f1a9b9db13"></a><br/></td></tr>
<tr class="separator:a4b05dcb8e721e594319c32f1a9b9db13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad442eea446ad187681d8812eb5c66c43"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#ad442eea446ad187681d8812eb5c66c43">DeserializeConstruction</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *constructionBitstream, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *sourceConnection)</td></tr>
<tr class="memdesc:ad442eea446ad187681d8812eb5c66c43"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read data written by <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#adc5fe35f637eeb607f6b76de4a6372c0" title="Write data to be sent only when the object is constructed on a remote system.">Replica3::SerializeConstruction()</a>  <a href="#ad442eea446ad187681d8812eb5c66c43"></a><br/></td></tr>
<tr class="separator:ad442eea446ad187681d8812eb5c66c43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05dfbbe98ffb64ac52bd614fac672749"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a05dfbbe98ffb64ac52bd614fac672749">SerializeConstructionExisting</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *constructionBitstream, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection)</td></tr>
<tr class="separator:a05dfbbe98ffb64ac52bd614fac672749"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a01b24d92cae0411113b3c9930f209a"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a5a01b24d92cae0411113b3c9930f209a">DeserializeConstructionExisting</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *constructionBitstream, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *sourceConnection)</td></tr>
<tr class="separator:a5a01b24d92cae0411113b3c9930f209a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96942e9814ebd48774ca261fbaa2f631"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a96942e9814ebd48774ca261fbaa2f631">SerializeDestruction</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *destructionBitstream, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection)</td></tr>
<tr class="memdesc:a96942e9814ebd48774ca261fbaa2f631"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write extra data to send with the object deletion event, if desired.  <a href="#a96942e9814ebd48774ca261fbaa2f631"></a><br/></td></tr>
<tr class="separator:a96942e9814ebd48774ca261fbaa2f631"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59d5c8e512a08cfe6f1ce592268fc05e"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a59d5c8e512a08cfe6f1ce592268fc05e">DeserializeDestruction</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *destructionBitstream, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *sourceConnection)</td></tr>
<tr class="memdesc:a59d5c8e512a08cfe6f1ce592268fc05e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read data written by <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9c0c9520c8192bfd87d0c560d8182248" title="Write extra data to send with the object deletion event, if desired.">Replica3::SerializeDestruction()</a>  <a href="#a59d5c8e512a08cfe6f1ce592268fc05e"></a><br/></td></tr>
<tr class="separator:a59d5c8e512a08cfe6f1ce592268fc05e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa95265145a7464dbd8d33a8cb433814d"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga698075ced173fa417a7df5f9d1be15e8">SLNet::RM3ActionOnPopConnection</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#aa95265145a7464dbd8d33a8cb433814d">QueryActionOnPopConnection</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *droppedConnection) const </td></tr>
<tr class="memdesc:aa95265145a7464dbd8d33a8cb433814d"><td class="mdescLeft">&#160;</td><td class="mdescRight">The system is asking what to do with this replica when the connection is dropped.  <a href="#aa95265145a7464dbd8d33a8cb433814d"></a><br/></td></tr>
<tr class="separator:aa95265145a7464dbd8d33a8cb433814d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ba44d7be986fc9a2a65832d1fea644c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a2ba44d7be986fc9a2a65832d1fea644c">OnPoppedConnection</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *droppedConnection)</td></tr>
<tr class="memdesc:a2ba44d7be986fc9a2a65832d1fea644c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Notification called for each of our replicas when a connection is popped.  <a href="#a2ba44d7be986fc9a2a65832d1fea644c"></a><br/></td></tr>
<tr class="separator:a2ba44d7be986fc9a2a65832d1fea644c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe19935fcfea23a3d3527e24ff45cca9"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#afe19935fcfea23a3d3527e24ff45cca9">DeallocReplica</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *sourceConnection)</td></tr>
<tr class="memdesc:afe19935fcfea23a3d3527e24ff45cca9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override with {delete this;}.  <a href="#afe19935fcfea23a3d3527e24ff45cca9"></a><br/></td></tr>
<tr class="separator:afe19935fcfea23a3d3527e24ff45cca9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9363d5b9aec96bb3a7805c603774cd59"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga134c0f5cbd0cb8c0182ffeeebb2aea59">SLNet::RM3QuerySerializationResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a9363d5b9aec96bb3a7805c603774cd59">QuerySerialization</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection)</td></tr>
<tr class="memdesc:a9363d5b9aec96bb3a7805c603774cd59"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implement with <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a36f9383b90b1074b9bd2decf8761538b" title="Default call for QuerySerialization().">QuerySerialization_ClientSerializable()</a>, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a6e01c91c7563d2572a1b6e65311284df" title="Default call for QuerySerialization().">QuerySerialization_ServerSerializable()</a>, or <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a1493100baac7dc035d7519d0b97c02ff" title="Default call for QuerySerialization().">QuerySerialization_PeerToPeer()</a>  <a href="#a9363d5b9aec96bb3a7805c603774cd59"></a><br/></td></tr>
<tr class="separator:a9363d5b9aec96bb3a7805c603774cd59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ca87ca259b10100d3bc1557379e32b4"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a4ca87ca259b10100d3bc1557379e32b4">OnUserReplicaPreSerializeTick</a> (void)</td></tr>
<tr class="memdesc:a4ca87ca259b10100d3bc1557379e32b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called for each replica owned by the user, once per Serialization tick, before <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a6e7587fc3d2d09e82406e55cb9b2f6ff" title="Serialize our class to a bitstream.">Serialize()</a> is called. If you want to do some kind of operation on the Replica objects that you own, just before Serialization(), then overload this function.  <a href="#a4ca87ca259b10100d3bc1557379e32b4"></a><br/></td></tr>
<tr class="separator:a4ca87ca259b10100d3bc1557379e32b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e7587fc3d2d09e82406e55cb9b2f6ff"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga4d0f10f0e557bd96237574321b79a68a">SLNet::RM3SerializationResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a6e7587fc3d2d09e82406e55cb9b2f6ff">Serialize</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d5/dad/struct_s_l_net_1_1_serialize_parameters">SLNet::SerializeParameters</a> *serializeParameters)</td></tr>
<tr class="memdesc:a6e7587fc3d2d09e82406e55cb9b2f6ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Serialize our class to a bitstream.  <a href="#a6e7587fc3d2d09e82406e55cb9b2f6ff"></a><br/></td></tr>
<tr class="separator:a6e7587fc3d2d09e82406e55cb9b2f6ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a608842a7b612ce8bf64d938e1cf5a316"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a608842a7b612ce8bf64d938e1cf5a316">OnSerializeTransmission</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *bitStream, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection, <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">SLNet::BitSize_t</a> bitsPerChannel[<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#ab44c634dfee8b57213d26249218ea2cd">SLNet::RM3_NUM_OUTPUT_BITSTREAM_CHANNELS</a>], <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">SLNet::Time</a> curTime)</td></tr>
<tr class="separator:a608842a7b612ce8bf64d938e1cf5a316"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05c471b6c6d744bb487bd836b48cf228"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a05c471b6c6d744bb487bd836b48cf228">Deserialize</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#df/d99/struct_s_l_net_1_1_deserialize_parameters">SLNet::DeserializeParameters</a> *deserializeParameters)</td></tr>
<tr class="memdesc:a05c471b6c6d744bb487bd836b48cf228"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read what was written in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a6e7587fc3d2d09e82406e55cb9b2f6ff" title="Serialize our class to a bitstream.">Serialize()</a>  <a href="#a05c471b6c6d744bb487bd836b48cf228"></a><br/></td></tr>
<tr class="separator:a05c471b6c6d744bb487bd836b48cf228"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0ece5bfe5d6e0298f978e92bb794556"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#aa0ece5bfe5d6e0298f978e92bb794556">PostSerializeConstruction</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *constructionBitstream, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection)</td></tr>
<tr class="memdesc:aa0ece5bfe5d6e0298f978e92bb794556"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called after SerializeConstruction completes for all objects in a given update tick.<br/>
 Writes to <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#abde90440a05ad0a6b7593f20456cfb78">PostDeserializeConstruction()</a>, which is called after all objects are created for a given Construction tick(). Override to send data to <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#abde90440a05ad0a6b7593f20456cfb78">PostDeserializeConstruction()</a>, such as the NetworkID of other objects to resolve pointers to.  <a href="#aa0ece5bfe5d6e0298f978e92bb794556"></a><br/></td></tr>
<tr class="separator:aa0ece5bfe5d6e0298f978e92bb794556"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abde90440a05ad0a6b7593f20456cfb78"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#abde90440a05ad0a6b7593f20456cfb78">PostDeserializeConstruction</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *constructionBitstream, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *sourceConnection)</td></tr>
<tr class="separator:abde90440a05ad0a6b7593f20456cfb78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc3e0001f3169e5ceb7cc16fd7399da8"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#abc3e0001f3169e5ceb7cc16fd7399da8">PostSerializeConstructionExisting</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *constructionBitstream, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection)</td></tr>
<tr class="memdesc:abc3e0001f3169e5ceb7cc16fd7399da8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#aa0ece5bfe5d6e0298f978e92bb794556" title="Called after SerializeConstruction completes for all objects in a given update tick.  Writes to PostDeserializeConstruction(), which is called after all objects are created for a given Construction tick(). Override to send data to PostDeserializeConstruction(), such as the NetworkID of other objects to resolve pointers to.">PostSerializeConstruction()</a>, but for objects that returned RM3CS_ALREADY_EXISTS_REMOTELY from QueryConstruction.  <a href="#abc3e0001f3169e5ceb7cc16fd7399da8"></a><br/></td></tr>
<tr class="separator:abc3e0001f3169e5ceb7cc16fd7399da8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a091313e4eb8fa0a3a2a5e630a29eb0e2"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a091313e4eb8fa0a3a2a5e630a29eb0e2">PostDeserializeConstructionExisting</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *constructionBitstream, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *sourceConnection)</td></tr>
<tr class="memdesc:a091313e4eb8fa0a3a2a5e630a29eb0e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#abde90440a05ad0a6b7593f20456cfb78">PostDeserializeConstruction()</a>, but for objects that returned RM3CS_ALREADY_EXISTS_REMOTELY from QueryConstruction.  <a href="#a091313e4eb8fa0a3a2a5e630a29eb0e2"></a><br/></td></tr>
<tr class="separator:a091313e4eb8fa0a3a2a5e630a29eb0e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a648a8ec3efa4267b793aa525812e1575"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a648a8ec3efa4267b793aa525812e1575">PreDestruction</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *sourceConnection)</td></tr>
<tr class="separator:a648a8ec3efa4267b793aa525812e1575"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">SLNet::Replica3</a></td></tr>
<tr class="memitem:ad4b3858552d4559604ec793fa3b6a2d2 inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ad4b3858552d4559604ec793fa3b6a2d2">Replica3</a> ()</td></tr>
<tr class="separator:ad4b3858552d4559604ec793fa3b6a2d2 inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac707ce1ae46b9b3e28bf3a63869e472d inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ac707ce1ae46b9b3e28bf3a63869e472d">~Replica3</a> ()</td></tr>
<tr class="separator:ac707ce1ae46b9b3e28bf3a63869e472d inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c4cfd8f4ca3d7e96887bf3cce948fb1 inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a4c4cfd8f4ca3d7e96887bf3cce948fb1">OnSerializeTransmission</a> (<a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *bitStream, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection, <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> bitsPerChannel[<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#ab44c634dfee8b57213d26249218ea2cd">RM3_NUM_OUTPUT_BITSTREAM_CHANNELS</a>], <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">SLNet::Time</a> curTime)</td></tr>
<tr class="memdesc:a4c4cfd8f4ca3d7e96887bf3cce948fb1 inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when the class is actually transmitted via <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a90a3755d677079ec3718ddd6f8df32f1" title="Serialize our class to a bitstream.">Serialize()</a>  <a href="#a4c4cfd8f4ca3d7e96887bf3cce948fb1"></a><br/></td></tr>
<tr class="separator:a4c4cfd8f4ca3d7e96887bf3cce948fb1 inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3c2aa34f8ff187c5d97762cd002bfbc inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gadf975dd8a1352bc64cfa8f4de8054c48">RM3ConstructionState</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab3c2aa34f8ff187c5d97762cd002bfbc">QueryConstruction_ClientConstruction</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection, bool isThisTheServer)</td></tr>
<tr class="memdesc:ab3c2aa34f8ff187c5d97762cd002bfbc inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default call for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9cd4c94d916baf34960fe4e396a9a402" title="Ask if this object, which does not exist on destinationConnection should (now) be sent to that system...">QueryConstruction()</a>.  <a href="#ab3c2aa34f8ff187c5d97762cd002bfbc"></a><br/></td></tr>
<tr class="separator:ab3c2aa34f8ff187c5d97762cd002bfbc inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d2c0dabc915f531c90a3a723cb8b2da inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a1d2c0dabc915f531c90a3a723cb8b2da">QueryRemoteConstruction_ClientConstruction</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *sourceConnection, bool isThisTheServer)</td></tr>
<tr class="separator:a1d2c0dabc915f531c90a3a723cb8b2da inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad0cbd467cf38dcd8e74f1c6aa2b2a2e inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gadf975dd8a1352bc64cfa8f4de8054c48">RM3ConstructionState</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#aad0cbd467cf38dcd8e74f1c6aa2b2a2e">QueryConstruction_ServerConstruction</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection, bool isThisTheServer)</td></tr>
<tr class="memdesc:aad0cbd467cf38dcd8e74f1c6aa2b2a2e inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default call for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9cd4c94d916baf34960fe4e396a9a402" title="Ask if this object, which does not exist on destinationConnection should (now) be sent to that system...">QueryConstruction()</a>.  <a href="#aad0cbd467cf38dcd8e74f1c6aa2b2a2e"></a><br/></td></tr>
<tr class="separator:aad0cbd467cf38dcd8e74f1c6aa2b2a2e inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a034013381bd9934335e6e37aa65f8fde inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a034013381bd9934335e6e37aa65f8fde">QueryRemoteConstruction_ServerConstruction</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *sourceConnection, bool isThisTheServer)</td></tr>
<tr class="memdesc:a034013381bd9934335e6e37aa65f8fde inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default call for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#af2ee7d5a78ce055e365a2a303fd80718" title="We&#39;re about to call DeserializeConstruction() on this Replica3. If QueryRemoteConstruction() returns ...">QueryRemoteConstruction()</a>. Allow the server to create this object, but not the client.  <a href="#a034013381bd9934335e6e37aa65f8fde"></a><br/></td></tr>
<tr class="separator:a034013381bd9934335e6e37aa65f8fde inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8841b580b53b03d6adb1712f9b0f55d9 inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gadf975dd8a1352bc64cfa8f4de8054c48">RM3ConstructionState</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a8841b580b53b03d6adb1712f9b0f55d9">QueryConstruction_PeerToPeer</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gab6ddc529b3713b27f8d9addde9114a7c">Replica3P2PMode</a> p2pMode=<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ggab6ddc529b3713b27f8d9addde9114a7ca913e6305dae6ce3163eda78b4c5bb64a">R3P2PM_SINGLE_OWNER</a>)</td></tr>
<tr class="memdesc:a8841b580b53b03d6adb1712f9b0f55d9 inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default call for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9cd4c94d916baf34960fe4e396a9a402" title="Ask if this object, which does not exist on destinationConnection should (now) be sent to that system...">QueryConstruction()</a>.  <a href="#a8841b580b53b03d6adb1712f9b0f55d9"></a><br/></td></tr>
<tr class="separator:a8841b580b53b03d6adb1712f9b0f55d9 inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc36beededae615df71857dfc535162c inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#abc36beededae615df71857dfc535162c">QueryRemoteConstruction_PeerToPeer</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *sourceConnection)</td></tr>
<tr class="memdesc:abc36beededae615df71857dfc535162c inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default call for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#af2ee7d5a78ce055e365a2a303fd80718" title="We&#39;re about to call DeserializeConstruction() on this Replica3. If QueryRemoteConstruction() returns ...">QueryRemoteConstruction()</a>.  <a href="#abc36beededae615df71857dfc535162c"></a><br/></td></tr>
<tr class="separator:abc36beededae615df71857dfc535162c inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36f9383b90b1074b9bd2decf8761538b inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga134c0f5cbd0cb8c0182ffeeebb2aea59">SLNet::RM3QuerySerializationResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a36f9383b90b1074b9bd2decf8761538b">QuerySerialization_ClientSerializable</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection, bool isThisTheServer)</td></tr>
<tr class="memdesc:a36f9383b90b1074b9bd2decf8761538b inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default call for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a899d87b3aeb957648a049d1aba47c42a" title="Implement with QuerySerialization_ClientSerializable(), QuerySerialization_ServerSerializable(), or QuerySerialization_PeerToPeer()">QuerySerialization()</a>.  <a href="#a36f9383b90b1074b9bd2decf8761538b"></a><br/></td></tr>
<tr class="separator:a36f9383b90b1074b9bd2decf8761538b inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e01c91c7563d2572a1b6e65311284df inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga134c0f5cbd0cb8c0182ffeeebb2aea59">SLNet::RM3QuerySerializationResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a6e01c91c7563d2572a1b6e65311284df">QuerySerialization_ServerSerializable</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection, bool isThisTheServer)</td></tr>
<tr class="memdesc:a6e01c91c7563d2572a1b6e65311284df inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default call for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a899d87b3aeb957648a049d1aba47c42a" title="Implement with QuerySerialization_ClientSerializable(), QuerySerialization_ServerSerializable(), or QuerySerialization_PeerToPeer()">QuerySerialization()</a>.  <a href="#a6e01c91c7563d2572a1b6e65311284df"></a><br/></td></tr>
<tr class="separator:a6e01c91c7563d2572a1b6e65311284df inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1493100baac7dc035d7519d0b97c02ff inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga134c0f5cbd0cb8c0182ffeeebb2aea59">SLNet::RM3QuerySerializationResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a1493100baac7dc035d7519d0b97c02ff">QuerySerialization_PeerToPeer</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *destinationConnection, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gab6ddc529b3713b27f8d9addde9114a7c">Replica3P2PMode</a> p2pMode=<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ggab6ddc529b3713b27f8d9addde9114a7ca913e6305dae6ce3163eda78b4c5bb64a">R3P2PM_SINGLE_OWNER</a>)</td></tr>
<tr class="memdesc:a1493100baac7dc035d7519d0b97c02ff inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default call for <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a899d87b3aeb957648a049d1aba47c42a" title="Implement with QuerySerialization_ClientSerializable(), QuerySerialization_ServerSerializable(), or QuerySerialization_PeerToPeer()">QuerySerialization()</a>.  <a href="#a1493100baac7dc035d7519d0b97c02ff"></a><br/></td></tr>
<tr class="separator:a1493100baac7dc035d7519d0b97c02ff inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59072625002d4878a4cd701ed616304b inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga698075ced173fa417a7df5f9d1be15e8">RM3ActionOnPopConnection</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a59072625002d4878a4cd701ed616304b">QueryActionOnPopConnection_Client</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *droppedConnection) const </td></tr>
<tr class="memdesc:a59072625002d4878a4cd701ed616304b inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default: If we are a client, and the connection is lost, delete the server's objects.  <a href="#a59072625002d4878a4cd701ed616304b"></a><br/></td></tr>
<tr class="separator:a59072625002d4878a4cd701ed616304b inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab92e9826218282c083174e015385ef65 inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga698075ced173fa417a7df5f9d1be15e8">RM3ActionOnPopConnection</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab92e9826218282c083174e015385ef65">QueryActionOnPopConnection_Server</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *droppedConnection) const </td></tr>
<tr class="memdesc:ab92e9826218282c083174e015385ef65 inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default: If we are a server, and the connection is lost, delete the client's objects and broadcast the destruction.  <a href="#ab92e9826218282c083174e015385ef65"></a><br/></td></tr>
<tr class="separator:ab92e9826218282c083174e015385ef65 inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7f829294c60852632331337deb9083b inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga698075ced173fa417a7df5f9d1be15e8">RM3ActionOnPopConnection</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#af7f829294c60852632331337deb9083b">QueryActionOnPopConnection_PeerToPeer</a> (<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *droppedConnection) const </td></tr>
<tr class="memdesc:af7f829294c60852632331337deb9083b inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default: If we are a peer, and the connection is lost, delete the peer's objects.  <a href="#af7f829294c60852632331337deb9083b"></a><br/></td></tr>
<tr class="separator:af7f829294c60852632331337deb9083b inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5096b364b6e47f5dc3e49734208fbd0 inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab5096b364b6e47f5dc3e49734208fbd0">BroadcastDestruction</a> (void)</td></tr>
<tr class="separator:ab5096b364b6e47f5dc3e49734208fbd0 inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4aaf7cc5690fb3493cae95641f5e7213 inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a4aaf7cc5690fb3493cae95641f5e7213">GetCreatingSystemGUID</a> (void) const </td></tr>
<tr class="separator:a4aaf7cc5690fb3493cae95641f5e7213 inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d1b5df1f2ed5af6f18619c509cefb77 inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a7d1b5df1f2ed5af6f18619c509cefb77">WasReferenced</a> (void) const </td></tr>
<tr class="separator:a7d1b5df1f2ed5af6f18619c509cefb77 inherit pub_methods_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_class_s_l_net_1_1_network_i_d_object"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_class_s_l_net_1_1_network_i_d_object')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../db/d6d/class_s_l_net_1_1_network_i_d_object.xhtml">SLNet::NetworkIDObject</a></td></tr>
<tr class="memitem:a5144a4e252f8cbabb96597a0a4ab9585 inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d6d/class_s_l_net_1_1_network_i_d_object.xhtml#a5144a4e252f8cbabb96597a0a4ab9585">NetworkIDObject</a> ()</td></tr>
<tr class="separator:a5144a4e252f8cbabb96597a0a4ab9585 inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9c88e33440facce2589c023bbe7e21f inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d6d/class_s_l_net_1_1_network_i_d_object.xhtml#ae9c88e33440facce2589c023bbe7e21f">~NetworkIDObject</a> ()</td></tr>
<tr class="separator:ae9c88e33440facce2589c023bbe7e21f inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f1b74caa0ccc03c590be9ce363bf98d inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d6d/class_s_l_net_1_1_network_i_d_object.xhtml#a0f1b74caa0ccc03c590be9ce363bf98d">SetNetworkIDManager</a> (<a class="el" href="../../d9/dbd/class_s_l_net_1_1_network_i_d_manager.xhtml">NetworkIDManager</a> *manager)</td></tr>
<tr class="separator:a0f1b74caa0ccc03c590be9ce363bf98d inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70b4753f2b55dece5e08fc7122f5fb0a inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d9/dbd/class_s_l_net_1_1_network_i_d_manager.xhtml">NetworkIDManager</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d6d/class_s_l_net_1_1_network_i_d_object.xhtml#a70b4753f2b55dece5e08fc7122f5fb0a">GetNetworkIDManager</a> (void) const </td></tr>
<tr class="memdesc:a70b4753f2b55dece5e08fc7122f5fb0a inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns what was passed to SetNetworkIDManager.  <a href="#a70b4753f2b55dece5e08fc7122f5fb0a"></a><br/></td></tr>
<tr class="separator:a70b4753f2b55dece5e08fc7122f5fb0a inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d98d33a63964e2c7b566e472c121a6d inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#aa616a13e58b2ffd2c3161609610b256d">NetworkID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d6d/class_s_l_net_1_1_network_i_d_object.xhtml#a1d98d33a63964e2c7b566e472c121a6d">GetNetworkID</a> (void)</td></tr>
<tr class="separator:a1d98d33a63964e2c7b566e472c121a6d inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61d97a28ee8a5336fd9f55165c401a11 inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d6d/class_s_l_net_1_1_network_i_d_object.xhtml#a61d97a28ee8a5336fd9f55165c401a11">SetNetworkID</a> (<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#aa616a13e58b2ffd2c3161609610b256d">NetworkID</a> id)</td></tr>
<tr class="separator:a61d97a28ee8a5336fd9f55165c401a11 inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48e4297abc90c622b9647053356feb82 inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d6d/class_s_l_net_1_1_network_i_d_object.xhtml#a48e4297abc90c622b9647053356feb82">SetParent</a> (void *_parent)</td></tr>
<tr class="separator:a48e4297abc90c622b9647053356feb82 inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6d1dd6b4647f677b9c5a0031940d0a6 inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memItemLeft" align="right" valign="top">virtual void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d6d/class_s_l_net_1_1_network_i_d_object.xhtml#aa6d1dd6b4647f677b9c5a0031940d0a6">GetParent</a> (void) const </td></tr>
<tr class="separator:aa6d1dd6b4647f677b9c5a0031940d0a6 inherit pub_methods_class_s_l_net_1_1_network_i_d_object"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a2d110322a65691bb161900ef3417e193"><td class="memItemLeft" align="right" valign="top">parent_type *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a2d110322a65691bb161900ef3417e193">r3CompositeOwner</a></td></tr>
<tr class="separator:a2d110322a65691bb161900ef3417e193"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_attribs_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td colspan="2" onclick="javascript:toggleInherit('pub_attribs_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3')"><img src="../../closed.png" alt="-"/>&#160;Public Attributes inherited from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3">SLNet::Replica3</a></td></tr>
<tr class="memitem:af4735cc644d4142a5cbf609603abc0dd inherit pub_attribs_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#af4735cc644d4142a5cbf609603abc0dd">creatingSystemGUID</a></td></tr>
<tr class="separator:af4735cc644d4142a5cbf609603abc0dd inherit pub_attribs_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb5f894caecd98383a50ebd7a56c9f45 inherit pub_attribs_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#adb5f894caecd98383a50ebd7a56c9f45">deletingSystemGUID</a></td></tr>
<tr class="memdesc:adb5f894caecd98383a50ebd7a56c9f45 inherit pub_attribs_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="mdescLeft">&#160;</td><td class="mdescRight">GUID of the system that caused the item to send a deletion command over the network.  <a href="#adb5f894caecd98383a50ebd7a56c9f45"></a><br/></td></tr>
<tr class="separator:adb5f894caecd98383a50ebd7a56c9f45 inherit pub_attribs_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a330d9d27af5c0ae01dbf623456d5a3b4 inherit pub_attribs_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">ReplicaManager3</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a330d9d27af5c0ae01dbf623456d5a3b4">replicaManager</a></td></tr>
<tr class="separator:a330d9d27af5c0ae01dbf623456d5a3b4 inherit pub_attribs_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc114a79c424308febcb735fd711f304 inherit pub_attribs_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#dd/da8/struct_s_l_net_1_1_last_serialization_result_b_s">LastSerializationResultBS</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#abc114a79c424308febcb735fd711f304">lastSentSerialization</a></td></tr>
<tr class="separator:abc114a79c424308febcb735fd711f304 inherit pub_attribs_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a454a198e8ac91ea9ea06cae70d023b76 inherit pub_attribs_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a454a198e8ac91ea9ea06cae70d023b76">forceSendUntilNextUpdate</a></td></tr>
<tr class="separator:a454a198e8ac91ea9ea06cae70d023b76 inherit pub_attribs_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68f9516df7ca933abf3e308376650b1c inherit pub_attribs_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d7/d35/struct_s_l_net_1_1_last_serialization_result">LastSerializationResult</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a68f9516df7ca933abf3e308376650b1c">lsr</a></td></tr>
<tr class="separator:a68f9516df7ca933abf3e308376650b1c inherit pub_attribs_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1949539d341db2cf76a2bc82d7f21fc7 inherit pub_attribs_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../df/df2/_native_types_8h.xhtml#a6eb1e68cc391dd753bc8ce896dbb8315">uint32_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a1949539d341db2cf76a2bc82d7f21fc7">referenceIndex</a></td></tr>
<tr class="separator:a1949539d341db2cf76a2bc82d7f21fc7 inherit pub_attribs_group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;class parent_type&gt;<br/>
class SLNet::Replica3Composite&lt; parent_type &gt;</h3>

<p>Use <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> through composition instead of inheritance by containing an instance of this templated class Calls to parent class for all functions Parent class must still define and functions though! </p>
<dl class="section pre"><dt>Precondition</dt><dd>Parent class must call <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a6fb5745c0a41cbe1cfb3955fbacbd673">SetCompositeOwner()</a> on this object </dd></dl>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01104">1104</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="afe19935fcfea23a3d3527e24ff45cca9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::DeallocReplica </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>sourceConnection</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override with {delete this;}. </p>
<ol>
<li>
Got a remote message to delete this object which passed <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a59d5c8e512a08cfe6f1ce592268fc05e" title="Read data written by Replica3::SerializeDestruction()">DeserializeDestruction()</a>, OR </li>
<li>
<a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a5a9827b1942a87ab2f797d32a6365fbb" title="Enable or disable automatically assigning connections to new instances of Connection_RM3.">ReplicaManager3::SetAutoManageConnections()</a> was called autoDestroy true (which is the default setting), and a remote system that owns this object disconnected) OR &lt;&gt; <br/>
 Override with {delete this;} to actually delete the object (and any other processing you wish).<br/>
 If you don't want to delete the object, just do nothing, however, the system will not know this. You may wish to call Dereference() if the object should no longer be networked, but remain in memory. You are responsible for deleting it yoruself later.<br/>
 destructionBitstream may be 0 if the object was deleted locally </li>
</ol>

<p>Implements <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ac15ca71b47ab97af83d249c6bba723db">SLNet::Replica3</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01124">1124</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a05c471b6c6d744bb487bd836b48cf228"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::Deserialize </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#df/d99/struct_s_l_net_1_1_deserialize_parameters">SLNet::DeserializeParameters</a> *&#160;</td>
          <td class="paramname"><em>deserializeParameters</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Read what was written in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a6e7587fc3d2d09e82406e55cb9b2f6ff" title="Serialize our class to a bitstream.">Serialize()</a> </p>
<p>Reads the contents of the class from SerializationParamters::serializationBitstream.<br/>
 Called whenever <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a6e7587fc3d2d09e82406e55cb9b2f6ff" title="Serialize our class to a bitstream.">Serialize()</a> is called with different data from the last send. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">serializationBitstream</td><td>Bitstream passed to <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a6e7587fc3d2d09e82406e55cb9b2f6ff" title="Serialize our class to a bitstream.">Serialize()</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">timeStamp</td><td>0 if unused, else contains the time the message originated on the remote system </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sourceConnection</td><td>Which system sent to us </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a5e8f58fd06cbca3952e30bf5aa6e7845">SLNet::Replica3</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01129">1129</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="ad442eea446ad187681d8812eb5c66c43"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::DeserializeConstruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>constructionBitstream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>sourceConnection</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Read data written by <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#adc5fe35f637eeb607f6b76de4a6372c0" title="Write data to be sent only when the object is constructed on a remote system.">Replica3::SerializeConstruction()</a> </p>
<p>Reads whatever data was written to <em>constructionBitstream</em> in <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#adc5fe35f637eeb607f6b76de4a6372c0" title="Write data to be sent only when the object is constructed on a remote system.">Replica3::SerializeConstruction()</a> </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">constructionBitstream</td><td>Bitstream written to in <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#adc5fe35f637eeb607f6b76de4a6372c0" title="Write data to be sent only when the object is constructed on a remote system.">Replica3::SerializeConstruction()</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sourceConnection</td><td>System that sent us this network message. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true to accept construction of the object. false to reject, in which case the object will be deleted via <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ac15ca71b47ab97af83d249c6bba723db" title="Override with {delete this;}.">Replica3::DeallocReplica()</a> </dd></dl>

<p>Implements <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a8bbab0efc22644f55e56c3d1371e1184">SLNet::Replica3</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01117">1117</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a5a01b24d92cae0411113b3c9930f209a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::DeserializeConstructionExisting </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>constructionBitstream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>sourceConnection</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Same as <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#ad442eea446ad187681d8812eb5c66c43" title="Read data written by Replica3::SerializeConstruction()">DeserializeConstruction()</a>, but for an object that already exists on the remote system. Used if you return RM3CS_ALREADY_EXISTS_REMOTELY from QueryConstruction </p>

<p>Reimplemented from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a70e54fd7594b331113f36850bd0f8cfd">SLNet::Replica3</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01119">1119</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a59d5c8e512a08cfe6f1ce592268fc05e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::DeserializeDestruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>destructionBitstream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>sourceConnection</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Read data written by <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9c0c9520c8192bfd87d0c560d8182248" title="Write extra data to send with the object deletion event, if desired.">Replica3::SerializeDestruction()</a> </p>
<p>Return true to delete the object. <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab5096b364b6e47f5dc3e49734208fbd0">BroadcastDestruction()</a> will be called automatically, followed by <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a71365c215814a8926b3f13e95fe9e5a0" title="Removes a replicated object from the system.">ReplicaManager3::Dereference</a>.<br/>
 Return false to not delete it. If you delete it at a later point, you are responsible for calling <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab5096b364b6e47f5dc3e49734208fbd0">BroadcastDestruction()</a> yourself. </p>

<p>Implements <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a315725c68ed0864d84ef28c27e8271bd">SLNet::Replica3</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01121">1121</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="abf3206f3a96234788fe4488fe1d14302"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">parent_type* <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::GetCompositeOwner </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01110">1110</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a2ba44d7be986fc9a2a65832d1fea644c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::OnPoppedConnection </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>droppedConnection</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Notification called for each of our replicas when a connection is popped. </p>

<p>Reimplemented from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#aa6f5188fa39c0465313f514ea8fa9196">SLNet::Replica3</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01123">1123</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a608842a7b612ce8bf64d938e1cf5a316"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::OnSerializeTransmission </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>bitStream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">SLNet::BitSize_t</a>&#160;</td>
          <td class="paramname"><em>bitsPerChannel</em>[SLNet::RM3_NUM_OUTPUT_BITSTREAM_CHANNELS], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a7223b62c1b67121db1d975f2ab9b74c7">SLNet::Time</a>&#160;</td>
          <td class="paramname"><em>curTime</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01128">1128</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a4ca87ca259b10100d3bc1557379e32b4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::OnUserReplicaPreSerializeTick </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called for each replica owned by the user, once per Serialization tick, before <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a6e7587fc3d2d09e82406e55cb9b2f6ff" title="Serialize our class to a bitstream.">Serialize()</a> is called. If you want to do some kind of operation on the Replica objects that you own, just before Serialization(), then overload this function. </p>

<p>Reimplemented from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a77949227b670fd4194472b80886da28b">SLNet::Replica3</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01126">1126</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="abde90440a05ad0a6b7593f20456cfb78"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::PostDeserializeConstruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>constructionBitstream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>sourceConnection</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Called after DeserializeConstruction completes for all objects in a given update tick.<br/>
 This is used to resolve dependency chains, where two objects would refer to each other in DeserializeConstruction, yet one had not been constructed yet In <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#abde90440a05ad0a6b7593f20456cfb78">PostDeserializeConstruction()</a>, you know that all objects have already been created, so can resolve NetworkIDs to pointers safely. You can also use it to trigger some sort of event when you know the object has completed deserialization. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">constructionBitstream</td><td><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a> written in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#aa0ece5bfe5d6e0298f978e92bb794556" title="Called after SerializeConstruction completes for all objects in a given update tick.  Writes to PostDeserializeConstruction(), which is called after all objects are created for a given Construction tick(). Override to send data to PostDeserializeConstruction(), such as the NetworkID of other objects to resolve pointers to.">PostSerializeConstruction()</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sourceConnection</td><td>System that sent us this network message. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a4ba2ab9cf628ff626753aed043c389d9">SLNet::Replica3</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01131">1131</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a091313e4eb8fa0a3a2a5e630a29eb0e2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::PostDeserializeConstructionExisting </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>constructionBitstream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>sourceConnection</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Same as <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#abde90440a05ad0a6b7593f20456cfb78">PostDeserializeConstruction()</a>, but for objects that returned RM3CS_ALREADY_EXISTS_REMOTELY from QueryConstruction. </p>

<p>Reimplemented from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ac1b61529c7b73e02c993ecb61944e3c2">SLNet::Replica3</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01133">1133</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="aa0ece5bfe5d6e0298f978e92bb794556"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::PostSerializeConstruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>constructionBitstream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called after SerializeConstruction completes for all objects in a given update tick.<br/>
 Writes to <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#abde90440a05ad0a6b7593f20456cfb78">PostDeserializeConstruction()</a>, which is called after all objects are created for a given Construction tick(). Override to send data to <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#abde90440a05ad0a6b7593f20456cfb78">PostDeserializeConstruction()</a>, such as the NetworkID of other objects to resolve pointers to. </p>

<p>Reimplemented from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a7affedba5965fcd293b4d4670be076d5">SLNet::Replica3</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01130">1130</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="abc3e0001f3169e5ceb7cc16fd7399da8"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::PostSerializeConstructionExisting </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>constructionBitstream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Same as <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#aa0ece5bfe5d6e0298f978e92bb794556" title="Called after SerializeConstruction completes for all objects in a given update tick.  Writes to PostDeserializeConstruction(), which is called after all objects are created for a given Construction tick(). Override to send data to PostDeserializeConstruction(), such as the NetworkID of other objects to resolve pointers to.">PostSerializeConstruction()</a>, but for objects that returned RM3CS_ALREADY_EXISTS_REMOTELY from QueryConstruction. </p>

<p>Reimplemented from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ae8054ebd850ddec6e1e0540a30048349">SLNet::Replica3</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01132">1132</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a648a8ec3efa4267b793aa525812e1575"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::PreDestruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>sourceConnection</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Called after DeserializeDestruction completes for the object successfully, but obviously before the object is deleted.<br/>
 Override to trigger some sort of event when you know the object has completed destruction. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sourceConnection</td><td>System that sent us this network message. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a13fb764296d4cee63f20b81c57f0e6a8">SLNet::Replica3</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01134">1134</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="aa95265145a7464dbd8d33a8cb433814d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga698075ced173fa417a7df5f9d1be15e8">SLNet::RM3ActionOnPopConnection</a> <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::QueryActionOnPopConnection </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>droppedConnection</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The system is asking what to do with this replica when the connection is dropped. </p>
<p>Return QueryActionOnPopConnection_Client, QueryActionOnPopConnection_Server, or QueryActionOnPopConnection_PeerToPeer </p>

<p>Implements <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ac844b1645cadd2d16e82b221d8c94d3a">SLNet::Replica3</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01122">1122</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="acc4616f18d9526a0554ef72025bd92e2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#gadf975dd8a1352bc64cfa8f4de8054c48">SLNet::RM3ConstructionState</a> <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::QueryConstruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">SLNet::ReplicaManager3</a> *&#160;</td>
          <td class="paramname"><em>replicaManager3</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Ask if this object, which does not exist on <em>destinationConnection</em> should (now) be sent to that system. </p>
<p>If ReplicaManager3::QueryConstructionMode() returns QUERY_CONNECTION_FOR_REPLICA_LIST or QUERY_REPLICA_FOR_CONSTRUCTION_AND_DESTRUCTION (default), then QueyrConstruction() is called once per tick from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a50c8eeeff65c3c2ebb3680ed7c287a1f" title="Call interfaces, send data.">ReplicaManager3::Update()</a> to determine if an object should exist on a given system.<br/>
 Based on the return value, a network message may be sent to the other system to create the object.<br/>
 If QueryConstructionMode() is overriden to return QUERY_CONNECTION_FOR_REPLICA_LIST, this function is unused.<br/>
 </p>
<dl class="section note"><dt>Note</dt><dd>Defaults are provided: <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a8841b580b53b03d6adb1712f9b0f55d9" title="Default call for QueryConstruction().">QueryConstruction_PeerToPeer()</a>, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#aad0cbd467cf38dcd8e74f1c6aa2b2a2e" title="Default call for QueryConstruction().">QueryConstruction_ServerConstruction()</a>, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab3c2aa34f8ff187c5d97762cd002bfbc" title="Default call for QueryConstruction().">QueryConstruction_ClientConstruction()</a>. Return one of these functions for a working default for the relevant topology. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">destinationConnection</td><td>Which system we will send to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">replicaManager3</td><td>Plugin instance for this <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>What action to take </dd></dl>

<p>Implements <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9cd4c94d916baf34960fe4e396a9a402">SLNet::Replica3</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01112">1112</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="acc6380a679846d0e496a507ee884ffce"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga77f11ba8783033d5b9644257cbb996d3">SLNet::RM3DestructionState</a> <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::QueryDestruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d4/d18/class_s_l_net_1_1_replica_manager3">SLNet::ReplicaManager3</a> *&#160;</td>
          <td class="paramname"><em>replicaManager3</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Ask if this object, which does exist on <em>destinationConnection</em> should be removed from the remote system. </p>
<p>If ReplicaManager3::QueryConstructionMode() returns QUERY_REPLICA_FOR_CONSTRUCTION_AND_DESTRUCTION (default), then <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#acc6380a679846d0e496a507ee884ffce" title="Ask if this object, which does exist on destinationConnection should be removed from the remote syste...">QueryDestruction()</a> is called once per tick from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a50c8eeeff65c3c2ebb3680ed7c287a1f" title="Call interfaces, send data.">ReplicaManager3::Update()</a> to determine if an object that exists on a remote system should be destroyed for a given system.<br/>
 Based on the return value, a network message may be sent to the other system to destroy the object.<br/>
 Note that you can also destroy objects with <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ab5096b364b6e47f5dc3e49734208fbd0">BroadcastDestruction()</a>, so this function is not useful unless you plan to delete objects for only a particular connection.<br/>
 If QueryConstructionMode() is overriden to return QUERY_CONNECTION_FOR_REPLICA_LIST, this function is unused.<br/>
 </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">destinationConnection</td><td>Which system we will send to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">replicaManager3</td><td>Plugin instance for this <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>What action to take. Only RM3CS_SEND_DESTRUCTION does anything at this time. </dd></dl>

<p>Reimplemented from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9345f9d4ea34a9710114930da692e62b">SLNet::Replica3</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01113">1113</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a8dd6381a64895144ebc129bf9b3dcd25"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::QueryRelayDestruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>sourceConnection</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>We got a message from a connection to destroy this replica Return true to automatically relay the destruction message to all our other connections For a client in client/server, it does not matter what this funtion returns For a server in client/server, this should normally return true For a peer in peer to peer, you can normally return false since the original destroying peer would have told all other peers about the destruction If a system gets a destruction command for an object that was already destroyed, the destruction message is ignored. </p>

<p>Reimplemented from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a5e7094465033130883953c483ee33451">SLNet::Replica3</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01115">1115</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a3d3ecca89023a52e073d587d1d62779f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::QueryRemoteConstruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>sourceConnection</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>We're about to call <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#ad442eea446ad187681d8812eb5c66c43" title="Read data written by Replica3::SerializeConstruction()">DeserializeConstruction()</a> on this <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d3/d5b/class_s_l_net_1_1_replica3" title="Base class for your replicated objects for the ReplicaManager3 system.">Replica3</a>. If <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a3d3ecca89023a52e073d587d1d62779f" title="We&#39;re about to call DeserializeConstruction() on this Replica3. If QueryRemoteConstruction() returns ...">QueryRemoteConstruction()</a> returns false, this object is deleted instead. </p>
<p>By default, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a034013381bd9934335e6e37aa65f8fde" title="Default call for QueryRemoteConstruction(). Allow the server to create this object, but not the client.">QueryRemoteConstruction_ServerConstruction()</a> does not allow clients to create objects. The client will get Replica3::DeserializeConstructionRequestRejected().<br/>
 If you want the client to be able to potentially create objects for client/server, override accordingly.<br/>
 Other variants of QueryRemoteConstruction_* just return true. </p>
<dl class="section note"><dt>Note</dt><dd>Defaults are provided: <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#abc36beededae615df71857dfc535162c" title="Default call for QueryRemoteConstruction().">QueryRemoteConstruction_PeerToPeer()</a>, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a034013381bd9934335e6e37aa65f8fde" title="Default call for QueryRemoteConstruction(). Allow the server to create this object, but not the client.">QueryRemoteConstruction_ServerConstruction()</a>, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a1d2c0dabc915f531c90a3a723cb8b2da">QueryRemoteConstruction_ClientConstruction()</a>. Return one of these functions for a working default for the relevant topology. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sourceConnection</td><td>Which system sent us the object creation request message. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True to allow the object to pass onto <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#ad442eea446ad187681d8812eb5c66c43" title="Read data written by Replica3::SerializeConstruction()">DeserializeConstruction()</a> (where it may also be rejected), false to immediately reject the remote construction request </dd></dl>

<p>Implements <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#af2ee7d5a78ce055e365a2a303fd80718">SLNet::Replica3</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01114">1114</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a9363d5b9aec96bb3a7805c603774cd59"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga134c0f5cbd0cb8c0182ffeeebb2aea59">SLNet::RM3QuerySerializationResult</a> <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::QuerySerialization </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implement with <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a36f9383b90b1074b9bd2decf8761538b" title="Default call for QuerySerialization().">QuerySerialization_ClientSerializable()</a>, <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a6e01c91c7563d2572a1b6e65311284df" title="Default call for QuerySerialization().">QuerySerialization_ServerSerializable()</a>, or <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a1493100baac7dc035d7519d0b97c02ff" title="Default call for QuerySerialization().">QuerySerialization_PeerToPeer()</a> </p>
<p><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a9363d5b9aec96bb3a7805c603774cd59" title="Implement with QuerySerialization_ClientSerializable(), QuerySerialization_ServerSerializable(), or QuerySerialization_PeerToPeer()">QuerySerialization()</a> is a first pass query to check if a given object should serializable to a given system. The intent is that the user implements with one of the defaults for client, server, or peer to peer.<br/>
 Without this function, a careless implementation would serialize an object anytime it changed to all systems. This would give you feedback loops as the sender gets the same message back from the recipient it just sent to.<br/>
 If more than one system can serialize the same object then you will need to override to return true, and control the serialization result from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a90a3755d677079ec3718ddd6f8df32f1" title="Serialize our class to a bitstream.">Replica3::Serialize()</a>. Be careful not to send back the same data to the system that just sent to you! </p>
<dl class="section return"><dt>Returns</dt><dd>True to allow calling <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a90a3755d677079ec3718ddd6f8df32f1" title="Serialize our class to a bitstream.">Replica3::Serialize()</a> for this connection, false to not call. </dd></dl>

<p>Implements <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a899d87b3aeb957648a049d1aba47c42a">SLNet::Replica3</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01125">1125</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a6e7587fc3d2d09e82406e55cb9b2f6ff"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#ga4d0f10f0e557bd96237574321b79a68a">SLNet::RM3SerializationResult</a> <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::Serialize </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#d5/dad/struct_s_l_net_1_1_serialize_parameters">SLNet::SerializeParameters</a> *&#160;</td>
          <td class="paramname"><em>serializeParameters</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Serialize our class to a bitstream. </p>
<p>User should implement this function to write the contents of this class to SerializationParamters::serializationBitstream.<br/>
 If data only needs to be written once, you can write it to <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a4b05dcb8e721e594319c32f1a9b9db13" title="Write data to be sent only when the object is constructed on a remote system.">SerializeConstruction()</a> instead for efficiency.<br/>
 Transmitted over the network if it changed from the last time we called <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a6e7587fc3d2d09e82406e55cb9b2f6ff" title="Serialize our class to a bitstream.">Serialize()</a>.<br/>
 Called every time the time interval to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a0168b8c51dff68b084af5ba83ddcf677">ReplicaManager3::SetAutoSerializeInterval()</a> elapses and <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a50c8eeeff65c3c2ebb3680ed7c287a1f" title="Call interfaces, send data.">ReplicaManager3::Update</a> is subsequently called. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">in/out]</td><td>serializeParameters Parameters controlling the serialization, including destination bitstream to write to </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Whether to serialize, and if so, how to optimize the results </dd></dl>

<p>Implements <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a90a3755d677079ec3718ddd6f8df32f1">SLNet::Replica3</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01127">1127</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a4b05dcb8e721e594319c32f1a9b9db13"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::SerializeConstruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>constructionBitstream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Write data to be sent only when the object is constructed on a remote system. </p>
<p>SerializeConstruction is used to write out data that you need to create this object in the context of your game, such as health, score, name. Use it for data you only need to send when the object is created.<br/>
 After <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a4b05dcb8e721e594319c32f1a9b9db13" title="Write data to be sent only when the object is constructed on a remote system.">SerializeConstruction()</a> is called, <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a6e7587fc3d2d09e82406e55cb9b2f6ff" title="Serialize our class to a bitstream.">Serialize()</a> will be called immediately thereafter. However, they are sent in different messages, so <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a6e7587fc3d2d09e82406e55cb9b2f6ff" title="Serialize our class to a bitstream.">Serialize()</a> may arrive a later frame than <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a4b05dcb8e721e594319c32f1a9b9db13" title="Write data to be sent only when the object is constructed on a remote system.">SerializeConstruction()</a> For that reason, the object should be valid after a call to <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#ad442eea446ad187681d8812eb5c66c43" title="Read data written by Replica3::SerializeConstruction()">DeserializeConstruction()</a> for at least a short time.<br/>
 </p>
<dl class="section note"><dt>Note</dt><dd>The object's NetworkID and allocation id are handled by the system automatically, you do not need to write these values to <em>constructionBitstream</em> </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">constructionBitstream</td><td>Destination bitstream to write your data to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">destinationConnection</td><td>System that will receive this network message. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#adc5fe35f637eeb607f6b76de4a6372c0">SLNet::Replica3</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01116">1116</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a05dfbbe98ffb64ac52bd614fac672749"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::SerializeConstructionExisting </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>constructionBitstream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Same as <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a4b05dcb8e721e594319c32f1a9b9db13" title="Write data to be sent only when the object is constructed on a remote system.">SerializeConstruction()</a>, but for an object that already exists on the remote system. Used if you return RM3CS_ALREADY_EXISTS_REMOTELY from QueryConstruction </p>

<p>Reimplemented from <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a6e39158c90ff631c29a28571b2b1a7f9">SLNet::Replica3</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01118">1118</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a96942e9814ebd48774ca261fbaa2f631"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::SerializeDestruction </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>destructionBitstream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Write extra data to send with the object deletion event, if desired. </p>
<p><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9c0c9520c8192bfd87d0c560d8182248" title="Write extra data to send with the object deletion event, if desired.">Replica3::SerializeDestruction()</a> will be called to write any object destruction specific data you want to send with this event. <em>destructionBitstream</em> can be read in <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml#a59d5c8e512a08cfe6f1ce592268fc05e" title="Read data written by Replica3::SerializeDestruction()">DeserializeDestruction()</a> </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">destructionBitstream</td><td>Bitstream for you to write to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">destinationConnection</td><td>System that will receive this network message. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a9c0c9520c8192bfd87d0c560d8182248">SLNet::Replica3</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01120">1120</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a6fb5745c0a41cbe1cfb3955fbacbd673"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::SetCompositeOwner </td>
          <td>(</td>
          <td class="paramtype">parent_type *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01109">1109</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<a class="anchor" id="a78c835d8559ec3f376bd95d36ecc4564"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::WriteAllocationID </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#da/d47/class_s_l_net_1_1_connection___r_m3">SLNet::Connection_RM3</a> *&#160;</td>
          <td class="paramname"><em>destinationConnection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *&#160;</td>
          <td class="paramname"><em>allocationIdBitstream</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Write a unique identifer that can be read on a remote system to create an object of this same class. </p>
<p>The value written to <em>allocationIdBitstream</em> will be passed to <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a56535f2cd8fafd109ffbb69c3597ebca" title="Class factory to create a Replica3 instance, given a user-defined identifier.">Connection_RM3::AllocReplica()</a>.<br/>
 Sample implementation:<br/>
 {allocationIdBitstream-&gt;Write(<a class="el" href="../../d2/d66/class_s_l_net_1_1_rak_string.xhtml" title="String class.">SLNet::RakString</a>("Soldier");}<br/>
 </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">allocationIdBitstream</td><td>Bitstream for the user to write to, to identify this class </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="../../d0/d63/group___r_e_p_l_i_c_a___m_a_n_a_g_e_r___g_r_o_u_p3.xhtml#a78976b7fd5bb43519ad123af18fe3924">SLNet::Replica3</a>.</p>

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01111">1111</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="a2d110322a65691bb161900ef3417e193"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class parent_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">parent_type* <a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">SLNet::Replica3Composite</a>&lt; parent_type &gt;::r3CompositeOwner</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml#l01107">1107</a> of file <a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>Source/include/slikenet/<a class="el" href="../../d6/de8/_replica_manager3_8h_source.xhtml">ReplicaManager3.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml">SLNet</a></li><li class="navelem"><a class="el" href="../../d4/d8f/class_s_l_net_1_1_replica3_composite.xhtml">Replica3Composite</a></li>
    <li class="footer">Generated on Wed Aug 14 2019 22:09:50 for SLikeNet by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.2 </li>
  </ul>
</div>
</body>
</html>
