<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>SLikeNet: SLNet::AutopatcherRepositoryInterface Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SLikeNet
   &#160;<span id="projectnumber">0.1.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../modules.xhtml"><span>Modules</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="../../files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="../../classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="../../inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="../../functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('d4/d11/class_s_l_net_1_1_autopatcher_repository_interface.xhtml','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="../../d1/d01/class_s_l_net_1_1_autopatcher_repository_interface-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">SLNet::AutopatcherRepositoryInterface Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>An interface used by AutopatcherServer to get the data necessary to run an autopatcher. This is up to you to implement for custom repository solutions.  
 <a href="../../d4/d11/class_s_l_net_1_1_autopatcher_repository_interface.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d1/da6/_autopatcher_repository_interface_8h_source.xhtml">slikenet/AutopatcherRepositoryInterface.h</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="../../closed.png" alt="+"/> Inheritance diagram for SLNet::AutopatcherRepositoryInterface:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="../../d6/d3f/class_s_l_net_1_1_autopatcher_repository_interface__inherit__graph.svg" width="234" height="331"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a8eef3a6f06a92bb245bfa0f9e6adc8a1"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d11/class_s_l_net_1_1_autopatcher_repository_interface.xhtml#a8eef3a6f06a92bb245bfa0f9e6adc8a1">GetChangelistSinceDate</a> (const char *applicationName, <a class="el" href="../../d7/d87/class_s_l_net_1_1_file_list.xhtml">FileList</a> *addedOrModifiedFilesWithHashData, <a class="el" href="../../d7/d87/class_s_l_net_1_1_file_list.xhtml">FileList</a> *deletedFiles, double sinceDate)=0</td></tr>
<tr class="separator:a8eef3a6f06a92bb245bfa0f9e6adc8a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a422a49494a4964d310e0532cd0514894"><td class="memItemLeft" align="right" valign="top">virtual int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d11/class_s_l_net_1_1_autopatcher_repository_interface.xhtml#a422a49494a4964d310e0532cd0514894">GetPatches</a> (const char *applicationName, <a class="el" href="../../d7/d87/class_s_l_net_1_1_file_list.xhtml">FileList</a> *input, bool allowDownloadOfOriginalUnmodifiedFiles, <a class="el" href="../../d7/d87/class_s_l_net_1_1_file_list.xhtml">FileList</a> *patchList)=0</td></tr>
<tr class="separator:a422a49494a4964d310e0532cd0514894"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2df86b71d1862dd7e0811a503a014e5"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d11/class_s_l_net_1_1_autopatcher_repository_interface.xhtml#ae2df86b71d1862dd7e0811a503a014e5">GetMostRecentChangelistWithPatches</a> (<a class="el" href="../../d2/d66/class_s_l_net_1_1_rak_string.xhtml">SLNet::RakString</a> &amp;applicationName, <a class="el" href="../../d7/d87/class_s_l_net_1_1_file_list.xhtml">FileList</a> *patchedFiles, <a class="el" href="../../d7/d87/class_s_l_net_1_1_file_list.xhtml">FileList</a> *updatedFiles, <a class="el" href="../../d7/d87/class_s_l_net_1_1_file_list.xhtml">FileList</a> *addedOrModifiedFileHashes, <a class="el" href="../../d7/d87/class_s_l_net_1_1_file_list.xhtml">FileList</a> *deletedFiles, double *priorRowPatchTime, double *mostRecentRowPatchTime)=0</td></tr>
<tr class="separator:ae2df86b71d1862dd7e0811a503a014e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc59bf21da9abfb543d69363dcdaadf6"><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d11/class_s_l_net_1_1_autopatcher_repository_interface.xhtml#acc59bf21da9abfb543d69363dcdaadf6">GetLastError</a> (void) const =0</td></tr>
<tr class="separator:acc59bf21da9abfb543d69363dcdaadf6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a65525c22a23e7c55b3e7961d7787cf"><td class="memItemLeft" align="right" valign="top">virtual const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d11/class_s_l_net_1_1_autopatcher_repository_interface.xhtml#a8a65525c22a23e7c55b3e7961d7787cf">GetIncrementalReadChunkSize</a> (void) const =0</td></tr>
<tr class="separator:a8a65525c22a23e7c55b3e7961d7787cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_class_s_l_net_1_1_incremental_read_interface"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_class_s_l_net_1_1_incremental_read_interface')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../df/d02/class_s_l_net_1_1_incremental_read_interface.xhtml">SLNet::IncrementalReadInterface</a></td></tr>
<tr class="memitem:a7ac9bc491609b10af538d5d4f9fc4da6 inherit pub_methods_class_s_l_net_1_1_incremental_read_interface"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d02/class_s_l_net_1_1_incremental_read_interface.xhtml#a7ac9bc491609b10af538d5d4f9fc4da6">IncrementalReadInterface</a> ()</td></tr>
<tr class="separator:a7ac9bc491609b10af538d5d4f9fc4da6 inherit pub_methods_class_s_l_net_1_1_incremental_read_interface"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a962a6c52c2d89deb78bdb2f7d6371a6d inherit pub_methods_class_s_l_net_1_1_incremental_read_interface"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d02/class_s_l_net_1_1_incremental_read_interface.xhtml#a962a6c52c2d89deb78bdb2f7d6371a6d">~IncrementalReadInterface</a> ()</td></tr>
<tr class="separator:a962a6c52c2d89deb78bdb2f7d6371a6d inherit pub_methods_class_s_l_net_1_1_incremental_read_interface"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c77311efc0ce83c6f48eab70535ece4 inherit pub_methods_class_s_l_net_1_1_incremental_read_interface"><td class="memItemLeft" align="right" valign="top">virtual unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../df/d02/class_s_l_net_1_1_incremental_read_interface.xhtml#a3c77311efc0ce83c6f48eab70535ece4">GetFilePart</a> (const char *filename, unsigned int startReadBytes, unsigned int numBytesToRead, void *preallocatedDestination, <a class="el" href="../../d6/dff/struct_file_list_node_context.xhtml">FileListNodeContext</a> context)</td></tr>
<tr class="separator:a3c77311efc0ce83c6f48eab70535ece4 inherit pub_methods_class_s_l_net_1_1_incremental_read_interface"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>An interface used by AutopatcherServer to get the data necessary to run an autopatcher. This is up to you to implement for custom repository solutions. </p>

<p>Definition at line <a class="el" href="../../d1/da6/_autopatcher_repository_interface_8h_source.xhtml#l00035">35</a> of file <a class="el" href="../../d1/da6/_autopatcher_repository_interface_8h_source.xhtml">AutopatcherRepositoryInterface.h</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a8eef3a6f06a92bb245bfa0f9e6adc8a1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool SLNet::AutopatcherRepositoryInterface::GetChangelistSinceDate </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>applicationName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d7/d87/class_s_l_net_1_1_file_list.xhtml">FileList</a> *&#160;</td>
          <td class="paramname"><em>addedOrModifiedFilesWithHashData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d7/d87/class_s_l_net_1_1_file_list.xhtml">FileList</a> *&#160;</td>
          <td class="paramname"><em>deletedFiles</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>sinceDate</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get list of files added and deleted since a certain date. This is used by AutopatcherServer and not usually explicitly called. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">applicationName</td><td>A null terminated string identifying the application </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">addedFiles</td><td>A list of the current versions of filenames with hashes as their data that were created after <em>sinceData</em> </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">deletedFiles</td><td>A list of the current versions of filenames that were deleted after <em>sinceData</em> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">An</td><td>input date, in whatever format your repository uses </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">currentDate</td><td>The current server date, in whatever format your repository uses </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True on success, false on failure. </dd></dl>

</div>
</div>
<a class="anchor" id="a8a65525c22a23e7c55b3e7961d7787cf"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const int SLNet::AutopatcherRepositoryInterface::GetIncrementalReadChunkSize </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>Passed to <a class="el" href="../../d0/dae/group___f_i_l_e___l_i_s_t___t_r_a_n_s_f_e_r___g_r_o_u_p.xhtml#a4f345fad6d36ef7cc18bbb377c43f0a2" title="Send the FileList structure to another system, which must have previously called SetupReceive().">FileListTransfer::Send()</a> as the _chunkSize parameter. </dd></dl>

</div>
</div>
<a class="anchor" id="acc59bf21da9abfb543d69363dcdaadf6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* SLNet::AutopatcherRepositoryInterface::GetLastError </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>Whatever this function returns is sent from the AutopatcherServer to the AutopatcherClient when one of the above functions returns false. </dd></dl>

</div>
</div>
<a class="anchor" id="ae2df86b71d1862dd7e0811a503a014e5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool SLNet::AutopatcherRepositoryInterface::GetMostRecentChangelistWithPatches </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d2/d66/class_s_l_net_1_1_rak_string.xhtml">SLNet::RakString</a> &amp;&#160;</td>
          <td class="paramname"><em>applicationName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d7/d87/class_s_l_net_1_1_file_list.xhtml">FileList</a> *&#160;</td>
          <td class="paramname"><em>patchedFiles</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d7/d87/class_s_l_net_1_1_file_list.xhtml">FileList</a> *&#160;</td>
          <td class="paramname"><em>updatedFiles</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d7/d87/class_s_l_net_1_1_file_list.xhtml">FileList</a> *&#160;</td>
          <td class="paramname"><em>addedOrModifiedFileHashes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d7/d87/class_s_l_net_1_1_file_list.xhtml">FileList</a> *&#160;</td>
          <td class="paramname"><em>deletedFiles</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>priorRowPatchTime</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>mostRecentRowPatchTime</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>For the most recent update, return files that were patched, added, or deleted. For files that were patched, return both the patch in <em>patchedFiles</em> and the current version in <em>updatedFiles</em> </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">applicationName</td><td>Name of the application to get patches for. If empty, uses the most recently updated application, and the string will be updated to reflect this name. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">patchedFiles</td><td>A list of patched files with op PC_HASH_2_WITH_PATCH. It has 2 hashes, the priorHash and the currentHash. The currentHash is checked on the client after patching for patch success. The priorHash is checked in AutopatcherServer::OnGetPatch() to see if the client is able to hash with the version they currently have </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">patchedFiles</td><td>A list of new files. It contains the actual data in addition to the filename </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">addedOrModifiedFileHashes</td><td>A list of file hashes that were either modified or new. This is returned to the client when replying to ID_AUTOPATCHER_CREATION_LIST, which tells the client what files have changed on the server since a certain date </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">deletedFiles</td><td>A list of the current versions of filenames that were deleted in the most recent patch </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">whenPatched</td><td>time in seconds since epoch when patched. Use time() function to get this in C </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true on success, false on failure </dd></dl>

</div>
</div>
<a class="anchor" id="a422a49494a4964d310e0532cd0514894"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual int SLNet::AutopatcherRepositoryInterface::GetPatches </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>applicationName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d7/d87/class_s_l_net_1_1_file_list.xhtml">FileList</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>allowDownloadOfOriginalUnmodifiedFiles</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d7/d87/class_s_l_net_1_1_file_list.xhtml">FileList</a> *&#160;</td>
          <td class="paramname"><em>patchList</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get patches (or files) for every file in input, assuming that input has a hash for each of those files. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">applicationName</td><td>A null terminated string identifying the application </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>A list of files with SHA1_LENGTH byte hashes to get from the database. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">patchList</td><td>You should return list of files with either the filedata or the patch. This is a subset of <em>input</em>. The context data for each file will be either PC_WRITE_FILE (to just write the file) or PC_HASH_WITH_PATCH (to patch). If PC_HASH_WITH_PATCH, then the file contains a SHA1_LENGTH byte patch followed by the hash. The datalength is patchlength + SHA1_LENGTH </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">currentDate</td><td>The current server date, in whatever format your repository uses </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>1 on success, 0 on database failure, -1 on tried to download original unmodified file </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>Source/include/slikenet/<a class="el" href="../../d1/da6/_autopatcher_repository_interface_8h_source.xhtml">AutopatcherRepositoryInterface.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml">SLNet</a></li><li class="navelem"><a class="el" href="../../d4/d11/class_s_l_net_1_1_autopatcher_repository_interface.xhtml">AutopatcherRepositoryInterface</a></li>
    <li class="footer">Generated on Wed Aug 14 2019 22:09:49 for SLikeNet by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.2 </li>
  </ul>
</div>
</body>
</html>
