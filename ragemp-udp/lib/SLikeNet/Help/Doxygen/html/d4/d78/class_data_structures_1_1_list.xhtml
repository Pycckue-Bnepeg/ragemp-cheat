<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>SLikeNet: DataStructures::List&lt; list_type &gt; Class Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SLikeNet
   &#160;<span id="projectnumber">0.1.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../modules.xhtml"><span>Modules</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="../../files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="../../classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="../../inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="../../functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('d4/d78/class_data_structures_1_1_list.xhtml','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="../../de/df1/class_data_structures_1_1_list-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">DataStructures::List&lt; list_type &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Array based implementation of a list.  
 <a href="../../d4/d78/class_data_structures_1_1_list.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml">slikenet/DS_List.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aa063066442a5e28b3c40d0b1206ace35"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml#aa063066442a5e28b3c40d0b1206ace35">List</a> ()</td></tr>
<tr class="memdesc:aa063066442a5e28b3c40d0b1206ace35"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#aa063066442a5e28b3c40d0b1206ace35"></a><br/></td></tr>
<tr class="separator:aa063066442a5e28b3c40d0b1206ace35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a42e396ab4ea4c92197b6a86e74a65f3f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a42e396ab4ea4c92197b6a86e74a65f3f">~List</a> ()</td></tr>
<tr class="separator:a42e396ab4ea4c92197b6a86e74a65f3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abafec4707d1b0b452539afb5acabe1da"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml#abafec4707d1b0b452539afb5acabe1da">List</a> (const <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">List</a> &amp;original_copy)</td></tr>
<tr class="memdesc:abafec4707d1b0b452539afb5acabe1da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor.  <a href="#abafec4707d1b0b452539afb5acabe1da"></a><br/></td></tr>
<tr class="separator:abafec4707d1b0b452539afb5acabe1da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7faf28804c9d17c301ee072c7dce005b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">List</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a7faf28804c9d17c301ee072c7dce005b">operator=</a> (const <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">List</a> &amp;original_copy)</td></tr>
<tr class="memdesc:a7faf28804c9d17c301ee072c7dce005b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assign one list to another.  <a href="#a7faf28804c9d17c301ee072c7dce005b"></a><br/></td></tr>
<tr class="separator:a7faf28804c9d17c301ee072c7dce005b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a028d64be4f2c6945be0f31a48b80823a"><td class="memItemLeft" align="right" valign="top">list_type &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a028d64be4f2c6945be0f31a48b80823a">operator[]</a> (const unsigned int position) const </td></tr>
<tr class="memdesc:a028d64be4f2c6945be0f31a48b80823a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access an element by its index in the array.  <a href="#a028d64be4f2c6945be0f31a48b80823a"></a><br/></td></tr>
<tr class="separator:a028d64be4f2c6945be0f31a48b80823a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46ce8d0ed396b4de4cc3d4af3e6965db"><td class="memItemLeft" align="right" valign="top">list_type &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a46ce8d0ed396b4de4cc3d4af3e6965db">Get</a> (const unsigned int position) const </td></tr>
<tr class="memdesc:a46ce8d0ed396b4de4cc3d4af3e6965db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access an element by its index in the array.  <a href="#a46ce8d0ed396b4de4cc3d4af3e6965db"></a><br/></td></tr>
<tr class="separator:a46ce8d0ed396b4de4cc3d4af3e6965db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a771fc63e3b0d892fbb605a379a78bacb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a771fc63e3b0d892fbb605a379a78bacb">Push</a> (const list_type &amp;input, const char *file, unsigned int line)</td></tr>
<tr class="memdesc:a771fc63e3b0d892fbb605a379a78bacb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Push an element at the end of the stack.  <a href="#a771fc63e3b0d892fbb605a379a78bacb"></a><br/></td></tr>
<tr class="separator:a771fc63e3b0d892fbb605a379a78bacb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9be46e78d21543bf28bd473807160024"><td class="memItemLeft" align="right" valign="top">list_type &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a9be46e78d21543bf28bd473807160024">Pop</a> (void)</td></tr>
<tr class="memdesc:a9be46e78d21543bf28bd473807160024"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pop an element from the end of the stack.  <a href="#a9be46e78d21543bf28bd473807160024"></a><br/></td></tr>
<tr class="separator:a9be46e78d21543bf28bd473807160024"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5cb7d8b68d8d020a34f2186ea8d5b1c6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a5cb7d8b68d8d020a34f2186ea8d5b1c6">Insert</a> (const list_type &amp;input, const unsigned int position, const char *file, unsigned int line)</td></tr>
<tr class="memdesc:a5cb7d8b68d8d020a34f2186ea8d5b1c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Insert an element at position <em>position</em> in the list.  <a href="#a5cb7d8b68d8d020a34f2186ea8d5b1c6"></a><br/></td></tr>
<tr class="separator:a5cb7d8b68d8d020a34f2186ea8d5b1c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adfe61ff53151ab61ecba6f8506a4662f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml#adfe61ff53151ab61ecba6f8506a4662f">Insert</a> (const list_type &amp;input, const char *file, unsigned int line)</td></tr>
<tr class="memdesc:adfe61ff53151ab61ecba6f8506a4662f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Insert at the end of the list.  <a href="#adfe61ff53151ab61ecba6f8506a4662f"></a><br/></td></tr>
<tr class="separator:adfe61ff53151ab61ecba6f8506a4662f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a953b497c5f51b0b4f98089c08ad15696"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a953b497c5f51b0b4f98089c08ad15696">Replace</a> (const list_type &amp;input, const list_type filler, const unsigned int position, const char *file, unsigned int line)</td></tr>
<tr class="memdesc:a953b497c5f51b0b4f98089c08ad15696"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replace the value at <em>position</em> by <em>input</em>.  <a href="#a953b497c5f51b0b4f98089c08ad15696"></a><br/></td></tr>
<tr class="separator:a953b497c5f51b0b4f98089c08ad15696"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3eb0624d2bd176d1cc85f2ff45264eb9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a3eb0624d2bd176d1cc85f2ff45264eb9">Replace</a> (const list_type &amp;input)</td></tr>
<tr class="memdesc:a3eb0624d2bd176d1cc85f2ff45264eb9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replace the last element of the list by <em>input</em>.  <a href="#a3eb0624d2bd176d1cc85f2ff45264eb9"></a><br/></td></tr>
<tr class="separator:a3eb0624d2bd176d1cc85f2ff45264eb9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79621376e92b605c4dbdb77aafbb6b60"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a79621376e92b605c4dbdb77aafbb6b60">RemoveAtIndex</a> (const unsigned int position)</td></tr>
<tr class="memdesc:a79621376e92b605c4dbdb77aafbb6b60"><td class="mdescLeft">&#160;</td><td class="mdescRight">Delete the element at position <em>position</em>.  <a href="#a79621376e92b605c4dbdb77aafbb6b60"></a><br/></td></tr>
<tr class="separator:a79621376e92b605c4dbdb77aafbb6b60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a351a647150169c71cc3f758dbb312096"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a351a647150169c71cc3f758dbb312096">RemoveAtIndexFast</a> (const unsigned int position)</td></tr>
<tr class="memdesc:a351a647150169c71cc3f758dbb312096"><td class="mdescLeft">&#160;</td><td class="mdescRight">Delete the element at position <em>position</em>.  <a href="#a351a647150169c71cc3f758dbb312096"></a><br/></td></tr>
<tr class="separator:a351a647150169c71cc3f758dbb312096"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeed32cd1075569515bb825f874dca24e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml#aeed32cd1075569515bb825f874dca24e">RemoveFromEnd</a> (const unsigned num=1)</td></tr>
<tr class="memdesc:aeed32cd1075569515bb825f874dca24e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Delete the element at the end of the list.  <a href="#aeed32cd1075569515bb825f874dca24e"></a><br/></td></tr>
<tr class="separator:aeed32cd1075569515bb825f874dca24e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae4e608a6f4cc3560ee3b3b20eda67fe"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml#aae4e608a6f4cc3560ee3b3b20eda67fe">GetIndexOf</a> (const list_type &amp;input) const </td></tr>
<tr class="memdesc:aae4e608a6f4cc3560ee3b3b20eda67fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the index of the specified item or MAX_UNSIGNED_LONG if not found.  <a href="#aae4e608a6f4cc3560ee3b3b20eda67fe"></a><br/></td></tr>
<tr class="separator:aae4e608a6f4cc3560ee3b3b20eda67fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f13a4519693cbd16cd13b1fe284f330"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size</a> (void) const </td></tr>
<tr class="separator:a6f13a4519693cbd16cd13b1fe284f330"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34219a5ce92981102d06fb1da7842a6b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a34219a5ce92981102d06fb1da7842a6b">Clear</a> (bool doNotDeallocateSmallBlocks, const char *file, unsigned int line)</td></tr>
<tr class="memdesc:a34219a5ce92981102d06fb1da7842a6b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear the list.  <a href="#a34219a5ce92981102d06fb1da7842a6b"></a><br/></td></tr>
<tr class="separator:a34219a5ce92981102d06fb1da7842a6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ccff322ccbf8eca0214d2c39693abc0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a3ccff322ccbf8eca0214d2c39693abc0">Preallocate</a> (unsigned countNeeded, const char *file, unsigned int line)</td></tr>
<tr class="memdesc:a3ccff322ccbf8eca0214d2c39693abc0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Preallocate the list, so it needs fewer reallocations at runtime.  <a href="#a3ccff322ccbf8eca0214d2c39693abc0"></a><br/></td></tr>
<tr class="separator:a3ccff322ccbf8eca0214d2c39693abc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1dd30a84afeb655784dae4351777dce5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a1dd30a84afeb655784dae4351777dce5">Compress</a> (const char *file, unsigned int line)</td></tr>
<tr class="memdesc:a1dd30a84afeb655784dae4351777dce5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Frees overallocated members, to use the minimum memory necessary.  <a href="#a1dd30a84afeb655784dae4351777dce5"></a><br/></td></tr>
<tr class="separator:a1dd30a84afeb655784dae4351777dce5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;class list_type&gt;<br/>
class DataStructures::List&lt; list_type &gt;</h3>

<p>Array based implementation of a list. </p>
<dl class="section note"><dt>Note</dt><dd>ONLY USE THIS FOR SHALLOW COPIES. I don't bother with operator= to improve performance. </dd></dl>

<p>Definition at line <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml#l00041">41</a> of file <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml">DS_List.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="aa063066442a5e28b3c40d0b1206ace35"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class list_type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; list_type &gt;::<a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">List</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>

<p>Definition at line <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml#l00141">141</a> of file <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml">DS_List.h</a>.</p>

</div>
</div>
<a class="anchor" id="a42e396ab4ea4c92197b6a86e74a65f3f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class list_type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; list_type &gt;::~<a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">List</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml#l00149">149</a> of file <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml">DS_List.h</a>.</p>

<p>References <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00047">_FILE_AND_LINE_</a>, and <a class="el" href="../../dd/dc5/memoryoverride_8h_source.xhtml#l00197">SLNet::OP_DELETE_ARRAY()</a>.</p>

</div>
</div>
<a class="anchor" id="abafec4707d1b0b452539afb5acabe1da"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class list_type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; list_type &gt;::<a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">List</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">List</a>&lt; list_type &gt; &amp;&#160;</td>
          <td class="paramname"><em>original_copy</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">original_copy</td><td>The list to duplicate </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml#l00157">157</a> of file <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml">DS_List.h</a>.</p>

<p>References <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00047">_FILE_AND_LINE_</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a34219a5ce92981102d06fb1da7842a6b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class list_type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; list_type &gt;::Clear </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>doNotDeallocateSmallBlocks</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>line</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Clear the list. </p>

<p>Definition at line <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml#l00456">456</a> of file <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml">DS_List.h</a>.</p>

<p>References <a class="el" href="../../dd/dc5/memoryoverride_8h_source.xhtml#l00197">SLNet::OP_DELETE_ARRAY()</a>.</p>

<p>Referenced by <a class="el" href="../../d0/d0c/_d_s___table_8cpp_source.xhtml#l01073">DataStructures::Table::Clear()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l01940">SLNet::RakPeer::ClearBanList()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l05468">SLNet::RakPeer::DerefAllSockets()</a>, <a class="el" href="../../dd/d5f/_rak_string_8cpp_source.xhtml#l01220">SLNet::RakString::FreeMemoryNoMutex()</a>, <a class="el" href="../../d2/d77/_d_s___hash_8h_source.xhtml#l00333">DataStructures::Hash&lt; key_type, data_type, HASH_SIZE, hashFunction &gt;::GetAsList()</a>, <a class="el" href="../../d9/dd5/_grid_sectorizer_8cpp_source.xhtml#l00149">GridSectorizer::GetEntries()</a>, <a class="el" href="../../d8/deb/_d_s___weighted_graph_8h_source.xhtml#l00231">DataStructures::WeightedGraph&lt; node_type, weight_type, allow_unlinkedNodes &gt;::GetShortestPath()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l02847">SLNet::RakPeer::GetSocket()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l02882">SLNet::RakPeer::GetSockets()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l03080">SLNet::RakPeer::GetStatisticsList()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l01824">SLNet::RakPeer::GetSystemList()</a>, <a class="el" href="../../d8/db0/_variadic_s_q_l_parser_8cpp_source.xhtml#l00050">VariadicSQLParser::GetTypeMappingIndices()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l02916">SLNet::RakPeer::ReleaseSockets()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l00845">SLNet::RakPeer::RemoveFromSecurityExceptionList()</a>, <a class="el" href="../../d2/d81/_variable_delta_serializer_8cpp_source.xhtml#l00216">SLNet::VariableDeltaSerializer::RemoveRemoteSystemVariableHistory()</a>, and <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l05540">SLNet::RakPeer::RunUpdateCycle()</a>.</p>

</div>
</div>
<a class="anchor" id="a1dd30a84afeb655784dae4351777dce5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class list_type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; list_type &gt;::Compress </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>line</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Frees overallocated members, to use the minimum memory necessary. </p>
<dl class="section attention"><dt>Attention</dt><dd>This is a slow operation </dd></dl>

<p>Definition at line <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml#l00471">471</a> of file <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml">DS_List.h</a>.</p>

<p>References <a class="el" href="../../dd/dc5/memoryoverride_8h_source.xhtml#l00197">SLNet::OP_DELETE_ARRAY()</a>, and <a class="el" href="../../dc/d0b/_thread_pool_8h_source.xhtml#l00303">return</a>.</p>

</div>
</div>
<a class="anchor" id="a46ce8d0ed396b4de4cc3d4af3e6965db"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class list_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">list_type &amp; <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; list_type &gt;::Get </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>position</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access an element by its index in the array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">position</td><td>The index into the array. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The element at position <em>position</em>. </dd></dl>

<p>Definition at line <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml#l00226">226</a> of file <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml">DS_List.h</a>.</p>

<p>Referenced by <a class="el" href="../../d0/d0c/_d_s___table_8cpp_source.xhtml#l00534">DataStructures::Table::GetCellValueByIndex()</a>.</p>

</div>
</div>
<a class="anchor" id="aae4e608a6f4cc3560ee3b3b20eda67fe"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class list_type&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; list_type &gt;::GetIndexOf </td>
          <td>(</td>
          <td class="paramtype">const list_type &amp;&#160;</td>
          <td class="paramname"><em>input</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the index of the specified item or MAX_UNSIGNED_LONG if not found. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>The element to check for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The index or position of <em>input</em> in the list. </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">MAX_UNSIGNED_LONG</td><td>The object is not in the list </td></tr>
    <tr><td class="paramname">[Integer]</td><td>The index of the element in the list </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml#l00440">440</a> of file <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml">DS_List.h</a>.</p>

<p>References <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml#l00032">MAX_UNSIGNED_LONG</a>.</p>

<p>Referenced by <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l02744">SLNet::RakPeer::AttachPlugin()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l02772">SLNet::RakPeer::DetachPlugin()</a>, <a class="el" href="../../da/df7/_table_serializer_8cpp_source.xhtml#l00051">SLNet::TableSerializer::SerializeColumns()</a>, and <a class="el" href="../../da/df7/_table_serializer_8cpp_source.xhtml#l00118">SLNet::TableSerializer::SerializeRow()</a>.</p>

</div>
</div>
<a class="anchor" id="a5cb7d8b68d8d020a34f2186ea8d5b1c6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class list_type&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; list_type &gt;::Insert </td>
          <td>(</td>
          <td class="paramtype">const list_type &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>position</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>line</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Insert an element at position <em>position</em> in the list. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>The new element. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">position</td><td>The position of the new element. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml#l00248">248</a> of file <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml">DS_List.h</a>.</p>

<p>References <a class="el" href="../../dd/dc5/memoryoverride_8h_source.xhtml#l00197">SLNet::OP_DELETE_ARRAY()</a>, and <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>.</p>

<p>Referenced by <a class="el" href="../../d0/d0c/_d_s___table_8cpp_source.xhtml#l00291">DataStructures::Table::AddColumn()</a>, <a class="el" href="../../d9/dd5/_grid_sectorizer_8cpp_source.xhtml#l00055">GridSectorizer::AddEntry()</a>, <a class="el" href="../../d0/d0c/_d_s___table_8cpp_source.xhtml#l00359">DataStructures::Table::AddRow()</a>, <a class="el" href="../../d0/d0c/_d_s___table_8cpp_source.xhtml#l00415">DataStructures::Table::AddRowColumns()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l01853">SLNet::RakPeer::AddToBanList()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l00837">SLNet::RakPeer::AddToSecurityExceptionList()</a>, <a class="el" href="../../dd/d5f/_rak_string_8cpp_source.xhtml#l01333">SLNet::RakString::Allocate()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l02744">SLNet::RakPeer::AttachPlugin()</a>, <a class="el" href="../../d0/d0c/_d_s___table_8cpp_source.xhtml#l00027">ExtendRows()</a>, <a class="el" href="../../dd/d5f/_rak_string_8cpp_source.xhtml#l01522">SLNet::RakString::Free()</a>, <a class="el" href="../../d9/dd5/_grid_sectorizer_8cpp_source.xhtml#l00149">GridSectorizer::GetEntries()</a>, <a class="el" href="../../d8/deb/_d_s___weighted_graph_8h_source.xhtml#l00231">DataStructures::WeightedGraph&lt; node_type, weight_type, allow_unlinkedNodes &gt;::GetShortestPath()</a>, <a class="el" href="../../d8/deb/_d_s___weighted_graph_8h_source.xhtml#l00332">DataStructures::WeightedGraph&lt; node_type, weight_type, allow_unlinkedNodes &gt;::GetSpanningTree()</a>, <a class="el" href="../../d8/db0/_variadic_s_q_l_parser_8cpp_source.xhtml#l00050">VariadicSQLParser::GetTypeMappingIndices()</a>, <a class="el" href="../../d1/df4/_d_s___tree_8h_source.xhtml#l00069">DataStructures::Tree&lt; TreeType &gt;::LevelOrderTraversal()</a>, <a class="el" href="../../dd/d5f/_rak_string_8cpp_source.xhtml#l00286">operator+()</a>, <a class="el" href="../../d0/d0c/_d_s___table_8cpp_source.xhtml#l00616">DataStructures::Table::QueryTable()</a>, and <a class="el" href="../../d0/d0c/_d_s___table_8cpp_source.xhtml#l00904">DataStructures::Table::SortTable()</a>.</p>

</div>
</div>
<a class="anchor" id="adfe61ff53151ab61ecba6f8506a4662f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class list_type&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; list_type &gt;::Insert </td>
          <td>(</td>
          <td class="paramtype">const list_type &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>line</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Insert at the end of the list. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>The new element. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml#l00299">299</a> of file <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml">DS_List.h</a>.</p>

<p>References <a class="el" href="../../dd/dc5/memoryoverride_8h_source.xhtml#l00197">SLNet::OP_DELETE_ARRAY()</a>.</p>

</div>
</div>
<a class="anchor" id="a7faf28804c9d17c301ee072c7dce005b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class list_type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">List</a>&lt; list_type &gt; &amp; <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; list_type &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">List</a>&lt; list_type &gt; &amp;&#160;</td>
          <td class="paramname"><em>original_copy</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Assign one list to another. </p>

<p>Definition at line <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml#l00181">181</a> of file <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml">DS_List.h</a>.</p>

<p>References <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00047">_FILE_AND_LINE_</a>.</p>

</div>
</div>
<a class="anchor" id="a028d64be4f2c6945be0f31a48b80823a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class list_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">list_type &amp; <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; list_type &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>position</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access an element by its index in the array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">position</td><td>The index into the array. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The element at position <em>position</em>. </dd></dl>

<p>Definition at line <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml#l00213">213</a> of file <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml">DS_List.h</a>.</p>

<p>References <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>.</p>

</div>
</div>
<a class="anchor" id="a9be46e78d21543bf28bd473807160024"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class list_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">list_type &amp; <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; list_type &gt;::Pop </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Pop an element from the end of the stack. </p>
<dl class="section pre"><dt>Precondition</dt><dd><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml#a6f13a4519693cbd16cd13b1fe284f330">Size()</a>&gt;0 </dd></dl>
<dl class="section return"><dt>Returns</dt><dd>The element at the end. </dd></dl>

<p>Definition at line <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml#l00238">238</a> of file <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml">DS_List.h</a>.</p>

<p>References <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>.</p>

</div>
</div>
<a class="anchor" id="a3ccff322ccbf8eca0214d2c39693abc0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class list_type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; list_type &gt;::Preallocate </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>countNeeded</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>line</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Preallocate the list, so it needs fewer reallocations at runtime. </p>

<p>Definition at line <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml#l00494">494</a> of file <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml">DS_List.h</a>.</p>

<p>References <a class="el" href="../../dd/dc5/memoryoverride_8h_source.xhtml#l00197">SLNet::OP_DELETE_ARRAY()</a>.</p>

</div>
</div>
<a class="anchor" id="a771fc63e3b0d892fbb605a379a78bacb"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class list_type&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; list_type &gt;::Push </td>
          <td>(</td>
          <td class="paramtype">const list_type &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>line</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Push an element at the end of the stack. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>The new element. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml#l00232">232</a> of file <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml">DS_List.h</a>.</p>

<p>Referenced by <a class="el" href="../../d2/d77/_d_s___hash_8h_source.xhtml#l00333">DataStructures::Hash&lt; key_type, data_type, HASH_SIZE, hashFunction &gt;::GetAsList()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l03080">SLNet::RakPeer::GetStatisticsList()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l01824">SLNet::RakPeer::GetSystemList()</a>, <a class="el" href="../../d9/d15/_reliability_layer_8cpp_source.xhtml#l00631">SLNet::ReliabilityLayer::HandleSocketReceiveFromConnectedPlayer()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l05540">SLNet::RakPeer::RunUpdateCycle()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l00372">SLNet::RakPeer::Startup()</a>, <a class="el" href="../../d2/d81/_variable_delta_serializer_8cpp_source.xhtml#l00254">SLNet::VariableDeltaSerializer::StartVariableHistoryWrite()</a>, and <a class="el" href="../../d8/d00/_variable_list_delta_tracker_8h_source.xhtml#l00043">SLNet::VariableListDeltaTracker::WriteVar()</a>.</p>

</div>
</div>
<a class="anchor" id="a79621376e92b605c4dbdb77aafbb6b60"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class list_type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; list_type &gt;::RemoveAtIndex </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>position</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Delete the element at position <em>position</em>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">position</td><td>The index of the element to delete </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml#l00393">393</a> of file <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml">DS_List.h</a>.</p>

<p>References <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>.</p>

<p>Referenced by <a class="el" href="../../dd/d5f/_rak_string_8cpp_source.xhtml#l01333">SLNet::RakString::Allocate()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l01973">SLNet::RakPeer::IsBanned()</a>, <a class="el" href="../../dd/d5f/_rak_string_8cpp_source.xhtml#l00286">operator+()</a>, <a class="el" href="../../d0/d0c/_d_s___table_8cpp_source.xhtml#l00304">DataStructures::Table::RemoveColumn()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l01902">SLNet::RakPeer::RemoveFromBanList()</a>, and <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l00845">SLNet::RakPeer::RemoveFromSecurityExceptionList()</a>.</p>

</div>
</div>
<a class="anchor" id="a351a647150169c71cc3f758dbb312096"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class list_type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; list_type &gt;::RemoveAtIndexFast </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>position</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Delete the element at position <em>position</em>. </p>
<dl class="section note"><dt>Note</dt><dd>- swaps middle with end of list, only use if list order does not matter </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">position</td><td>The index of the element to delete </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml#l00416">416</a> of file <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml">DS_List.h</a>.</p>

<p>References <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>.</p>

<p>Referenced by <a class="el" href="../../d2/d81/_variable_delta_serializer_8cpp_source.xhtml#l00138">SLNet::VariableDeltaSerializer::RemoveRemoteSystemVariableHistory()</a>.</p>

</div>
</div>
<a class="anchor" id="aeed32cd1075569515bb825f874dca24e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class list_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; list_type &gt;::RemoveFromEnd </td>
          <td>(</td>
          <td class="paramtype">const unsigned&#160;</td>
          <td class="paramname"><em>num</em> = <code>1</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Delete the element at the end of the list. </p>

<p>Definition at line <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml#l00430">430</a> of file <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml">DS_List.h</a>.</p>

<p>References <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>.</p>

<p>Referenced by <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l02772">SLNet::RakPeer::DetachPlugin()</a>.</p>

</div>
</div>
<a class="anchor" id="a953b497c5f51b0b4f98089c08ad15696"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class list_type&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; list_type &gt;::Replace </td>
          <td>(</td>
          <td class="paramtype">const list_type &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const list_type&#160;</td>
          <td class="paramname"><em>filler</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>position</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>line</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Replace the value at <em>position</em> by <em>input</em>. </p>
<p>If the size of the list is less than <em>position</em>, it increase the capacity of the list and fill slot with <em>filler</em>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>The element to replace at position <em>position</em>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">filler</td><td>The element use to fill new allocated capacity. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">position</td><td>The position of input in the list. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml#l00338">338</a> of file <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml">DS_List.h</a>.</p>

<p>References <a class="el" href="../../dd/dc5/memoryoverride_8h_source.xhtml#l00197">SLNet::OP_DELETE_ARRAY()</a>, and <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>.</p>

</div>
</div>
<a class="anchor" id="a3eb0624d2bd176d1cc85f2ff45264eb9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class list_type&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; list_type &gt;::Replace </td>
          <td>(</td>
          <td class="paramtype">const list_type &amp;&#160;</td>
          <td class="paramname"><em>input</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Replace the last element of the list by <em>input</em>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>The element used to replace the last element. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml#l00386">386</a> of file <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml">DS_List.h</a>.</p>

</div>
</div>
<a class="anchor" id="a6f13a4519693cbd16cd13b1fe284f330"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class list_type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List</a>&lt; list_type &gt;::Size </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The number of elements in the list </dd></dl>

<p>Definition at line <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml#l00450">450</a> of file <a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml">DS_List.h</a>.</p>

<p>Referenced by <a class="el" href="../../d0/d0c/_d_s___table_8cpp_source.xhtml#l00291">DataStructures::Table::AddColumn()</a>, <a class="el" href="../../d0/d0c/_d_s___table_8cpp_source.xhtml#l00359">DataStructures::Table::AddRow()</a>, <a class="el" href="../../d0/d0c/_d_s___table_8cpp_source.xhtml#l00415">DataStructures::Table::AddRowColumns()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l01853">SLNet::RakPeer::AddToBanList()</a>, <a class="el" href="../../dd/d5f/_rak_string_8cpp_source.xhtml#l01333">SLNet::RakString::Allocate()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l06390">SLNet::RakPeer::CallPluginCallbacks()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l01940">SLNet::RakPeer::ClearBanList()</a>, <a class="el" href="../../d0/d0c/_d_s___table_8cpp_source.xhtml#l00325">DataStructures::Table::ColumnIndex()</a>, <a class="el" href="../../d0/d0c/_d_s___table_8cpp_source.xhtml#l00337">DataStructures::Table::ColumnName()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l00990">SLNet::RakPeer::Connect()</a>, <a class="el" href="../../d0/d0c/_d_s___table_8cpp_source.xhtml#l01119">DataStructures::Table::DeleteRow()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l05468">SLNet::RakPeer::DerefAllSockets()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l02772">SLNet::RakPeer::DetachPlugin()</a>, <a class="el" href="../../d8/db0/_variadic_s_q_l_parser_8cpp_source.xhtml#l00075">VariadicSQLParser::ExtractArguments()</a>, <a class="el" href="../../d4/d61/_variable_list_delta_tracker_8cpp_source.xhtml#l00031">SLNet::VariableListDeltaTracker::FlagDirtyFromBitArray()</a>, <a class="el" href="../../d8/db0/_variadic_s_q_l_parser_8cpp_source.xhtml#l00155">VariadicSQLParser::FreeArguments()</a>, <a class="el" href="../../dd/d5f/_rak_string_8cpp_source.xhtml#l01220">SLNet::RakString::FreeMemoryNoMutex()</a>, <a class="el" href="../../d0/d0c/_d_s___table_8cpp_source.xhtml#l00032">FreeRow()</a>, <a class="el" href="../../d0/d0c/_d_s___table_8cpp_source.xhtml#l00351">DataStructures::Table::GetColumnCount()</a>, <a class="el" href="../../d0/d0c/_d_s___table_8cpp_source.xhtml#l00344">DataStructures::Table::GetColumnType()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l01241">SLNet::RakPeer::GetConnectionList()</a>, <a class="el" href="../../d9/dd5/_grid_sectorizer_8cpp_source.xhtml#l00149">GridSectorizer::GetEntries()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l02372">SLNet::RakPeer::GetMyBoundAddress()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l05478">SLNet::RakPeer::GetRakNetSocketFromUserConnectionSocketIndex()</a>, <a class="el" href="../../d2/d81/_variable_delta_serializer_8cpp_source.xhtml#l00273">SLNet::VariableDeltaSerializer::GetRemoteSystemHistoryListIndex()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l02847">SLNet::RakPeer::GetSocket()</a>, <a class="el" href="../../d8/deb/_d_s___weighted_graph_8h_source.xhtml#l00332">DataStructures::WeightedGraph&lt; node_type, weight_type, allow_unlinkedNodes &gt;::GetSpanningTree()</a>, <a class="el" href="../../d2/d81/_variable_delta_serializer_8cpp_source.xhtml#l00206">SLNet::VariableDeltaSerializer::GetVarsWrittenPerRemoteSystemListIndex()</a>, <a class="el" href="../../d9/d15/_reliability_layer_8cpp_source.xhtml#l00631">SLNet::ReliabilityLayer::HandleSocketReceiveFromConnectedPlayer()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l01973">SLNet::RakPeer::IsBanned()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l00874">SLNet::RakPeer::IsInSecurityExceptionList()</a>, <a class="el" href="../../d8/d00/_variable_list_delta_tracker_8h_source.xhtml#l00037">SLNet::VariableListDeltaTracker::IsPastEndOfList()</a>, <a class="el" href="../../d1/df4/_d_s___tree_8h_source.xhtml#l00069">DataStructures::Tree&lt; TreeType &gt;::LevelOrderTraversal()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l00920">SLNet::RakPeer::NumberOfConnections()</a>, <a class="el" href="../../dd/d5f/_rak_string_8cpp_source.xhtml#l00286">operator+()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l02079">SLNet::RakPeer::Ping()</a>, <a class="el" href="../../d0/d0c/_d_s___table_8cpp_source.xhtml#l00958">DataStructures::Table::PrintColumnHeaders()</a>, <a class="el" href="../../d0/d0c/_d_s___table_8cpp_source.xhtml#l00989">DataStructures::Table::PrintRow()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l04524">SLNet::ProcessOfflineNetworkPacket()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l02810">SLNet::RakPeer::PushBackPacket()</a>, <a class="el" href="../../d0/d0c/_d_s___table_8cpp_source.xhtml#l00688">DataStructures::Table::QueryRow()</a>, <a class="el" href="../../d0/d0c/_d_s___table_8cpp_source.xhtml#l00616">DataStructures::Table::QueryTable()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l01476">SLNet::RakPeer::Receive()</a>, <a class="el" href="../../d0/d0c/_d_s___table_8cpp_source.xhtml#l00304">DataStructures::Table::RemoveColumn()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l01902">SLNet::RakPeer::RemoveFromBanList()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l00845">SLNet::RakPeer::RemoveFromSecurityExceptionList()</a>, <a class="el" href="../../d2/d81/_variable_delta_serializer_8cpp_source.xhtml#l00138">SLNet::VariableDeltaSerializer::RemoveRemoteSystemVariableHistory()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l05540">SLNet::RakPeer::RunUpdateCycle()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l02981">SLNet::RakPeer::SendOutOfBand()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l02715">SLNet::RakPeer::SendTTL()</a>, <a class="el" href="../../da/df7/_table_serializer_8cpp_source.xhtml#l00040">SLNet::TableSerializer::SerializeColumns()</a>, <a class="el" href="../../da/df7/_table_serializer_8cpp_source.xhtml#l00106">SLNet::TableSerializer::SerializeRow()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l01041">SLNet::RakPeer::Shutdown()</a>, <a class="el" href="../../d0/d0c/_d_s___table_8cpp_source.xhtml#l00904">DataStructures::Table::SortTable()</a>, <a class="el" href="../../d5/d55/_rak_peer_8cpp_source.xhtml#l00372">SLNet::RakPeer::Startup()</a>, <a class="el" href="../../d9/d15/_reliability_layer_8cpp_source.xhtml#l01703">SLNet::ReliabilityLayer::Update()</a>, <a class="el" href="../../d8/d00/_variable_list_delta_tracker_8h_source.xhtml#l00043">SLNet::VariableListDeltaTracker::WriteVar()</a>, and <a class="el" href="../../d4/d61/_variable_list_delta_tracker_8cpp_source.xhtml#l00021">SLNet::VariableListDeltaTracker::~VariableListDeltaTracker()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>Source/include/slikenet/<a class="el" href="../../d9/d7f/_d_s___list_8h_source.xhtml">DS_List.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../da/d80/namespace_data_structures.xhtml">DataStructures</a></li><li class="navelem"><a class="el" href="../../d4/d78/class_data_structures_1_1_list.xhtml">List</a></li>
    <li class="footer">Generated on Wed Aug 14 2019 22:09:49 for SLikeNet by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.2 </li>
  </ul>
</div>
</body>
</html>
