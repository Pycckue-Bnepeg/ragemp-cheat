<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>SLikeNet: Source/include/slikenet/DS_Heap.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SLikeNet
   &#160;<span id="projectnumber">0.1.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../modules.xhtml"><span>Modules</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="../../files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="../../globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('da/dcb/_d_s___heap_8h_source.xhtml','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">DS_Heap.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../da/dcb/_d_s___heap_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *  Original work: Copyright (c) 2014, Oculus VR, Inc.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  All rights reserved.</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  This source code is licensed under the BSD-style license found in the</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *  RakNet License.txt file in the licenses directory of this source tree. An additional grant </span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  of patent rights can be found in the RakNet Patents.txt file in the same directory.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *  Modified work: Copyright (c) 2016-2017, SLikeSoft UG (haftungsbeschr√§nkt)</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  This source code was modified by SLikeSoft. Modifications are licensed under the MIT-style</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  license found in the license.txt file in the root directory of this source tree.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#ifndef __RAKNET_HEAP_H</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define __RAKNET_HEAP_H</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../dd/dc5/memoryoverride_8h.xhtml" title="If _USE_RAK_MEMORY_OVERRIDE is defined, memory allocations go through rakMalloc, rakRealloc, and rakFree.">memoryoverride.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d9/d7f/_d_s___list_8h.xhtml">DS_List.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../db/dbd/_export_8h.xhtml">Export.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../dc/da7/assert_8h.xhtml">assert.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#ifdef _MSC_VER</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma warning( push )</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span>DataStructures</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> weight_type, <span class="keyword">class</span> data_type, <span class="keywordtype">bool</span> isMaxHeap&gt;</div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml">   40</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../db/dbd/_export_8h.xhtml#ab0579394e418800d5c85e46ad6fcd61d">RAK_DLL_EXPORT</a> <a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml">Heap</a></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00043"></a><span class="lineno"><a class="code" href="../../d6/d74/struct_data_structures_1_1_heap_1_1_heap_node.xhtml">   43</a></span>&#160;        <span class="keyword">struct </span><a class="code" href="../../d6/d74/struct_data_structures_1_1_heap_1_1_heap_node.xhtml">HeapNode</a></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        {</div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="code" href="../../d6/d74/struct_data_structures_1_1_heap_1_1_heap_node.xhtml#ae96c7f0ab5a94d7d4ba11d60201e1393">   45</a></span>&#160;            <a class="code" href="../../d6/d74/struct_data_structures_1_1_heap_1_1_heap_node.xhtml#ae96c7f0ab5a94d7d4ba11d60201e1393">HeapNode</a>() {}</div>
<div class="line"><a name="l00046"></a><span class="lineno"><a class="code" href="../../d6/d74/struct_data_structures_1_1_heap_1_1_heap_node.xhtml#a3b64e29489c62b0226bd7be578612869">   46</a></span>&#160;            <a class="code" href="../../d6/d74/struct_data_structures_1_1_heap_1_1_heap_node.xhtml#a3b64e29489c62b0226bd7be578612869">HeapNode</a>(<span class="keyword">const</span> weight_type &amp;w, <span class="keyword">const</span> data_type &amp;d) : weight(w), data(d) {}</div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="code" href="../../d6/d74/struct_data_structures_1_1_heap_1_1_heap_node.xhtml#a5e5aff8b34509387425d3ed21fbca515">   47</a></span>&#160;            weight_type <a class="code" href="../../d6/d74/struct_data_structures_1_1_heap_1_1_heap_node.xhtml#a5e5aff8b34509387425d3ed21fbca515">weight</a>; <span class="comment">// I&#39;m assuming key is a native numerical type - float or int</span></div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="code" href="../../d6/d74/struct_data_structures_1_1_heap_1_1_heap_node.xhtml#a78907004e24fc4a12b48c9c460fd657c">   48</a></span>&#160;            data_type <a class="code" href="../../d6/d74/struct_data_structures_1_1_heap_1_1_heap_node.xhtml#a78907004e24fc4a12b48c9c460fd657c">data</a>;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        };</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml">Heap</a>();</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        ~<a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml">Heap</a>();</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordtype">void</span> Push(<span class="keyword">const</span> weight_type &amp;weight, <span class="keyword">const</span> data_type &amp;data, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line);</div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#a15fd87c401e7bbe80ebec8a316d2ede7">   55</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#a15fd87c401e7bbe80ebec8a316d2ede7" title="Call before calling PushSeries, for a new series of items.">StartSeries</a>(<span class="keywordtype">void</span>) {optimizeNextSeriesPush=<span class="keyword">false</span>;}</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordtype">void</span> PushSeries(<span class="keyword">const</span> weight_type &amp;weight, <span class="keyword">const</span> data_type &amp;data, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        data_type Pop(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> startingIndex);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        data_type Peek(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> startingIndex=0) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        weight_type PeekWeight(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> startingIndex=0) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordtype">void</span> Clear(<span class="keywordtype">bool</span> doNotDeallocateSmallBlocks, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        data_type&amp; operator[] ( <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> position ) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordtype">unsigned</span> Size(<span class="keywordtype">void</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordtype">unsigned</span> LeftChild(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> i) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordtype">unsigned</span> RightChild(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> i) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordtype">unsigned</span> Parent(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> i) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordtype">void</span> Swap(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> i, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> j);</div>
<div class="line"><a name="l00070"></a><span class="lineno"><a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#ad8407ff11d87c8ebf97481e5c45e9859">   70</a></span>&#160;        <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List&lt;HeapNode&gt;</a> <a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#ad8407ff11d87c8ebf97481e5c45e9859">heap</a>;</div>
<div class="line"><a name="l00071"></a><span class="lineno"><a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#af9136bef0034e8227c8ad3a22b0443d7">   71</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#af9136bef0034e8227c8ad3a22b0443d7">optimizeNextSeriesPush</a>;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    };</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">template</span>  &lt;<span class="keyword">class</span> weight_type, <span class="keyword">class</span> data_type, <span class="keywordtype">bool</span> isMaxHeap&gt;</div>
<div class="line"><a name="l00075"></a><span class="lineno"><a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#a2331fc1cdcd5d814c97da4a3d8d16de1">   75</a></span>&#160;        <a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#a2331fc1cdcd5d814c97da4a3d8d16de1">Heap&lt;weight_type, data_type, isMaxHeap&gt;::Heap</a>()</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        optimizeNextSeriesPush=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">template</span>  &lt;<span class="keyword">class</span> weight_type, <span class="keyword">class</span> data_type, <span class="keywordtype">bool</span> isMaxHeap&gt;</div>
<div class="line"><a name="l00081"></a><span class="lineno"><a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#acc3b571e2c4cd62ea55da95f71201b93">   81</a></span>&#160;        <a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#acc3b571e2c4cd62ea55da95f71201b93">Heap&lt;weight_type, data_type, isMaxHeap&gt;::~Heap</a>()</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="comment">//Clear(true, _FILE_AND_LINE_);</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">template</span>  &lt;<span class="keyword">class</span> weight_type, <span class="keyword">class</span> data_type, <span class="keywordtype">bool</span> isMaxHeap&gt;</div>
<div class="line"><a name="l00087"></a><span class="lineno"><a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#a1fed605d6f9b5afc6e3e63f449afade6">   87</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#a1fed605d6f9b5afc6e3e63f449afade6" title="If you are going to push a list of items, where the weights of the items on the list are in order and...">Heap&lt;weight_type, data_type, isMaxHeap&gt;::PushSeries</a>(<span class="keyword">const</span> weight_type &amp;weight, <span class="keyword">const</span> data_type &amp;data, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line)</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    {</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">if</span> (optimizeNextSeriesPush==<span class="keyword">false</span>)</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="comment">// If the weight of what we are inserting is greater than / less than in order of the heap of every sibling and sibling of parent, then can optimize next push</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="keywordtype">unsigned</span> currentIndex = heap.Size();</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <span class="keywordtype">unsigned</span> parentIndex;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="keywordflow">if</span> (currentIndex&gt;0)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                <span class="keywordflow">for</span> (parentIndex = Parent(currentIndex); parentIndex &lt; currentIndex; parentIndex++)</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                {</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="preprocessor">#ifdef _MSC_VER</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma warning(disable:4127)   // conditional expression is constant</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="preprocessor"></span>                    <span class="keywordflow">if</span> (isMaxHeap)</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                    {</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                        <span class="comment">// Every child is less than its parent</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                        <span class="keywordflow">if</span> (weight&gt;heap[parentIndex].weight)</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                        {</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                            <span class="comment">// Can&#39;t optimize</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                            Push(weight,data,file,line);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                        }</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                        <span class="comment">// Every child is greater than than its parent</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                        <span class="keywordflow">if</span> (weight&lt;heap[parentIndex].weight)</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                        {</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                            <span class="comment">// Can&#39;t optimize</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                            Push(weight,data,file,line);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                        }</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    }</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                }</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            }</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="comment">// Parent&#39;s subsequent siblings and this row&#39;s siblings all are less than / greater than inserted element. Can insert all further elements straight to the end</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            heap.Insert(<a class="code" href="../../d6/d74/struct_data_structures_1_1_heap_1_1_heap_node.xhtml">HeapNode</a>(weight, data), file, line);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            optimizeNextSeriesPush=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        }</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            heap.Insert(<a class="code" href="../../d6/d74/struct_data_structures_1_1_heap_1_1_heap_node.xhtml">HeapNode</a>(weight, data), file, line);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        }</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    }</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keyword">template</span>  &lt;<span class="keyword">class</span> weight_type, <span class="keyword">class</span> data_type, <span class="keywordtype">bool</span> isMaxHeap&gt;</div>
<div class="line"><a name="l00135"></a><span class="lineno"><a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#aa01a134957e811c1af719805d493b700">  135</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#aa01a134957e811c1af719805d493b700">Heap&lt;weight_type, data_type, isMaxHeap&gt;::Push</a>(<span class="keyword">const</span> weight_type &amp;weight, <span class="keyword">const</span> data_type &amp;data, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line)</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    {</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordtype">unsigned</span> currentIndex = heap.Size();</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keywordtype">unsigned</span> parentIndex;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        heap.Insert(<a class="code" href="../../d6/d74/struct_data_structures_1_1_heap_1_1_heap_node.xhtml">HeapNode</a>(weight, data), file, line);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">while</span> (currentIndex!=0)</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        {</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            parentIndex = Parent(currentIndex);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="preprocessor">#ifdef _MSC_VER</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma warning( disable : 4127 ) // warning C4127: conditional expression is constant</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="preprocessor"></span>            <span class="keywordflow">if</span> (isMaxHeap)</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            {</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                <span class="keywordflow">if</span> (heap[parentIndex].weight &lt; weight)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                    Swap(currentIndex, parentIndex);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                    currentIndex=parentIndex;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                }</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            }</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            {</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                <span class="keywordflow">if</span> (heap[parentIndex].weight &gt; weight)</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                {</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                    Swap(currentIndex, parentIndex);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                    currentIndex=parentIndex;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                }</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            }</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        }</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">template</span>  &lt;<span class="keyword">class</span> weight_type, <span class="keyword">class</span> data_type, <span class="keywordtype">bool</span> isMaxHeap&gt;</div>
<div class="line"><a name="l00170"></a><span class="lineno"><a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#a9ce961937f06f77b7ad82a02ce8d64ac">  170</a></span>&#160;    data_type <a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#a9ce961937f06f77b7ad82a02ce8d64ac">Heap&lt;weight_type, data_type, isMaxHeap&gt;::Pop</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> startingIndex)</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    {</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="comment">// While we have children, swap out with the larger of the two children.</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="comment">// This line will assert on an empty heap</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        data_type returnValue=heap[startingIndex].data;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="comment">// Move the last element to the head, and re-heapify</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        heap[startingIndex]=heap[heap.Size()-1];</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keywordtype">unsigned</span> currentIndex,leftChild,rightChild;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        weight_type currentWeight;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        currentIndex=startingIndex;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        currentWeight=heap[startingIndex].weight;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        heap.RemoveFromEnd();</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor">#ifdef _MSC_VER</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma warning( disable : 4127 ) // warning C4127: conditional expression is constant</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="preprocessor"></span>        <span class="keywordflow">for</span>(;;)</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        {</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            leftChild=LeftChild(currentIndex);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            rightChild=RightChild(currentIndex);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            <span class="keywordflow">if</span> (leftChild &gt;= heap.Size())</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            {</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                <span class="comment">// Done</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                <span class="keywordflow">return</span> returnValue;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            }</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="keywordflow">if</span> (rightChild &gt;= heap.Size())</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            {</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                <span class="comment">// Only left node.</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                <span class="keywordflow">if</span> ((isMaxHeap==<span class="keyword">true</span> &amp;&amp; currentWeight &lt; heap[leftChild].weight) ||</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                    (isMaxHeap==<span class="keyword">false</span> &amp;&amp; currentWeight &gt; heap[leftChild].weight))</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                        Swap(leftChild, currentIndex);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                <span class="keywordflow">return</span> returnValue;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            }</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            {</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                <span class="comment">// Swap with the bigger/smaller of the two children and continue</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                <span class="keywordflow">if</span> (isMaxHeap)</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                {</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                    <span class="keywordflow">if</span> (heap[leftChild].weight &lt;= currentWeight &amp;&amp; heap[rightChild].weight &lt;= currentWeight)</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                        <span class="keywordflow">return</span> returnValue;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    <span class="keywordflow">if</span> (heap[leftChild].weight &gt; heap[rightChild].weight)</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    {</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                        Swap(leftChild, currentIndex);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                        currentIndex=leftChild;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                    }</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                    {</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                        Swap(rightChild, currentIndex);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                        currentIndex=rightChild;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                    }</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                }</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                {</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                    <span class="keywordflow">if</span> (heap[leftChild].weight &gt;= currentWeight &amp;&amp; heap[rightChild].weight &gt;= currentWeight)</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                        <span class="keywordflow">return</span> returnValue;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                    <span class="keywordflow">if</span> (heap[leftChild].weight &lt; heap[rightChild].weight)</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                    {</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                        Swap(leftChild, currentIndex);</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                        currentIndex=leftChild;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                    }</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                    {</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                        Swap(rightChild, currentIndex);</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                        currentIndex=rightChild;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                    }</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                }</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        }</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    }</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keyword">template</span>  &lt;<span class="keyword">class</span> weight_type, <span class="keyword">class</span> data_type, <span class="keywordtype">bool</span> isMaxHeap&gt;</div>
<div class="line"><a name="l00247"></a><span class="lineno"><a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#a99bc18efa747659ec6891ef056d8a4ab">  247</a></span>&#160;    <span class="keyword">inline</span> data_type <a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#a99bc18efa747659ec6891ef056d8a4ab">Heap&lt;weight_type, data_type, isMaxHeap&gt;::Peek</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> startingIndex)<span class="keyword"> const</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keywordflow">return</span> heap[startingIndex].data;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    }</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keyword">template</span>  &lt;<span class="keyword">class</span> weight_type, <span class="keyword">class</span> data_type, <span class="keywordtype">bool</span> isMaxHeap&gt;</div>
<div class="line"><a name="l00253"></a><span class="lineno"><a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#a50ae6f55a75156e2ab679a0575ebe7ef">  253</a></span>&#160;    <span class="keyword">inline</span> weight_type <a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#a50ae6f55a75156e2ab679a0575ebe7ef">Heap&lt;weight_type, data_type, isMaxHeap&gt;::PeekWeight</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> startingIndex)<span class="keyword"> const</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        <span class="keywordflow">return</span> heap[startingIndex].weight;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    }</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keyword">template</span>  &lt;<span class="keyword">class</span> weight_type, <span class="keyword">class</span> data_type, <span class="keywordtype">bool</span> isMaxHeap&gt;</div>
<div class="line"><a name="l00259"></a><span class="lineno"><a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#ab573390b91ff42db9465a289f1c417de">  259</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#ab573390b91ff42db9465a289f1c417de">Heap&lt;weight_type, data_type, isMaxHeap&gt;::Clear</a>(<span class="keywordtype">bool</span> doNotDeallocateSmallBlocks, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line)</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    {</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        heap.Clear(doNotDeallocateSmallBlocks, file, line);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    }</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> weight_type, <span class="keyword">class</span> data_type, <span class="keywordtype">bool</span> isMaxHeap&gt;</div>
<div class="line"><a name="l00265"></a><span class="lineno"><a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#a6acedaf4d89f1de86e0ea256a4773b31">  265</a></span>&#160;    <span class="keyword">inline</span> data_type&amp; <a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#a6acedaf4d89f1de86e0ea256a4773b31">Heap&lt;weight_type, data_type, isMaxHeap&gt;::operator[] </a>( <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> position )<span class="keyword"> const</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <span class="keywordflow">return</span> heap[position].data;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    }</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> weight_type, <span class="keyword">class</span> data_type, <span class="keywordtype">bool</span> isMaxHeap&gt;</div>
<div class="line"><a name="l00270"></a><span class="lineno"><a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#acdb7d16c52998d6fc8a7b1a8602b8906">  270</a></span>&#160;        <span class="keywordtype">unsigned</span> <a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#acdb7d16c52998d6fc8a7b1a8602b8906">Heap&lt;weight_type, data_type, isMaxHeap&gt;::Size</a>(<span class="keywordtype">void</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <span class="keywordflow">return</span> heap.Size();</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    }</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> weight_type, <span class="keyword">class</span> data_type, <span class="keywordtype">bool</span> isMaxHeap&gt;</div>
<div class="line"><a name="l00276"></a><span class="lineno"><a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#a9317b3913a553113cd3a04ef471e595e">  276</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#a9317b3913a553113cd3a04ef471e595e">Heap&lt;weight_type, data_type, isMaxHeap&gt;::LeftChild</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> i)<span class="keyword"> const</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="keywordflow">return</span> i*2+1;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    }</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> weight_type, <span class="keyword">class</span> data_type, <span class="keywordtype">bool</span> isMaxHeap&gt;</div>
<div class="line"><a name="l00282"></a><span class="lineno"><a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#aa5363b61f35910c7754ded825000df27">  282</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#aa5363b61f35910c7754ded825000df27">Heap&lt;weight_type, data_type, isMaxHeap&gt;::RightChild</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> i)<span class="keyword"> const</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        <span class="keywordflow">return</span> i*2+2;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    }</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> weight_type, <span class="keyword">class</span> data_type, <span class="keywordtype">bool</span> isMaxHeap&gt;</div>
<div class="line"><a name="l00288"></a><span class="lineno"><a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#a4b7d3b580d84c3884139f8599142ca51">  288</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#a4b7d3b580d84c3884139f8599142ca51">Heap&lt;weight_type, data_type, isMaxHeap&gt;::Parent</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> i)<span class="keyword"> const</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="preprocessor">#ifdef _DEBUG</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="preprocessor"></span>        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(i!=0);</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="preprocessor"></span>        <span class="keywordflow">return</span> (i-1)/2;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    }</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> weight_type, <span class="keyword">class</span> data_type, <span class="keywordtype">bool</span> isMaxHeap&gt;</div>
<div class="line"><a name="l00297"></a><span class="lineno"><a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#a6037614b00405c5a57d06d0b98264f3f">  297</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../d1/df3/class_data_structures_1_1_heap.xhtml#a6037614b00405c5a57d06d0b98264f3f">Heap&lt;weight_type, data_type, isMaxHeap&gt;::Swap</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> i, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> j)</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    {</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        <a class="code" href="../../d6/d74/struct_data_structures_1_1_heap_1_1_heap_node.xhtml">HeapNode</a> temp;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        temp=heap[i];</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        heap[i]=heap[j];</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        heap[j]=temp;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    }</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;}</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="preprocessor">#ifdef _MSC_VER</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma warning( pop )</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="preprocessor">#endif</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_74389ed8173ad57b461b9d623a1f3867.xhtml">Source</a></li><li class="navelem"><a class="el" href="../../dir_bbb90e3ef9167a594ae33323139a2595.xhtml">include</a></li><li class="navelem"><a class="el" href="../../dir_88467e66686deb9d3756fe4fc298e321.xhtml">slikenet</a></li><li class="navelem"><a class="el" href="../../da/dcb/_d_s___heap_8h.xhtml">DS_Heap.h</a></li>
    <li class="footer">Generated on Wed Aug 14 2019 22:09:46 for SLikeNet by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.2 </li>
  </ul>
</div>
</body>
</html>
