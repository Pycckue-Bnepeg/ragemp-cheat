<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>SLikeNet: Source/src/DS_HuffmanEncodingTree.cpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SLikeNet
   &#160;<span id="projectnumber">0.1.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../modules.xhtml"><span>Modules</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="../../files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="../../globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('da/d7b/_d_s___huffman_encoding_tree_8cpp_source.xhtml','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">DS_HuffmanEncodingTree.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../da/d7b/_d_s___huffman_encoding_tree_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *  Original work: Copyright (c) 2014, Oculus VR, Inc.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  All rights reserved.</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  This source code is licensed under the BSD-style license found in the</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *  RakNet License.txt file in the licenses directory of this source tree. An additional grant </span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  of patent rights can be found in the RakNet Patents.txt file in the same directory.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *  Modified work: Copyright (c) 2016-2017, SLikeSoft UG (haftungsbeschr√§nkt)</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  This source code was modified by SLikeSoft. Modifications are licensed under the MIT-style</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  license found in the license.txt file in the root directory of this source tree.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../de/d78/_d_s___huffman_encoding_tree_8h.xhtml" title="[Internal] Generates a huffman encoding tree, used for string and global compression.">slikenet/DS_HuffmanEncodingTree.h</a>&quot;</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../dc/d8d/_d_s___queue_8h.xhtml">slikenet/DS_Queue.h</a>&quot;</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d7/dc3/_bit_stream_8h.xhtml" title="This class allows you to write and read native types as a string of bits.">slikenet/BitStream.h</a>&quot;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../dc/da7/assert_8h.xhtml">slikenet/assert.h</a>&quot;</span> </div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">using namespace </span>SLNet;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div>
<div class="line"><a name="l00023"></a><span class="lineno"><a class="code" href="../../d6/d52/class_s_l_net_1_1_huffman_encoding_tree.xhtml#aa77c33fe43a2e6441e3ec9a6190f68c0">   23</a></span>&#160;<a class="code" href="../../d6/d52/class_s_l_net_1_1_huffman_encoding_tree.xhtml#aa77c33fe43a2e6441e3ec9a6190f68c0">HuffmanEncodingTree::HuffmanEncodingTree</a>()</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;{</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    root = 0;</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;}</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno"><a class="code" href="../../d6/d52/class_s_l_net_1_1_huffman_encoding_tree.xhtml#afe08c3a26deabe245d10e0000c43bd2a">   28</a></span>&#160;<a class="code" href="../../d6/d52/class_s_l_net_1_1_huffman_encoding_tree.xhtml#afe08c3a26deabe245d10e0000c43bd2a">HuffmanEncodingTree::~HuffmanEncodingTree</a>()</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;{</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <a class="code" href="../../d6/d52/class_s_l_net_1_1_huffman_encoding_tree.xhtml#a9cb706100bfaa2afe47637347603eeb5" title="Free the memory used by the tree.">FreeMemory</a>();</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;}</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="code" href="../../d6/d52/class_s_l_net_1_1_huffman_encoding_tree.xhtml#a9cb706100bfaa2afe47637347603eeb5">   33</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d6/d52/class_s_l_net_1_1_huffman_encoding_tree.xhtml#a9cb706100bfaa2afe47637347603eeb5" title="Free the memory used by the tree.">HuffmanEncodingTree::FreeMemory</a>( <span class="keywordtype">void</span> )</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">if</span> ( root == 0 )</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <a class="code" href="../../dc/d0b/_thread_pool_8h.xhtml#a9717e7bbecb906637e86cef6da3d83c2">return</a> ;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="comment">// Use an in-order traversal to delete the tree</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml" title="A queue implemented as an array with a read and write index.">DataStructures::Queue&lt;HuffmanEncodingTreeNode *&gt;</a> nodeQueue;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#d4/d8f/struct_huffman_encoding_tree_node">HuffmanEncodingTreeNode</a> *node;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    nodeQueue.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#ae564a88f3367a786777694e778a4500d">Push</a>( root, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>  );</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordflow">while</span> ( nodeQueue.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#ae2aec093c82f780558c23f8ae9f296b8">Size</a>() &gt; 0 )</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    {</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        node = nodeQueue.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#a25272370e684388afd807c5369e4ef87">Pop</a>();</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">if</span> ( node-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#a25ce2e845c037728b1e95958495ddecb">left</a> )</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            nodeQueue.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#ae564a88f3367a786777694e778a4500d">Push</a>( node-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#a25ce2e845c037728b1e95958495ddecb">left</a>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>  );</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">if</span> ( node-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#aa7ff9e97cdf09f7ce9be54d54e89bc4d">right</a> )</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            nodeQueue.<a class="code" href="../../d3/d87/class_data_structures_1_1_queue.xhtml#ae564a88f3367a786777694e778a4500d">Push</a>( node-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#aa7ff9e97cdf09f7ce9be54d54e89bc4d">right</a>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>  );</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a79772d09451f784e87bec85694fad1ed">SLNet::OP_DELETE</a>(node, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment">// Delete the encoding table</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">for</span> ( <span class="keywordtype">int</span> i = 0; i &lt; 256; i++ )</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <a class="code" href="../../d9/d4c/_rak_memory_override_8cpp.xhtml#ab91fbe0570bf501cd97a53c6cffcef8f">rakFree_Ex</a>(encodingTable[ i ].encoding, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    root = 0;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;}</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">// Given a frequency table of 256 elements, all with a frequency of 1 or more, generate the tree</span></div>
<div class="line"><a name="l00069"></a><span class="lineno"><a class="code" href="../../d6/d52/class_s_l_net_1_1_huffman_encoding_tree.xhtml#abde050a1b4a2128ec3896463f9f997a7">   69</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d6/d52/class_s_l_net_1_1_huffman_encoding_tree.xhtml#abde050a1b4a2128ec3896463f9f997a7" title="Given a frequency table of 256 elements, all with a frequency of 1 or more, generate the tree...">HuffmanEncodingTree::GenerateFromFrequencyTable</a>( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> frequencyTable[ 256 ] )</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordtype">int</span> counter;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#d4/d8f/struct_huffman_encoding_tree_node">HuffmanEncodingTreeNode</a> * node;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#d4/d8f/struct_huffman_encoding_tree_node">HuffmanEncodingTreeNode</a> *leafList[ 256 ]; <span class="comment">// Keep a copy of the pointers to all the leaves so we can generate the encryption table bottom-up, which is easier</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="comment">// 1.  Make 256 trees each with a weight equal to the frequency of the corresponding character</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="../../dd/d55/class_data_structures_1_1_linked_list.xhtml">DataStructures::LinkedList&lt;HuffmanEncodingTreeNode *&gt;</a> huffmanEncodingTreeNodeList;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <a class="code" href="../../d6/d52/class_s_l_net_1_1_huffman_encoding_tree.xhtml#a9cb706100bfaa2afe47637347603eeb5" title="Free the memory used by the tree.">FreeMemory</a>();</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">for</span> ( counter = 0; counter &lt; 256; counter++ )</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    {</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        node = SLNet::OP_NEW&lt;HuffmanEncodingTreeNode&gt;( <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        node-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#a25ce2e845c037728b1e95958495ddecb">left</a> = 0;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        node-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#aa7ff9e97cdf09f7ce9be54d54e89bc4d">right</a> = 0;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        node-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#ab8e405870a5a080eebe7ad04a871618d">value</a> = (<span class="keywordtype">unsigned</span> char) counter;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        node-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#ad67b5b27458a18c0a7134999618087fe">weight</a> = frequencyTable[ counter ];</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">if</span> ( node-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#ad67b5b27458a18c0a7134999618087fe">weight</a> == 0 )</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            node-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#ad67b5b27458a18c0a7134999618087fe">weight</a> = 1; <span class="comment">// 0 weights are illegal</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        leafList[ counter ] = node; <span class="comment">// Used later to generate the encryption table</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        InsertNodeIntoSortedList( node, &amp;huffmanEncodingTreeNodeList ); <span class="comment">// Insert and maintain sort order.</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    }</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="comment">// 2.  While there is more than one tree, take the two smallest trees and merge them so that the two trees are the left and right</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="comment">// children of a new node, where the new node has the weight the sum of the weight of the left and right child nodes.</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">for</span>(;;)</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    {</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        huffmanEncodingTreeNodeList.<a class="code" href="../../d3/dbe/class_data_structures_1_1_circular_linked_list.xhtml#a453cf3bafc9ff7ae5ab13456a88f1a98">Beginning</a>();</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#d4/d8f/struct_huffman_encoding_tree_node">HuffmanEncodingTreeNode</a> *lesser, *greater;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        lesser = huffmanEncodingTreeNodeList.<a class="code" href="../../d3/dbe/class_data_structures_1_1_circular_linked_list.xhtml#a4ec7084b10a554f32021a8ea298838a3">Pop</a>();</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        greater = huffmanEncodingTreeNodeList.<a class="code" href="../../d3/dbe/class_data_structures_1_1_circular_linked_list.xhtml#a4ec7084b10a554f32021a8ea298838a3">Pop</a>();</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        node = SLNet::OP_NEW&lt;HuffmanEncodingTreeNode&gt;( <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a> );</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        node-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#a25ce2e845c037728b1e95958495ddecb">left</a> = lesser;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        node-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#aa7ff9e97cdf09f7ce9be54d54e89bc4d">right</a> = greater;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        node-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#ad67b5b27458a18c0a7134999618087fe">weight</a> = lesser-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#ad67b5b27458a18c0a7134999618087fe">weight</a> + greater-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#ad67b5b27458a18c0a7134999618087fe">weight</a>;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        lesser-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#a6776b51b7e9fe502e8d740aacb0d35d7">parent</a> = node;  <span class="comment">// This is done to make generating the encryption table easier</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        greater-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#a6776b51b7e9fe502e8d740aacb0d35d7">parent</a> = node;  <span class="comment">// This is done to make generating the encryption table easier</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordflow">if</span> ( huffmanEncodingTreeNodeList.<a class="code" href="../../d3/dbe/class_data_structures_1_1_circular_linked_list.xhtml#acbd6339fc68ed1015b6811a20ee39910">Size</a>() == 0 )</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="comment">// 3. Assign the one remaining node in the list to the root node.</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            root = node;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            root-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#a6776b51b7e9fe502e8d740aacb0d35d7">parent</a> = 0;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        }</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="comment">// Put the new node back into the list at the correct spot to maintain the sort.  Linear search time</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        InsertNodeIntoSortedList( node, &amp;huffmanEncodingTreeNodeList );</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordtype">bool</span> tempPath[ 256 ]; <span class="comment">// Maximum path length is 256</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> tempPathLength;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#d4/d8f/struct_huffman_encoding_tree_node">HuffmanEncodingTreeNode</a> *currentNode;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> bitStream;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="comment">// Generate the encryption table. From before, we have an array of pointers to all the leaves which contain pointers to their parents.</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="comment">// This can be done more efficiently but this isn&#39;t bad and it&#39;s way easier to program and debug</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">for</span> ( counter = 0; counter &lt; 256; counter++ )</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="comment">// Already done at the end of the loop and before it!</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        tempPathLength = 0;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="comment">// Set the current node at the leaf</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        currentNode = leafList[ counter ];</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">do</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        {</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="keywordflow">if</span> ( currentNode-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#a6776b51b7e9fe502e8d740aacb0d35d7">parent</a>-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#a25ce2e845c037728b1e95958495ddecb">left</a> == currentNode )   <span class="comment">// We&#39;re storing the paths in reverse order.since we are going from the leaf to the root</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                tempPath[ tempPathLength++ ] = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                tempPath[ tempPathLength++ ] = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            currentNode = currentNode-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#a6776b51b7e9fe502e8d740aacb0d35d7">parent</a>;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        }</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">while</span> ( currentNode != root );</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="comment">// Write to the bitstream in the reverse order that we stored the path, which gives us the correct order from the root to the leaf</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">while</span> ( tempPathLength-- &gt; 0 )</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        {</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            <span class="keywordflow">if</span> ( tempPath[ tempPathLength ] )   <span class="comment">// Write 1&#39;s and 0&#39;s because writing a bool will write the BitStream TYPE_CHECKING validation bits if that is defined along with the actual data bit, which is not what we want</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                bitStream.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2060f594db2a6182038259c9db7eeb31" title="Write a 1.">Write1</a>();</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                bitStream.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a6ab8d1f78d5d37de6db82f4b8002c218" title="Write a 0.">Write0</a>();</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        }</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="comment">// Read data from the bitstream, which is written to the encoding table in bits and bitlength. Note this function allocates the encodingTable[counter].encoding pointer</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        encodingTable[ counter ].bitLength = ( <span class="keywordtype">unsigned</span> char ) bitStream.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a382ada68f7a9073ea57e4403d478d391" title="Makes a copy of the internal data for you _data will point to the stream. Partial bytes are left alig...">CopyData</a>( &amp;encodingTable[ counter ].encoding );</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="comment">// Reset the bitstream for the next iteration</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        bitStream.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#aab4381d8b4a48dbc8e2975dba894f350" title="Resets the bitstream for reuse.">Reset</a>();</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    }</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;}</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">// Pass an array of bytes to array and a preallocated BitStream to receive the output</span></div>
<div class="line"><a name="l00169"></a><span class="lineno"><a class="code" href="../../d6/d52/class_s_l_net_1_1_huffman_encoding_tree.xhtml#a1d35c9afb94d954f184a72cf904c7c65">  169</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d6/d52/class_s_l_net_1_1_huffman_encoding_tree.xhtml#a1d35c9afb94d954f184a72cf904c7c65" title="Pass an array of bytes to array and a preallocated BitStream to receive the output.">HuffmanEncodingTree::EncodeArray</a>( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input, <span class="keywordtype">size_t</span> sizeInBytes, <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> * output )</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;{       </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordtype">unsigned</span> counter;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="comment">// For each input byte, Write out the corresponding series of 1&#39;s and 0&#39;s that give the encoded representation</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordflow">for</span> ( counter = 0; counter &lt; sizeInBytes; counter++ )</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    {</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        output-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8bf3d5d6926d80a9dba19dea5eecb7d2" title="Write numberToWrite bits from the input source.">WriteBits</a>( encodingTable[ input[ counter ] ].encoding, encodingTable[ input[ counter ] ].bitLength, <span class="keyword">false</span> ); <span class="comment">// Data is left aligned</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    }</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="comment">// Byte align the output so the unassigned remaining bits don&#39;t equate to some actual value</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordflow">if</span> ( output-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a0efe4cd010ac7ccc0a7aa8868e0c54c8" title="Returns the length in bits of the stream.">GetNumberOfBitsUsed</a>() % 8 != 0 )</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    {</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="comment">// Find an input that is longer than the remaining bits.  Write out part of it to pad the output to be byte aligned.</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> remainingBits = (<span class="keywordtype">unsigned</span> char) ( 8 - ( output-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a0efe4cd010ac7ccc0a7aa8868e0c54c8" title="Returns the length in bits of the stream.">GetNumberOfBitsUsed</a>() % 8 ) );</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keywordflow">for</span> ( counter = 0; counter &lt; 256; counter++ )</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            <span class="keywordflow">if</span> ( encodingTable[ counter ].bitLength &gt; remainingBits )</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            {</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                output-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8bf3d5d6926d80a9dba19dea5eecb7d2" title="Write numberToWrite bits from the input source.">WriteBits</a>( encodingTable[ counter ].encoding, remainingBits, <span class="keyword">false</span> ); <span class="comment">// Data is left aligned</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            }</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="preprocessor">#ifdef _DEBUG</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="preprocessor"></span>            <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>( counter != 256 );  <span class="comment">// Given 256 elements, we should always be able to find an input that would be &gt;= 7 bits</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    }</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;}</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div>
<div class="line"><a name="l00200"></a><span class="lineno"><a class="code" href="../../d6/d52/class_s_l_net_1_1_huffman_encoding_tree.xhtml#a7e1d71fee40cae1bf30526950323425b">  200</a></span>&#160;<span class="keywordtype">unsigned</span> <a class="code" href="../../d6/d52/class_s_l_net_1_1_huffman_encoding_tree.xhtml#a7e1d71fee40cae1bf30526950323425b">HuffmanEncodingTree::DecodeArray</a>(<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> * input, <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> sizeInBits, <span class="keywordtype">size_t</span> maxCharsToWrite, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *output )</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;{</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#d4/d8f/struct_huffman_encoding_tree_node">HuffmanEncodingTreeNode</a> * currentNode;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordtype">unsigned</span> outputWriteIndex;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    outputWriteIndex = 0;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    currentNode = root;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="comment">// For each bit, go left if it is a 0 and right if it is a 1.  When we reach a leaf, that gives us the desired value and we restart from the root</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordflow">for</span> ( <span class="keywordtype">unsigned</span> counter = 0; counter &lt; sizeInBits; counter++ )</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    {</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="keywordflow">if</span> ( input-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a713747c97050062797ef5d211f583cea" title="Reads 1 bit and returns true if that bit is 1 and false if it is 0.">ReadBit</a>() == false )   <span class="comment">// left!</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            currentNode = currentNode-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#a25ce2e845c037728b1e95958495ddecb">left</a>;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            currentNode = currentNode-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#aa7ff9e97cdf09f7ce9be54d54e89bc4d">right</a>;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <a class="code" href="../../dc/d0b/_thread_pool_8h.xhtml#a35e6652907f33d8d77bdbdfbbddac127">if</a> ( currentNode-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#a25ce2e845c037728b1e95958495ddecb">left</a> == 0 &amp;&amp; currentNode-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#aa7ff9e97cdf09f7ce9be54d54e89bc4d">right</a> == 0 )   <span class="comment">// Leaf</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        {</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            <span class="keywordflow">if</span> ( outputWriteIndex &lt; maxCharsToWrite )</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                output[ outputWriteIndex ] = currentNode-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#ab8e405870a5a080eebe7ad04a871618d">value</a>;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            outputWriteIndex++;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            currentNode = root;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    }</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordflow">return</span> outputWriteIndex;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;}</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">// Pass an array of encoded bytes to array and a preallocated BitStream to receive the output</span></div>
<div class="line"><a name="l00233"></a><span class="lineno"><a class="code" href="../../d6/d52/class_s_l_net_1_1_huffman_encoding_tree.xhtml#a7bcfec745a078f0a58af8deceeff3283">  233</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d6/d52/class_s_l_net_1_1_huffman_encoding_tree.xhtml#a7e1d71fee40cae1bf30526950323425b">HuffmanEncodingTree::DecodeArray</a>( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *input, <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> sizeInBits, <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> * output )</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;{</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#d4/d8f/struct_huffman_encoding_tree_node">HuffmanEncodingTreeNode</a> * currentNode;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keywordflow">if</span> ( sizeInBits &lt;= 0 )</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <a class="code" href="../../dc/d0b/_thread_pool_8h.xhtml#a9717e7bbecb906637e86cef6da3d83c2">return</a> ;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> bitStream( input, <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>(sizeInBits), <span class="keyword">false</span> );</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    currentNode = root;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="comment">// For each bit, go left if it is a 0 and right if it is a 1.  When we reach a leaf, that gives us the desired value and we restart from the root</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keywordflow">for</span> ( <span class="keywordtype">unsigned</span> counter = 0; counter &lt; sizeInBits; counter++ )</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    {</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="keywordflow">if</span> ( bitStream.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a713747c97050062797ef5d211f583cea" title="Reads 1 bit and returns true if that bit is 1 and false if it is 0.">ReadBit</a>() == false )   <span class="comment">// left!</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            currentNode = currentNode-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#a25ce2e845c037728b1e95958495ddecb">left</a>;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            currentNode = currentNode-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#aa7ff9e97cdf09f7ce9be54d54e89bc4d">right</a>;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <a class="code" href="../../dc/d0b/_thread_pool_8h.xhtml#a35e6652907f33d8d77bdbdfbbddac127">if</a> ( currentNode-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#a25ce2e845c037728b1e95958495ddecb">left</a> == 0 &amp;&amp; currentNode-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#aa7ff9e97cdf09f7ce9be54d54e89bc4d">right</a> == 0 )   <span class="comment">// Leaf</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        {</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            output-&gt;<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8bf3d5d6926d80a9dba19dea5eecb7d2" title="Write numberToWrite bits from the input source.">WriteBits</a>( &amp;( currentNode-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#ab8e405870a5a080eebe7ad04a871618d">value</a> ), <span class="keyword">sizeof</span>( <span class="keywordtype">char</span> ) * 8, <span class="keyword">true</span> ); <span class="comment">// Use WriteBits instead of Write(char) because we want to avoid TYPE_CHECKING</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            currentNode = root;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        }</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    }</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;}</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment">// Insertion sort.  Slow but easy to write in this case</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="keywordtype">void</span> HuffmanEncodingTree::InsertNodeIntoSortedList( <a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#d4/d8f/struct_huffman_encoding_tree_node">HuffmanEncodingTreeNode</a> * node, <a class="code" href="../../dd/d55/class_data_structures_1_1_linked_list.xhtml">DataStructures::LinkedList&lt;HuffmanEncodingTreeNode *&gt;</a> *huffmanEncodingTreeNodeList )<span class="keyword"> const</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordflow">if</span> ( huffmanEncodingTreeNodeList-&gt;<a class="code" href="../../d3/dbe/class_data_structures_1_1_circular_linked_list.xhtml#acbd6339fc68ed1015b6811a20ee39910">Size</a>() == 0 )</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    {</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        huffmanEncodingTreeNodeList-&gt;<a class="code" href="../../d3/dbe/class_data_structures_1_1_circular_linked_list.xhtml#ae9f34d88cfb215008cda148c80ca1b94">Insert</a>( node );</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <a class="code" href="../../dc/d0b/_thread_pool_8h.xhtml#a9717e7bbecb906637e86cef6da3d83c2">return</a> ;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    }</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    huffmanEncodingTreeNodeList-&gt;<a class="code" href="../../d3/dbe/class_data_structures_1_1_circular_linked_list.xhtml#a453cf3bafc9ff7ae5ab13456a88f1a98">Beginning</a>();</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keywordtype">unsigned</span> counter = 0;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordflow">for</span>(;;)</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    {</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <span class="keywordflow">if</span> ( huffmanEncodingTreeNodeList-&gt;<a class="code" href="../../d3/dbe/class_data_structures_1_1_circular_linked_list.xhtml#a81644887456b6966c3bb882a1a1557d0">Peek</a>()-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#ad67b5b27458a18c0a7134999618087fe">weight</a> &lt; node-&gt;<a class="code" href="../../dd/da3/_d_s___huffman_encoding_tree_node_8h.xhtml#ad67b5b27458a18c0a7134999618087fe">weight</a> )</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            ++( *huffmanEncodingTreeNodeList );</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        {</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            huffmanEncodingTreeNodeList-&gt;<a class="code" href="../../d3/dbe/class_data_structures_1_1_circular_linked_list.xhtml#ae9f34d88cfb215008cda148c80ca1b94">Insert</a>( node );</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        }</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        <span class="comment">// Didn&#39;t find a spot in the middle - add to the end</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="keywordflow">if</span> ( ++counter == huffmanEncodingTreeNodeList-&gt;<a class="code" href="../../d3/dbe/class_data_structures_1_1_circular_linked_list.xhtml#acbd6339fc68ed1015b6811a20ee39910">Size</a>() )</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        {</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            huffmanEncodingTreeNodeList-&gt;<a class="code" href="../../d3/dbe/class_data_structures_1_1_circular_linked_list.xhtml#a9a4e832ea30d76d1dbe597c14e2d91d0">End</a>();</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            huffmanEncodingTreeNodeList-&gt;<a class="code" href="../../d3/dbe/class_data_structures_1_1_circular_linked_list.xhtml#af77041c880bfedbbb16afe1482c4ccd6">Add</a>( node )</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                ; <span class="comment">// Add to the end</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        }</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    }</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_74389ed8173ad57b461b9d623a1f3867.xhtml">Source</a></li><li class="navelem"><a class="el" href="../../dir_d1eb22c2ecfd8b50f59e9cbaf8260105.xhtml">src</a></li><li class="navelem"><a class="el" href="../../da/d7b/_d_s___huffman_encoding_tree_8cpp.xhtml">DS_HuffmanEncodingTree.cpp</a></li>
    <li class="footer">Generated on Wed Aug 14 2019 22:09:47 for SLikeNet by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.2 </li>
  </ul>
</div>
</body>
</html>
