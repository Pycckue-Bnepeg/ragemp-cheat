<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>SLikeNet: Source/include/slikenet/DS_OrderedList.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SLikeNet
   &#160;<span id="projectnumber">0.1.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../modules.xhtml"><span>Modules</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="../../files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="../../globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('d6/d4d/_d_s___ordered_list_8h_source.xhtml','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">DS_OrderedList.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d6/d4d/_d_s___ordered_list_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *  Original work: Copyright (c) 2014, Oculus VR, Inc.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  All rights reserved.</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  This source code is licensed under the BSD-style license found in the</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *  RakNet License.txt file in the licenses directory of this source tree. An additional grant </span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  of patent rights can be found in the RakNet Patents.txt file in the same directory.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *  Modified work: Copyright (c) 2016-2017, SLikeSoft UG (haftungsbeschr√§nkt)</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  This source code was modified by SLikeSoft. Modifications are licensed under the MIT-style</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  license found in the license.txt file in the root directory of this source tree.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d9/d7f/_d_s___list_8h.xhtml">DS_List.h</a>&quot;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../dd/dc5/memoryoverride_8h.xhtml" title="If _USE_RAK_MEMORY_OVERRIDE is defined, memory allocations go through rakMalloc, rakRealloc, and rakFree.">memoryoverride.h</a>&quot;</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../db/dbd/_export_8h.xhtml">Export.h</a>&quot;</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#ifndef __ORDERED_LIST_H</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define __ORDERED_LIST_H</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">namespace </span>DataStructures</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> key_type, <span class="keyword">class</span> data_type&gt;</div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="code" href="../../da/d80/namespace_data_structures.xhtml#a7121bfdce3827886832c6966eb3fbf64">   33</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="../../da/d80/namespace_data_structures.xhtml#a7121bfdce3827886832c6966eb3fbf64">defaultOrderedListComparison</a>(<span class="keyword">const</span> key_type &amp;a, <span class="keyword">const</span> data_type &amp;b)</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    {</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="keywordflow">if</span> (a&lt;b) <span class="keywordflow">return</span> -1; <span class="keywordflow">if</span> (a==b) <span class="keywordflow">return</span> 0; <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    }</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> key_type, <span class="keyword">class</span> data_type, <span class="keywordtype">int</span> (*default_comparison_function)(const key_type&amp;, const data_type&amp;)=defaultOrderedListComparison&lt;key_type, data_type&gt; &gt;</div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml">   40</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../db/dbd/_export_8h.xhtml#ab0579394e418800d5c85e46ad6fcd61d">RAK_DLL_EXPORT</a> <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml">OrderedList</a></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00043"></a><span class="lineno"><a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#a3c38c2e0a64e1ddcf86feb6903303d06">   43</a></span>&#160;        <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#a3c38c2e0a64e1ddcf86feb6903303d06">IMPLEMENT_DEFAULT_COMPARISON</a>(<span class="keywordtype">void</span>) {DataStructures::defaultOrderedListComparison&lt;key_type, data_type&gt;(key_type(),data_type());}</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml">OrderedList</a>();</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        ~<a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml">OrderedList</a>();</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml">OrderedList</a>( <span class="keyword">const</span> <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml">OrderedList</a>&amp; original_copy );</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml">OrderedList</a>&amp; operator= ( <span class="keyword">const</span> <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml">OrderedList</a>&amp; original_copy );</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordtype">bool</span> HasData(<span class="keyword">const</span> key_type &amp;key, <span class="keywordtype">int</span> (*cf)(<span class="keyword">const</span> key_type&amp;, <span class="keyword">const</span> data_type&amp;)=default_comparison_function) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="comment">// GetIndexFromKey returns where the insert should go at the same time checks if it is there</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordtype">unsigned</span> GetIndexFromKey(<span class="keyword">const</span> key_type &amp;key, <span class="keywordtype">bool</span> *objectExists, <span class="keywordtype">int</span> (*cf)(<span class="keyword">const</span> key_type&amp;, <span class="keyword">const</span> data_type&amp;)=default_comparison_function) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        data_type GetElementFromKey(<span class="keyword">const</span> key_type &amp;key, <span class="keywordtype">int</span> (*cf)(<span class="keyword">const</span> key_type&amp;, <span class="keyword">const</span> data_type&amp;)=default_comparison_function) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordtype">bool</span> GetElementFromKey(<span class="keyword">const</span> key_type &amp;key, data_type &amp;element, <span class="keywordtype">int</span> (*cf)(<span class="keyword">const</span> key_type&amp;, <span class="keyword">const</span> data_type&amp;)=default_comparison_function) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordtype">unsigned</span> Insert(<span class="keyword">const</span> key_type &amp;key, <span class="keyword">const</span> data_type &amp;data, <span class="keywordtype">bool</span> assertOnDuplicate, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line, <span class="keywordtype">int</span> (*cf)(<span class="keyword">const</span> key_type&amp;, <span class="keyword">const</span> data_type&amp;)=default_comparison_function);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keywordtype">unsigned</span> Remove(<span class="keyword">const</span> key_type &amp;key, <span class="keywordtype">int</span> (*cf)(<span class="keyword">const</span> key_type&amp;, <span class="keyword">const</span> data_type&amp;)=default_comparison_function);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="keywordtype">unsigned</span> RemoveIfExists(<span class="keyword">const</span> key_type &amp;key, <span class="keywordtype">int</span> (*cf)(<span class="keyword">const</span> key_type&amp;, <span class="keyword">const</span> data_type&amp;)=default_comparison_function);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        data_type&amp; operator[] ( <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> position ) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordtype">void</span> RemoveAtIndex(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> index);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordtype">void</span> InsertAtIndex(<span class="keyword">const</span> data_type &amp;data, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> index, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordtype">void</span> InsertAtEnd(<span class="keyword">const</span> data_type &amp;data, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordtype">void</span> RemoveFromEnd(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> num=1);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordtype">void</span> Clear(<span class="keywordtype">bool</span> doNotDeallocate, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordtype">unsigned</span> Size(<span class="keywordtype">void</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00069"></a><span class="lineno"><a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#abccd21c52351b495680c3a4fbfbf5207">   69</a></span>&#160;        <a class="code" href="../../d4/d78/class_data_structures_1_1_list.xhtml">DataStructures::List&lt;data_type&gt;</a> <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#abccd21c52351b495680c3a4fbfbf5207">orderedList</a>;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    };</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> key_type, <span class="keyword">class</span> data_type, <span class="keywordtype">int</span> (*default_comparison_function)(const key_type&amp;, const data_type&amp;)&gt;</div>
<div class="line"><a name="l00073"></a><span class="lineno"><a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#ae1f66689234c8a884517632575a4f13c">   73</a></span>&#160;    <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#ae1f66689234c8a884517632575a4f13c">OrderedList&lt;key_type, data_type, default_comparison_function&gt;::OrderedList</a>()</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    {</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    }</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> key_type, <span class="keyword">class</span> data_type, <span class="keywordtype">int</span> (*default_comparison_function)(const key_type&amp;, const data_type&amp;)&gt;</div>
<div class="line"><a name="l00078"></a><span class="lineno"><a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#afded705b8ce3775c3d5494b1b52aff76">   78</a></span>&#160;    <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#afded705b8ce3775c3d5494b1b52aff76">OrderedList&lt;key_type, data_type, default_comparison_function&gt;::~OrderedList</a>()</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    {</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        Clear(<span class="keyword">false</span>, <a class="code" href="../../d8/db0/defines_8h.xhtml#a8661ec2137eef33a8cd0cd618a748871">_FILE_AND_LINE_</a>);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    }</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> key_type, <span class="keyword">class</span> data_type, <span class="keywordtype">int</span> (*default_comparison_function)(const key_type&amp;, const data_type&amp;)&gt;</div>
<div class="line"><a name="l00084"></a><span class="lineno"><a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#a951c23d62ae43b7955d1f04cd7be19dc">   84</a></span>&#160;    <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#ae1f66689234c8a884517632575a4f13c">OrderedList&lt;key_type, data_type, default_comparison_function&gt;::OrderedList</a>( <span class="keyword">const</span> <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml">OrderedList</a>&amp; original_copy )</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        orderedList=original_copy.<a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#abccd21c52351b495680c3a4fbfbf5207">orderedList</a>;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> key_type, <span class="keyword">class</span> data_type, <span class="keywordtype">int</span> (*default_comparison_function)(const key_type&amp;, const data_type&amp;)&gt;</div>
<div class="line"><a name="l00090"></a><span class="lineno"><a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#a3c02e1629599ee604763a55cd8d81a31">   90</a></span>&#160;    <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml">OrderedList&lt;key_type, data_type, default_comparison_function&gt;</a>&amp; <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#a3c02e1629599ee604763a55cd8d81a31">OrderedList&lt;key_type, data_type, default_comparison_function&gt;::operator= </a>( <span class="keyword">const</span> <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml">OrderedList</a>&amp; original_copy )</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    {</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        orderedList=original_copy.<a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#abccd21c52351b495680c3a4fbfbf5207">orderedList</a>;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    }</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> key_type, <span class="keyword">class</span> data_type, <span class="keywordtype">int</span> (*default_comparison_function)(const key_type&amp;, const data_type&amp;)&gt;</div>
<div class="line"><a name="l00097"></a><span class="lineno"><a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#aecaf8370213fb9ebdd99bc6262a930e6">   97</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#aecaf8370213fb9ebdd99bc6262a930e6">OrderedList&lt;key_type, data_type, default_comparison_function&gt;::HasData</a>(<span class="keyword">const</span> key_type &amp;key, <span class="keywordtype">int</span> (*cf)(<span class="keyword">const</span> key_type&amp;, <span class="keyword">const</span> data_type&amp;))<span class="keyword"> const</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordtype">bool</span> objectExists;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        GetIndexFromKey(key, &amp;objectExists, cf);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">return</span> objectExists;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> key_type, <span class="keyword">class</span> data_type, <span class="keywordtype">int</span> (*default_comparison_function)(const key_type&amp;, const data_type&amp;)&gt;</div>
<div class="line"><a name="l00105"></a><span class="lineno"><a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#a9667d272bf826dc1d200f77112f90993">  105</a></span>&#160;    data_type <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#a9667d272bf826dc1d200f77112f90993">OrderedList&lt;key_type, data_type, default_comparison_function&gt;::GetElementFromKey</a>(<span class="keyword">const</span> key_type &amp;key, <span class="keywordtype">int</span> (*cf)(<span class="keyword">const</span> key_type&amp;, <span class="keyword">const</span> data_type&amp;))<span class="keyword"> const</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordtype">bool</span> objectExists;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keywordtype">unsigned</span> index;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        index = GetIndexFromKey(key, &amp;objectExists, cf);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(objectExists);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordflow">return</span> orderedList[index];</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    }</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> key_type, <span class="keyword">class</span> data_type, <span class="keywordtype">int</span> (*default_comparison_function)(const key_type&amp;, const data_type&amp;)&gt;</div>
<div class="line"><a name="l00114"></a><span class="lineno"><a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#ae16343544f15259dad97977b439b7383">  114</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#a9667d272bf826dc1d200f77112f90993">OrderedList&lt;key_type, data_type, default_comparison_function&gt;::GetElementFromKey</a>(<span class="keyword">const</span> key_type &amp;key, data_type &amp;element, <span class="keywordtype">int</span> (*cf)(<span class="keyword">const</span> key_type&amp;, <span class="keyword">const</span> data_type&amp;))<span class="keyword"> const</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordtype">bool</span> objectExists;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordtype">unsigned</span> index;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        index = GetIndexFromKey(key, &amp;objectExists, cf);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">if</span> (objectExists)</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            element = orderedList[index];</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">return</span> objectExists;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    }</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> key_type, <span class="keyword">class</span> data_type, <span class="keywordtype">int</span> (*default_comparison_function)(const key_type&amp;, const data_type&amp;)&gt;</div>
<div class="line"><a name="l00124"></a><span class="lineno"><a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#a54b7abdd81f650f9d1755a4fd56b1aaa">  124</a></span>&#160;    <span class="keywordtype">unsigned</span> <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#a54b7abdd81f650f9d1755a4fd56b1aaa">OrderedList&lt;key_type, data_type, default_comparison_function&gt;::GetIndexFromKey</a>(<span class="keyword">const</span> key_type &amp;key, <span class="keywordtype">bool</span> *objectExists, <span class="keywordtype">int</span> (*cf)(<span class="keyword">const</span> key_type&amp;, <span class="keyword">const</span> data_type&amp;))<span class="keyword"> const</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordtype">int</span> index, upperBound, lowerBound;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keywordtype">int</span> res;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">if</span> (orderedList.Size()==0)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            *objectExists=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        }</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        upperBound=(int)orderedList.Size()-1;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        lowerBound=0;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        index = (int)orderedList.Size()/2;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">for</span>(;;)</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        {</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            res = cf(key,orderedList[index]);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keywordflow">if</span> (res==0)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                *objectExists=<span class="keyword">true</span>;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span>)index;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            }</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (res&lt;0)</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                upperBound=index-1;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="keywordflow">else</span><span class="comment">// if (res&gt;0)</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            {</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                lowerBound=index+1;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            }</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            index=lowerBound+(upperBound-lowerBound)/2;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="keywordflow">if</span> (lowerBound&gt;upperBound)</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            {</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                *objectExists=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span>)lowerBound; <span class="comment">// No match</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            }</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            <span class="keywordflow">if</span> (index &lt; 0 || index &gt;= (<span class="keywordtype">int</span>) orderedList.Size())</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            {</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                <span class="comment">// This should never hit unless the comparison function was inconsistent</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(index &amp;&amp; 0);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                *objectExists=<span class="keyword">false</span>;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            }</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        }</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    }</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> key_type, <span class="keyword">class</span> data_type, <span class="keywordtype">int</span> (*default_comparison_function)(const key_type&amp;, const data_type&amp;)&gt;</div>
<div class="line"><a name="l00176"></a><span class="lineno"><a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#a30d44cd52bdb782478472a95cc5a4b0a">  176</a></span>&#160;    <span class="keywordtype">unsigned</span> <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#a30d44cd52bdb782478472a95cc5a4b0a">OrderedList&lt;key_type, data_type, default_comparison_function&gt;::Insert</a>(<span class="keyword">const</span> key_type &amp;key, <span class="keyword">const</span> data_type &amp;data, <span class="keywordtype">bool</span> assertOnDuplicate, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line, <span class="keywordtype">int</span> (*cf)(<span class="keyword">const</span> key_type&amp;, <span class="keyword">const</span> data_type&amp;))</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    {</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        (void) assertOnDuplicate;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordtype">bool</span> objectExists;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keywordtype">unsigned</span> index;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        index = GetIndexFromKey(key, &amp;objectExists, cf);</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="comment">// Don&#39;t allow duplicate insertion.</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keywordflow">if</span> (objectExists)</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        {</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            <span class="comment">// This is usually a bug!</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(assertOnDuplicate==<span class="keyword">false</span>);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span>)-1;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        }</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keywordflow">if</span> (index&gt;=orderedList.Size())</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        {</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            orderedList.Insert(data, file, line);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="keywordflow">return</span> orderedList.Size()-1;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        }</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            orderedList.Insert(data,index, file, line);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            <span class="keywordflow">return</span> index;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        }       </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    }</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> key_type, <span class="keyword">class</span> data_type, <span class="keywordtype">int</span> (*default_comparison_function)(const key_type&amp;, const data_type&amp;)&gt;</div>
<div class="line"><a name="l00204"></a><span class="lineno"><a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#a668f026293db98ed4e68301077fb585a">  204</a></span>&#160;    <span class="keywordtype">unsigned</span> <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#a668f026293db98ed4e68301077fb585a">OrderedList&lt;key_type, data_type, default_comparison_function&gt;::Remove</a>(<span class="keyword">const</span> key_type &amp;key, <span class="keywordtype">int</span> (*cf)(<span class="keyword">const</span> key_type&amp;, <span class="keyword">const</span> data_type&amp;))</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    {</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keywordtype">bool</span> objectExists;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keywordtype">unsigned</span> index;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        index = GetIndexFromKey(key, &amp;objectExists, cf);</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <span class="comment">// Can&#39;t find the element to remove if this assert hits</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="comment">//  RakAssert(objectExists==true);</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="keywordflow">if</span> (objectExists==<span class="keyword">false</span>)</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        {</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(objectExists==<span class="keyword">true</span>);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        }</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        orderedList.RemoveAtIndex(index);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="keywordflow">return</span> index;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    }</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> key_type, <span class="keyword">class</span> data_type, <span class="keywordtype">int</span> (*default_comparison_function)(const key_type&amp;, const data_type&amp;)&gt;</div>
<div class="line"><a name="l00223"></a><span class="lineno"><a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#a5c05db993081fec4efcd3fd6f3eb34e2">  223</a></span>&#160;    <span class="keywordtype">unsigned</span> <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#a5c05db993081fec4efcd3fd6f3eb34e2">OrderedList&lt;key_type, data_type, default_comparison_function&gt;::RemoveIfExists</a>(<span class="keyword">const</span> key_type &amp;key, <span class="keywordtype">int</span> (*cf)(<span class="keyword">const</span> key_type&amp;, <span class="keyword">const</span> data_type&amp;))</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordtype">bool</span> objectExists;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <span class="keywordtype">unsigned</span> index;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        index = GetIndexFromKey(key, &amp;objectExists, cf);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <span class="comment">// Can&#39;t find the element to remove if this assert hits</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <span class="keywordflow">if</span> (objectExists==<span class="keyword">false</span>)</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        orderedList.RemoveAtIndex(index);</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keywordflow">return</span> index;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    }</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> key_type, <span class="keyword">class</span> data_type, <span class="keywordtype">int</span> (*default_comparison_function)(const key_type&amp;, const data_type&amp;)&gt;</div>
<div class="line"><a name="l00238"></a><span class="lineno"><a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#a65ef0eca14deb8698004b1cd074b6f0a">  238</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#a65ef0eca14deb8698004b1cd074b6f0a">OrderedList&lt;key_type, data_type, default_comparison_function&gt;::RemoveAtIndex</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> index)</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        orderedList.RemoveAtIndex(index);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    }</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> key_type, <span class="keyword">class</span> data_type, <span class="keywordtype">int</span> (*default_comparison_function)(const key_type&amp;, const data_type&amp;)&gt;</div>
<div class="line"><a name="l00244"></a><span class="lineno"><a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#a9ed08b2c35b20d08ebfab17927f5c4a2">  244</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#a9ed08b2c35b20d08ebfab17927f5c4a2">OrderedList&lt;key_type, data_type, default_comparison_function&gt;::InsertAtIndex</a>(<span class="keyword">const</span> data_type &amp;data, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> index, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line)</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    {</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        orderedList.Insert(data, index, file, line);</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> key_type, <span class="keyword">class</span> data_type, <span class="keywordtype">int</span> (*default_comparison_function)(const key_type&amp;, const data_type&amp;)&gt;</div>
<div class="line"><a name="l00250"></a><span class="lineno"><a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#ac4285dfc63d32eeb9126b97b67a8ce3a">  250</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#ac4285dfc63d32eeb9126b97b67a8ce3a">OrderedList&lt;key_type, data_type, default_comparison_function&gt;::InsertAtEnd</a>(<span class="keyword">const</span> data_type &amp;data, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line)</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    {</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        orderedList.Insert(data, file, line);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    }</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> key_type, <span class="keyword">class</span> data_type, <span class="keywordtype">int</span> (*default_comparison_function)(const key_type&amp;, const data_type&amp;)&gt;</div>
<div class="line"><a name="l00256"></a><span class="lineno"><a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#a198f57b525220448d3a1dd2276c01192">  256</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#a198f57b525220448d3a1dd2276c01192">OrderedList&lt;key_type, data_type, default_comparison_function&gt;::RemoveFromEnd</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> num)</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    {</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        orderedList.RemoveFromEnd(num);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    }</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> key_type, <span class="keyword">class</span> data_type, <span class="keywordtype">int</span> (*default_comparison_function)(const key_type&amp;, const data_type&amp;)&gt;</div>
<div class="line"><a name="l00262"></a><span class="lineno"><a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#ac3d85528ada636cae37a5474cb64b69c">  262</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#ac3d85528ada636cae37a5474cb64b69c">OrderedList&lt;key_type, data_type, default_comparison_function&gt;::Clear</a>(<span class="keywordtype">bool</span> doNotDeallocate, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> line)</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    {</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        orderedList.Clear(doNotDeallocate, file, line);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    }</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> key_type, <span class="keyword">class</span> data_type, <span class="keywordtype">int</span> (*default_comparison_function)(const key_type&amp;, const data_type&amp;)&gt;</div>
<div class="line"><a name="l00268"></a><span class="lineno"><a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#a59527cb330c873e4aadcae82acbb067a">  268</a></span>&#160;    data_type&amp; <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#a59527cb330c873e4aadcae82acbb067a">OrderedList&lt;key_type, data_type, default_comparison_function&gt;::operator[]</a>( <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> position )<span class="keyword"> const</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="keywordflow">return</span> orderedList[position];</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    }</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> key_type, <span class="keyword">class</span> data_type, <span class="keywordtype">int</span> (*default_comparison_function)(const key_type&amp;, const data_type&amp;)&gt;</div>
<div class="line"><a name="l00274"></a><span class="lineno"><a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#ad64cf6af46df6a5e68747740ee2c1fec">  274</a></span>&#160;    <span class="keywordtype">unsigned</span> <a class="code" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml#ad64cf6af46df6a5e68747740ee2c1fec">OrderedList&lt;key_type, data_type, default_comparison_function&gt;::Size</a>(<span class="keywordtype">void</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="keywordflow">return</span> orderedList.Size();</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    }</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;}</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="preprocessor">#endif</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_74389ed8173ad57b461b9d623a1f3867.xhtml">Source</a></li><li class="navelem"><a class="el" href="../../dir_bbb90e3ef9167a594ae33323139a2595.xhtml">include</a></li><li class="navelem"><a class="el" href="../../dir_88467e66686deb9d3756fe4fc298e321.xhtml">slikenet</a></li><li class="navelem"><a class="el" href="../../d6/d4d/_d_s___ordered_list_8h.xhtml">DS_OrderedList.h</a></li>
    <li class="footer">Generated on Wed Aug 14 2019 22:09:46 for SLikeNet by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.2 </li>
  </ul>
</div>
</body>
</html>
