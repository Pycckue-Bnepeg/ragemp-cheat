<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>SLikeNet: DataStructures::Multilist&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt; Class Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SLikeNet
   &#160;<span id="projectnumber">0.1.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../modules.xhtml"><span>Modules</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="../../files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="../../classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="../../inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="../../functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('de/d89/class_data_structures_1_1_multilist.xhtml','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-types">Protected Types</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="../../d3/d35/class_data_structures_1_1_multilist-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">DataStructures::Multilist&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>The multilist, representing an abstract data type that generally holds lists.  
 <a href="../../de/d89/class_data_structures_1_1_multilist.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">slikenet/DS_Multilist.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a0ce40b506e75f7331975638e7e37ac90"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a0ce40b506e75f7331975638e7e37ac90">Multilist</a> ()</td></tr>
<tr class="separator:a0ce40b506e75f7331975638e7e37ac90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8fb7b102d59b91fbbe8aa1405401b0de"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a8fb7b102d59b91fbbe8aa1405401b0de">~Multilist</a> ()</td></tr>
<tr class="separator:a8fb7b102d59b91fbbe8aa1405401b0de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a37f6b9891411ea3e14410e8b12cfcb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a8a37f6b9891411ea3e14410e8b12cfcb">Multilist</a> (const <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">Multilist</a> &amp;source)</td></tr>
<tr class="separator:a8a37f6b9891411ea3e14410e8b12cfcb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ebd3513d069580696df82f1ae805789"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">Multilist</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a3ebd3513d069580696df82f1ae805789">operator=</a> (const <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">Multilist</a> &amp;source)</td></tr>
<tr class="separator:a3ebd3513d069580696df82f1ae805789"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11484761bc2c4d578915db64e1945671"><td class="memItemLeft" align="right" valign="top">_DataType &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a11484761bc2c4d578915db64e1945671">operator[]</a> (const _IndexType position) const </td></tr>
<tr class="separator:a11484761bc2c4d578915db64e1945671"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe3f119b9f715a88fc6dd356689f7e72"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#afe3f119b9f715a88fc6dd356689f7e72">Push</a> (const _DataType &amp;d, const char *file=__FILE__, unsigned int line=__LINE__)</td></tr>
<tr class="separator:afe3f119b9f715a88fc6dd356689f7e72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae75f817a5d9980df4c4ad941a7edd6a5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#ae75f817a5d9980df4c4ad941a7edd6a5">Push</a> (const _DataType &amp;d, const _KeyType &amp;key, const char *file=__FILE__, unsigned int line=__LINE__)</td></tr>
<tr class="separator:ae75f817a5d9980df4c4ad941a7edd6a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09e7c33fe9587c1902ed1551d720f7b7"><td class="memItemLeft" align="right" valign="top">_DataType &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a09e7c33fe9587c1902ed1551d720f7b7">Pop</a> (const char *file=__FILE__, unsigned int line=__LINE__)</td></tr>
<tr class="memdesc:a09e7c33fe9587c1902ed1551d720f7b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets or removes and gets an element from the list, according to the same rules as <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#afe3f119b9f715a88fc6dd356689f7e72">Push()</a>. Ordered list is LIFO for the purposes of Pop and Peek.  <a href="#a09e7c33fe9587c1902ed1551d720f7b7"></a><br/></td></tr>
<tr class="separator:a09e7c33fe9587c1902ed1551d720f7b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ac2e4785ce35dc061cd6b1cff5ac721"><td class="memItemLeft" align="right" valign="top">_DataType &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a8ac2e4785ce35dc061cd6b1cff5ac721">Peek</a> (void) const </td></tr>
<tr class="separator:a8ac2e4785ce35dc061cd6b1cff5ac721"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1596f547cb2b038726d2d733930e44be"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a1596f547cb2b038726d2d733930e44be">PushOpposite</a> (const _DataType &amp;d, const char *file=__FILE__, unsigned int line=__LINE__)</td></tr>
<tr class="memdesc:a1596f547cb2b038726d2d733930e44be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#afe3f119b9f715a88fc6dd356689f7e72">Push()</a>, except FIFO and LIFO are reversed. Ordered list still inserts in order.  <a href="#a1596f547cb2b038726d2d733930e44be"></a><br/></td></tr>
<tr class="separator:a1596f547cb2b038726d2d733930e44be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a813d673f3e74d35e078355e2652335ad"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a813d673f3e74d35e078355e2652335ad">PushOpposite</a> (const _DataType &amp;d, const _KeyType &amp;key, const char *file=__FILE__, unsigned int line=__LINE__)</td></tr>
<tr class="separator:a813d673f3e74d35e078355e2652335ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5788e4bea29895d318226b5b943d5954"><td class="memItemLeft" align="right" valign="top">_DataType &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a5788e4bea29895d318226b5b943d5954">PopOpposite</a> (const char *file=__FILE__, unsigned int line=__LINE__)</td></tr>
<tr class="memdesc:a5788e4bea29895d318226b5b943d5954"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a09e7c33fe9587c1902ed1551d720f7b7" title="Gets or removes and gets an element from the list, according to the same rules as Push()...">Pop()</a> and <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a8ac2e4785ce35dc061cd6b1cff5ac721">Peek()</a>, except FIFO and LIFO are reversed.  <a href="#a5788e4bea29895d318226b5b943d5954"></a><br/></td></tr>
<tr class="separator:a5788e4bea29895d318226b5b943d5954"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a014b1c5251d11ee2a51e6fac42fac019"><td class="memItemLeft" align="right" valign="top">_DataType &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a014b1c5251d11ee2a51e6fac42fac019">PeekOpposite</a> (void) const </td></tr>
<tr class="separator:a014b1c5251d11ee2a51e6fac42fac019"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2192553f7ca8b678719cef4643d0d143"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a2192553f7ca8b678719cef4643d0d143">InsertAtIndex</a> (const _DataType &amp;d, _IndexType index, const char *file=__FILE__, unsigned int line=__LINE__)</td></tr>
<tr class="memdesc:a2192553f7ca8b678719cef4643d0d143"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stack,<a class="el" href="../../d3/d87/class_data_structures_1_1_queue.xhtml" title="A queue implemented as an array with a read and write index.">Queue</a>: Inserts at index indicated, elements are shifted. Ordered list: Inserts, position is ignored.  <a href="#a2192553f7ca8b678719cef4643d0d143"></a><br/></td></tr>
<tr class="separator:a2192553f7ca8b678719cef4643d0d143"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33dd81344fc1e3ddada972637cfe27c3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a33dd81344fc1e3ddada972637cfe27c3">RemoveAtIndex</a> (_IndexType position, const char *file=__FILE__, unsigned int line=__LINE__)</td></tr>
<tr class="memdesc:a33dd81344fc1e3ddada972637cfe27c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unordered list, removes at index indicated, swaps last element with that element. Otherwise, array is shifted left to overwrite removed element.  <a href="#a33dd81344fc1e3ddada972637cfe27c3"></a><br/></td></tr>
<tr class="separator:a33dd81344fc1e3ddada972637cfe27c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3c83303215bacfc4510640efc062d39"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#aa3c83303215bacfc4510640efc062d39">RemoveAtKey</a> (_KeyType key, bool assertIfDoesNotExist, const char *file=__FILE__, unsigned int line=__LINE__)</td></tr>
<tr class="memdesc:aa3c83303215bacfc4510640efc062d39"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the index of <em>key</em>, and remove at that index.  <a href="#aa3c83303215bacfc4510640efc062d39"></a><br/></td></tr>
<tr class="separator:aa3c83303215bacfc4510640efc062d39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84be6225dbac07350dee2ff8a8210e17"><td class="memItemLeft" align="right" valign="top">_IndexType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a84be6225dbac07350dee2ff8a8210e17">GetIndexOf</a> (_KeyType key) const </td></tr>
<tr class="memdesc:a84be6225dbac07350dee2ff8a8210e17"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finds the index of <em>key</em>. Return -1 if the key is not found.  <a href="#a84be6225dbac07350dee2ff8a8210e17"></a><br/></td></tr>
<tr class="separator:a84be6225dbac07350dee2ff8a8210e17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0e4d9aacbd1b22979a50dcd91522735"><td class="memItemLeft" align="right" valign="top">_IndexType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#af0e4d9aacbd1b22979a50dcd91522735">GetInsertionIndex</a> (_KeyType key) const </td></tr>
<tr class="memdesc:af0e4d9aacbd1b22979a50dcd91522735"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns where in the list we should insert the item, to preserve list order. Returns -1 if the item is already in the list.  <a href="#af0e4d9aacbd1b22979a50dcd91522735"></a><br/></td></tr>
<tr class="separator:af0e4d9aacbd1b22979a50dcd91522735"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af718a952c67cb8e19e9863f087101340"><td class="memItemLeft" align="right" valign="top">_DataType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#af718a952c67cb8e19e9863f087101340">GetPtr</a> (_KeyType key) const </td></tr>
<tr class="memdesc:af718a952c67cb8e19e9863f087101340"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finds the index of <em>key</em>. Return 0 if the key is not found. Useful if _DataType is always non-zero pointers.  <a href="#af718a952c67cb8e19e9863f087101340"></a><br/></td></tr>
<tr class="separator:af718a952c67cb8e19e9863f087101340"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e49b2800f3cfebdc4fa22e3ded43689"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a4e49b2800f3cfebdc4fa22e3ded43689">ForEach</a> (void(*func)(_DataType &amp;item, const char *file, unsigned int line), const char *file, unsigned int line)</td></tr>
<tr class="memdesc:a4e49b2800f3cfebdc4fa22e3ded43689"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterate over the list, calling the function pointer on each element.  <a href="#a4e49b2800f3cfebdc4fa22e3ded43689"></a><br/></td></tr>
<tr class="separator:a4e49b2800f3cfebdc4fa22e3ded43689"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aecde3bc96898c80714e3b0d12f907610"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#aecde3bc96898c80714e3b0d12f907610">ForEach</a> (void(*func)(_DataType &amp;item))</td></tr>
<tr class="separator:aecde3bc96898c80714e3b0d12f907610"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d58006a5444efa6487d21faa8310bfe"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a8d58006a5444efa6487d21faa8310bfe">IsEmpty</a> (void) const </td></tr>
<tr class="memdesc:a8d58006a5444efa6487d21faa8310bfe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns if the list is empty.  <a href="#a8d58006a5444efa6487d21faa8310bfe"></a><br/></td></tr>
<tr class="separator:a8d58006a5444efa6487d21faa8310bfe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a374ed61cd2124ffd01e0bab732f89e61"><td class="memItemLeft" align="right" valign="top">_IndexType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a374ed61cd2124ffd01e0bab732f89e61">GetSize</a> (void) const </td></tr>
<tr class="memdesc:a374ed61cd2124ffd01e0bab732f89e61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of elements used in the list.  <a href="#a374ed61cd2124ffd01e0bab732f89e61"></a><br/></td></tr>
<tr class="separator:a374ed61cd2124ffd01e0bab732f89e61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a837e5a1793a397c26580de337c4a4207"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a837e5a1793a397c26580de337c4a4207">Clear</a> (bool deallocateSmallBlocks=true, const char *file=__FILE__, unsigned int line=__LINE__)</td></tr>
<tr class="memdesc:a837e5a1793a397c26580de337c4a4207"><td class="mdescLeft">&#160;</td><td class="mdescRight">Empties the list. The list is not deallocated if it is small, unless <em>deallocateSmallBlocks</em> is true.  <a href="#a837e5a1793a397c26580de337c4a4207"></a><br/></td></tr>
<tr class="separator:a837e5a1793a397c26580de337c4a4207"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ea6e9cc49fa6c858114db3540264d7b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a8ea6e9cc49fa6c858114db3540264d7b">ClearPointers</a> (bool deallocateSmallBlocks=true, const char *file=__FILE__, unsigned int line=__LINE__)</td></tr>
<tr class="memdesc:a8ea6e9cc49fa6c858114db3540264d7b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Empties the list, first calling SLNet::OP_Delete on all items.  <a href="#a8ea6e9cc49fa6c858114db3540264d7b"></a><br/></td></tr>
<tr class="separator:a8ea6e9cc49fa6c858114db3540264d7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d96ab0baeb2c566f3f5e0c20be880ed"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a4d96ab0baeb2c566f3f5e0c20be880ed">ClearPointer</a> (_KeyType key, const char *file=__FILE__, unsigned int line=__LINE__)</td></tr>
<tr class="memdesc:a4d96ab0baeb2c566f3f5e0c20be880ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Empty one item from the list, first calling SLNet::OP_Delete on that item.  <a href="#a4d96ab0baeb2c566f3f5e0c20be880ed"></a><br/></td></tr>
<tr class="separator:a4d96ab0baeb2c566f3f5e0c20be880ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b8cc2c4515e66ace8a1efe3d045eaf0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a1b8cc2c4515e66ace8a1efe3d045eaf0">ReverseList</a> (void)</td></tr>
<tr class="memdesc:a1b8cc2c4515e66ace8a1efe3d045eaf0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reverses the elements in the list, and flips the sort order returned by <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a800048ec6f280da5e7a161a22a43b87b" title="Returns true if ascending.">GetSortOrder()</a> if <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#aacbab3fd63f299185141b0c4a62e9ef5" title="Returns true if the list is currently believed to be in a sorted state.">IsSorted()</a> returns true at the time the function is called.  <a href="#a1b8cc2c4515e66ace8a1efe3d045eaf0"></a><br/></td></tr>
<tr class="separator:a1b8cc2c4515e66ace8a1efe3d045eaf0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15148dd58d303f1f6d72ecf5d1663aea"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a15148dd58d303f1f6d72ecf5d1663aea">Reallocate</a> (_IndexType size, const char *file=__FILE__, unsigned int line=__LINE__)</td></tr>
<tr class="memdesc:a15148dd58d303f1f6d72ecf5d1663aea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reallocates the list to a larger size. If <em>size</em> is smaller than the value returned by <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a374ed61cd2124ffd01e0bab732f89e61" title="Returns the number of elements used in the list.">GetSize()</a>, the call does nothing.  <a href="#a15148dd58d303f1f6d72ecf5d1663aea"></a><br/></td></tr>
<tr class="separator:a15148dd58d303f1f6d72ecf5d1663aea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7c98eb3dd4a13343695b810c5f6d2c4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#af7c98eb3dd4a13343695b810c5f6d2c4">Sort</a> (bool force)</td></tr>
<tr class="memdesc:af7c98eb3dd4a13343695b810c5f6d2c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sorts the list unless it is an ordered list, in which it does nothing as the list is assumed to already be sorted.  <a href="#af7c98eb3dd4a13343695b810c5f6d2c4"></a><br/></td></tr>
<tr class="separator:af7c98eb3dd4a13343695b810c5f6d2c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d07bd2615004b6903a6ae8387238fa9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a3d07bd2615004b6903a6ae8387238fa9">TagSorted</a> (void)</td></tr>
<tr class="memdesc:a3d07bd2615004b6903a6ae8387238fa9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the list to be remembered as sorted.  <a href="#a3d07bd2615004b6903a6ae8387238fa9"></a><br/></td></tr>
<tr class="separator:a3d07bd2615004b6903a6ae8387238fa9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a219bfa477ce7722e32462e97c6876634"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a219bfa477ce7722e32462e97c6876634">SetSortOrder</a> (bool ascending)</td></tr>
<tr class="memdesc:a219bfa477ce7722e32462e97c6876634"><td class="mdescLeft">&#160;</td><td class="mdescRight">Defaults to ascending.  <a href="#a219bfa477ce7722e32462e97c6876634"></a><br/></td></tr>
<tr class="separator:a219bfa477ce7722e32462e97c6876634"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a800048ec6f280da5e7a161a22a43b87b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a800048ec6f280da5e7a161a22a43b87b">GetSortOrder</a> (void) const </td></tr>
<tr class="memdesc:a800048ec6f280da5e7a161a22a43b87b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if ascending.  <a href="#a800048ec6f280da5e7a161a22a43b87b"></a><br/></td></tr>
<tr class="separator:a800048ec6f280da5e7a161a22a43b87b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aacbab3fd63f299185141b0c4a62e9ef5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#aacbab3fd63f299185141b0c4a62e9ef5">IsSorted</a> (void) const </td></tr>
<tr class="memdesc:aacbab3fd63f299185141b0c4a62e9ef5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the list is currently believed to be in a sorted state.  <a href="#aacbab3fd63f299185141b0c4a62e9ef5"></a><br/></td></tr>
<tr class="separator:aacbab3fd63f299185141b0c4a62e9ef5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3a1eb26b60fc9742c3d9d842b1807cc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d1/db1/_d_s___multilist_8h.xhtml#a8387ff66ed3a8c8a6c0528ddb5650a5b">MultilistType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#ab3a1eb26b60fc9742c3d9d842b1807cc">GetMultilistType</a> (void) const </td></tr>
<tr class="memdesc:ab3a1eb26b60fc9742c3d9d842b1807cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns what type of list this is.  <a href="#ab3a1eb26b60fc9742c3d9d842b1807cc"></a><br/></td></tr>
<tr class="separator:ab3a1eb26b60fc9742c3d9d842b1807cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a054b07faf5e383569219911f18615a39"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a054b07faf5e383569219911f18615a39">SetMultilistType</a> (<a class="el" href="../../d1/db1/_d_s___multilist_8h.xhtml#a8387ff66ed3a8c8a6c0528ddb5650a5b">MultilistType</a> newType)</td></tr>
<tr class="memdesc:a054b07faf5e383569219911f18615a39"><td class="mdescLeft">&#160;</td><td class="mdescRight">Changes what type of list this is.  <a href="#a054b07faf5e383569219911f18615a39"></a><br/></td></tr>
<tr class="separator:a054b07faf5e383569219911f18615a39"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a5958435ddcd5ac367ab0406fc797c00a"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a5958435ddcd5ac367ab0406fc797c00a">FindIntersection</a> (<a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">Multilist</a> &amp;source1, <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">Multilist</a> &amp;source2, <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">Multilist</a> &amp;intersection, <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">Multilist</a> &amp;uniqueToSource1, <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">Multilist</a> &amp;uniqueToSource2)</td></tr>
<tr class="memdesc:a5958435ddcd5ac367ab0406fc797c00a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the intersection of two lists. Intersection is items common to both lists.  <a href="#a5958435ddcd5ac367ab0406fc797c00a"></a><br/></td></tr>
<tr class="separator:a5958435ddcd5ac367ab0406fc797c00a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-types"></a>
Protected Types</h2></td></tr>
<tr class="memitem:a2c45e4975ecd892c7ecd0ebf368171d4"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a2c45e4975ecd892c7ecd0ebf368171d4a52f835051206229dc733fc26f0d60668">ML_UNSORTED</a>, 
<a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a2c45e4975ecd892c7ecd0ebf368171d4a95441698f2ec1f9e7dab2f3b16097f93">ML_SORTED_ASCENDING</a>, 
<a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a2c45e4975ecd892c7ecd0ebf368171d4a8cd2ef9afc742b0b3f4a64fdb39a1468">ML_SORTED_DESCENDING</a>
 }</td></tr>
<tr class="separator:a2c45e4975ecd892c7ecd0ebf368171d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:ae51593f68d24493bce8497ef146254ec"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#ae51593f68d24493bce8497ef146254ec">ReallocateIfNeeded</a> (const char *file, unsigned int line)</td></tr>
<tr class="separator:ae51593f68d24493bce8497ef146254ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6d422cd5abd6d957aa9f6ca4ef2b96b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#ae6d422cd5abd6d957aa9f6ca4ef2b96b">DeallocateIfNeeded</a> (const char *file, unsigned int line)</td></tr>
<tr class="separator:ae6d422cd5abd6d957aa9f6ca4ef2b96b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad40d1b2609ef5ff466e335b9910b1f74"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#ad40d1b2609ef5ff466e335b9910b1f74">ReallocToSize</a> (_IndexType newAllocationSize, const char *file, unsigned int line)</td></tr>
<tr class="separator:ad40d1b2609ef5ff466e335b9910b1f74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c65d0fb8699c772e27ab7b41d1d7528"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a4c65d0fb8699c772e27ab7b41d1d7528">ReverseListInternal</a> (void)</td></tr>
<tr class="separator:a4c65d0fb8699c772e27ab7b41d1d7528"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19491f8d38d094d0f42d7cbc80d76c2c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a19491f8d38d094d0f42d7cbc80d76c2c">InsertInOrderedList</a> (const _DataType &amp;d, const _KeyType &amp;key)</td></tr>
<tr class="separator:a19491f8d38d094d0f42d7cbc80d76c2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ecfd97a885f59dc8c0c1115ae54503b"><td class="memItemLeft" align="right" valign="top">_IndexType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a8ecfd97a885f59dc8c0c1115ae54503b">GetIndexFromKeyInSortedList</a> (const _KeyType &amp;key, bool *objectExists) const </td></tr>
<tr class="separator:a8ecfd97a885f59dc8c0c1115ae54503b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee663f800392364b9673b4d7d33547f2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#aee663f800392364b9673b4d7d33547f2">InsertShiftArrayRight</a> (const _DataType &amp;d, _IndexType index)</td></tr>
<tr class="separator:aee663f800392364b9673b4d7d33547f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a920a4857ce7b9d4844bd9efd96d27762"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a920a4857ce7b9d4844bd9efd96d27762">DeleteShiftArrayLeft</a> (_IndexType index)</td></tr>
<tr class="separator:a920a4857ce7b9d4844bd9efd96d27762"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a566e3d1a805abb95a633f4d2dadd2a5c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a566e3d1a805abb95a633f4d2dadd2a5c">QSortAscending</a> (_IndexType left, _IndexType right)</td></tr>
<tr class="separator:a566e3d1a805abb95a633f4d2dadd2a5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7589930edbda9c6c34c4fccdab2d5d55"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a7589930edbda9c6c34c4fccdab2d5d55">QSortDescending</a> (_IndexType left, _IndexType right)</td></tr>
<tr class="separator:a7589930edbda9c6c34c4fccdab2d5d55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1dd3b8d06d3f7ddc2e1308c57ef602fe"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a1dd3b8d06d3f7ddc2e1308c57ef602fe">CopySource</a> (const <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">Multilist</a> &amp;source)</td></tr>
<tr class="separator:a1dd3b8d06d3f7ddc2e1308c57ef602fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:acf634946f450bd5884fb3bcae33fd689"><td class="memItemLeft" align="right" valign="top">_DataType *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#acf634946f450bd5884fb3bcae33fd689">data</a></td></tr>
<tr class="memdesc:acf634946f450bd5884fb3bcae33fd689"><td class="mdescLeft">&#160;</td><td class="mdescRight">An array of user values.  <a href="#acf634946f450bd5884fb3bcae33fd689"></a><br/></td></tr>
<tr class="separator:acf634946f450bd5884fb3bcae33fd689"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6561cddc98dd8ab653f56a4203a8ded"><td class="memItemLeft" align="right" valign="top">_IndexType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#ab6561cddc98dd8ab653f56a4203a8ded">dataSize</a></td></tr>
<tr class="memdesc:ab6561cddc98dd8ab653f56a4203a8ded"><td class="mdescLeft">&#160;</td><td class="mdescRight">Number of elements in the list.  <a href="#ab6561cddc98dd8ab653f56a4203a8ded"></a><br/></td></tr>
<tr class="separator:ab6561cddc98dd8ab653f56a4203a8ded"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6040ead73a8eed4667d92e7b66d13db9"><td class="memItemLeft" align="right" valign="top">_IndexType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a6040ead73a8eed4667d92e7b66d13db9">allocationSize</a></td></tr>
<tr class="memdesc:a6040ead73a8eed4667d92e7b66d13db9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Size of <em>array</em>.  <a href="#a6040ead73a8eed4667d92e7b66d13db9"></a><br/></td></tr>
<tr class="separator:a6040ead73a8eed4667d92e7b66d13db9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9278b3e4d57e3dedd3f613c78ead4461"><td class="memItemLeft" align="right" valign="top">_IndexType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a9278b3e4d57e3dedd3f613c78ead4461">queueHead</a></td></tr>
<tr class="memdesc:a9278b3e4d57e3dedd3f613c78ead4461"><td class="mdescLeft">&#160;</td><td class="mdescRight">Array index for the head of the queue.  <a href="#a9278b3e4d57e3dedd3f613c78ead4461"></a><br/></td></tr>
<tr class="separator:a9278b3e4d57e3dedd3f613c78ead4461"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a300a64c3629be9ece749f944c5d05525"><td class="memItemLeft" align="right" valign="top">_IndexType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a300a64c3629be9ece749f944c5d05525">queueTail</a></td></tr>
<tr class="memdesc:a300a64c3629be9ece749f944c5d05525"><td class="mdescLeft">&#160;</td><td class="mdescRight">Array index for the tail of the queue.  <a href="#a300a64c3629be9ece749f944c5d05525"></a><br/></td></tr>
<tr class="separator:a300a64c3629be9ece749f944c5d05525"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa5f425e786988300c1cc1c782173b4c"><td class="memItemLeft" align="right" valign="top">_IndexType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#aaa5f425e786988300c1cc1c782173b4c">preallocationSize</a></td></tr>
<tr class="separator:aaa5f425e786988300c1cc1c782173b4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad28ab4936d56170b875d73ede3b08443"><td class="memItemLeft" align="right" valign="top">enum <br class="typebreak"/>
DataStructures::Multilist:: { ... } &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#ad28ab4936d56170b875d73ede3b08443">sortState</a></td></tr>
<tr class="separator:ad28ab4936d56170b875d73ede3b08443"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adff4e984b62dd496b3c91cf7ca526f9e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#adff4e984b62dd496b3c91cf7ca526f9e">ascendingSort</a></td></tr>
<tr class="separator:adff4e984b62dd496b3c91cf7ca526f9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8407a503dfe3a7ddb87351504e99f91"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d1/db1/_d_s___multilist_8h.xhtml#a8387ff66ed3a8c8a6c0528ddb5650a5b">MultilistType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#ab8407a503dfe3a7ddb87351504e99f91">variableMultilistType</a></td></tr>
<tr class="separator:ab8407a503dfe3a7ddb87351504e99f91"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;const MultilistType _MultilistType, class _DataType, class _KeyType = _DataType, class _IndexType = DefaultIndexType&gt;<br/>
class DataStructures::Multilist&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;</h3>

<p>The multilist, representing an abstract data type that generally holds lists. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">_MultilistType</td><td>What type of list this is, </td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="../../d1/db1/_d_s___multilist_8h.xhtml#a8387ff66ed3a8c8a6c0528ddb5650a5b" title="What algorithm to use to store the data for the Multilist.">MultilistType</a> </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">_DataType</td><td>What type of data this list holds. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">_KeyType</td><td>If a function takes a key to sort on, what type of key this is. The comparison operator between _DataType and _KeyType must be defined </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">_IndexType</td><td>What variable type to use for indices </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00099">99</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a class="anchor" id="a2c45e4975ecd892c7ecd0ebf368171d4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType  = _DataType, class _IndexType  = DefaultIndexType&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="a2c45e4975ecd892c7ecd0ebf368171d4a52f835051206229dc733fc26f0d60668"></a>ML_UNSORTED</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a2c45e4975ecd892c7ecd0ebf368171d4a95441698f2ec1f9e7dab2f3b16097f93"></a>ML_SORTED_ASCENDING</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a2c45e4975ecd892c7ecd0ebf368171d4a8cd2ef9afc742b0b3f4a64fdb39a1468"></a>ML_SORTED_DESCENDING</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00249">249</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a0ce40b506e75f7331975638e7e37ac90"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::<a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">Multilist</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00263">263</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00041">ML_ORDERED_LIST</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00035">ML_UNORDERED_LIST</a>, and <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00043">ML_VARIABLE_DURING_RUNTIME</a>.</p>

</div>
</div>
<a class="anchor" id="a8fb7b102d59b91fbbe8aa1405401b0de"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::~<a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">Multilist</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00287">287</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00047">_FILE_AND_LINE_</a>, and <a class="el" href="../../dd/dc5/memoryoverride_8h_source.xhtml#l00197">SLNet::OP_DELETE_ARRAY()</a>.</p>

</div>
</div>
<a class="anchor" id="a8a37f6b9891411ea3e14410e8b12cfcb"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::<a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">Multilist</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt; &amp;&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00294">294</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a837e5a1793a397c26580de337c4a4207"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::Clear </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>deallocateSmallBlocks</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em> = <code>__FILE__</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>line</em> = <code>__LINE__</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Empties the list. The list is not deallocated if it is small, unless <em>deallocateSmallBlocks</em> is true. </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00784">784</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00041">ML_ORDERED_LIST</a>, and <a class="el" href="../../dd/dc5/memoryoverride_8h_source.xhtml#l00197">SLNet::OP_DELETE_ARRAY()</a>.</p>

<p>Referenced by <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l01102">DataStructures::Multilist&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::FindIntersection()</a>.</p>

</div>
</div>
<a class="anchor" id="a4d96ab0baeb2c566f3f5e0c20be880ed"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::ClearPointer </td>
          <td>(</td>
          <td class="paramtype">_KeyType&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em> = <code>__FILE__</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>line</em> = <code>__LINE__</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Empty one item from the list, first calling SLNet::OP_Delete on that item. </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00815">815</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../dd/dc5/memoryoverride_8h_source.xhtml#l00182">SLNet::OP_DELETE()</a>.</p>

</div>
</div>
<a class="anchor" id="a8ea6e9cc49fa6c858114db3540264d7b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::ClearPointers </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>deallocateSmallBlocks</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em> = <code>__FILE__</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>line</em> = <code>__LINE__</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Empties the list, first calling SLNet::OP_Delete on all items. </p>
<p>The list is not deallocated if it is small, unless <em>deallocateSmallBlocks</em> is true </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00806">806</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../dd/dc5/memoryoverride_8h_source.xhtml#l00182">SLNet::OP_DELETE()</a>.</p>

</div>
</div>
<a class="anchor" id="a1dd3b8d06d3f7ddc2e1308c57ef602fe"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::CopySource </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt; &amp;&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00308">308</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00047">_FILE_AND_LINE_</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00256">DataStructures::Multilist&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::ascendingSort</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00231">DataStructures::Multilist&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::data</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00778">DataStructures::Multilist&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::GetSize()</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00247">DataStructures::Multilist&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::preallocationSize</a>, <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#ad28ab4936d56170b875d73ede3b08443">DataStructures::Multilist&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::sortState</a>, and <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00259">DataStructures::Multilist&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::variableMultilistType</a>.</p>

</div>
</div>
<a class="anchor" id="ae6d422cd5abd6d957aa9f6ca4ef2b96b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::DeallocateIfNeeded </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>line</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l01172">1172</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

</div>
</div>
<a class="anchor" id="a920a4857ce7b9d4844bd9efd96d27762"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::DeleteShiftArrayLeft </td>
          <td>(</td>
          <td class="paramtype">_IndexType&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l01314">1314</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00039">ML_QUEUE</a>, and <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>.</p>

</div>
</div>
<a class="anchor" id="a5958435ddcd5ac367ab0406fc797c00a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::FindIntersection </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt; &amp;&#160;</td>
          <td class="paramname"><em>source1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt; &amp;&#160;</td>
          <td class="paramname"><em>source2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt; &amp;&#160;</td>
          <td class="paramname"><em>intersection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt; &amp;&#160;</td>
          <td class="paramname"><em>uniqueToSource1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt; &amp;&#160;</td>
          <td class="paramname"><em>uniqueToSource2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the intersection of two lists. Intersection is items common to both lists. </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l01102">1102</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00047">_FILE_AND_LINE_</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00784">DataStructures::Multilist&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::Clear()</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00778">DataStructures::Multilist&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::GetSize()</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00349">DataStructures::Multilist&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::Push()</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00970">DataStructures::Multilist&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::SetSortOrder()</a>, and <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00848">DataStructures::Multilist&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::Sort()</a>.</p>

</div>
</div>
<a class="anchor" id="a4e49b2800f3cfebdc4fa22e3ded43689"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::ForEach </td>
          <td>(</td>
          <td class="paramtype">void(*)(_DataType &amp;item, const char *file, unsigned int line)&#160;</td>
          <td class="paramname"><em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>line</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Iterate over the list, calling the function pointer on each element. </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00756">756</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

</div>
</div>
<a class="anchor" id="aecde3bc96898c80714e3b0d12f907610"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::ForEach </td>
          <td>(</td>
          <td class="paramtype">void(*)(_DataType &amp;item)&#160;</td>
          <td class="paramname"><em>func</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00764">764</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

</div>
</div>
<a class="anchor" id="a8ecfd97a885f59dc8c0c1115ae54503b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">_IndexType <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::GetIndexFromKeyInSortedList </td>
          <td>(</td>
          <td class="paramtype">const _KeyType &amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>objectExists</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l01249">1249</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>.</p>

</div>
</div>
<a class="anchor" id="a84be6225dbac07350dee2ff8a8210e17"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">_IndexType <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::GetIndexOf </td>
          <td>(</td>
          <td class="paramtype">_KeyType&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Finds the index of <em>key</em>. Return -1 if the key is not found. </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00679">679</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00039">ML_QUEUE</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00037">ML_STACK</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00035">ML_UNORDERED_LIST</a>, and <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>.</p>

</div>
</div>
<a class="anchor" id="af0e4d9aacbd1b22979a50dcd91522735"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">_IndexType <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::GetInsertionIndex </td>
          <td>(</td>
          <td class="paramtype">_KeyType&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns where in the list we should insert the item, to preserve list order. Returns -1 if the item is already in the list. </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00713">713</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00039">ML_QUEUE</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00037">ML_STACK</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00035">ML_UNORDERED_LIST</a>, and <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>.</p>

</div>
</div>
<a class="anchor" id="ab3a1eb26b60fc9742c3d9d842b1807cc"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d1/db1/_d_s___multilist_8h.xhtml#a8387ff66ed3a8c8a6c0528ddb5650a5b">MultilistType</a> <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::GetMultilistType </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns what type of list this is. </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00995">995</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00043">ML_VARIABLE_DURING_RUNTIME</a>.</p>

</div>
</div>
<a class="anchor" id="af718a952c67cb8e19e9863f087101340"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">_DataType <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::GetPtr </td>
          <td>(</td>
          <td class="paramtype">_KeyType&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Finds the index of <em>key</em>. Return 0 if the key is not found. Useful if _DataType is always non-zero pointers. </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00747">747</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

</div>
</div>
<a class="anchor" id="a374ed61cd2124ffd01e0bab732f89e61"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">_IndexType <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::GetSize </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the number of elements used in the list. </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00778">778</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>Referenced by <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00308">DataStructures::Multilist&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::CopySource()</a>, and <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l01102">DataStructures::Multilist&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::FindIntersection()</a>.</p>

</div>
</div>
<a class="anchor" id="a800048ec6f280da5e7a161a22a43b87b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::GetSortOrder </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if ascending. </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00983">983</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

</div>
</div>
<a class="anchor" id="a2192553f7ca8b678719cef4643d0d143"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::InsertAtIndex </td>
          <td>(</td>
          <td class="paramtype">const _DataType &amp;&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_IndexType&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em> = <code>__FILE__</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>line</em> = <code>__LINE__</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Stack,<a class="el" href="../../d3/d87/class_data_structures_1_1_queue.xhtml" title="A queue implemented as an array with a read and write index.">Queue</a>: Inserts at index indicated, elements are shifted. Ordered list: Inserts, position is ignored. </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00545">545</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00041">ML_ORDERED_LIST</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00037">ML_STACK</a>, and <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00035">ML_UNORDERED_LIST</a>.</p>

</div>
</div>
<a class="anchor" id="a19491f8d38d094d0f42d7cbc80d76c2c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::InsertInOrderedList </td>
          <td>(</td>
          <td class="paramtype">const _DataType &amp;&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const _KeyType &amp;&#160;</td>
          <td class="paramname"><em>key</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l01220">1220</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00041">ML_ORDERED_LIST</a>, and <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>.</p>

</div>
</div>
<a class="anchor" id="aee663f800392364b9673b4d7d33547f2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::InsertShiftArrayRight </td>
          <td>(</td>
          <td class="paramtype">const _DataType &amp;&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_IndexType&#160;</td>
          <td class="paramname"><em>index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l01298">1298</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00039">ML_QUEUE</a>, and <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>.</p>

</div>
</div>
<a class="anchor" id="a8d58006a5444efa6487d21faa8310bfe"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::IsEmpty </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns if the list is empty. </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00772">772</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

</div>
</div>
<a class="anchor" id="aacbab3fd63f299185141b0c4a62e9ef5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::IsSorted </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true if the list is currently believed to be in a sorted state. </p>
<p>Doesn't actually check for sortedness, just if <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#af7c98eb3dd4a13343695b810c5f6d2c4" title="Sorts the list unless it is an ordered list, in which it does nothing as the list is assumed to alrea...">Sort()</a> was recently called, or MultilistType is ML_ORDERED_LIST </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00989">989</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00041">ML_ORDERED_LIST</a>.</p>

</div>
</div>
<a class="anchor" id="a3ebd3513d069580696df82f1ae805789"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt; &amp; <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt; &amp;&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00300">300</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

</div>
</div>
<a class="anchor" id="a11484761bc2c4d578915db64e1945671"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">_DataType &amp; <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">const _IndexType&#160;</td>
          <td class="paramname"><em>position</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00333">333</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00039">ML_QUEUE</a>, and <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>.</p>

</div>
</div>
<a class="anchor" id="a8ac2e4785ce35dc061cd6b1cff5ac721"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">_DataType &amp; <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::Peek </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00425">425</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00041">ML_ORDERED_LIST</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00039">ML_QUEUE</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00037">ML_STACK</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00035">ML_UNORDERED_LIST</a>, and <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>.</p>

</div>
</div>
<a class="anchor" id="a014b1c5251d11ee2a51e6fac42fac019"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">_DataType &amp; <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::PeekOpposite </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00524">524</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00041">ML_ORDERED_LIST</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00039">ML_QUEUE</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00037">ML_STACK</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00035">ML_UNORDERED_LIST</a>, and <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>.</p>

</div>
</div>
<a class="anchor" id="a09e7c33fe9587c1902ed1551d720f7b7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">_DataType &amp; <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::Pop </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em> = <code>__FILE__</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>line</em> = <code>__LINE__</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets or removes and gets an element from the list, according to the same rules as <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#afe3f119b9f715a88fc6dd356689f7e72">Push()</a>. Ordered list is LIFO for the purposes of Pop and Peek. </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00400">400</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00041">ML_ORDERED_LIST</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00039">ML_QUEUE</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00037">ML_STACK</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00035">ML_UNORDERED_LIST</a>, and <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>.</p>

</div>
</div>
<a class="anchor" id="a5788e4bea29895d318226b5b943d5954"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">_DataType &amp; <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::PopOpposite </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em> = <code>__FILE__</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>line</em> = <code>__LINE__</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Same as <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a09e7c33fe9587c1902ed1551d720f7b7" title="Gets or removes and gets an element from the list, according to the same rules as Push()...">Pop()</a> and <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a8ac2e4785ce35dc061cd6b1cff5ac721">Peek()</a>, except FIFO and LIFO are reversed. </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00492">492</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00041">ML_ORDERED_LIST</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00039">ML_QUEUE</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00037">ML_STACK</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00035">ML_UNORDERED_LIST</a>, and <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>.</p>

</div>
</div>
<a class="anchor" id="afe3f119b9f715a88fc6dd356689f7e72"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::Push </td>
          <td>(</td>
          <td class="paramtype">const _DataType &amp;&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em> = <code>__FILE__</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>line</em> = <code>__LINE__</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Unordered list, stack is LIFO QUEUE is FIFO Ordered list is inserted in order </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00349">349</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>Referenced by <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l01102">DataStructures::Multilist&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::FindIntersection()</a>.</p>

</div>
</div>
<a class="anchor" id="ae75f817a5d9980df4c4ad941a7edd6a5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::Push </td>
          <td>(</td>
          <td class="paramtype">const _DataType &amp;&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const _KeyType &amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em> = <code>__FILE__</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>line</em> = <code>__LINE__</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00355">355</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00041">ML_ORDERED_LIST</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00039">ML_QUEUE</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00037">ML_STACK</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00035">ML_UNORDERED_LIST</a>, and <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>.</p>

</div>
</div>
<a class="anchor" id="a1596f547cb2b038726d2d733930e44be"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::PushOpposite </td>
          <td>(</td>
          <td class="paramtype">const _DataType &amp;&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em> = <code>__FILE__</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>line</em> = <code>__LINE__</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Same as <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#afe3f119b9f715a88fc6dd356689f7e72">Push()</a>, except FIFO and LIFO are reversed. Ordered list still inserts in order. </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00440">440</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

</div>
</div>
<a class="anchor" id="a813d673f3e74d35e078355e2652335ad"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::PushOpposite </td>
          <td>(</td>
          <td class="paramtype">const _DataType &amp;&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const _KeyType &amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em> = <code>__FILE__</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>line</em> = <code>__LINE__</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00446">446</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00041">ML_ORDERED_LIST</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00039">ML_QUEUE</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00037">ML_STACK</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00035">ML_UNORDERED_LIST</a>, and <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>.</p>

</div>
</div>
<a class="anchor" id="a566e3d1a805abb95a633f4d2dadd2a5c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::QSortAscending </td>
          <td>(</td>
          <td class="paramtype">_IndexType&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_IndexType&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00874">874</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

</div>
</div>
<a class="anchor" id="a7589930edbda9c6c34c4fccdab2d5d55"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::QSortDescending </td>
          <td>(</td>
          <td class="paramtype">_IndexType&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_IndexType&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00922">922</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

</div>
</div>
<a class="anchor" id="a15148dd58d303f1f6d72ecf5d1663aea"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::Reallocate </td>
          <td>(</td>
          <td class="paramtype">_IndexType&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em> = <code>__FILE__</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>line</em> = <code>__LINE__</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reallocates the list to a larger size. If <em>size</em> is smaller than the value returned by <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a374ed61cd2124ffd01e0bab732f89e61" title="Returns the number of elements used in the list.">GetSize()</a>, the call does nothing. </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00836">836</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

</div>
</div>
<a class="anchor" id="ae51593f68d24493bce8497ef146254ec"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::ReallocateIfNeeded </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>line</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l01150">1150</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

</div>
</div>
<a class="anchor" id="ad40d1b2609ef5ff466e335b9910b1f74"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::ReallocToSize </td>
          <td>(</td>
          <td class="paramtype">_IndexType&#160;</td>
          <td class="paramname"><em>newAllocationSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>line</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l01187">1187</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00039">ML_QUEUE</a>, and <a class="el" href="../../dd/dc5/memoryoverride_8h_source.xhtml#l00197">SLNet::OP_DELETE_ARRAY()</a>.</p>

</div>
</div>
<a class="anchor" id="a33dd81344fc1e3ddada972637cfe27c3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::RemoveAtIndex </td>
          <td>(</td>
          <td class="paramtype">_IndexType&#160;</td>
          <td class="paramname"><em>position</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em> = <code>__FILE__</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>line</em> = <code>__LINE__</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Unordered list, removes at index indicated, swaps last element with that element. Otherwise, array is shifted left to overwrite removed element. </p>
<p>Index[0] returns the same as <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a09e7c33fe9587c1902ed1551d720f7b7" title="Gets or removes and gets an element from the list, according to the same rules as Push()...">Pop()</a> for a queue. Same as <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a5788e4bea29895d318226b5b943d5954" title="Same as Pop() and Peek(), except FIFO and LIFO are reversed.">PopOpposite()</a> for the list and ordered list </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00612">612</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00041">ML_ORDERED_LIST</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00039">ML_QUEUE</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00037">ML_STACK</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00035">ML_UNORDERED_LIST</a>, and <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>.</p>

</div>
</div>
<a class="anchor" id="aa3c83303215bacfc4510640efc062d39"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::RemoveAtKey </td>
          <td>(</td>
          <td class="paramtype">_KeyType&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>assertIfDoesNotExist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file</em> = <code>__FILE__</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>line</em> = <code>__LINE__</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Find the index of <em>key</em>, and remove at that index. </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00666">666</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>.</p>

</div>
</div>
<a class="anchor" id="a1b8cc2c4515e66ace8a1efe3d045eaf0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::ReverseList </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Reverses the elements in the list, and flips the sort order returned by <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#a800048ec6f280da5e7a161a22a43b87b" title="Returns true if ascending.">GetSortOrder()</a> if <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#aacbab3fd63f299185141b0c4a62e9ef5" title="Returns true if the list is currently believed to be in a sorted state.">IsSorted()</a> returns true at the time the function is called. </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00827">827</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

</div>
</div>
<a class="anchor" id="a4c65d0fb8699c772e27ab7b41d1d7528"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::ReverseListInternal </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l01207">1207</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

</div>
</div>
<a class="anchor" id="a054b07faf5e383569219911f18615a39"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::SetMultilistType </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d1/db1/_d_s___multilist_8h.xhtml#a8387ff66ed3a8c8a6c0528ddb5650a5b">MultilistType</a>&#160;</td>
          <td class="paramname"><em>newType</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Changes what type of list this is. </p>
<dl class="section pre"><dt>Precondition</dt><dd>Template must be defined with ML_VARIABLE_DURING_RUNTIME for this to do anything </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">mlType</td><td>Any value of the enum MultilistType, except ML_VARIABLE_DURING_RUNTIME </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l01006">1006</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>References <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00047">_FILE_AND_LINE_</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00041">ML_ORDERED_LIST</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00039">ML_QUEUE</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00037">ML_STACK</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00035">ML_UNORDERED_LIST</a>, <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00043">ML_VARIABLE_DURING_RUNTIME</a>, and <a class="el" href="../../d8/db0/defines_8h_source.xhtml#l00120">RakAssert</a>.</p>

</div>
</div>
<a class="anchor" id="a219bfa477ce7722e32462e97c6876634"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::SetSortOrder </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>ascending</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Defaults to ascending. </p>
<p>Used by <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml#af7c98eb3dd4a13343695b810c5f6d2c4" title="Sorts the list unless it is an ordered list, in which it does nothing as the list is assumed to alrea...">Sort()</a>, and by ML_ORDERED_LIST </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00970">970</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>Referenced by <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l01102">DataStructures::Multilist&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::FindIntersection()</a>.</p>

</div>
</div>
<a class="anchor" id="af7c98eb3dd4a13343695b810c5f6d2c4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::Sort </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>force</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sorts the list unless it is an ordered list, in which it does nothing as the list is assumed to already be sorted. </p>
<p>However, if <em>force</em> is true, it will also resort the ordered list, useful if the comparison operator between _KeyType and _DataType would now return different results Once the list is sorted, further operations to lookup by key will be log2(n) until the list is modified </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00848">848</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>Referenced by <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l01102">DataStructures::Multilist&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::FindIntersection()</a>.</p>

</div>
</div>
<a class="anchor" id="a3d07bd2615004b6903a6ae8387238fa9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType , class _IndexType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::TagSorted </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the list to be remembered as sorted. </p>
<p>Optimization if the source is sorted already </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00865">865</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="a6040ead73a8eed4667d92e7b66d13db9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType  = _DataType, class _IndexType  = DefaultIndexType&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">_IndexType <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::allocationSize</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Size of <em>array</em>. </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00237">237</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

</div>
</div>
<a class="anchor" id="adff4e984b62dd496b3c91cf7ca526f9e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType  = _DataType, class _IndexType  = DefaultIndexType&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::ascendingSort</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00256">256</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>Referenced by <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00308">DataStructures::Multilist&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::CopySource()</a>.</p>

</div>
</div>
<a class="anchor" id="acf634946f450bd5884fb3bcae33fd689"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType  = _DataType, class _IndexType  = DefaultIndexType&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">_DataType* <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::data</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>An array of user values. </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00231">231</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>Referenced by <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00308">DataStructures::Multilist&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::CopySource()</a>.</p>

</div>
</div>
<a class="anchor" id="ab6561cddc98dd8ab653f56a4203a8ded"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType  = _DataType, class _IndexType  = DefaultIndexType&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">_IndexType <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::dataSize</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Number of elements in the list. </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00234">234</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

</div>
</div>
<a class="anchor" id="aaa5f425e786988300c1cc1c782173b4c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType  = _DataType, class _IndexType  = DefaultIndexType&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">_IndexType <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::preallocationSize</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>How many bytes the user chose to preallocate Won't automatically deallocate below this </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00247">247</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>Referenced by <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00308">DataStructures::Multilist&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::CopySource()</a>.</p>

</div>
</div>
<a class="anchor" id="a9278b3e4d57e3dedd3f613c78ead4461"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType  = _DataType, class _IndexType  = DefaultIndexType&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">_IndexType <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::queueHead</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Array index for the head of the queue. </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00240">240</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

</div>
</div>
<a class="anchor" id="a300a64c3629be9ece749f944c5d05525"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType  = _DataType, class _IndexType  = DefaultIndexType&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">_IndexType <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::queueTail</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Array index for the tail of the queue. </p>

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00243">243</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

</div>
</div>
<a class="anchor" id="ad28ab4936d56170b875d73ede3b08443"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum { ... }   <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::sortState</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00308">DataStructures::Multilist&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::CopySource()</a>.</p>

</div>
</div>
<a class="anchor" id="ab8407a503dfe3a7ddb87351504e99f91"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;const MultilistType _MultilistType, class _DataType , class _KeyType  = _DataType, class _IndexType  = DefaultIndexType&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d1/db1/_d_s___multilist_8h.xhtml#a8387ff66ed3a8c8a6c0528ddb5650a5b">MultilistType</a> <a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">DataStructures::Multilist</a>&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::variableMultilistType</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00259">259</a> of file <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a>.</p>

<p>Referenced by <a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml#l00308">DataStructures::Multilist&lt; _MultilistType, _DataType, _KeyType, _IndexType &gt;::CopySource()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>Source/include/slikenet/<a class="el" href="../../d1/db1/_d_s___multilist_8h_source.xhtml">DS_Multilist.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../da/d80/namespace_data_structures.xhtml">DataStructures</a></li><li class="navelem"><a class="el" href="../../de/d89/class_data_structures_1_1_multilist.xhtml">Multilist</a></li>
    <li class="footer">Generated on Wed Aug 14 2019 22:09:49 for SLikeNet by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.2 </li>
  </ul>
</div>
</body>
</html>
