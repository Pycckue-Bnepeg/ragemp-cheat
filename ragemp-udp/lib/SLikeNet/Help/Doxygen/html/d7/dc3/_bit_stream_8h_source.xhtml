<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>SLikeNet: Source/include/slikenet/BitStream.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SLikeNet
   &#160;<span id="projectnumber">0.1.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../modules.xhtml"><span>Modules</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="../../files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="../../globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('d7/dc3/_bit_stream_8h_source.xhtml','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">BitStream.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d7/dc3/_bit_stream_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *  Original work: Copyright (c) 2014, Oculus VR, Inc.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  All rights reserved.</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  This source code is licensed under the BSD-style license found in the</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *  RakNet License.txt file in the licenses directory of this source tree. An additional grant </span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  of patent rights can be found in the RakNet Patents.txt file in the same directory.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *  Modified work: Copyright (c) 2016-2019, SLikeSoft UG (haftungsbeschr√§nkt)</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  This source code was modified by SLikeSoft. Modifications are licensed under the MIT-style</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  license found in the license.txt file in the root directory of this source tree.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#ifndef __BITSTREAM_H</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define __BITSTREAM_H</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../dd/dc5/memoryoverride_8h.xhtml" title="If _USE_RAK_MEMORY_OVERRIDE is defined, memory allocations go through rakMalloc, rakRealloc, and rakFree.">memoryoverride.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d8/db0/defines_8h.xhtml">defines.h</a>&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../db/dbd/_export_8h.xhtml">Export.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d9/d49/types_8h.xhtml" title="Types used by RakNet, most of which involve user code.">types.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../da/d66/string_8h.xhtml">string.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d5/dc1/wstring_8h.xhtml">wstring.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../dc/da7/assert_8h.xhtml">assert.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;float.h&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#ifdef _MSC_VER</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma warning( push )</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">// MSWin uses _copysign, others use copysign...</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#ifndef _WIN32</span></div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="code" href="../../d7/dc3/_bit_stream_8h.xhtml#a64e69a4a3800bf006de7f15006ebde5c">   40</a></span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define _copysign copysign</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">namespace </span>SLNet</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">   47</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../db/dbd/_export_8h.xhtml#ab0579394e418800d5c85e46ad6fcd61d">RAK_DLL_EXPORT</a> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    {</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="comment">// GetInstance() and DestroyInstance(instance*)</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <a class="code" href="../../db/dbd/_export_8h.xhtml#af3e49377f340027d211b2814949efc48">STATIC_FACTORY_DECLARATIONS</a>(<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a>)</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a>();</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a>( <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> initialBytesToAllocate );</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a>( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* _data, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> lengthInBytes, <span class="keywordtype">bool</span> _copyData );</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="comment">// Destructor</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        ~<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a>();</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keywordtype">void</span> Reset( <span class="keywordtype">void</span> );</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="keywordtype">bool</span> Serialize(<span class="keywordtype">bool</span> writeToBitstream, templateType &amp;inOutTemplateVar);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="keywordtype">bool</span> SerializeDelta(<span class="keywordtype">bool</span> writeToBitstream, templateType &amp;inOutCurrentValue, <span class="keyword">const</span> templateType &amp;lastValue);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            <span class="keywordtype">bool</span> SerializeDelta(<span class="keywordtype">bool</span> writeToBitstream, templateType &amp;inOutCurrentValue);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keywordtype">bool</span> SerializeCompressed(<span class="keywordtype">bool</span> writeToBitstream, templateType &amp;inOutTemplateVar);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keywordtype">bool</span> SerializeCompressedDelta(<span class="keywordtype">bool</span> writeToBitstream, templateType &amp;inOutCurrentValue, <span class="keyword">const</span> templateType &amp;lastValue);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keywordtype">bool</span> SerializeCompressedDelta(<span class="keywordtype">bool</span> writeToBitstream, templateType &amp;inOutTemplateVar);</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordtype">bool</span> Serialize(<span class="keywordtype">bool</span> writeToBitstream,  <span class="keywordtype">char</span>* inOutByteArray, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numberOfBytes );</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keywordtype">bool</span> SerializeFloat16(<span class="keywordtype">bool</span> writeToBitstream, <span class="keywordtype">float</span> &amp;inOutFloat, <span class="keywordtype">float</span> floatMin, <span class="keywordtype">float</span> floatMax);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> serializationType, <span class="keyword">class</span> sourceType &gt;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordtype">bool</span> SerializeCasted( <span class="keywordtype">bool</span> writeToBitstream, sourceType &amp;value );</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordtype">bool</span> SerializeBitsFromIntegerRange( <span class="keywordtype">bool</span> writeToBitstream, templateType &amp;value, <span class="keyword">const</span> templateType minimum, <span class="keyword">const</span> templateType maximum, <span class="keywordtype">bool</span> allowOutsideRange=<span class="keyword">false</span> );</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordtype">bool</span> SerializeBitsFromIntegerRange( <span class="keywordtype">bool</span> writeToBitstream, templateType &amp;value, <span class="keyword">const</span> templateType minimum, <span class="keyword">const</span> templateType maximum, <span class="keyword">const</span> <span class="keywordtype">int</span> requiredBits, <span class="keywordtype">bool</span> allowOutsideRange=<span class="keyword">false</span> );</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt; <span class="comment">// templateType for this function must be a float or double</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <span class="keywordtype">bool</span> SerializeNormVector(<span class="keywordtype">bool</span> writeToBitstream,  templateType &amp;x, templateType &amp;y, templateType &amp;z );</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt; <span class="comment">// templateType for this function must be a float or double</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordtype">bool</span> SerializeVector(<span class="keywordtype">bool</span> writeToBitstream,  templateType &amp;x, templateType &amp;y, templateType &amp;z );</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt; <span class="comment">// templateType for this function must be a float or double</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            <span class="keywordtype">bool</span> SerializeNormQuat(<span class="keywordtype">bool</span> writeToBitstream,  templateType &amp;w, templateType &amp;x, templateType &amp;y, templateType &amp;z);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt; <span class="comment">// templateType for this function must be a float or double</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <span class="keywordtype">bool</span> SerializeOrthMatrix(</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            <span class="keywordtype">bool</span> writeToBitstream,</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            templateType &amp;m00, templateType &amp;m01, templateType &amp;m02,</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            templateType &amp;m10, templateType &amp;m11, templateType &amp;m12,</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            templateType &amp;m20, templateType &amp;m21, templateType &amp;m22 );</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="keywordtype">bool</span> SerializeBits(<span class="keywordtype">bool</span> writeToBitstream, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* inOutByteArray, <span class="keyword">const</span> <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> numberOfBitsToSerialize, <span class="keyword">const</span> <span class="keywordtype">bool</span> rightAlignedBits = <span class="keyword">true</span> );</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            <span class="keywordtype">void</span> Write(<span class="keyword">const</span> templateType &amp;inTemplateVar);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            <span class="keywordtype">void</span> WritePtr(templateType *inTemplateVar);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            <span class="keywordtype">void</span> WriteDelta(<span class="keyword">const</span> templateType &amp;currentValue, <span class="keyword">const</span> templateType &amp;lastValue);</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            <span class="keywordtype">void</span> WriteDelta(<span class="keyword">const</span> templateType &amp;currentValue);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            <span class="keywordtype">void</span> WriteCompressed(<span class="keyword">const</span> templateType &amp;inTemplateVar);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            <span class="keywordtype">void</span> WriteCompressedDelta(<span class="keyword">const</span> templateType &amp;currentValue, <span class="keyword">const</span> templateType &amp;lastValue);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;            <span class="keywordtype">void</span> WriteCompressedDelta(<span class="keyword">const</span> templateType &amp;currentValue);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            <span class="keywordtype">bool</span> Read(templateType &amp;outTemplateVar);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        <span class="keywordtype">bool</span> Read(<span class="keywordtype">wchar_t</span> *&amp;varString);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        <span class="keywordtype">bool</span> Read(<span class="keywordtype">wchar_t</span> *&amp;varString, <span class="keywordtype">size_t</span> varStringLength);</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="keywordtype">bool</span> ReadDelta(templateType &amp;outTemplateVar);</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            <span class="keywordtype">bool</span> ReadCompressed(templateType &amp;outTemplateVar);</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="keywordtype">bool</span> ReadCompressed(<span class="keywordtype">wchar_t</span> *&amp;varString);</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <span class="keywordtype">bool</span> ReadCompressed(<span class="keywordtype">wchar_t</span> *&amp;varString, <span class="keywordtype">size_t</span> varStringLength);</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            <span class="keywordtype">bool</span> ReadCompressedDelta(templateType &amp;outTemplateVar);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        <span class="keywordtype">bool</span> Read( <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a> *bitStream, <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> numberOfBits );</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        <span class="keywordtype">bool</span> Read( <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a> *bitStream );</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        <span class="keywordtype">bool</span> Read( <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a> &amp;bitStream, <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> numberOfBits );</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        <span class="keywordtype">bool</span> Read( <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a> &amp;bitStream );</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="keywordtype">void</span> Write( <span class="keyword">const</span> <span class="keywordtype">char</span>* inputByteArray, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numberOfBytes );</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        <span class="keywordtype">void</span> Write( <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a> *bitStream, <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> numberOfBits );</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <span class="keywordtype">void</span> Write( <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a> *bitStream );</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <span class="keywordtype">void</span> Write( <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a> &amp;bitStream, <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> numberOfBits );</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        <span class="keywordtype">void</span> Write( <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a> &amp;bitStream );\</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        </div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        <span class="keywordtype">void</span> WriteFloat16( <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> floatMin, <span class="keywordtype">float</span> floatMax );</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> serializationType, <span class="keyword">class</span> sourceType &gt;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        <span class="keywordtype">void</span> WriteCasted( <span class="keyword">const</span> sourceType &amp;value );</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        <span class="keywordtype">void</span> WriteBitsFromIntegerRange( <span class="keyword">const</span> templateType value, <span class="keyword">const</span> templateType minimum, <span class="keyword">const</span> templateType maximum, <span class="keywordtype">bool</span> allowOutsideRange=<span class="keyword">false</span> );</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        <span class="keywordtype">void</span> WriteBitsFromIntegerRange( <span class="keyword">const</span> templateType value, <span class="keyword">const</span> templateType minimum, <span class="keyword">const</span> templateType maximum, <span class="keyword">const</span> <span class="keywordtype">int</span> requiredBits, <span class="keywordtype">bool</span> allowOutsideRange=<span class="keyword">false</span> );</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt; <span class="comment">// templateType for this function must be a float or double</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        <span class="keywordtype">void</span> WriteNormVector( templateType x, templateType y, templateType z );</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt; <span class="comment">// templateType for this function must be a float or double</span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        <span class="keywordtype">void</span> WriteVector( templateType x, templateType y, templateType z );</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt; <span class="comment">// templateType for this function must be a float or double</span></div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <span class="keywordtype">void</span> WriteNormQuat( templateType w, templateType x, templateType y, templateType z);</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt; <span class="comment">// templateType for this function must be a float or double</span></div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        <span class="keywordtype">void</span> WriteOrthMatrix(</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;            templateType m00, templateType m01, templateType m02,</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;            templateType m10, templateType m11, templateType m12,</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;            templateType m20, templateType m21, templateType m22 );</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        <span class="keywordtype">bool</span> Read( <span class="keywordtype">char</span>* output, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numberOfBytes );</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        <span class="keywordtype">bool</span> ReadFloat16( <span class="keywordtype">float</span> &amp;outFloat, <span class="keywordtype">float</span> floatMin, <span class="keywordtype">float</span> floatMax );</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> serializationType, <span class="keyword">class</span> sourceType &gt;</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        <span class="keywordtype">bool</span> ReadCasted( sourceType &amp;value );</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        <span class="keywordtype">bool</span> ReadBitsFromIntegerRange( templateType &amp;value, <span class="keyword">const</span> templateType minimum, <span class="keyword">const</span> templateType maximum, <span class="keywordtype">bool</span> allowOutsideRange=<span class="keyword">false</span> );</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        <span class="keywordtype">bool</span> ReadBitsFromIntegerRange( templateType &amp;value, <span class="keyword">const</span> templateType minimum, <span class="keyword">const</span> templateType maximum, <span class="keyword">const</span> <span class="keywordtype">int</span> requiredBits, <span class="keywordtype">bool</span> allowOutsideRange=<span class="keyword">false</span> );</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt; <span class="comment">// templateType for this function must be a float or double</span></div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <span class="keywordtype">bool</span> ReadNormVector( templateType &amp;x, templateType &amp;y, templateType &amp;z );</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt; <span class="comment">// templateType for this function must be a float or double</span></div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        <span class="keywordtype">bool</span> ReadVector( templateType &amp;x, templateType &amp;y, templateType &amp;z );</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt; <span class="comment">// templateType for this function must be a float or double</span></div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        <span class="keywordtype">bool</span> ReadNormQuat( templateType &amp;w, templateType &amp;x, templateType &amp;y, templateType &amp;z);</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt; <span class="comment">// templateType for this function must be a float or double</span></div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        <span class="keywordtype">bool</span> ReadOrthMatrix(</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;            templateType &amp;m00, templateType &amp;m01, templateType &amp;m02,</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            templateType &amp;m10, templateType &amp;m11, templateType &amp;m12,</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;            templateType &amp;m20, templateType &amp;m21, templateType &amp;m22 );</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;        <span class="keywordtype">void</span> ResetReadPointer( <span class="keywordtype">void</span> );</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        <span class="keywordtype">void</span> ResetWritePointer( <span class="keywordtype">void</span> );</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        <span class="keywordtype">void</span> AssertStreamEmpty( <span class="keywordtype">void</span> );</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        <span class="keywordtype">void</span> PrintBits( <span class="keywordtype">char</span> *out ) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        <span class="keywordtype">void</span> PrintBits( <span class="keywordtype">char</span> *out, <span class="keywordtype">size_t</span> outLength ) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        <span class="keywordtype">void</span> PrintBits( <span class="keywordtype">void</span> ) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        <span class="keywordtype">void</span> PrintHex( <span class="keywordtype">char</span> *out) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        <span class="keywordtype">void</span> PrintHex( <span class="keywordtype">char</span> *out, <span class="keywordtype">size_t</span> outLength ) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        <span class="keywordtype">void</span> PrintHex( <span class="keywordtype">void</span> ) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        <span class="keywordtype">void</span> IgnoreBits( <span class="keyword">const</span> <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> numberOfBits );</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        <span class="keywordtype">void</span> IgnoreBytes( <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numberOfBytes );</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        <span class="keywordtype">void</span> SetWriteOffset( <span class="keyword">const</span> <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> offset );</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;</div>
<div class="line"><a name="l00521"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a0efe4cd010ac7ccc0a7aa8868e0c54c8">  521</a></span>&#160;        <span class="keyword">inline</span> <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a0efe4cd010ac7ccc0a7aa8868e0c54c8" title="Returns the length in bits of the stream.">GetNumberOfBitsUsed</a>( <span class="keywordtype">void</span> )<span class="keyword"> const </span>{<span class="keywordflow">return</span> GetWriteOffset();}</div>
<div class="line"><a name="l00522"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8e2fb36a0d43673e19ea6386e0637f86">  522</a></span>&#160;        <span class="keyword">inline</span> <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8e2fb36a0d43673e19ea6386e0637f86">GetWriteOffset</a>( <span class="keywordtype">void</span> )<span class="keyword"> const </span>{<span class="keywordflow">return</span> numberOfBitsUsed;}</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div>
<div class="line"><a name="l00525"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a48740002683b46b00cbb97b8f7d0710e">  525</a></span>&#160;        <span class="keyword">inline</span> <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a48740002683b46b00cbb97b8f7d0710e" title="Returns the length in bytes of the stream.">GetNumberOfBytesUsed</a>( <span class="keywordtype">void</span> )<span class="keyword"> const </span>{<span class="keywordflow">return</span> <a class="code" href="../../d9/d49/types_8h.xhtml#ac5eb6b4755b74c50cb76155d08b6e2ff" title="Given a number of bits, return how many bytes are needed to represent that.">BITS_TO_BYTES</a>( numberOfBitsUsed );}</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div>
<div class="line"><a name="l00528"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a1bbe42adf8f779256b04d5becdafe342">  528</a></span>&#160;        <span class="keyword">inline</span> <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a1bbe42adf8f779256b04d5becdafe342" title="Returns the number of bits into the stream that we have read.">GetReadOffset</a>( <span class="keywordtype">void</span> )<span class="keyword"> const </span>{<span class="keywordflow">return</span> readOffset;}</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div>
<div class="line"><a name="l00531"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8715199c63a057205ef5bd27f6b068d4">  531</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8715199c63a057205ef5bd27f6b068d4" title="Sets the read bit index.">SetReadOffset</a>( <span class="keyword">const</span> <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> newReadOffset ) {readOffset=newReadOffset;}</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div>
<div class="line"><a name="l00534"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a89838c39f170290405c95d78b0553e51">  534</a></span>&#160;        <span class="keyword">inline</span> <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a89838c39f170290405c95d78b0553e51" title="Returns the number of bits left in the stream that haven&#39;t been read.">GetNumberOfUnreadBits</a>( <span class="keywordtype">void</span> )<span class="keyword"> const </span>{ <span class="keywordflow">return</span> readOffset &gt; numberOfBitsUsed ? 0 : numberOfBitsUsed - readOffset; }</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> CopyData( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>** _data ) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        <span class="keywordtype">void</span> SetData( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *inByteArray );</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div>
<div class="line"><a name="l00549"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a7b4099386f6f116f0978b00ead160a0d">  549</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a7b4099386f6f116f0978b00ead160a0d">GetData</a>( <span class="keywordtype">void</span> )<span class="keyword"> const </span>{<span class="keywordflow">return</span> data;}</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        <span class="keywordtype">void</span> WriteBits( <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* inByteArray, <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> numberOfBitsToWrite, <span class="keyword">const</span> <span class="keywordtype">bool</span> rightAlignedBits = <span class="keyword">true</span> );</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        <span class="keywordtype">void</span> WriteAlignedBytes( <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *inByteArray, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numberOfBytesToWrite );</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;        <span class="comment">// Endian swap bytes already in the bitstream</span></div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        <span class="keywordtype">void</span> EndianSwapBytes( <span class="keywordtype">int</span> byteOffset, <span class="keywordtype">int</span> length );</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;        <span class="keywordtype">void</span> WriteAlignedBytesSafe( <span class="keyword">const</span> <span class="keywordtype">char</span> *inByteArray, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputLength, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> maxBytesToWrite );</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        <span class="keywordtype">bool</span> ReadAlignedBytes( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *inOutByteArray, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numberOfBytesToRead );</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        <span class="keywordtype">bool</span> ReadAlignedBytesSafe( <span class="keywordtype">char</span> *inOutByteArray, <span class="keywordtype">int</span> &amp;inputLength, <span class="keyword">const</span> <span class="keywordtype">int</span> maxBytesToRead );</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;        <span class="keywordtype">bool</span> ReadAlignedBytesSafe( <span class="keywordtype">char</span> *inOutByteArray, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;inputLength, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> maxBytesToRead );</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        <span class="keywordtype">bool</span> ReadAlignedBytesSafeAlloc( <span class="keywordtype">char</span> **outByteArray, <span class="keywordtype">int</span> &amp;inputLength, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> maxBytesToRead );</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;        <span class="keywordtype">bool</span> ReadAlignedBytesSafeAlloc( <span class="keywordtype">char</span> **outByteArray, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;inputLength, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> maxBytesToRead );</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;</div>
<div class="line"><a name="l00607"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a1083ab999b52c839709eab5cff65a68d">  607</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a1083ab999b52c839709eab5cff65a68d" title="Align the next write and/or read to a byte boundary.">AlignWriteToByteBoundary</a>( <span class="keywordtype">void</span> ) {numberOfBitsUsed += 8 - ( (( numberOfBitsUsed - 1 ) &amp; 7) + 1 );}</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;</div>
<div class="line"><a name="l00614"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#af64b3663a865840e013f5aef490d891e">  614</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#af64b3663a865840e013f5aef490d891e" title="Align the next write and/or read to a byte boundary.">AlignReadToByteBoundary</a>( <span class="keywordtype">void</span> ) {readOffset += 8 - ( (( readOffset - 1 ) &amp; 7 ) + 1 );}</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        <span class="keywordtype">bool</span> ReadBits( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *inOutByteArray, <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> numberOfBitsToRead, <span class="keyword">const</span> <span class="keywordtype">bool</span> alignBitsToRight = <span class="keyword">true</span> );</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;        <span class="keywordtype">void</span> Write0( <span class="keywordtype">void</span> );</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;        <span class="keywordtype">void</span> Write1( <span class="keywordtype">void</span> );</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;        <span class="keywordtype">bool</span> ReadBit( <span class="keywordtype">void</span> );</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;        <span class="keywordtype">void</span> AssertCopyData( <span class="keywordtype">void</span> );</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;        <span class="keywordtype">void</span> SetNumberOfBitsAllocated( <span class="keyword">const</span> <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> lengthInBits );</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;        <span class="keywordtype">void</span> AddBitsAndReallocate( <span class="keyword">const</span> <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> numberOfBitsToWrite );</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;        <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> GetNumberOfBitsAllocated(<span class="keywordtype">void</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;        <span class="keywordtype">bool</span> Read(<span class="keywordtype">char</span> *varString);</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        <span class="keywordtype">bool</span> Read(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *varString);</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;        <span class="keywordtype">void</span> PadWithZeroToByteLength( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> bytes );</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">int</span> NumberOfLeadingZeroes( <a class="code" href="../../df/df2/_native_types_8h.xhtml#aba7bc1797add20fe3efdf37ced1182c5">uint8_t</a> x );</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">int</span> NumberOfLeadingZeroes( <a class="code" href="../../df/df2/_native_types_8h.xhtml#a273cf69d639a59973b6019625df33e30">uint16_t</a> x );</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">int</span> NumberOfLeadingZeroes( <a class="code" href="../../df/df2/_native_types_8h.xhtml#a6eb1e68cc391dd753bc8ce896dbb8315">uint32_t</a> x );</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">int</span> NumberOfLeadingZeroes( <a class="code" href="../../df/df2/_native_types_8h.xhtml#ad27ed092432b64ff558d2254c278720f">uint64_t</a> x );</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">int</span> NumberOfLeadingZeroes( <a class="code" href="../../df/df2/_native_types_8h.xhtml#aef44329758059c91c76d334e8fc09700">int8_t</a> x );</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">int</span> NumberOfLeadingZeroes( <a class="code" href="../../df/df2/_native_types_8h.xhtml#a269259c924dce846340ddbb810db2e3c">int16_t</a> x );</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">int</span> NumberOfLeadingZeroes( <a class="code" href="../../df/df2/_native_types_8h.xhtml#a37994e3b11c72957c6f454c6ec96d43d">int32_t</a> x );</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">int</span> NumberOfLeadingZeroes( <a class="code" href="../../df/df2/_native_types_8h.xhtml#adec1df1b8b51cb32b77e5b86fff46471">int64_t</a> x );</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;        <span class="keywordtype">void</span> WriteAlignedVar8(<span class="keyword">const</span> <span class="keywordtype">char</span> *inByteArray);</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;        <span class="keywordtype">bool</span> ReadAlignedVar8(<span class="keywordtype">char</span> *inOutByteArray);</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;        <span class="keywordtype">void</span> WriteAlignedVar16(<span class="keyword">const</span> <span class="keywordtype">char</span> *inByteArray);</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;        <span class="keywordtype">bool</span> ReadAlignedVar16(<span class="keywordtype">char</span> *inOutByteArray);</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        <span class="keywordtype">void</span> WriteAlignedVar32(<span class="keyword">const</span> <span class="keywordtype">char</span> *inByteArray);</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;        <span class="keywordtype">bool</span> ReadAlignedVar32(<span class="keywordtype">char</span> *inOutByteArray);</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;</div>
<div class="line"><a name="l00682"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#afc34a30fbd308effc85c522ba0676315">  682</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> Write(<span class="keyword">const</span> <span class="keywordtype">char</span> * <span class="keyword">const</span> inStringVar)</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        {</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;            <a class="code" href="../../d2/d66/class_s_l_net_1_1_rak_string.xhtml#a2226e6d66ad858f63e44e628575a8eaa">RakString::Serialize</a>(inStringVar, <span class="keyword">this</span>);</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;        }</div>
<div class="line"><a name="l00686"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a4e66f045792b0783e5a20aa0ebc4eede">  686</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> Write(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span> * <span class="keyword">const</span> inStringVar)</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;        {</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;            <a class="code" href="../../d8/d91/class_s_l_net_1_1_rak_w_string.xhtml#a8ddb3a0e537ec5c67a39f2e8d1984efc">RakWString::Serialize</a>(inStringVar, <span class="keyword">this</span>);</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;        }</div>
<div class="line"><a name="l00690"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a5f33cf08fe7aeef45ab26fdd69b2cca5">  690</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> Write(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> * <span class="keyword">const</span> inTemplateVar)</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;        {</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;            Write((<span class="keyword">const</span> <span class="keywordtype">char</span>*)inTemplateVar);</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        }</div>
<div class="line"><a name="l00694"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a35e3542e5071900e9a9e15566bf103c1">  694</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> Write(<span class="keywordtype">char</span> * <span class="keyword">const</span> inTemplateVar)</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;        {</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;            Write((<span class="keyword">const</span> <span class="keywordtype">char</span>*)inTemplateVar);</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;        }</div>
<div class="line"><a name="l00698"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#aa77a60e83d3b6d4d380d0120916ff018">  698</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> Write(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> * <span class="keyword">const</span> inTemplateVar)</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;        {</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;            Write((<span class="keyword">const</span> <span class="keywordtype">char</span>*)inTemplateVar);</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;        }</div>
<div class="line"><a name="l00702"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#aad7b05bdb2fb348e2c3729c2e27765bb">  702</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> WriteCompressed(<span class="keyword">const</span> <span class="keywordtype">char</span> * <span class="keyword">const</span> inStringVar)</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;        {</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;            <a class="code" href="../../d2/d66/class_s_l_net_1_1_rak_string.xhtml#a5c0cb659b6a3671aa8938833160464b9">RakString::SerializeCompressed</a>(inStringVar,<span class="keyword">this</span>,0,<span class="keyword">false</span>);</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;        }</div>
<div class="line"><a name="l00706"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a3b9087c0bedeb27099c150c7a026207d">  706</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> WriteCompressed(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span> * <span class="keyword">const</span> inStringVar)</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;        {</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;            <a class="code" href="../../d8/d91/class_s_l_net_1_1_rak_w_string.xhtml#a8ddb3a0e537ec5c67a39f2e8d1984efc">RakWString::Serialize</a>(inStringVar,<span class="keyword">this</span>);</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;        }</div>
<div class="line"><a name="l00710"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a3d5efc21092d3b5f6a523585d507e39c">  710</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> WriteCompressed(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> * <span class="keyword">const</span> inTemplateVar)</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;        {</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;            WriteCompressed((<span class="keyword">const</span> <span class="keywordtype">char</span>*) inTemplateVar);</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;        }</div>
<div class="line"><a name="l00714"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ad7383df8e2a706bff7582a344ed80df6">  714</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> WriteCompressed(<span class="keywordtype">char</span> * <span class="keyword">const</span> inTemplateVar)</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;        {</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;            WriteCompressed((<span class="keyword">const</span> <span class="keywordtype">char</span>*) inTemplateVar);</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;        }</div>
<div class="line"><a name="l00718"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a6aaa710551c5f1fd34999eacf1d8192d">  718</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> WriteCompressed(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> * <span class="keyword">const</span> inTemplateVar)</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;        {</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;            WriteCompressed((<span class="keyword">const</span> <span class="keywordtype">char</span>*) inTemplateVar);</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;        }</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;</div>
<div class="line"><a name="l00724"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#adc5a85144836608947830e902cca005f">  724</a></span>&#160;        <span class="keyword">inline</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#adc5a85144836608947830e902cca005f" title="-‚Äî Member function template specialization declarations -‚Äî">DoEndianSwap</a>(<span class="keywordtype">void</span>) {</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;<span class="preprocessor">#ifndef __BITSTREAM_NATIVE_END</span></div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;<span class="preprocessor"></span>            <span class="keywordflow">return</span> IsNetworkOrder()==<span class="keyword">false</span>;</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;<span class="preprocessor"></span>            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;<span class="preprocessor"></span>        }</div>
<div class="line"><a name="l00731"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#af85ce50757f06bfbd6fc4a88dd24cdae">  731</a></span>&#160;        <span class="keyword">inline</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> IsBigEndian(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;        {</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;            <span class="keywordflow">return</span> IsNetworkOrder();</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;        }</div>
<div class="line"><a name="l00735"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ae15a547910af2c67bf6398ae1995cfb6">  735</a></span>&#160;        <span class="keyword">inline</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ae15a547910af2c67bf6398ae1995cfb6">IsNetworkOrder</a>(<span class="keywordtype">void</span>) {<span class="keywordtype">bool</span> r = IsNetworkOrderInternal(); <span class="keywordflow">return</span> r;}</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;        <span class="comment">// Not inline, won&#39;t compile on PC due to winsock include errors</span></div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">bool</span> IsNetworkOrderInternal(<span class="keywordtype">void</span>);</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">void</span> ReverseBytes(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *inByteArray, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *inOutByteArray, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> length);</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">void</span> ReverseBytesInPlace(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *inOutData,<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> length);</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a>( <span class="keyword">const</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a> &amp;invalid) {</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;            (void) invalid;</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;            <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(0);</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;        }</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;        BitStream&amp; operator = ( <span class="keyword">const</span> BitStream&amp; invalid ) {</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;            (void) invalid;</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;            <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(0);</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;            <span class="keyword">static</span> BitStream i;</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;            <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;        }</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;        <span class="keywordtype">void</span> WriteCompressed( <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* inByteArray, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size, <span class="keyword">const</span> <span class="keywordtype">bool</span> unsignedData );</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;        <span class="keywordtype">bool</span> ReadCompressed( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* inOutByteArray, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size, <span class="keyword">const</span> <span class="keywordtype">bool</span> unsignedData );</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;        <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> numberOfBitsUsed;</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;        <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> numberOfBitsAllocated;</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;        <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> readOffset;</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *data;</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;        <span class="keywordtype">bool</span> copyData;</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> stackData[<a class="code" href="../../d8/db0/defines_8h.xhtml#a5f7107c4f34b970ba209b48abfd7ae70">BITSTREAM_STACK_ALLOCATION_SIZE</a>];</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    };</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00778"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#aa6910541ec501aa4fdc0124448475a54">  778</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#aa6910541ec501aa4fdc0124448475a54" title="Bidirectional serialize/deserialize any integral type to/from a bitstream.">BitStream::Serialize</a>(<span class="keywordtype">bool</span> writeToBitstream, templateType &amp;inOutTemplateVar)</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;        {</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;            <span class="keywordflow">if</span> (writeToBitstream)</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(inOutTemplateVar);</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(inOutTemplateVar);</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;        }</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00788"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a23445a55c57cb0b56c0e5edeaf6bbfb5">  788</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a23445a55c57cb0b56c0e5edeaf6bbfb5" title="Bidirectional serialize/deserialize any integral type to/from a bitstream.">BitStream::SerializeDelta</a>(<span class="keywordtype">bool</span> writeToBitstream, templateType &amp;inOutCurrentValue, <span class="keyword">const</span> templateType &amp;lastValue)</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        {</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;            <span class="keywordflow">if</span> (writeToBitstream)</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a11078d27535f5cf4c1822bca0672d2fe" title="Write any integral type to a bitstream.">WriteDelta</a>(inOutCurrentValue, lastValue);</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a92289c0daf93d018afcdfd3b3dc6d237" title="Read any integral type from a bitstream.">ReadDelta</a>(inOutCurrentValue);</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;        }</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00798"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#adc841e477fd8e65f7e84aaf7d6d8bdee">  798</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a23445a55c57cb0b56c0e5edeaf6bbfb5" title="Bidirectional serialize/deserialize any integral type to/from a bitstream.">BitStream::SerializeDelta</a>(<span class="keywordtype">bool</span> writeToBitstream, templateType &amp;inOutCurrentValue)</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;        {</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;            <span class="keywordflow">if</span> (writeToBitstream)</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a11078d27535f5cf4c1822bca0672d2fe" title="Write any integral type to a bitstream.">WriteDelta</a>(inOutCurrentValue);</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a92289c0daf93d018afcdfd3b3dc6d237" title="Read any integral type from a bitstream.">ReadDelta</a>(inOutCurrentValue);</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;        }</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00808"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8ea9768600e8abaa0722c9d491997bc3">  808</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8ea9768600e8abaa0722c9d491997bc3" title="Bidirectional serialize/deserialize any integral type to/from a bitstream.">BitStream::SerializeCompressed</a>(<span class="keywordtype">bool</span> writeToBitstream, templateType &amp;inOutTemplateVar)</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;        {</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;            <span class="keywordflow">if</span> (writeToBitstream)</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">WriteCompressed</a>(inOutTemplateVar);</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ac7fcbda7a05b5c7bd7018205cb1bb7b0" title="Read any integral type from a bitstream.">ReadCompressed</a>(inOutTemplateVar);</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;        }</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00818"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a600b752633117fbf715bd199d8118942">  818</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a600b752633117fbf715bd199d8118942" title="Bidirectional serialize/deserialize any integral type to/from a bitstream.">BitStream::SerializeCompressedDelta</a>(<span class="keywordtype">bool</span> writeToBitstream, templateType &amp;inOutCurrentValue, <span class="keyword">const</span> templateType &amp;lastValue)</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;        {</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;            <span class="keywordflow">if</span> (writeToBitstream)</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a42a0d2b1bcdb13f19996f73d5aecf73e" title="Write any integral type to a bitstream.">WriteCompressedDelta</a>(inOutCurrentValue,lastValue);</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a644710042a38cf4ff181a2abd8a05457" title="Read any integral type from a bitstream.">ReadCompressedDelta</a>(inOutCurrentValue);</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;        }</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;<span class="comment">//Stoppedhere</span></div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00828"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a00f168a0df019be64315646615059a5a">  828</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a600b752633117fbf715bd199d8118942" title="Bidirectional serialize/deserialize any integral type to/from a bitstream.">BitStream::SerializeCompressedDelta</a>(<span class="keywordtype">bool</span> writeToBitstream, templateType &amp;inOutCurrentValue)</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;        {</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;            <span class="keywordflow">if</span> (writeToBitstream)</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a42a0d2b1bcdb13f19996f73d5aecf73e" title="Write any integral type to a bitstream.">WriteCompressedDelta</a>(inOutCurrentValue);</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a644710042a38cf4ff181a2abd8a05457" title="Read any integral type from a bitstream.">ReadCompressedDelta</a>(inOutCurrentValue);</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;        }</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;</div>
<div class="line"><a name="l00837"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#adb8b59b685fab9d164cf9f79d1926c35">  837</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#aa6910541ec501aa4fdc0124448475a54" title="Bidirectional serialize/deserialize any integral type to/from a bitstream.">BitStream::Serialize</a>(<span class="keywordtype">bool</span> writeToBitstream, <span class="keywordtype">char</span>* inOutByteArray, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numberOfBytes )</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;        {</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;            <span class="keywordflow">if</span> (writeToBitstream)</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(inOutByteArray, numberOfBytes);</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(inOutByteArray, numberOfBytes);</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;        }</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;        </div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> serializationType, <span class="keyword">class</span> sourceType &gt;</div>
<div class="line"><a name="l00847"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a38ca97cb05be40fb1826ad9701e9fdf5">  847</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a38ca97cb05be40fb1826ad9701e9fdf5">BitStream::SerializeCasted</a>( <span class="keywordtype">bool</span> writeToBitstream, sourceType &amp;value )</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;        {</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;            <span class="keywordflow">if</span> (writeToBitstream) WriteCasted&lt;serializationType&gt;(value);</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">return</span> ReadCasted&lt;serializationType&gt;(value);</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;        }</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00855"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a09cbff385577e6e05df5b61d49bad446">  855</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a09cbff385577e6e05df5b61d49bad446">BitStream::SerializeBitsFromIntegerRange</a>( <span class="keywordtype">bool</span> writeToBitstream, templateType &amp;value, <span class="keyword">const</span> templateType minimum, <span class="keyword">const</span> templateType maximum, <span class="keywordtype">bool</span> allowOutsideRange )</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;        {</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;            <span class="keywordtype">int</span> requiredBits=<a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(<span class="keyword">sizeof</span>(templateType))-<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a3aefd36be73485fe931841734bc113c4">NumberOfLeadingZeroes</a>(templateType(maximum-minimum));</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a09cbff385577e6e05df5b61d49bad446">SerializeBitsFromIntegerRange</a>(writeToBitstream,value,minimum,maximum,requiredBits,allowOutsideRange);</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;        }</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00861"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a409805d8c9cfee90827ef6e2f2aa5322">  861</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a09cbff385577e6e05df5b61d49bad446">BitStream::SerializeBitsFromIntegerRange</a>( <span class="keywordtype">bool</span> writeToBitstream, templateType &amp;value, <span class="keyword">const</span> templateType minimum, <span class="keyword">const</span> templateType maximum, <span class="keyword">const</span> <span class="keywordtype">int</span> requiredBits, <span class="keywordtype">bool</span> allowOutsideRange )</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;        {</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;            <span class="keywordflow">if</span> (writeToBitstream) <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a090f1303f8ec22dd12ce75038dc2d81f">WriteBitsFromIntegerRange</a>(value,minimum,maximum,requiredBits,allowOutsideRange);</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#abad130ab2cb67adadf2001496501a2aa">ReadBitsFromIntegerRange</a>(value,minimum,maximum,requiredBits,allowOutsideRange);</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;        }</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00869"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#aa136a9299131b1eca1945ae3865b280f">  869</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#aa136a9299131b1eca1945ae3865b280f" title="Bidirectional serialize/deserialize a normalized 3D vector, using (at most) 4 bytes + 3 bits instead ...">BitStream::SerializeNormVector</a>(<span class="keywordtype">bool</span> writeToBitstream, templateType &amp;x, templateType &amp;y, templateType &amp;z )</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;        {</div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;            <span class="keywordflow">if</span> (writeToBitstream)</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a03e238407281a89dc845bcc185f19e34" title="Write a normalized 3D vector, using (at most) 4 bytes + 3 bits instead of 12-24 bytes.">WriteNormVector</a>(x,y,z);</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ac88d7df22922c0702bdc5c9e2e5086c5" title="Read a normalized 3D vector, using (at most) 4 bytes + 3 bits instead of 12-24 bytes.">ReadNormVector</a>(x,y,z);</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;        }</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00879"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a20e66c7208e56a307472ca0b58ded78e">  879</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a20e66c7208e56a307472ca0b58ded78e" title="Bidirectional serialize/deserialize a vector, using 10 bytes instead of 12.">BitStream::SerializeVector</a>(<span class="keywordtype">bool</span> writeToBitstream,  templateType &amp;x, templateType &amp;y, templateType &amp;z )</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;        {</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;            <span class="keywordflow">if</span> (writeToBitstream)</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ad1fa20760282a80581e24d039d16ab94" title="Write a vector, using 10 bytes instead of 12.">WriteVector</a>(x,y,z);</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#abbca46ec9d00b68915a2828825307dce" title="Read 3 floats or doubles, using 10 bytes, where those float or doubles comprise a vector...">ReadVector</a>(x,y,z);</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;        }</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00889"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a3db80f305f1fe2cbe0a16f89541e505b">  889</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a3db80f305f1fe2cbe0a16f89541e505b" title="Bidirectional serialize/deserialize a normalized quaternion in 6 bytes + 4 bits instead of 16 bytes...">BitStream::SerializeNormQuat</a>(<span class="keywordtype">bool</span> writeToBitstream,  templateType &amp;w, templateType &amp;x, templateType &amp;y, templateType &amp;z)</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;        {</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;            <span class="keywordflow">if</span> (writeToBitstream)</div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ad5d87e34c452f1bc1e51ce3fa0ab6ecf" title="Write a normalized quaternion in 6 bytes + 4 bits instead of 16 bytes. Slightly lossy.">WriteNormQuat</a>(w,x,y,z);</div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#adcdd659cc173627bb2fa9f899b2bfd4f" title="Read a normalized quaternion in 6 bytes + 4 bits instead of 16 bytes.">ReadNormQuat</a>(w,x,y,z);</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;        }</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00899"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8745666cfade172e8f1f2bec554ba00b">  899</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8745666cfade172e8f1f2bec554ba00b" title="Bidirectional serialize/deserialize an orthogonal matrix by creating a quaternion, and writing 3 components of the quaternion in 2 bytes each.">BitStream::SerializeOrthMatrix</a>(</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;        <span class="keywordtype">bool</span> writeToBitstream,</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;        templateType &amp;m00, templateType &amp;m01, templateType &amp;m02,</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;        templateType &amp;m10, templateType &amp;m11, templateType &amp;m12,</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;        templateType &amp;m20, templateType &amp;m21, templateType &amp;m22 )</div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;        {</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;            <span class="keywordflow">if</span> (writeToBitstream)</div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a095eb8e8065bc8f87d2c467eaf648771" title="Write an orthogonal matrix by creating a quaternion, and writing 3 components of the quaternion in 2 ...">WriteOrthMatrix</a>(m00,m01,m02,m10,m11,m12,m20,m21,m22);</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#af70e3f0d833380a92cd52b6cb79f7112" title="Read an orthogonal matrix from a quaternion, reading 3 components of the quaternion in 2 bytes each a...">ReadOrthMatrix</a>(m00,m01,m02,m10,m11,m12,m20,m21,m22);</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;        }</div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;</div>
<div class="line"><a name="l00912"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#afffb2bf1353499090b556cb91cff25f7">  912</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#afffb2bf1353499090b556cb91cff25f7" title="Bidirectional serialize/deserialize numberToSerialize bits to/from the input.">BitStream::SerializeBits</a>(<span class="keywordtype">bool</span> writeToBitstream, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* inOutByteArray, <span class="keyword">const</span> <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> numberOfBitsToSerialize, <span class="keyword">const</span> <span class="keywordtype">bool</span> rightAlignedBits )</div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;        {</div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;            <span class="keywordflow">if</span> (writeToBitstream)</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8bf3d5d6926d80a9dba19dea5eecb7d2" title="Write numberToWrite bits from the input source.">WriteBits</a>(inOutByteArray,numberOfBitsToSerialize,rightAlignedBits);</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8b621ad8c094410bc4cb44b24720320f" title="Read numberOfBitsToRead bits to the output source.">ReadBits</a>(inOutByteArray,numberOfBitsToSerialize,rightAlignedBits);</div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;        }</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00922"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201">  922</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">BitStream::Write</a>(<span class="keyword">const</span> templateType &amp;inTemplateVar)</div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;    {</div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;<span class="preprocessor">#ifdef _MSC_VER</span></div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma warning(disable:4127)   // conditional expression is constant</span></div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;<span class="preprocessor"></span>        <span class="keywordflow">if</span> (<span class="keyword">sizeof</span>(inTemplateVar)==1)</div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;            <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8bf3d5d6926d80a9dba19dea5eecb7d2" title="Write numberToWrite bits from the input source.">WriteBits</a>( ( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* ) &amp; inTemplateVar, <span class="keyword">sizeof</span>( templateType ) * 8, <span class="keyword">true</span> );</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;        {</div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;<span class="preprocessor">#ifndef __BITSTREAM_NATIVE_END</span></div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;<span class="preprocessor"></span>            <span class="keywordflow">if</span> (<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#adc5a85144836608947830e902cca005f" title="-‚Äî Member function template specialization declarations -‚Äî">DoEndianSwap</a>())</div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;            {</div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> output[<span class="keyword">sizeof</span>(templateType)];</div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#add30bae01b699057803b6d04f4af9a01">ReverseBytes</a>((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;inTemplateVar, output, <span class="keyword">sizeof</span>(templateType));</div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8bf3d5d6926d80a9dba19dea5eecb7d2" title="Write numberToWrite bits from the input source.">WriteBits</a>( ( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* ) output, <span class="keyword">sizeof</span>(templateType) * 8, <span class="keyword">true</span> );</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;            }</div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;<span class="preprocessor"></span>                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8bf3d5d6926d80a9dba19dea5eecb7d2" title="Write numberToWrite bits from the input source.">WriteBits</a>( ( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* ) &amp; inTemplateVar, <span class="keyword">sizeof</span>(templateType) * 8, <span class="keyword">true</span> );</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;        }</div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;    }</div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l00945"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a9b31fc2f422dd8fc1b4f6c78dd2a3a0d">  945</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a9b31fc2f422dd8fc1b4f6c78dd2a3a0d" title="Write the dereferenced pointer to any integral type to a bitstream.">BitStream::WritePtr</a>(templateType *inTemplateVar)</div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;    {</div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;<span class="preprocessor">#ifdef _MSC_VER</span></div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma warning(disable:4127)   // conditional expression is constant</span></div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;<span class="preprocessor"></span>        <span class="keywordflow">if</span> (<span class="keyword">sizeof</span>(templateType)==1)</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;            <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8bf3d5d6926d80a9dba19dea5eecb7d2" title="Write numberToWrite bits from the input source.">WriteBits</a>( ( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* ) inTemplateVar, <span class="keyword">sizeof</span>( templateType ) * 8, <span class="keyword">true</span> );</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;        {</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;<span class="preprocessor">#ifndef __BITSTREAM_NATIVE_END</span></div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;<span class="preprocessor"></span>            <span class="keywordflow">if</span> (<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#adc5a85144836608947830e902cca005f" title="-‚Äî Member function template specialization declarations -‚Äî">DoEndianSwap</a>())</div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;            {</div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> output[<span class="keyword">sizeof</span>(templateType)];</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#add30bae01b699057803b6d04f4af9a01">ReverseBytes</a>((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*) inTemplateVar, output, <span class="keyword">sizeof</span>(templateType));</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8bf3d5d6926d80a9dba19dea5eecb7d2" title="Write numberToWrite bits from the input source.">WriteBits</a>( ( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* ) output, <span class="keyword">sizeof</span>(templateType) * 8, <span class="keyword">true</span> );</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;            }</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;<span class="preprocessor"></span>                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8bf3d5d6926d80a9dba19dea5eecb7d2" title="Write numberToWrite bits from the input source.">WriteBits</a>( ( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* ) inTemplateVar, <span class="keyword">sizeof</span>(templateType) * 8, <span class="keyword">true</span> );</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;        }</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;    }</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00970"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a17db358b09a207c7dd730a2a06fcc6a5">  970</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">BitStream::Write</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;inTemplateVar)</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;        {</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;            <span class="keywordflow">if</span> ( inTemplateVar )</div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2060f594db2a6182038259c9db7eeb31" title="Write a 1.">Write1</a>();</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a6ab8d1f78d5d37de6db82f4b8002c218" title="Write a 0.">Write0</a>();</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;        }</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00982"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ab17cf888cee7d6fa1f1df1a6a2adaac1">  982</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">BitStream::Write</a>(<span class="keyword">const</span> <a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml" title="Network address for a system.">SystemAddress</a> &amp;inTemplateVar)</div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;    {</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(inTemplateVar.<a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#ad5b388ed6b6716d09042dcf3e363733a">GetIPVersion</a>());</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;        <span class="keywordflow">if</span> (inTemplateVar.<a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#ad5b388ed6b6716d09042dcf3e363733a">GetIPVersion</a>()==4)</div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;        {</div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;            <span class="comment">// Hide the address so routers don&#39;t modify it</span></div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;            <a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml" title="Network address for a system.">SystemAddress</a> var2=inTemplateVar;</div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;            <a class="code" href="../../df/df2/_native_types_8h.xhtml#a6eb1e68cc391dd753bc8ce896dbb8315">uint32_t</a> binaryAddress=~inTemplateVar.<a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#ab9652ec65cfbbf702d84ff340b12da47">address</a>.addr4.sin_addr.s_addr;</div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;            <span class="comment">// Don&#39;t endian swap the address or port</span></div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;            <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8bf3d5d6926d80a9dba19dea5eecb7d2" title="Write numberToWrite bits from the input source.">WriteBits</a>((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;binaryAddress, <span class="keyword">sizeof</span>(binaryAddress)*8, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> p = var2.<a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#a311649e2a5619e10ddfb3585d5874e38">GetPortNetworkOrder</a>();</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;            <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8bf3d5d6926d80a9dba19dea5eecb7d2" title="Write numberToWrite bits from the input source.">WriteBits</a>((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;p, <span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>)*8, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;        }</div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;        {</div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;<span class="preprocessor">#if RAKNET_SUPPORT_IPV6==1</span></div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;<span class="preprocessor"></span>            <span class="comment">// Don&#39;t endian swap</span></div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;            <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8bf3d5d6926d80a9dba19dea5eecb7d2" title="Write numberToWrite bits from the input source.">WriteBits</a>((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*) &amp;inTemplateVar.<a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#ab9652ec65cfbbf702d84ff340b12da47">address</a>.addr6, <span class="keyword">sizeof</span>(inTemplateVar.<a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#ab9652ec65cfbbf702d84ff340b12da47">address</a>.addr6)*8, <span class="keyword">true</span>);</div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;<span class="preprocessor"></span>        }</div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;    }</div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;</div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01005"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a04994a895a2554547fa7fa3610184c49"> 1005</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">BitStream::Write</a>(<span class="keyword">const</span> <a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">uint24_t</a> &amp;inTemplateVar)</div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;    {</div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a1083ab999b52c839709eab5cff65a68d" title="Align the next write and/or read to a byte boundary.">AlignWriteToByteBoundary</a>();</div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a823fec57a5ca6638d88aafdc199cb770" title="Reallocates (if necessary) in preparation of writing numberOfBitsToWrite.">AddBitsAndReallocate</a>(3*8);</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;</div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#af85ce50757f06bfbd6fc4a88dd24cdae">IsBigEndian</a>()==<span class="keyword">false</span>)</div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;        {</div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;            data[( numberOfBitsUsed &gt;&gt; 3 ) + 0] = ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *)&amp;inTemplateVar.<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml#a2e06899a191560e2a2f45b1508f3f571">val</a>)[0];</div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;            data[( numberOfBitsUsed &gt;&gt; 3 ) + 1] = ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *)&amp;inTemplateVar.<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml#a2e06899a191560e2a2f45b1508f3f571">val</a>)[1];</div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;            data[( numberOfBitsUsed &gt;&gt; 3 ) + 2] = ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *)&amp;inTemplateVar.<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml#a2e06899a191560e2a2f45b1508f3f571">val</a>)[2];</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;        }</div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;        {</div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;            data[( numberOfBitsUsed &gt;&gt; 3 ) + 0] = ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *)&amp;inTemplateVar.<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml#a2e06899a191560e2a2f45b1508f3f571">val</a>)[3];</div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;            data[( numberOfBitsUsed &gt;&gt; 3 ) + 1] = ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *)&amp;inTemplateVar.<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml#a2e06899a191560e2a2f45b1508f3f571">val</a>)[2];</div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;            data[( numberOfBitsUsed &gt;&gt; 3 ) + 2] = ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *)&amp;inTemplateVar.<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml#a2e06899a191560e2a2f45b1508f3f571">val</a>)[1];</div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;        }</div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;</div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;        numberOfBitsUsed+=3*8;</div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;    }</div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01027"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a69b6fe2a47eec0552f33e2f2d1a95d39"> 1027</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">BitStream::Write</a>(<span class="keyword">const</span> <a class="code" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> &amp;inTemplateVar)</div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;        {</div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;            <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(inTemplateVar.<a class="code" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml#a4e529b54617b8fdfd21da8aca09f88e2">g</a>);</div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;        }</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;</div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01035"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a09b3fd092512ac707256316febfe45f1"> 1035</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">BitStream::Write</a>(<span class="keyword">const</span> <a class="code" href="../../d2/d66/class_s_l_net_1_1_rak_string.xhtml" title="String class.">RakString</a> &amp;inTemplateVar)</div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;    {</div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;        inTemplateVar.<a class="code" href="../../d2/d66/class_s_l_net_1_1_rak_string.xhtml#a2226e6d66ad858f63e44e628575a8eaa">Serialize</a>(<span class="keyword">this</span>);</div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;    }</div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01040"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a38a6b75ab9ddb36aac2624009b80b572"> 1040</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">BitStream::Write</a>(<span class="keyword">const</span> <a class="code" href="../../d8/d91/class_s_l_net_1_1_rak_w_string.xhtml" title="String class for Unicode.">RakWString</a> &amp;inTemplateVar)</div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;    {</div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;        inTemplateVar.<a class="code" href="../../d8/d91/class_s_l_net_1_1_rak_w_string.xhtml#a8ddb3a0e537ec5c67a39f2e8d1984efc">Serialize</a>(<span class="keyword">this</span>);</div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;    }</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01045"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ab77133d4e9996ad6de5d0816c23f6eb2"> 1045</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">BitStream::Write</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * <span class="keyword">const</span> &amp;inStringVar)</div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;    {</div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;        <a class="code" href="../../d2/d66/class_s_l_net_1_1_rak_string.xhtml#a2226e6d66ad858f63e44e628575a8eaa">RakString::Serialize</a>(inStringVar, <span class="keyword">this</span>);</div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;    }</div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01050"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ab6314bcce863b869438435f1ab0df7b1"> 1050</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">BitStream::Write</a>(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span> * <span class="keyword">const</span> &amp;inStringVar)</div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;    {</div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;        <a class="code" href="../../d8/d91/class_s_l_net_1_1_rak_w_string.xhtml#a8ddb3a0e537ec5c67a39f2e8d1984efc">RakWString::Serialize</a>(inStringVar, <span class="keyword">this</span>);</div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;    }</div>
<div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01055"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ab844ab07e09670d7e73216770151a2b9"> 1055</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">BitStream::Write</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> * <span class="keyword">const</span> &amp;inTemplateVar)</div>
<div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;    {</div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>((<span class="keyword">const</span> <span class="keywordtype">char</span>*)inTemplateVar);</div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;    }</div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01060"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a144a7fc4013f9e60465e23ca6675c37c"> 1060</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">BitStream::Write</a>(<span class="keywordtype">char</span> * <span class="keyword">const</span> &amp;inTemplateVar)</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;    {</div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>((<span class="keyword">const</span> <span class="keywordtype">char</span>*)inTemplateVar);</div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;    }</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01065"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ae0dfba5004068ea2d7b6b3c5e4bd5daf"> 1065</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">BitStream::Write</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> * <span class="keyword">const</span> &amp;inTemplateVar)</div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;    {</div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>((<span class="keyword">const</span> <span class="keywordtype">char</span>*)inTemplateVar);</div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;    }</div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;</div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l01076"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a11078d27535f5cf4c1822bca0672d2fe"> 1076</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a11078d27535f5cf4c1822bca0672d2fe" title="Write any integral type to a bitstream.">BitStream::WriteDelta</a>(<span class="keyword">const</span> templateType &amp;currentValue, <span class="keyword">const</span> templateType &amp;lastValue)</div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;    {</div>
<div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;        <span class="keywordflow">if</span> (currentValue==lastValue)</div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;        {</div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;            <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(<span class="keyword">false</span>);</div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;        }</div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;        {</div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;            <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(<span class="keyword">true</span>);</div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;            <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(currentValue);</div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;        }</div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;    }</div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;</div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01093"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a720b28dc011b7ffd4d15efa4da70afdc"> 1093</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a11078d27535f5cf4c1822bca0672d2fe" title="Write any integral type to a bitstream.">BitStream::WriteDelta</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;currentValue, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;lastValue)</div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;    {</div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;        (void) lastValue;</div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;</div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(currentValue);</div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;    }</div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;</div>
<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l01103"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ae977f9207c42ce4b10ef8b3d9b0ceba3"> 1103</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a11078d27535f5cf4c1822bca0672d2fe" title="Write any integral type to a bitstream.">BitStream::WriteDelta</a>(<span class="keyword">const</span> templateType &amp;currentValue)</div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;    {</div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(<span class="keyword">true</span>);</div>
<div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(currentValue);</div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;    }</div>
<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;</div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l01116"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b"> 1116</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">BitStream::WriteCompressed</a>(<span class="keyword">const</span> templateType &amp;inTemplateVar)</div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;    {</div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;<span class="preprocessor">#ifdef _MSC_VER</span></div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma warning(disable:4127)   // conditional expression is constant</span></div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;<span class="preprocessor"></span>        <span class="keywordflow">if</span> (<span class="keyword">sizeof</span>(inTemplateVar)==1)</div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;            <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">WriteCompressed</a>( ( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* ) &amp; inTemplateVar, <span class="keyword">sizeof</span>( templateType ) * 8, <span class="keyword">true</span> );</div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;        {</div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;<span class="preprocessor">#ifndef __BITSTREAM_NATIVE_END</span></div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;<span class="preprocessor"></span>            <span class="keywordflow">if</span> (<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#adc5a85144836608947830e902cca005f" title="-‚Äî Member function template specialization declarations -‚Äî">DoEndianSwap</a>())</div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;            {</div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> output[<span class="keyword">sizeof</span>(templateType)];</div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#add30bae01b699057803b6d04f4af9a01">ReverseBytes</a>((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;inTemplateVar, output, <span class="keyword">sizeof</span>(templateType));</div>
<div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">WriteCompressed</a>( ( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* ) output, <span class="keyword">sizeof</span>(templateType) * 8, <span class="keyword">true</span> );</div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;            }</div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;<span class="preprocessor"></span>                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">WriteCompressed</a>( ( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* ) &amp; inTemplateVar, <span class="keyword">sizeof</span>(templateType) * 8, <span class="keyword">true</span> );</div>
<div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;        }</div>
<div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;    }</div>
<div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;</div>
<div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01139"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#abc7bf145c6366bef86450bcd25ce027f"> 1139</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">BitStream::WriteCompressed</a>(<span class="keyword">const</span> <a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml" title="Network address for a system.">SystemAddress</a> &amp;inTemplateVar)</div>
<div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;    {</div>
<div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(inTemplateVar);</div>
<div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;    }</div>
<div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;</div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01145"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a9d9077703b30be7dfb0c85ebe707f832"> 1145</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">BitStream::WriteCompressed</a>(<span class="keyword">const</span> <a class="code" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> &amp;inTemplateVar)</div>
<div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;    {</div>
<div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(inTemplateVar);</div>
<div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;    }</div>
<div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;</div>
<div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01151"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#aa41d1a795129d02e9e979d16f6c5a18c"> 1151</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">BitStream::WriteCompressed</a>(<span class="keyword">const</span> <a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">uint24_t</a> &amp;var)</div>
<div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;    {</div>
<div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(var);</div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;    }</div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;</div>
<div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01157"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ad134a12b137d1706a4e135ef422ce97f"> 1157</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">BitStream::WriteCompressed</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;inTemplateVar)</div>
<div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;    {</div>
<div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(inTemplateVar);</div>
<div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;    }</div>
<div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;</div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01164"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#aa2d1009dd9d5d2f8efc2b24f419d3800"> 1164</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">BitStream::WriteCompressed</a>(<span class="keyword">const</span> <span class="keywordtype">float</span> &amp;inTemplateVar)</div>
<div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;    {</div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(inTemplateVar &gt; -1.01f &amp;&amp; inTemplateVar &lt; 1.01f);</div>
<div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;        <span class="keywordtype">float</span> varCopy=inTemplateVar;</div>
<div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;        <span class="keywordflow">if</span> (varCopy &lt; -1.0f)</div>
<div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;            varCopy=-1.0f;</div>
<div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;        <span class="keywordflow">if</span> (varCopy &gt; 1.0f)</div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;            varCopy=1.0f;</div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>((<span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>)((varCopy+1.0f)*32767.5f));</div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;    }</div>
<div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;</div>
<div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01177"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a650b913a3491b2035d99474b2ce22ff1"> 1177</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">BitStream::WriteCompressed</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> &amp;inTemplateVar)</div>
<div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;    {</div>
<div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(inTemplateVar &gt; -1.01 &amp;&amp; inTemplateVar &lt; 1.01);</div>
<div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;        <span class="keywordtype">double</span> varCopy=inTemplateVar;</div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;        <span class="keywordflow">if</span> (varCopy &lt; -1.0f)</div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;            varCopy=-1.0f;</div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;        <span class="keywordflow">if</span> (varCopy &gt; 1.0f)</div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;            varCopy=1.0f;</div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>((<a class="code" href="../../df/df2/_native_types_8h.xhtml#a6eb1e68cc391dd753bc8ce896dbb8315">uint32_t</a>)((varCopy+1.0)*2147483648.0));</div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;    }</div>
<div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;</div>
<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01190"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#adb431b7a22e43503a7f2392d8ab04c72"> 1190</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">BitStream::WriteCompressed</a>(<span class="keyword">const</span> <a class="code" href="../../d2/d66/class_s_l_net_1_1_rak_string.xhtml" title="String class.">RakString</a> &amp;inTemplateVar)</div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;    {</div>
<div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;        inTemplateVar.<a class="code" href="../../d2/d66/class_s_l_net_1_1_rak_string.xhtml#a5c0cb659b6a3671aa8938833160464b9">SerializeCompressed</a>(<span class="keyword">this</span>,0,<span class="keyword">false</span>);</div>
<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;    }</div>
<div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01195"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#afeba3e8d4d6e9fb45a7b6f8e084971a8"> 1195</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">BitStream::WriteCompressed</a>(<span class="keyword">const</span> <a class="code" href="../../d8/d91/class_s_l_net_1_1_rak_w_string.xhtml" title="String class for Unicode.">RakWString</a> &amp;inTemplateVar)</div>
<div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;    {</div>
<div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;        inTemplateVar.<a class="code" href="../../d8/d91/class_s_l_net_1_1_rak_w_string.xhtml#a8ddb3a0e537ec5c67a39f2e8d1984efc">Serialize</a>(<span class="keyword">this</span>);</div>
<div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;    }</div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01200"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a3045a2fba93ccbe320ab1c43e2608d24"> 1200</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">BitStream::WriteCompressed</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * <span class="keyword">const</span> &amp;inStringVar)</div>
<div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;    {</div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;        <a class="code" href="../../d2/d66/class_s_l_net_1_1_rak_string.xhtml#a5c0cb659b6a3671aa8938833160464b9">RakString::SerializeCompressed</a>(inStringVar,<span class="keyword">this</span>,0,<span class="keyword">false</span>);</div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;    }</div>
<div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01205"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ad7412140debdc31eb02176b7663fa6d3"> 1205</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">BitStream::WriteCompressed</a>(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span> * <span class="keyword">const</span> &amp;inStringVar)</div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;    {</div>
<div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;        <a class="code" href="../../d8/d91/class_s_l_net_1_1_rak_w_string.xhtml#a8ddb3a0e537ec5c67a39f2e8d1984efc">RakWString::Serialize</a>(inStringVar,<span class="keyword">this</span>);</div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;    }</div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01210"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a3497ff9d098670c507b776016dab18d9"> 1210</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">BitStream::WriteCompressed</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> * <span class="keyword">const</span> &amp;inTemplateVar)</div>
<div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;    {</div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">WriteCompressed</a>((<span class="keyword">const</span> <span class="keywordtype">char</span>*) inTemplateVar);</div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;    }</div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01215"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a7a2e58e7ab16fbbfc7b24d6bb5a0d803"> 1215</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">BitStream::WriteCompressed</a>(<span class="keywordtype">char</span> * <span class="keyword">const</span> &amp;inTemplateVar)</div>
<div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;    {</div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">WriteCompressed</a>((<span class="keyword">const</span> <span class="keywordtype">char</span>*) inTemplateVar);</div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;    }</div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01220"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#af9f2dfd81c1d2a57a2b067d05d5c4bc0"> 1220</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">BitStream::WriteCompressed</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> * <span class="keyword">const</span> &amp;inTemplateVar)</div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;    {</div>
<div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">WriteCompressed</a>((<span class="keyword">const</span> <span class="keywordtype">char</span>*) inTemplateVar);</div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;    }</div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;    </div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;</div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l01235"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a42a0d2b1bcdb13f19996f73d5aecf73e"> 1235</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a42a0d2b1bcdb13f19996f73d5aecf73e" title="Write any integral type to a bitstream.">BitStream::WriteCompressedDelta</a>(<span class="keyword">const</span> templateType &amp;currentValue, <span class="keyword">const</span> templateType &amp;lastValue)</div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;    {</div>
<div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;        <span class="keywordflow">if</span> (currentValue==lastValue)</div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;        {</div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;            <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(<span class="keyword">false</span>);</div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;        }</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;        {</div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;            <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(<span class="keyword">true</span>);</div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;            <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">WriteCompressed</a>(currentValue);</div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;        }</div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;    }</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;</div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01252"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#af5b85dddc11e784bccb31a46af2bf948"> 1252</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a42a0d2b1bcdb13f19996f73d5aecf73e" title="Write any integral type to a bitstream.">BitStream::WriteCompressedDelta</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;currentValue, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;lastValue)</div>
<div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;    {</div>
<div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;        (void) lastValue;</div>
<div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;</div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(currentValue);</div>
<div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;    }</div>
<div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;</div>
<div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l01262"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a32bb314e085d6793481386cb13bd6976"> 1262</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a42a0d2b1bcdb13f19996f73d5aecf73e" title="Write any integral type to a bitstream.">BitStream::WriteCompressedDelta</a>(<span class="keyword">const</span> templateType &amp;currentValue)</div>
<div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;    {</div>
<div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(<span class="keyword">true</span>);</div>
<div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">WriteCompressed</a>(currentValue);</div>
<div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;    }</div>
<div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;</div>
<div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01271"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a4639a7b9b8ff0739963c76fa07154bab"> 1271</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a42a0d2b1bcdb13f19996f73d5aecf73e" title="Write any integral type to a bitstream.">BitStream::WriteCompressedDelta</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;currentValue)</div>
<div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;    {</div>
<div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(currentValue);</div>
<div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;    }</div>
<div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;</div>
<div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l01279"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db"> 1279</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">BitStream::Read</a>(templateType &amp;outTemplateVar)</div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;    {</div>
<div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;<span class="preprocessor">#ifdef _MSC_VER</span></div>
<div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma warning(disable:4127)   // conditional expression is constant</span></div>
<div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;<span class="preprocessor"></span>        <span class="keywordflow">if</span> (<span class="keyword">sizeof</span>(outTemplateVar)==1)</div>
<div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8b621ad8c094410bc4cb44b24720320f" title="Read numberOfBitsToRead bits to the output source.">ReadBits</a>( ( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* ) &amp;outTemplateVar, <span class="keyword">sizeof</span>(templateType) * 8, <span class="keyword">true</span> );</div>
<div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;        {</div>
<div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;<span class="preprocessor">#ifndef __BITSTREAM_NATIVE_END</span></div>
<div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;<span class="preprocessor"></span>            <span class="keywordflow">if</span> (<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#adc5a85144836608947830e902cca005f" title="-‚Äî Member function template specialization declarations -‚Äî">DoEndianSwap</a>())</div>
<div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;            {</div>
<div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> output[<span class="keyword">sizeof</span>(templateType)];</div>
<div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8b621ad8c094410bc4cb44b24720320f" title="Read numberOfBitsToRead bits to the output source.">ReadBits</a>( ( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* ) output, <span class="keyword">sizeof</span>(templateType) * 8, <span class="keyword">true</span> ))</div>
<div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;                {</div>
<div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;                    <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#add30bae01b699057803b6d04f4af9a01">ReverseBytes</a>(output, (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;outTemplateVar, <span class="keyword">sizeof</span>(templateType));</div>
<div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;                    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;                }</div>
<div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;            }</div>
<div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;<span class="preprocessor"></span>                <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8b621ad8c094410bc4cb44b24720320f" title="Read numberOfBitsToRead bits to the output source.">ReadBits</a>( ( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* ) &amp; outTemplateVar, <span class="keyword">sizeof</span>(templateType) * 8, <span class="keyword">true</span> );</div>
<div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;        }</div>
<div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;    }</div>
<div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;</div>
<div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01308"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a3be8fefec92fbe9157069d8be6123a59"> 1308</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">BitStream::Read</a>(<span class="keywordtype">bool</span> &amp;outTemplateVar)</div>
<div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;    {</div>
<div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a89838c39f170290405c95d78b0553e51" title="Returns the number of bits left in the stream that haven&#39;t been read.">GetNumberOfUnreadBits</a>() == 0)</div>
<div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;</div>
<div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;        <span class="keywordflow">if</span> ( data[ readOffset &gt;&gt; 3 ] &amp; ( 0x80 &gt;&gt; ( readOffset &amp; 7 ) ) )   <span class="comment">// Is it faster to just write it out here?</span></div>
<div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;            outTemplateVar = <span class="keyword">true</span>;</div>
<div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;            outTemplateVar = <span class="keyword">false</span>;</div>
<div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;</div>
<div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;        <span class="comment">// Has to be on a different line for Mac</span></div>
<div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;        readOffset++;</div>
<div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;</div>
<div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;    }</div>
<div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;</div>
<div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01327"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a948cb0ecbfbe927b859fc36b534aa39c"> 1327</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">BitStream::Read</a>(<a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml" title="Network address for a system.">SystemAddress</a> &amp;outTemplateVar)</div>
<div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;    {</div>
<div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> ipVersion;</div>
<div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(ipVersion);</div>
<div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;        <span class="keywordflow">if</span> (ipVersion==4)</div>
<div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;        {</div>
<div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;            outTemplateVar.<a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#ab9652ec65cfbbf702d84ff340b12da47">address</a>.addr4.sin_family=AF_INET;</div>
<div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;            <span class="comment">// Read(var.binaryAddress);</span></div>
<div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;            <span class="comment">// Don&#39;t endian swap the address or port</span></div>
<div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;            <a class="code" href="../../df/df2/_native_types_8h.xhtml#a6eb1e68cc391dd753bc8ce896dbb8315">uint32_t</a> binaryAddress;</div>
<div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;            <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8b621ad8c094410bc4cb44b24720320f" title="Read numberOfBitsToRead bits to the output source.">ReadBits</a>( ( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* ) &amp; binaryAddress, <span class="keyword">sizeof</span>(binaryAddress) * 8, <span class="keyword">true</span> );</div>
<div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;            <span class="comment">// Unhide the IP address, done to prevent routers from changing it</span></div>
<div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;            outTemplateVar.<a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#ab9652ec65cfbbf702d84ff340b12da47">address</a>.addr4.sin_addr.s_addr=~binaryAddress;</div>
<div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;            <span class="keywordtype">bool</span> b = <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8b621ad8c094410bc4cb44b24720320f" title="Read numberOfBitsToRead bits to the output source.">ReadBits</a>(( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* ) &amp; outTemplateVar.<a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#ab9652ec65cfbbf702d84ff340b12da47">address</a>.addr4.sin_port, <span class="keyword">sizeof</span>(outTemplateVar.<a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#ab9652ec65cfbbf702d84ff340b12da47">address</a>.addr4.sin_port) * 8, <span class="keyword">true</span>);</div>
<div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;            outTemplateVar.<a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#a2707e26293ed8eabfb8a699ac24ce14e" title="This is not used internally, but holds a copy of the port held in the address union, so for debugging it&#39;s easier to check what port is being held.">debugPort</a>=ntohs(outTemplateVar.<a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#ab9652ec65cfbbf702d84ff340b12da47">address</a>.addr4.sin_port);</div>
<div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;            <span class="keywordflow">return</span> b;</div>
<div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;        }</div>
<div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;        {</div>
<div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;<span class="preprocessor">#if RAKNET_SUPPORT_IPV6==1</span></div>
<div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;<span class="preprocessor"></span>            <span class="keywordtype">bool</span> b = <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8b621ad8c094410bc4cb44b24720320f" title="Read numberOfBitsToRead bits to the output source.">ReadBits</a>((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*) &amp;outTemplateVar.<a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#ab9652ec65cfbbf702d84ff340b12da47">address</a>.addr6, <span class="keyword">sizeof</span>(outTemplateVar.<a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#ab9652ec65cfbbf702d84ff340b12da47">address</a>.addr6)*8, <span class="keyword">true</span>);</div>
<div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;            outTemplateVar.<a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#a2707e26293ed8eabfb8a699ac24ce14e" title="This is not used internally, but holds a copy of the port held in the address union, so for debugging it&#39;s easier to check what port is being held.">debugPort</a>=ntohs(outTemplateVar.<a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml#ab9652ec65cfbbf702d84ff340b12da47">address</a>.addr6.sin6_port);</div>
<div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;            <span class="keywordflow">return</span> b;</div>
<div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;<span class="preprocessor"></span>            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;<span class="preprocessor"></span>        }   </div>
<div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;    }</div>
<div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;</div>
<div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01357"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#abbedcfef322eae8accfafff707a7395f"> 1357</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">BitStream::Read</a>(<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">uint24_t</a> &amp;outTemplateVar)</div>
<div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;    {</div>
<div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#af64b3663a865840e013f5aef490d891e" title="Align the next write and/or read to a byte boundary.">AlignReadToByteBoundary</a>();</div>
<div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a89838c39f170290405c95d78b0553e51" title="Returns the number of bits left in the stream that haven&#39;t been read.">GetNumberOfUnreadBits</a>() &lt; 3*8)</div>
<div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;</div>
<div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#af85ce50757f06bfbd6fc4a88dd24cdae">IsBigEndian</a>()==<span class="keyword">false</span>)</div>
<div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;        {</div>
<div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;            ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *)&amp;outTemplateVar.<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml#a2e06899a191560e2a2f45b1508f3f571">val</a>)[0]=data[ (readOffset &gt;&gt; 3) + 0];</div>
<div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;            ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *)&amp;outTemplateVar.<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml#a2e06899a191560e2a2f45b1508f3f571">val</a>)[1]=data[ (readOffset &gt;&gt; 3) + 1];</div>
<div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;            ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *)&amp;outTemplateVar.<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml#a2e06899a191560e2a2f45b1508f3f571">val</a>)[2]=data[ (readOffset &gt;&gt; 3) + 2];</div>
<div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;            ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *)&amp;outTemplateVar.<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml#a2e06899a191560e2a2f45b1508f3f571">val</a>)[3]=0;</div>
<div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;        }</div>
<div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;        {</div>
<div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;</div>
<div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;            ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *)&amp;outTemplateVar.<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml#a2e06899a191560e2a2f45b1508f3f571">val</a>)[3]=data[ (readOffset &gt;&gt; 3) + 0];</div>
<div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;            ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *)&amp;outTemplateVar.<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml#a2e06899a191560e2a2f45b1508f3f571">val</a>)[2]=data[ (readOffset &gt;&gt; 3) + 1];</div>
<div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;            ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *)&amp;outTemplateVar.<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml#a2e06899a191560e2a2f45b1508f3f571">val</a>)[1]=data[ (readOffset &gt;&gt; 3) + 2];</div>
<div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;            ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *)&amp;outTemplateVar.<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml#a2e06899a191560e2a2f45b1508f3f571">val</a>)[0]=0;</div>
<div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;        }</div>
<div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;</div>
<div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;        readOffset+=3*8;</div>
<div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;    }</div>
<div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;</div>
<div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01384"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#aa65e0b4ad1d3f70faa20d22a247c9484"> 1384</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">BitStream::Read</a>(<a class="code" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> &amp;outTemplateVar)</div>
<div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;    {</div>
<div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(outTemplateVar.<a class="code" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml#a4e529b54617b8fdfd21da8aca09f88e2">g</a>);</div>
<div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;    }</div>
<div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;</div>
<div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;</div>
<div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01391"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#aa16880b2d0a00e57f1fb51faef460d6c"> 1391</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">BitStream::Read</a>(<a class="code" href="../../d2/d66/class_s_l_net_1_1_rak_string.xhtml" title="String class.">RakString</a> &amp;outTemplateVar)</div>
<div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;    {</div>
<div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;        <span class="keywordflow">return</span> outTemplateVar.<a class="code" href="../../d2/d66/class_s_l_net_1_1_rak_string.xhtml#ad1174919912f9c05b89907c1ddf95037">Deserialize</a>(<span class="keyword">this</span>);</div>
<div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;    }</div>
<div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01396"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a73e599a00905d0cf5f7421584fafe1b9"> 1396</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">BitStream::Read</a>(<a class="code" href="../../d8/d91/class_s_l_net_1_1_rak_w_string.xhtml" title="String class for Unicode.">RakWString</a> &amp;outTemplateVar)</div>
<div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;    {</div>
<div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;        <span class="keywordflow">return</span> outTemplateVar.<a class="code" href="../../d8/d91/class_s_l_net_1_1_rak_w_string.xhtml#a1ee57c7ac7e350d2a0402cca38ff9e5f">Deserialize</a>(<span class="keyword">this</span>);</div>
<div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;    }</div>
<div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01401"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a402aa10d544046397be3912d5c617298"> 1401</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">BitStream::Read</a>(<span class="keywordtype">char</span> *&amp;varString)</div>
<div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;    {</div>
<div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="../../d2/d66/class_s_l_net_1_1_rak_string.xhtml#ad1174919912f9c05b89907c1ddf95037">RakString::Deserialize</a>(varString,<span class="keyword">this</span>);</div>
<div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;    }</div>
<div class="line"><a name="l01405"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#afcb7a9e10cbf1f5066eb3bb06ce73bf1"> 1405</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">BitStream::Read</a>(<span class="keywordtype">wchar_t</span> *&amp;varString)</div>
<div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;    {</div>
<div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="../../d8/d91/class_s_l_net_1_1_rak_w_string.xhtml#a1ee57c7ac7e350d2a0402cca38ff9e5f">RakWString::Deserialize</a>(varString, <span class="keyword">this</span>);</div>
<div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;    }</div>
<div class="line"><a name="l01409"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a600ecddd3fd2c59947dbfe015748a37e"> 1409</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">BitStream::Read</a>(<span class="keywordtype">wchar_t</span> *&amp;varString, <span class="keywordtype">size_t</span> varStringLength)</div>
<div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;    {</div>
<div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="../../d8/d91/class_s_l_net_1_1_rak_w_string.xhtml#a1ee57c7ac7e350d2a0402cca38ff9e5f">RakWString::Deserialize</a>(varString,varStringLength,<span class="keyword">this</span>);</div>
<div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;    }</div>
<div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01414"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a562726fbe919605b443ba883ef3cb2d1"> 1414</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">BitStream::Read</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *&amp;varString)</div>
<div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;    {</div>
<div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="../../d2/d66/class_s_l_net_1_1_rak_string.xhtml#ad1174919912f9c05b89907c1ddf95037">RakString::Deserialize</a>((<span class="keywordtype">char</span>*) varString,<span class="keyword">this</span>);</div>
<div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;    }</div>
<div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;</div>
<div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l01425"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a92289c0daf93d018afcdfd3b3dc6d237"> 1425</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a92289c0daf93d018afcdfd3b3dc6d237" title="Read any integral type from a bitstream.">BitStream::ReadDelta</a>(templateType &amp;outTemplateVar)</div>
<div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;    {</div>
<div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;        <span class="keywordtype">bool</span> dataWritten;</div>
<div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;        <span class="keywordtype">bool</span> success;</div>
<div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;        success=<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(dataWritten);</div>
<div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;        <span class="keywordflow">if</span> (dataWritten)</div>
<div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;            success=<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(outTemplateVar);</div>
<div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;        <span class="keywordflow">return</span> success;</div>
<div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;    }</div>
<div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;</div>
<div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01438"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#aceff050878ca3f53433cf808cc203e2a"> 1438</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a92289c0daf93d018afcdfd3b3dc6d237" title="Read any integral type from a bitstream.">BitStream::ReadDelta</a>(<span class="keywordtype">bool</span> &amp;outTemplateVar)</div>
<div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;    {</div>
<div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(outTemplateVar);</div>
<div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;    }</div>
<div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;</div>
<div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l01450"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ac7fcbda7a05b5c7bd7018205cb1bb7b0"> 1450</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ac7fcbda7a05b5c7bd7018205cb1bb7b0" title="Read any integral type from a bitstream.">BitStream::ReadCompressed</a>(templateType &amp;outTemplateVar)</div>
<div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;    {</div>
<div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;<span class="preprocessor">#ifdef _MSC_VER</span></div>
<div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma warning(disable:4127)   // conditional expression is constant</span></div>
<div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;<span class="preprocessor"></span>        <span class="keywordflow">if</span> (<span class="keyword">sizeof</span>(outTemplateVar)==1)</div>
<div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ac7fcbda7a05b5c7bd7018205cb1bb7b0" title="Read any integral type from a bitstream.">ReadCompressed</a>( ( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* ) &amp;outTemplateVar, <span class="keyword">sizeof</span>(templateType) * 8, <span class="keyword">true</span> );</div>
<div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;        {</div>
<div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;<span class="preprocessor">#ifndef __BITSTREAM_NATIVE_END</span></div>
<div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;<span class="preprocessor"></span>            <span class="keywordflow">if</span> (<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#adc5a85144836608947830e902cca005f" title="-‚Äî Member function template specialization declarations -‚Äî">DoEndianSwap</a>())</div>
<div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;            {</div>
<div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> output[<span class="keyword">sizeof</span>(templateType)];</div>
<div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ac7fcbda7a05b5c7bd7018205cb1bb7b0" title="Read any integral type from a bitstream.">ReadCompressed</a>( ( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* ) output, <span class="keyword">sizeof</span>(templateType) * 8, <span class="keyword">true</span> ))</div>
<div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;                {</div>
<div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;                    <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#add30bae01b699057803b6d04f4af9a01">ReverseBytes</a>(output, (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;outTemplateVar, <span class="keyword">sizeof</span>(templateType));</div>
<div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;                    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;                }</div>
<div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;            }</div>
<div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;<span class="preprocessor"></span>                <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ac7fcbda7a05b5c7bd7018205cb1bb7b0" title="Read any integral type from a bitstream.">ReadCompressed</a>( ( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* ) &amp; outTemplateVar, <span class="keyword">sizeof</span>(templateType) * 8, <span class="keyword">true</span> );</div>
<div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;        }</div>
<div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;    }</div>
<div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;</div>
<div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01477"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a76108518241879abbd1bd80536126644"> 1477</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ac7fcbda7a05b5c7bd7018205cb1bb7b0" title="Read any integral type from a bitstream.">BitStream::ReadCompressed</a>(<a class="code" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml" title="Network address for a system.">SystemAddress</a> &amp;outTemplateVar)</div>
<div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;    {</div>
<div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(outTemplateVar);</div>
<div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;    }</div>
<div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;</div>
<div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01483"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8b97142b3f7076cd73a4f3ad5ff1c06b"> 1483</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ac7fcbda7a05b5c7bd7018205cb1bb7b0" title="Read any integral type from a bitstream.">BitStream::ReadCompressed</a>(<a class="code" href="../../d9/d6a/struct_s_l_net_1_1uint24__t.xhtml">uint24_t</a> &amp;outTemplateVar)</div>
<div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;    {</div>
<div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(outTemplateVar);</div>
<div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;    }</div>
<div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;</div>
<div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01489"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a1c6f9a17d4c6d3c986cdff1ee973338c"> 1489</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ac7fcbda7a05b5c7bd7018205cb1bb7b0" title="Read any integral type from a bitstream.">BitStream::ReadCompressed</a>(<a class="code" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> &amp;outTemplateVar)</div>
<div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;    {</div>
<div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(outTemplateVar);</div>
<div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;    }</div>
<div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;</div>
<div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01495"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a7bf4fbecb41176a7df50d6598b12e240"> 1495</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ac7fcbda7a05b5c7bd7018205cb1bb7b0" title="Read any integral type from a bitstream.">BitStream::ReadCompressed</a>(<span class="keywordtype">bool</span> &amp;outTemplateVar)</div>
<div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;    {</div>
<div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(outTemplateVar);</div>
<div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;    }</div>
<div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;</div>
<div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01502"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ad61175b975fe96aeaadf61e374027e40"> 1502</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ac7fcbda7a05b5c7bd7018205cb1bb7b0" title="Read any integral type from a bitstream.">BitStream::ReadCompressed</a>(<span class="keywordtype">float</span> &amp;outTemplateVar)</div>
<div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;    {</div>
<div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> compressedFloat;</div>
<div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(compressedFloat))</div>
<div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;        {</div>
<div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;            outTemplateVar = ((float)compressedFloat / 32767.5f - 1.0f);</div>
<div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;        }</div>
<div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;    }</div>
<div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;</div>
<div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01515"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ad5aae3bd7fd8d950e9d90a29a690b6ae"> 1515</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ac7fcbda7a05b5c7bd7018205cb1bb7b0" title="Read any integral type from a bitstream.">BitStream::ReadCompressed</a>(<span class="keywordtype">double</span> &amp;outTemplateVar)</div>
<div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;    {</div>
<div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;        <a class="code" href="../../df/df2/_native_types_8h.xhtml#a6eb1e68cc391dd753bc8ce896dbb8315">uint32_t</a> compressedFloat;</div>
<div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(compressedFloat))</div>
<div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;        {</div>
<div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;            outTemplateVar = ((double)compressedFloat / 2147483648.0 - 1.0);</div>
<div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;        }</div>
<div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;    }</div>
<div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;</div>
<div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01528"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a113336a763312313a1366dc36a1b8fce"> 1528</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ac7fcbda7a05b5c7bd7018205cb1bb7b0" title="Read any integral type from a bitstream.">BitStream::ReadCompressed</a>(<a class="code" href="../../d2/d66/class_s_l_net_1_1_rak_string.xhtml" title="String class.">RakString</a> &amp;outTemplateVar)</div>
<div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;    {</div>
<div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;        <span class="keywordflow">return</span> outTemplateVar.<a class="code" href="../../d2/d66/class_s_l_net_1_1_rak_string.xhtml#aae39f63bde1d71a7bb2ae61883064c4e">DeserializeCompressed</a>(<span class="keyword">this</span>,<span class="keyword">false</span>);</div>
<div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;    }</div>
<div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01533"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#acbbc3126508fa871c3a18a3b1cf672cc"> 1533</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ac7fcbda7a05b5c7bd7018205cb1bb7b0" title="Read any integral type from a bitstream.">BitStream::ReadCompressed</a>(<a class="code" href="../../d8/d91/class_s_l_net_1_1_rak_w_string.xhtml" title="String class for Unicode.">RakWString</a> &amp;outTemplateVar)</div>
<div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;    {</div>
<div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;        <span class="keywordflow">return</span> outTemplateVar.<a class="code" href="../../d8/d91/class_s_l_net_1_1_rak_w_string.xhtml#a1ee57c7ac7e350d2a0402cca38ff9e5f">Deserialize</a>(<span class="keyword">this</span>);</div>
<div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;    }</div>
<div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01538"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a27b318b61ec54a3b70904f05e317ae39"> 1538</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ac7fcbda7a05b5c7bd7018205cb1bb7b0" title="Read any integral type from a bitstream.">BitStream::ReadCompressed</a>(<span class="keywordtype">char</span> *&amp;outTemplateVar)</div>
<div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;    {</div>
<div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="../../d2/d66/class_s_l_net_1_1_rak_string.xhtml#aae39f63bde1d71a7bb2ae61883064c4e">RakString::DeserializeCompressed</a>(outTemplateVar,<span class="keyword">this</span>,<span class="keyword">false</span>);</div>
<div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;    }</div>
<div class="line"><a name="l01542"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#affbfe9ef2322a2aef7a8ed0e5e67eecb"> 1542</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ac7fcbda7a05b5c7bd7018205cb1bb7b0" title="Read any integral type from a bitstream.">BitStream::ReadCompressed</a>(<span class="keywordtype">wchar_t</span> *&amp;outTemplateVar)</div>
<div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;    {</div>
<div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="../../d8/d91/class_s_l_net_1_1_rak_w_string.xhtml#a1ee57c7ac7e350d2a0402cca38ff9e5f">RakWString::Deserialize</a>(outTemplateVar, <span class="keyword">this</span>);</div>
<div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;    }</div>
<div class="line"><a name="l01546"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a7ca3f5ce31cd6cd573b3ce320e60925c"> 1546</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ac7fcbda7a05b5c7bd7018205cb1bb7b0" title="Read any integral type from a bitstream.">BitStream::ReadCompressed</a>(<span class="keywordtype">wchar_t</span> *&amp;outTemplateVar, <span class="keywordtype">size_t</span> varStringLength)</div>
<div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;    {</div>
<div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="../../d8/d91/class_s_l_net_1_1_rak_w_string.xhtml#a1ee57c7ac7e350d2a0402cca38ff9e5f">RakWString::Deserialize</a>(outTemplateVar,varStringLength,<span class="keyword">this</span>);</div>
<div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;    }</div>
<div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01551"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a95118fe34fe80171975dd5948eeae61a"> 1551</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ac7fcbda7a05b5c7bd7018205cb1bb7b0" title="Read any integral type from a bitstream.">BitStream::ReadCompressed</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *&amp;outTemplateVar)</div>
<div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;    {</div>
<div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="../../d2/d66/class_s_l_net_1_1_rak_string.xhtml#aae39f63bde1d71a7bb2ae61883064c4e">RakString::DeserializeCompressed</a>((<span class="keywordtype">char</span>*) outTemplateVar,<span class="keyword">this</span>,<span class="keyword">false</span>);</div>
<div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;    }</div>
<div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;</div>
<div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l01566"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a644710042a38cf4ff181a2abd8a05457"> 1566</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a644710042a38cf4ff181a2abd8a05457" title="Read any integral type from a bitstream.">BitStream::ReadCompressedDelta</a>(templateType &amp;outTemplateVar)</div>
<div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;    {</div>
<div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;        <span class="keywordtype">bool</span> dataWritten;</div>
<div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;        <span class="keywordtype">bool</span> success;</div>
<div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;        success=<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(dataWritten);</div>
<div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;        <span class="keywordflow">if</span> (dataWritten)</div>
<div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;            success=<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ac7fcbda7a05b5c7bd7018205cb1bb7b0" title="Read any integral type from a bitstream.">ReadCompressed</a>(outTemplateVar);</div>
<div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;        <span class="keywordflow">return</span> success;</div>
<div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;    }</div>
<div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;</div>
<div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;    <span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01579"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a349befece0da0c0c7e82da687ca643f1"> 1579</a></span>&#160;        <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a644710042a38cf4ff181a2abd8a05457" title="Read any integral type from a bitstream.">BitStream::ReadCompressedDelta</a>(<span class="keywordtype">bool</span> &amp;outTemplateVar)</div>
<div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;    {</div>
<div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(outTemplateVar);</div>
<div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;    }</div>
<div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;</div>
<div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> destinationType, <span class="keyword">class</span> sourceType &gt;</div>
<div class="line"><a name="l01585"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a389b1cb2d6ab054a9949efe7f1748374"> 1585</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a389b1cb2d6ab054a9949efe7f1748374">BitStream::WriteCasted</a>( <span class="keyword">const</span> sourceType &amp;value )</div>
<div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;    {</div>
<div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;        destinationType val = (destinationType) value;</div>
<div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(val);</div>
<div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;    }</div>
<div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;</div>
<div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l01592"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a090f1303f8ec22dd12ce75038dc2d81f"> 1592</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a090f1303f8ec22dd12ce75038dc2d81f">BitStream::WriteBitsFromIntegerRange</a>( <span class="keyword">const</span> templateType value, <span class="keyword">const</span> templateType minimum,<span class="keyword">const</span> templateType maximum, <span class="keywordtype">bool</span> allowOutsideRange )</div>
<div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;    {</div>
<div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;        <span class="keywordtype">int</span> requiredBits=<a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(<span class="keyword">sizeof</span>(templateType))-<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a3aefd36be73485fe931841734bc113c4">NumberOfLeadingZeroes</a>(templateType(maximum-minimum));</div>
<div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a090f1303f8ec22dd12ce75038dc2d81f">WriteBitsFromIntegerRange</a>(value,minimum,maximum,requiredBits,allowOutsideRange);</div>
<div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;    }</div>
<div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l01598"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a774d6e5f9f9ea8bec1da788b63e61775"> 1598</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a090f1303f8ec22dd12ce75038dc2d81f">BitStream::WriteBitsFromIntegerRange</a>( <span class="keyword">const</span> templateType value, <span class="keyword">const</span> templateType minimum,<span class="keyword">const</span> templateType maximum, <span class="keyword">const</span> <span class="keywordtype">int</span> requiredBits, <span class="keywordtype">bool</span> allowOutsideRange )</div>
<div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;    {</div>
<div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(maximum&gt;=minimum);</div>
<div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(allowOutsideRange==<span class="keyword">true</span> || (value&gt;=minimum &amp;&amp; value&lt;=maximum));</div>
<div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;        <span class="keywordflow">if</span> (allowOutsideRange)</div>
<div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;        {</div>
<div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;            <span class="keywordflow">if</span> (value&lt;minimum || value&gt;maximum)</div>
<div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;            {</div>
<div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(<span class="keyword">true</span>);</div>
<div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(value);</div>
<div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;                <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;            }</div>
<div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;            <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(<span class="keyword">false</span>);</div>
<div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;        }</div>
<div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;        templateType valueOffMin=value-minimum;</div>
<div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#af85ce50757f06bfbd6fc4a88dd24cdae">IsBigEndian</a>()==<span class="keyword">true</span>)</div>
<div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;        {</div>
<div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> output[<span class="keyword">sizeof</span>(templateType)];</div>
<div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;            <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#add30bae01b699057803b6d04f4af9a01">ReverseBytes</a>((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;valueOffMin, output, <span class="keyword">sizeof</span>(templateType));</div>
<div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;            <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8bf3d5d6926d80a9dba19dea5eecb7d2" title="Write numberToWrite bits from the input source.">WriteBits</a>(output,requiredBits);</div>
<div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;        }</div>
<div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;        {</div>
<div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;            <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8bf3d5d6926d80a9dba19dea5eecb7d2" title="Write numberToWrite bits from the input source.">WriteBits</a>((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*) &amp;valueOffMin,requiredBits);</div>
<div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;        }</div>
<div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;    }</div>
<div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;</div>
<div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt; <span class="comment">// templateType for this function must be a float or double</span></div>
<div class="line"><a name="l01626"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a03e238407281a89dc845bcc185f19e34"> 1626</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a03e238407281a89dc845bcc185f19e34" title="Write a normalized 3D vector, using (at most) 4 bytes + 3 bits instead of 12-24 bytes.">BitStream::WriteNormVector</a>( templateType x, templateType y, templateType z )</div>
<div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;    {</div>
<div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;<span class="preprocessor">#ifdef _DEBUG</span></div>
<div class="line"><a name="l01629"></a><span class="lineno"> 1629</span>&#160;<span class="preprocessor"></span>        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(x &lt;= 1.01 &amp;&amp; y &lt;= 1.01 &amp;&amp; z &lt;= 1.01 &amp;&amp; x &gt;= -1.01 &amp;&amp; y &gt;= -1.01 &amp;&amp; z &gt;= -1.01);</div>
<div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#affbc2f1d2416053fe320e834bdecb8a7" title="Write a float into 2 bytes, spanning the range between floatMin and floatMax.">WriteFloat16</a>((<span class="keywordtype">float</span>)x,-1.0f,1.0f);</div>
<div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#affbc2f1d2416053fe320e834bdecb8a7" title="Write a float into 2 bytes, spanning the range between floatMin and floatMax.">WriteFloat16</a>((<span class="keywordtype">float</span>)y,-1.0f,1.0f);</div>
<div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#affbc2f1d2416053fe320e834bdecb8a7" title="Write a float into 2 bytes, spanning the range between floatMin and floatMax.">WriteFloat16</a>((<span class="keywordtype">float</span>)z,-1.0f,1.0f);</div>
<div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;    }</div>
<div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;</div>
<div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt; <span class="comment">// templateType for this function must be a float or double</span></div>
<div class="line"><a name="l01638"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ad1fa20760282a80581e24d039d16ab94"> 1638</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ad1fa20760282a80581e24d039d16ab94" title="Write a vector, using 10 bytes instead of 12.">BitStream::WriteVector</a>( templateType x, templateType y, templateType z )</div>
<div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;    {</div>
<div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;        templateType magnitude = sqrt(x * x + y * y + z * z);</div>
<div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>((<span class="keywordtype">float</span>)magnitude);</div>
<div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;        <span class="keywordflow">if</span> (magnitude &gt; 0.00001f)</div>
<div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;        {</div>
<div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;            <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">WriteCompressed</a>((<span class="keywordtype">float</span>)(x/magnitude));</div>
<div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;            <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">WriteCompressed</a>((<span class="keywordtype">float</span>)(y/magnitude));</div>
<div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;            <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a24121050ec7d63a6eba5d1b243b4922b" title="Write any integral type to a bitstream.">WriteCompressed</a>((<span class="keywordtype">float</span>)(z/magnitude));</div>
<div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;            <span class="comment">//  Write((unsigned short)((x/magnitude+1.0f)*32767.5f));</span></div>
<div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;            <span class="comment">//  Write((unsigned short)((y/magnitude+1.0f)*32767.5f));</span></div>
<div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;            <span class="comment">//  Write((unsigned short)((z/magnitude+1.0f)*32767.5f));</span></div>
<div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;        }</div>
<div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;    }</div>
<div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;</div>
<div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt; <span class="comment">// templateType for this function must be a float or double</span></div>
<div class="line"><a name="l01654"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ad5d87e34c452f1bc1e51ce3fa0ab6ecf"> 1654</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ad5d87e34c452f1bc1e51ce3fa0ab6ecf" title="Write a normalized quaternion in 6 bytes + 4 bits instead of 16 bytes. Slightly lossy.">BitStream::WriteNormQuat</a>( templateType w, templateType x, templateType y, templateType z)</div>
<div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;    {</div>
<div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>((<span class="keywordtype">bool</span>)(w&lt;0.0));</div>
<div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>((<span class="keywordtype">bool</span>)(x&lt;0.0));</div>
<div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>((<span class="keywordtype">bool</span>)(y&lt;0.0));</div>
<div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>((<span class="keywordtype">bool</span>)(z&lt;0.0));</div>
<div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>((<span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>)(fabs(x)*65535.0));</div>
<div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>((<span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>)(fabs(y)*65535.0));</div>
<div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>((<span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>)(fabs(z)*65535.0));</div>
<div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;        <span class="comment">// Leave out w and calculate it on the target</span></div>
<div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160;    }</div>
<div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;</div>
<div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt; <span class="comment">// templateType for this function must be a float or double</span></div>
<div class="line"><a name="l01667"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a095eb8e8065bc8f87d2c467eaf648771"> 1667</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a095eb8e8065bc8f87d2c467eaf648771" title="Write an orthogonal matrix by creating a quaternion, and writing 3 components of the quaternion in 2 ...">BitStream::WriteOrthMatrix</a>(</div>
<div class="line"><a name="l01668"></a><span class="lineno"> 1668</span>&#160;        templateType m00, templateType m01, templateType m02,</div>
<div class="line"><a name="l01669"></a><span class="lineno"> 1669</span>&#160;        templateType m10, templateType m11, templateType m12,</div>
<div class="line"><a name="l01670"></a><span class="lineno"> 1670</span>&#160;        templateType m20, templateType m21, templateType m22 )</div>
<div class="line"><a name="l01671"></a><span class="lineno"> 1671</span>&#160;    {</div>
<div class="line"><a name="l01672"></a><span class="lineno"> 1672</span>&#160;</div>
<div class="line"><a name="l01673"></a><span class="lineno"> 1673</span>&#160;        <span class="keywordtype">double</span> qw;</div>
<div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160;        <span class="keywordtype">double</span> qx;</div>
<div class="line"><a name="l01675"></a><span class="lineno"> 1675</span>&#160;        <span class="keywordtype">double</span> qy;</div>
<div class="line"><a name="l01676"></a><span class="lineno"> 1676</span>&#160;        <span class="keywordtype">double</span> qz;</div>
<div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;</div>
<div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;        <span class="comment">// Convert matrix to quat</span></div>
<div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;        <span class="comment">// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/</span></div>
<div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;        <span class="keywordtype">float</span> sum;</div>
<div class="line"><a name="l01681"></a><span class="lineno"> 1681</span>&#160;        sum = 1 + m00 + m11 + m22;</div>
<div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;        <span class="keywordflow">if</span> (sum &lt; 0.0f) sum=0.0f;</div>
<div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160;        qw = sqrt( sum  ) / 2;</div>
<div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160;        sum = 1 + m00 - m11 - m22;</div>
<div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;        <span class="keywordflow">if</span> (sum &lt; 0.0f) sum=0.0f;</div>
<div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160;        qx = sqrt( sum  ) / 2;</div>
<div class="line"><a name="l01687"></a><span class="lineno"> 1687</span>&#160;        sum = 1 - m00 + m11 - m22;</div>
<div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160;        <span class="keywordflow">if</span> (sum &lt; 0.0f) sum=0.0f;</div>
<div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;        qy = sqrt( sum  ) / 2;</div>
<div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;        sum = 1 - m00 - m11 + m22;</div>
<div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;        <span class="keywordflow">if</span> (sum &lt; 0.0f) sum=0.0f;</div>
<div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;        qz = sqrt( sum  ) / 2;</div>
<div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160;        <span class="keywordflow">if</span> (qw &lt; 0.0) qw=0.0;</div>
<div class="line"><a name="l01694"></a><span class="lineno"> 1694</span>&#160;        <span class="keywordflow">if</span> (qx &lt; 0.0) qx=0.0;</div>
<div class="line"><a name="l01695"></a><span class="lineno"> 1695</span>&#160;        <span class="keywordflow">if</span> (qy &lt; 0.0) qy=0.0;</div>
<div class="line"><a name="l01696"></a><span class="lineno"> 1696</span>&#160;        <span class="keywordflow">if</span> (qz &lt; 0.0) qz=0.0;</div>
<div class="line"><a name="l01697"></a><span class="lineno"> 1697</span>&#160;        qx = <a class="code" href="../../d7/dc3/_bit_stream_8h.xhtml#a64e69a4a3800bf006de7f15006ebde5c">_copysign</a>( (<span class="keywordtype">double</span>) qx, (<span class="keywordtype">double</span>) (m21 - m12) );</div>
<div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;        qy = <a class="code" href="../../d7/dc3/_bit_stream_8h.xhtml#a64e69a4a3800bf006de7f15006ebde5c">_copysign</a>( (<span class="keywordtype">double</span>) qy, (<span class="keywordtype">double</span>) (m02 - m20) );</div>
<div class="line"><a name="l01699"></a><span class="lineno"> 1699</span>&#160;        qz = <a class="code" href="../../d7/dc3/_bit_stream_8h.xhtml#a64e69a4a3800bf006de7f15006ebde5c">_copysign</a>( (<span class="keywordtype">double</span>) qz, (<span class="keywordtype">double</span>) (m10 - m01) );</div>
<div class="line"><a name="l01700"></a><span class="lineno"> 1700</span>&#160;</div>
<div class="line"><a name="l01701"></a><span class="lineno"> 1701</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ad5d87e34c452f1bc1e51ce3fa0ab6ecf" title="Write a normalized quaternion in 6 bytes + 4 bits instead of 16 bytes. Slightly lossy.">WriteNormQuat</a>(qw,qx,qy,qz);</div>
<div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;    }</div>
<div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160;</div>
<div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> serializationType, <span class="keyword">class</span> sourceType &gt;</div>
<div class="line"><a name="l01705"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a544430a7ba9f9dd8b7f49ece417dbc68"> 1705</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a544430a7ba9f9dd8b7f49ece417dbc68">BitStream::ReadCasted</a>( sourceType &amp;value )</div>
<div class="line"><a name="l01706"></a><span class="lineno"> 1706</span>&#160;    {</div>
<div class="line"><a name="l01707"></a><span class="lineno"> 1707</span>&#160;        serializationType val;</div>
<div class="line"><a name="l01708"></a><span class="lineno"> 1708</span>&#160;        <span class="keywordtype">bool</span> success = <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(val);</div>
<div class="line"><a name="l01709"></a><span class="lineno"> 1709</span>&#160;        value=(sourceType) val;</div>
<div class="line"><a name="l01710"></a><span class="lineno"> 1710</span>&#160;        <span class="keywordflow">return</span> success;</div>
<div class="line"><a name="l01711"></a><span class="lineno"> 1711</span>&#160;    }</div>
<div class="line"><a name="l01712"></a><span class="lineno"> 1712</span>&#160;</div>
<div class="line"><a name="l01713"></a><span class="lineno"> 1713</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l01714"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#abad130ab2cb67adadf2001496501a2aa"> 1714</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#abad130ab2cb67adadf2001496501a2aa">BitStream::ReadBitsFromIntegerRange</a>( templateType &amp;value, <span class="keyword">const</span> templateType minimum, <span class="keyword">const</span> templateType maximum, <span class="keywordtype">bool</span> allowOutsideRange )</div>
<div class="line"><a name="l01715"></a><span class="lineno"> 1715</span>&#160;    {</div>
<div class="line"><a name="l01716"></a><span class="lineno"> 1716</span>&#160;        <span class="keywordtype">int</span> requiredBits=<a class="code" href="../../d9/d49/types_8h.xhtml#a4c1e0708f6f9b121ca602cd8ceddd670">BYTES_TO_BITS</a>(<span class="keyword">sizeof</span>(templateType))-<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a3aefd36be73485fe931841734bc113c4">NumberOfLeadingZeroes</a>(templateType(maximum-minimum));</div>
<div class="line"><a name="l01717"></a><span class="lineno"> 1717</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#abad130ab2cb67adadf2001496501a2aa">ReadBitsFromIntegerRange</a>(value,minimum,maximum,requiredBits,allowOutsideRange);</div>
<div class="line"><a name="l01718"></a><span class="lineno"> 1718</span>&#160;    }</div>
<div class="line"><a name="l01719"></a><span class="lineno"> 1719</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l01720"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#acb457a394ffdff34693b8ced1d7367ed"> 1720</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#abad130ab2cb67adadf2001496501a2aa">BitStream::ReadBitsFromIntegerRange</a>( templateType &amp;value, <span class="keyword">const</span> templateType minimum, <span class="keyword">const</span> templateType maximum, <span class="keyword">const</span> <span class="keywordtype">int</span> requiredBits, <span class="keywordtype">bool</span> allowOutsideRange )</div>
<div class="line"><a name="l01721"></a><span class="lineno"> 1721</span>&#160;    {</div>
<div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(maximum&gt;=minimum);</div>
<div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160;        <span class="keywordflow">if</span> (allowOutsideRange)</div>
<div class="line"><a name="l01724"></a><span class="lineno"> 1724</span>&#160;        {</div>
<div class="line"><a name="l01725"></a><span class="lineno"> 1725</span>&#160;            <span class="keywordtype">bool</span> isOutsideRange;</div>
<div class="line"><a name="l01726"></a><span class="lineno"> 1726</span>&#160;            <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(isOutsideRange);</div>
<div class="line"><a name="l01727"></a><span class="lineno"> 1727</span>&#160;            <span class="keywordflow">if</span> (isOutsideRange)</div>
<div class="line"><a name="l01728"></a><span class="lineno"> 1728</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(value);</div>
<div class="line"><a name="l01729"></a><span class="lineno"> 1729</span>&#160;        }</div>
<div class="line"><a name="l01730"></a><span class="lineno"> 1730</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> output[<span class="keyword">sizeof</span>(templateType)];</div>
<div class="line"><a name="l01731"></a><span class="lineno"> 1731</span>&#160;        memset(output,0,<span class="keyword">sizeof</span>(output));</div>
<div class="line"><a name="l01732"></a><span class="lineno"> 1732</span>&#160;        <span class="keywordtype">bool</span> success = <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a8b621ad8c094410bc4cb44b24720320f" title="Read numberOfBitsToRead bits to the output source.">ReadBits</a>(output,requiredBits);</div>
<div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160;        <span class="keywordflow">if</span> (success)</div>
<div class="line"><a name="l01734"></a><span class="lineno"> 1734</span>&#160;        {</div>
<div class="line"><a name="l01735"></a><span class="lineno"> 1735</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#af85ce50757f06bfbd6fc4a88dd24cdae">IsBigEndian</a>()==<span class="keyword">true</span>)</div>
<div class="line"><a name="l01736"></a><span class="lineno"> 1736</span>&#160;                <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a3ba4c1a60776e63dcf17396b536d3fe8">ReverseBytesInPlace</a>(output,<span class="keyword">sizeof</span>(output));</div>
<div class="line"><a name="l01737"></a><span class="lineno"> 1737</span>&#160;            memcpy(&amp;value,output,<span class="keyword">sizeof</span>(output));</div>
<div class="line"><a name="l01738"></a><span class="lineno"> 1738</span>&#160;</div>
<div class="line"><a name="l01739"></a><span class="lineno"> 1739</span>&#160;            value+=minimum;</div>
<div class="line"><a name="l01740"></a><span class="lineno"> 1740</span>&#160;        }</div>
<div class="line"><a name="l01741"></a><span class="lineno"> 1741</span>&#160;</div>
<div class="line"><a name="l01742"></a><span class="lineno"> 1742</span>&#160;        <span class="keywordflow">return</span> success;</div>
<div class="line"><a name="l01743"></a><span class="lineno"> 1743</span>&#160;    }</div>
<div class="line"><a name="l01744"></a><span class="lineno"> 1744</span>&#160;</div>
<div class="line"><a name="l01745"></a><span class="lineno"> 1745</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt; <span class="comment">// templateType for this function must be a float or double</span></div>
<div class="line"><a name="l01746"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ac88d7df22922c0702bdc5c9e2e5086c5"> 1746</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ac88d7df22922c0702bdc5c9e2e5086c5" title="Read a normalized 3D vector, using (at most) 4 bytes + 3 bits instead of 12-24 bytes.">BitStream::ReadNormVector</a>( templateType &amp;x, templateType &amp;y, templateType &amp;z )</div>
<div class="line"><a name="l01747"></a><span class="lineno"> 1747</span>&#160;    {</div>
<div class="line"><a name="l01748"></a><span class="lineno"> 1748</span>&#160;        <span class="keywordtype">float</span> xIn,yIn,zIn;</div>
<div class="line"><a name="l01749"></a><span class="lineno"> 1749</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a1843797ddff3ba9805a29c28c0601a6e" title="Read a float into 2 bytes, spanning the range between floatMin and floatMax.">ReadFloat16</a>(xIn,-1.0f,1.0f);</div>
<div class="line"><a name="l01750"></a><span class="lineno"> 1750</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a1843797ddff3ba9805a29c28c0601a6e" title="Read a float into 2 bytes, spanning the range between floatMin and floatMax.">ReadFloat16</a>(yIn,-1.0f,1.0f);</div>
<div class="line"><a name="l01751"></a><span class="lineno"> 1751</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a1843797ddff3ba9805a29c28c0601a6e" title="Read a float into 2 bytes, spanning the range between floatMin and floatMax.">ReadFloat16</a>(zIn,-1.0f,1.0f);</div>
<div class="line"><a name="l01752"></a><span class="lineno"> 1752</span>&#160;        x=xIn;</div>
<div class="line"><a name="l01753"></a><span class="lineno"> 1753</span>&#160;        y=yIn;</div>
<div class="line"><a name="l01754"></a><span class="lineno"> 1754</span>&#160;        z=zIn;</div>
<div class="line"><a name="l01755"></a><span class="lineno"> 1755</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l01756"></a><span class="lineno"> 1756</span>&#160;    }</div>
<div class="line"><a name="l01757"></a><span class="lineno"> 1757</span>&#160;</div>
<div class="line"><a name="l01758"></a><span class="lineno"> 1758</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt; <span class="comment">// templateType for this function must be a float or double</span></div>
<div class="line"><a name="l01759"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#abbca46ec9d00b68915a2828825307dce"> 1759</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#abbca46ec9d00b68915a2828825307dce" title="Read 3 floats or doubles, using 10 bytes, where those float or doubles comprise a vector...">BitStream::ReadVector</a>( templateType &amp;x, templateType &amp;y, templateType &amp;z )</div>
<div class="line"><a name="l01760"></a><span class="lineno"> 1760</span>&#160;    {</div>
<div class="line"><a name="l01761"></a><span class="lineno"> 1761</span>&#160;        <span class="keywordtype">float</span> magnitude;</div>
<div class="line"><a name="l01762"></a><span class="lineno"> 1762</span>&#160;        <span class="comment">//unsigned short sx,sy,sz;</span></div>
<div class="line"><a name="l01763"></a><span class="lineno"> 1763</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(magnitude))</div>
<div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01765"></a><span class="lineno"> 1765</span>&#160;        <span class="keywordflow">if</span> (magnitude&gt;0.00001f)</div>
<div class="line"><a name="l01766"></a><span class="lineno"> 1766</span>&#160;        {</div>
<div class="line"><a name="l01767"></a><span class="lineno"> 1767</span>&#160;            <span class="comment">//  Read(sx);</span></div>
<div class="line"><a name="l01768"></a><span class="lineno"> 1768</span>&#160;            <span class="comment">//  Read(sy);</span></div>
<div class="line"><a name="l01769"></a><span class="lineno"> 1769</span>&#160;            <span class="comment">//  if (!Read(sz))</span></div>
<div class="line"><a name="l01770"></a><span class="lineno"> 1770</span>&#160;            <span class="comment">//      return false;</span></div>
<div class="line"><a name="l01771"></a><span class="lineno"> 1771</span>&#160;            <span class="comment">//  x=((float)sx / 32767.5f - 1.0f) * magnitude;</span></div>
<div class="line"><a name="l01772"></a><span class="lineno"> 1772</span>&#160;            <span class="comment">//  y=((float)sy / 32767.5f - 1.0f) * magnitude;</span></div>
<div class="line"><a name="l01773"></a><span class="lineno"> 1773</span>&#160;            <span class="comment">//  z=((float)sz / 32767.5f - 1.0f) * magnitude;</span></div>
<div class="line"><a name="l01774"></a><span class="lineno"> 1774</span>&#160;            <span class="keywordtype">float</span> cx=0.0f,cy=0.0f,cz=0.0f;</div>
<div class="line"><a name="l01775"></a><span class="lineno"> 1775</span>&#160;            <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ac7fcbda7a05b5c7bd7018205cb1bb7b0" title="Read any integral type from a bitstream.">ReadCompressed</a>(cx);</div>
<div class="line"><a name="l01776"></a><span class="lineno"> 1776</span>&#160;            <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ac7fcbda7a05b5c7bd7018205cb1bb7b0" title="Read any integral type from a bitstream.">ReadCompressed</a>(cy);</div>
<div class="line"><a name="l01777"></a><span class="lineno"> 1777</span>&#160;            <span class="keywordflow">if</span> (!<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#ac7fcbda7a05b5c7bd7018205cb1bb7b0" title="Read any integral type from a bitstream.">ReadCompressed</a>(cz))</div>
<div class="line"><a name="l01778"></a><span class="lineno"> 1778</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01779"></a><span class="lineno"> 1779</span>&#160;            x=cx;</div>
<div class="line"><a name="l01780"></a><span class="lineno"> 1780</span>&#160;            y=cy;</div>
<div class="line"><a name="l01781"></a><span class="lineno"> 1781</span>&#160;            z=cz;</div>
<div class="line"><a name="l01782"></a><span class="lineno"> 1782</span>&#160;            x*=magnitude;</div>
<div class="line"><a name="l01783"></a><span class="lineno"> 1783</span>&#160;            y*=magnitude;</div>
<div class="line"><a name="l01784"></a><span class="lineno"> 1784</span>&#160;            z*=magnitude;</div>
<div class="line"><a name="l01785"></a><span class="lineno"> 1785</span>&#160;        }</div>
<div class="line"><a name="l01786"></a><span class="lineno"> 1786</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01787"></a><span class="lineno"> 1787</span>&#160;        {</div>
<div class="line"><a name="l01788"></a><span class="lineno"> 1788</span>&#160;            x=0.0;</div>
<div class="line"><a name="l01789"></a><span class="lineno"> 1789</span>&#160;            y=0.0;</div>
<div class="line"><a name="l01790"></a><span class="lineno"> 1790</span>&#160;            z=0.0;</div>
<div class="line"><a name="l01791"></a><span class="lineno"> 1791</span>&#160;        }</div>
<div class="line"><a name="l01792"></a><span class="lineno"> 1792</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l01793"></a><span class="lineno"> 1793</span>&#160;    }</div>
<div class="line"><a name="l01794"></a><span class="lineno"> 1794</span>&#160;</div>
<div class="line"><a name="l01795"></a><span class="lineno"> 1795</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt; <span class="comment">// templateType for this function must be a float or double</span></div>
<div class="line"><a name="l01796"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#adcdd659cc173627bb2fa9f899b2bfd4f"> 1796</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#adcdd659cc173627bb2fa9f899b2bfd4f" title="Read a normalized quaternion in 6 bytes + 4 bits instead of 16 bytes.">BitStream::ReadNormQuat</a>( templateType &amp;w, templateType &amp;x, templateType &amp;y, templateType &amp;z)</div>
<div class="line"><a name="l01797"></a><span class="lineno"> 1797</span>&#160;    {</div>
<div class="line"><a name="l01798"></a><span class="lineno"> 1798</span>&#160;        <span class="keywordtype">bool</span> cwNeg=<span class="keyword">false</span>, cxNeg=<span class="keyword">false</span>, cyNeg=<span class="keyword">false</span>, czNeg=<span class="keyword">false</span>;</div>
<div class="line"><a name="l01799"></a><span class="lineno"> 1799</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> cx,cy,cz;</div>
<div class="line"><a name="l01800"></a><span class="lineno"> 1800</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(cwNeg);</div>
<div class="line"><a name="l01801"></a><span class="lineno"> 1801</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(cxNeg);</div>
<div class="line"><a name="l01802"></a><span class="lineno"> 1802</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(cyNeg);</div>
<div class="line"><a name="l01803"></a><span class="lineno"> 1803</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(czNeg);</div>
<div class="line"><a name="l01804"></a><span class="lineno"> 1804</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(cx);</div>
<div class="line"><a name="l01805"></a><span class="lineno"> 1805</span>&#160;        <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(cy);</div>
<div class="line"><a name="l01806"></a><span class="lineno"> 1806</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(cz))</div>
<div class="line"><a name="l01807"></a><span class="lineno"> 1807</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01808"></a><span class="lineno"> 1808</span>&#160;</div>
<div class="line"><a name="l01809"></a><span class="lineno"> 1809</span>&#160;        <span class="comment">// Calculate w from x,y,z</span></div>
<div class="line"><a name="l01810"></a><span class="lineno"> 1810</span>&#160;        x=(templateType)(cx/65535.0);</div>
<div class="line"><a name="l01811"></a><span class="lineno"> 1811</span>&#160;        y=(templateType)(cy/65535.0);</div>
<div class="line"><a name="l01812"></a><span class="lineno"> 1812</span>&#160;        z=(templateType)(cz/65535.0);</div>
<div class="line"><a name="l01813"></a><span class="lineno"> 1813</span>&#160;        <span class="keywordflow">if</span> (cxNeg) x=-x;</div>
<div class="line"><a name="l01814"></a><span class="lineno"> 1814</span>&#160;        <span class="keywordflow">if</span> (cyNeg) y=-y;</div>
<div class="line"><a name="l01815"></a><span class="lineno"> 1815</span>&#160;        <span class="keywordflow">if</span> (czNeg) z=-z;</div>
<div class="line"><a name="l01816"></a><span class="lineno"> 1816</span>&#160;        <span class="keywordtype">float</span> difference = 1.0f - x*x - y*y - z*z;</div>
<div class="line"><a name="l01817"></a><span class="lineno"> 1817</span>&#160;        <span class="keywordflow">if</span> (difference &lt; 0.0f)</div>
<div class="line"><a name="l01818"></a><span class="lineno"> 1818</span>&#160;            difference=0.0f;</div>
<div class="line"><a name="l01819"></a><span class="lineno"> 1819</span>&#160;        w = (templateType)(sqrt(difference));</div>
<div class="line"><a name="l01820"></a><span class="lineno"> 1820</span>&#160;        <span class="keywordflow">if</span> (cwNeg)</div>
<div class="line"><a name="l01821"></a><span class="lineno"> 1821</span>&#160;            w=-w;</div>
<div class="line"><a name="l01822"></a><span class="lineno"> 1822</span>&#160;</div>
<div class="line"><a name="l01823"></a><span class="lineno"> 1823</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l01824"></a><span class="lineno"> 1824</span>&#160;    }</div>
<div class="line"><a name="l01825"></a><span class="lineno"> 1825</span>&#160;</div>
<div class="line"><a name="l01826"></a><span class="lineno"> 1826</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt; <span class="comment">// templateType for this function must be a float or double</span></div>
<div class="line"><a name="l01827"></a><span class="lineno"><a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#af70e3f0d833380a92cd52b6cb79f7112"> 1827</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#af70e3f0d833380a92cd52b6cb79f7112" title="Read an orthogonal matrix from a quaternion, reading 3 components of the quaternion in 2 bytes each a...">BitStream::ReadOrthMatrix</a>(</div>
<div class="line"><a name="l01828"></a><span class="lineno"> 1828</span>&#160;        templateType &amp;m00, templateType &amp;m01, templateType &amp;m02,</div>
<div class="line"><a name="l01829"></a><span class="lineno"> 1829</span>&#160;        templateType &amp;m10, templateType &amp;m11, templateType &amp;m12,</div>
<div class="line"><a name="l01830"></a><span class="lineno"> 1830</span>&#160;        templateType &amp;m20, templateType &amp;m21, templateType &amp;m22 )</div>
<div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160;    {</div>
<div class="line"><a name="l01832"></a><span class="lineno"> 1832</span>&#160;        <span class="keywordtype">float</span> qw,qx,qy,qz;</div>
<div class="line"><a name="l01833"></a><span class="lineno"> 1833</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#adcdd659cc173627bb2fa9f899b2bfd4f" title="Read a normalized quaternion in 6 bytes + 4 bits instead of 16 bytes.">ReadNormQuat</a>(qw,qx,qy,qz))</div>
<div class="line"><a name="l01834"></a><span class="lineno"> 1834</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01835"></a><span class="lineno"> 1835</span>&#160;</div>
<div class="line"><a name="l01836"></a><span class="lineno"> 1836</span>&#160;        <span class="comment">// Quat to orthogonal rotation matrix</span></div>
<div class="line"><a name="l01837"></a><span class="lineno"> 1837</span>&#160;        <span class="comment">// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToMatrix/index.htm</span></div>
<div class="line"><a name="l01838"></a><span class="lineno"> 1838</span>&#160;        <span class="keywordtype">double</span> sqw = (double)qw*(<span class="keywordtype">double</span>)qw;</div>
<div class="line"><a name="l01839"></a><span class="lineno"> 1839</span>&#160;        <span class="keywordtype">double</span> sqx = (double)qx*(<span class="keywordtype">double</span>)qx;</div>
<div class="line"><a name="l01840"></a><span class="lineno"> 1840</span>&#160;        <span class="keywordtype">double</span> sqy = (double)qy*(<span class="keywordtype">double</span>)qy;</div>
<div class="line"><a name="l01841"></a><span class="lineno"> 1841</span>&#160;        <span class="keywordtype">double</span> sqz = (double)qz*(<span class="keywordtype">double</span>)qz;</div>
<div class="line"><a name="l01842"></a><span class="lineno"> 1842</span>&#160;        m00 =  (templateType)(sqx - sqy - sqz + sqw); <span class="comment">// since sqw + sqx + sqy + sqz =1</span></div>
<div class="line"><a name="l01843"></a><span class="lineno"> 1843</span>&#160;        m11 = (templateType)(-sqx + sqy - sqz + sqw);</div>
<div class="line"><a name="l01844"></a><span class="lineno"> 1844</span>&#160;        m22 = (templateType)(-sqx - sqy + sqz + sqw);</div>
<div class="line"><a name="l01845"></a><span class="lineno"> 1845</span>&#160;</div>
<div class="line"><a name="l01846"></a><span class="lineno"> 1846</span>&#160;        <span class="keywordtype">double</span> tmp1 = (double)qx*(<span class="keywordtype">double</span>)qy;</div>
<div class="line"><a name="l01847"></a><span class="lineno"> 1847</span>&#160;        <span class="keywordtype">double</span> tmp2 = (double)qz*(<span class="keywordtype">double</span>)qw;</div>
<div class="line"><a name="l01848"></a><span class="lineno"> 1848</span>&#160;        m10 = (templateType)(2.0 * (tmp1 + tmp2));</div>
<div class="line"><a name="l01849"></a><span class="lineno"> 1849</span>&#160;        m01 = (templateType)(2.0 * (tmp1 - tmp2));</div>
<div class="line"><a name="l01850"></a><span class="lineno"> 1850</span>&#160;</div>
<div class="line"><a name="l01851"></a><span class="lineno"> 1851</span>&#160;        tmp1 = (double)qx*(<span class="keywordtype">double</span>)qz;</div>
<div class="line"><a name="l01852"></a><span class="lineno"> 1852</span>&#160;        tmp2 = (double)qy*(<span class="keywordtype">double</span>)qw;</div>
<div class="line"><a name="l01853"></a><span class="lineno"> 1853</span>&#160;        m20 =(templateType)(2.0 * (tmp1 - tmp2));</div>
<div class="line"><a name="l01854"></a><span class="lineno"> 1854</span>&#160;        m02 = (templateType)(2.0 * (tmp1 + tmp2));</div>
<div class="line"><a name="l01855"></a><span class="lineno"> 1855</span>&#160;        tmp1 = (double)qy*(<span class="keywordtype">double</span>)qz;</div>
<div class="line"><a name="l01856"></a><span class="lineno"> 1856</span>&#160;        tmp2 = (double)qx*(<span class="keywordtype">double</span>)qw;</div>
<div class="line"><a name="l01857"></a><span class="lineno"> 1857</span>&#160;        m21 = (templateType)(2.0 * (tmp1 + tmp2));</div>
<div class="line"><a name="l01858"></a><span class="lineno"> 1858</span>&#160;        m12 = (templateType)(2.0 * (tmp1 - tmp2));</div>
<div class="line"><a name="l01859"></a><span class="lineno"> 1859</span>&#160;</div>
<div class="line"><a name="l01860"></a><span class="lineno"> 1860</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l01861"></a><span class="lineno"> 1861</span>&#160;    }</div>
<div class="line"><a name="l01862"></a><span class="lineno"> 1862</span>&#160;</div>
<div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l01864"></a><span class="lineno"><a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#ad6a922afb55780662fd3a934075b63c3"> 1864</a></span>&#160;    <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a>&amp; <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#ad6a922afb55780662fd3a934075b63c3">operator&lt;&lt;</a>(<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a>&amp; out, <span class="keyword">const</span> templateType&amp; c)</div>
<div class="line"><a name="l01865"></a><span class="lineno"> 1865</span>&#160;    {</div>
<div class="line"><a name="l01866"></a><span class="lineno"> 1866</span>&#160;        out.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a2d1187ee508dc9d231d27aed1867d201" title="Write any integral type to a bitstream.">Write</a>(c);</div>
<div class="line"><a name="l01867"></a><span class="lineno"> 1867</span>&#160;        <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l01868"></a><span class="lineno"> 1868</span>&#160;    }</div>
<div class="line"><a name="l01869"></a><span class="lineno"> 1869</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> templateType&gt;</div>
<div class="line"><a name="l01870"></a><span class="lineno"><a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a5155dcf24269b0ca55c8f6e2337b1b9f"> 1870</a></span>&#160;    <a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a>&amp; <a class="code" href="../../dd/d30/namespace_s_l_net.xhtml#a5155dcf24269b0ca55c8f6e2337b1b9f">operator&gt;&gt;</a>(<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">BitStream</a>&amp; in, templateType&amp; c)</div>
<div class="line"><a name="l01871"></a><span class="lineno"> 1871</span>&#160;    {</div>
<div class="line"><a name="l01872"></a><span class="lineno"> 1872</span>&#160;        <span class="keywordtype">bool</span> success = in.<a class="code" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml#a59f38126d8d19bfd264a2e2cace7d1db" title="Read any integral type from a bitstream.">Read</a>(c);</div>
<div class="line"><a name="l01873"></a><span class="lineno"> 1873</span>&#160;        (void)success;</div>
<div class="line"><a name="l01874"></a><span class="lineno"> 1874</span>&#160;</div>
<div class="line"><a name="l01875"></a><span class="lineno"> 1875</span>&#160;        <a class="code" href="../../d8/db0/defines_8h.xhtml#afaa3647d29f5960651eb23fd3d2b5368">RakAssert</a>(success);</div>
<div class="line"><a name="l01876"></a><span class="lineno"> 1876</span>&#160;        <span class="keywordflow">return</span> in;</div>
<div class="line"><a name="l01877"></a><span class="lineno"> 1877</span>&#160;    }</div>
<div class="line"><a name="l01878"></a><span class="lineno"> 1878</span>&#160;</div>
<div class="line"><a name="l01879"></a><span class="lineno"> 1879</span>&#160;}</div>
<div class="line"><a name="l01880"></a><span class="lineno"> 1880</span>&#160;</div>
<div class="line"><a name="l01881"></a><span class="lineno"> 1881</span>&#160;<span class="preprocessor">#ifdef _MSC_VER</span></div>
<div class="line"><a name="l01882"></a><span class="lineno"> 1882</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma warning( pop )</span></div>
<div class="line"><a name="l01883"></a><span class="lineno"> 1883</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01884"></a><span class="lineno"> 1884</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01885"></a><span class="lineno"> 1885</span>&#160;<span class="preprocessor">#endif</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_74389ed8173ad57b461b9d623a1f3867.xhtml">Source</a></li><li class="navelem"><a class="el" href="../../dir_bbb90e3ef9167a594ae33323139a2595.xhtml">include</a></li><li class="navelem"><a class="el" href="../../dir_88467e66686deb9d3756fe4fc298e321.xhtml">slikenet</a></li><li class="navelem"><a class="el" href="../../d7/dc3/_bit_stream_8h.xhtml">BitStream.h</a></li>
    <li class="footer">Generated on Wed Aug 14 2019 22:09:46 for SLikeNet by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.2 </li>
  </ul>
</div>
</body>
</html>
