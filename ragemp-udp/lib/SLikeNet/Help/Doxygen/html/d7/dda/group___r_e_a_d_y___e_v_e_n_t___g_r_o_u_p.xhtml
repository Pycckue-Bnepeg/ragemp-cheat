<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>SLikeNet: ReadyEvent</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SLikeNet
   &#160;<span id="projectnumber">0.1.3</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="../../modules.xhtml"><span>Modules</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="../../files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#enum-members">Enumerations</a>  </div>
  <div class="headertitle">
<div class="title">ReadyEvent</div>  </div>
<div class="ingroups"><a class="el" href="../../df/db6/group___p_l_u_g_i_n_s___g_r_o_u_p.xhtml">Plugins</a></div></div><!--header-->
<div class="contents">

<p>Peer to peer synchronized ready and unready events.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:d6/dad/class_s_l_net_1_1_ready_event"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#d6/dad/class_s_l_net_1_1_ready_event">SLNet::ReadyEvent</a></td></tr>
<tr class="memdesc:d6/dad/class_s_l_net_1_1_ready_event"><td class="mdescLeft">&#160;</td><td class="mdescRight">Peer to peer synchronized ready and unready events.  <a href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#d6/dad/class_s_l_net_1_1_ready_event">More...</a><br/></td></tr>
<tr class="separator:d6/dad/class_s_l_net_1_1_ready_event"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:d5/d98/struct_s_l_net_1_1_ready_event_1_1_ready_event_node"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#d5/d98/struct_s_l_net_1_1_ready_event_1_1_ready_event_node">SLNet::ReadyEvent::ReadyEventNode</a></td></tr>
<tr class="separator:d5/d98/struct_s_l_net_1_1_ready_event_1_1_ready_event_node"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:d1/d2d/struct_s_l_net_1_1_ready_event_1_1_remote_system"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#d1/d2d/struct_s_l_net_1_1_ready_event_1_1_remote_system">SLNet::ReadyEvent::RemoteSystem</a></td></tr>
<tr class="separator:d1/d2d/struct_s_l_net_1_1_ready_event_1_1_remote_system"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:ga1d04a0c6284e814a187e5d337ba4760b"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#ga1d04a0c6284e814a187e5d337ba4760b">SLNet::ReadyEventSystemStatus</a> { <br/>
&#160;&#160;<a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#gga1d04a0c6284e814a187e5d337ba4760ba65b805617ce26f98c83f9f01f2b7776e">SLNet::RES_NOT_WAITING</a>, 
<a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#gga1d04a0c6284e814a187e5d337ba4760ba8cdc766b5ca3ef985b0ce1472e86b04d">SLNet::RES_WAITING</a>, 
<a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#gga1d04a0c6284e814a187e5d337ba4760baf1de8b9e87701bdc1eae68cb167e0908">SLNet::RES_READY</a>, 
<a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#gga1d04a0c6284e814a187e5d337ba4760bafec669ec341fcfbf449048e9938c6a36">SLNet::RES_ALL_READY</a>, 
<br/>
&#160;&#160;<a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#gga1d04a0c6284e814a187e5d337ba4760ba1d9a96d979d6772586ac327d0115cd44">SLNet::RES_UNKNOWN_EVENT</a>
<br/>
 }</td></tr>
<tr class="separator:ga1d04a0c6284e814a187e5d337ba4760b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Peer to peer synchronized ready and unready events. </p>
<hr/><h2 class="groupheader">Class Documentation</h2>
<a name="d6/dad/class_s_l_net_1_1_ready_event" id="d6/dad/class_s_l_net_1_1_ready_event"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">class SLNet::ReadyEvent</td>
        </tr>
      </table>
</div><div class="memdoc">
<div class="textblock"><p>Peer to peer synchronized ready and unready events. </p>
<p>For peer to peer networks in a fully connected mesh.<br/>
 Solves the problem of how to tell if all peers, relative to all other peers, are in a certain ready state.<br/>
 For example, if A is connected to B and C, A may see that B and C are ready, but does not know if B is ready to C, or vice-versa.<br/>
 This plugin uses two stages to solve that problem, first, everyone I know about is ready. Second, everyone I know about is ready to everyone they know about.<br/>
 The user will get ID_READY_EVENT_SET and ID_READY_EVENT_UNSET as the signal flag is set or unset<br/>
 The user will get ID_READY_EVENT_ALL_SET when all systems are done waiting for all other systems, in which case the event is considered complete, and no longer tracked.<br/>
 </p>
<dl class="section see"><dt>See Also</dt><dd>FullyConnectedMesh2 </dd></dl>

<p>Definition at line <a class="el" href="../../d0/d2e/_ready_event_8h_source.xhtml#l00068">68</a> of file <a class="el" href="../../d0/d2e/_ready_event_8h_source.xhtml">ReadyEvent.h</a>.</p>
</div><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="../../closed.png" alt="+"/> Inheritance diagram for SLNet::ReadyEvent:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d8/d26/class_s_l_net_1_1_ready_event__inherit__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<table class="memberdecls">
<tr><td colspan="2"><h3>Public Member Functions</h3></td></tr>
<tr class="memitem:af61f5df2c4511d69ae206cf095622a68"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#af61f5df2c4511d69ae206cf095622a68">ReadyEvent</a> ()</td></tr>
<tr class="separator:af61f5df2c4511d69ae206cf095622a68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab345ac9a2b93a5b3519ca8c480e2a1fb"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#ab345ac9a2b93a5b3519ca8c480e2a1fb">~ReadyEvent</a> ()</td></tr>
<tr class="separator:ab345ac9a2b93a5b3519ca8c480e2a1fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e01579dd142ff74b7196bce2811270d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a6e01579dd142ff74b7196bce2811270d">SetEvent</a> (int eventId, bool isReady)</td></tr>
<tr class="separator:a6e01579dd142ff74b7196bce2811270d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a746e2177f3be2ab4c69ca7fa449e8622"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a746e2177f3be2ab4c69ca7fa449e8622">ForceCompletion</a> (int eventId)</td></tr>
<tr class="separator:a746e2177f3be2ab4c69ca7fa449e8622"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a384acd813e76ca7a8dbcb071bbbb505c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a384acd813e76ca7a8dbcb071bbbb505c">DeleteEvent</a> (int eventId)</td></tr>
<tr class="separator:a384acd813e76ca7a8dbcb071bbbb505c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbd213ac47e2ecd97858f61edd72cef2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#acbd213ac47e2ecd97858f61edd72cef2">IsEventSet</a> (int eventId)</td></tr>
<tr class="separator:acbd213ac47e2ecd97858f61edd72cef2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00954c2c9d4a9fb37333e69db6819c53"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a00954c2c9d4a9fb37333e69db6819c53">IsEventCompletionProcessing</a> (int eventId) const </td></tr>
<tr class="separator:a00954c2c9d4a9fb37333e69db6819c53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0298a5081e8ca04963829444de6e2826"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a0298a5081e8ca04963829444de6e2826">IsEventCompleted</a> (int eventId) const </td></tr>
<tr class="separator:a0298a5081e8ca04963829444de6e2826"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa30099b01f19c451ab060880793ba633"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#aa30099b01f19c451ab060880793ba633">HasEvent</a> (int eventId)</td></tr>
<tr class="separator:aa30099b01f19c451ab060880793ba633"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcef0da487467377b77d67154f57bb7f"><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#abcef0da487467377b77d67154f57bb7f">GetEventListSize</a> (void) const </td></tr>
<tr class="separator:abcef0da487467377b77d67154f57bb7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c1553b33383a15e35ac672f7f468d23"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a6c1553b33383a15e35ac672f7f468d23">GetEventAtIndex</a> (unsigned index) const </td></tr>
<tr class="separator:a6c1553b33383a15e35ac672f7f468d23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a275d2410466836f6b8813516d74685fe"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a275d2410466836f6b8813516d74685fe">AddToWaitList</a> (int eventId, <a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> guid)</td></tr>
<tr class="separator:a275d2410466836f6b8813516d74685fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a257c91155d85d71fb9a23a5cfe6e62c1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a257c91155d85d71fb9a23a5cfe6e62c1">RemoveFromWaitList</a> (int eventId, <a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> guid)</td></tr>
<tr class="separator:a257c91155d85d71fb9a23a5cfe6e62c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44015b21ebac500ea8be4903c0cdfc26"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a44015b21ebac500ea8be4903c0cdfc26">IsInWaitList</a> (int eventId, <a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> guid)</td></tr>
<tr class="separator:a44015b21ebac500ea8be4903c0cdfc26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bc98e161c058b0d80d46a9868877fbe"><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a6bc98e161c058b0d80d46a9868877fbe">GetRemoteWaitListSize</a> (int eventId) const </td></tr>
<tr class="separator:a6bc98e161c058b0d80d46a9868877fbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9a8364cf00b7d8f23cd24dc0db59e9e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#ae9a8364cf00b7d8f23cd24dc0db59e9e">GetFromWaitListAtIndex</a> (int eventId, unsigned index) const </td></tr>
<tr class="separator:ae9a8364cf00b7d8f23cd24dc0db59e9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87c0c5353ba4fd722045d83a8f2a4bcd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#ga1d04a0c6284e814a187e5d337ba4760b">ReadyEventSystemStatus</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a87c0c5353ba4fd722045d83a8f2a4bcd">GetReadyStatus</a> (int eventId, <a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> guid)</td></tr>
<tr class="separator:a87c0c5353ba4fd722045d83a8f2a4bcd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90ceb0a8c7aae3bb7ff889889c5e9d37"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a90ceb0a8c7aae3bb7ff889889c5e9d37">SetSendChannel</a> (unsigned char newChannel)</td></tr>
<tr class="separator:a90ceb0a8c7aae3bb7ff889889c5e9d37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#db/d5e/class_s_l_net_1_1_plugin_interface2">SLNet::PluginInterface2</a></td></tr>
<tr class="memitem:a2df222e1167c6290dd6d1af585154e73 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a2df222e1167c6290dd6d1af585154e73">PluginInterface2</a> ()</td></tr>
<tr class="separator:a2df222e1167c6290dd6d1af585154e73 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae97f06b1fcaa2cc45de4394b89ba3a41 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#ae97f06b1fcaa2cc45de4394b89ba3a41">~PluginInterface2</a> ()</td></tr>
<tr class="separator:ae97f06b1fcaa2cc45de4394b89ba3a41 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe33b32b1729289a809ada304227cbd8 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#afe33b32b1729289a809ada304227cbd8">OnAttach</a> (void)</td></tr>
<tr class="memdesc:afe33b32b1729289a809ada304227cbd8 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when the interface is attached.  <a href="#afe33b32b1729289a809ada304227cbd8"></a><br/></td></tr>
<tr class="separator:afe33b32b1729289a809ada304227cbd8 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad23dec19f2567a5b64c2108f73be0e4 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#aad23dec19f2567a5b64c2108f73be0e4">OnDetach</a> (void)</td></tr>
<tr class="memdesc:aad23dec19f2567a5b64c2108f73be0e4 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when the interface is detached.  <a href="#aad23dec19f2567a5b64c2108f73be0e4"></a><br/></td></tr>
<tr class="separator:aad23dec19f2567a5b64c2108f73be0e4 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa181a0ff58765c3d7878ac6dfd5e5a10 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#aa181a0ff58765c3d7878ac6dfd5e5a10">Update</a> (void)</td></tr>
<tr class="memdesc:aa181a0ff58765c3d7878ac6dfd5e5a10 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update is called every time a packet is checked for .  <a href="#aa181a0ff58765c3d7878ac6dfd5e5a10"></a><br/></td></tr>
<tr class="separator:aa181a0ff58765c3d7878ac6dfd5e5a10 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9943065789510f76737975203f4d05bc inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a9943065789510f76737975203f4d05bc">OnRakPeerStartup</a> (void)</td></tr>
<tr class="memdesc:a9943065789510f76737975203f4d05bc inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when <a class="el" href="../../d5/dbf/class_s_l_net_1_1_rak_peer.xhtml" title="Main interface for network communications.">RakPeer</a> is initialized.  <a href="#a9943065789510f76737975203f4d05bc"></a><br/></td></tr>
<tr class="separator:a9943065789510f76737975203f4d05bc inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a225b5a285e1cf2b0f9b03f6133c409e8 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a225b5a285e1cf2b0f9b03f6133c409e8">OnNewConnection</a> (const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;systemAddress, <a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> rakNetGUID, bool isIncoming)</td></tr>
<tr class="separator:a225b5a285e1cf2b0f9b03f6133c409e8 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa95d4714e97480ac51a87b6b34161db7 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#aa95d4714e97480ac51a87b6b34161db7">OnFailedConnectionAttempt</a> (<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *packet, <a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#ga111ccf3400cb3830cc7ef8c042c9b26c">PI2_FailedConnectionAttemptReason</a> failedConnectionAttemptReason)</td></tr>
<tr class="separator:aa95d4714e97480ac51a87b6b34161db7 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bed8468dd7d3624c9d8b6e17737ba77 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a4bed8468dd7d3624c9d8b6e17737ba77">UsesReliabilityLayer</a> (void) const </td></tr>
<tr class="separator:a4bed8468dd7d3624c9d8b6e17737ba77 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd6172fa97f484a0b874ebbe4f32de0e inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#acd6172fa97f484a0b874ebbe4f32de0e">OnDirectSocketSend</a> (const char *data, const <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> bitsUsed, <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> remoteSystemAddress)</td></tr>
<tr class="separator:acd6172fa97f484a0b874ebbe4f32de0e inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe625ccabbbfea5b8d0dd717748ef857 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#afe625ccabbbfea5b8d0dd717748ef857">OnDirectSocketReceive</a> (const char *data, const <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> bitsUsed, <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> remoteSystemAddress)</td></tr>
<tr class="separator:afe625ccabbbfea5b8d0dd717748ef857 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a775d3c4bf7e924a510becfa85b3f1f00 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a775d3c4bf7e924a510becfa85b3f1f00">OnReliabilityLayerNotification</a> (const char *errorMessage, const <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> bitsUsed, <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> remoteSystemAddress, bool isError)</td></tr>
<tr class="separator:a775d3c4bf7e924a510becfa85b3f1f00 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb5ebc232cc45b62ea61ee7cde758a22 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#abb5ebc232cc45b62ea61ee7cde758a22">OnInternalPacket</a> (<a class="el" href="../../d9/d9a/struct_s_l_net_1_1_internal_packet.xhtml">InternalPacket</a> *internalPacket, unsigned frameNumber, <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> remoteSystemAddress, <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a> time, int isSend)</td></tr>
<tr class="separator:abb5ebc232cc45b62ea61ee7cde758a22 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc1f6b096fd6d98064a1f1a4af8500d1 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#acc1f6b096fd6d98064a1f1a4af8500d1">OnAck</a> (unsigned int messageNumber, <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> remoteSystemAddress, <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a26b4eb1be8467562f791e3c5af4a67ae">SLNet::TimeMS</a> time)</td></tr>
<tr class="separator:acc1f6b096fd6d98064a1f1a4af8500d1 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b7373aa27360743e697c5afa38fc541 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a6b7373aa27360743e697c5afa38fc541">OnPushBackPacket</a> (const char *data, const <a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a227d2a5f9683a34d9d1e70772fd556ec">BitSize_t</a> bitsUsed, <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> remoteSystemAddress)</td></tr>
<tr class="separator:a6b7373aa27360743e697c5afa38fc541 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd3c54782ccc647432571e5e5bae5e48 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../da/d27/class_s_l_net_1_1_rak_peer_interface.xhtml">RakPeerInterface</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#acd3c54782ccc647432571e5e5bae5e48">GetRakPeerInterface</a> (void) const </td></tr>
<tr class="separator:acd3c54782ccc647432571e5e5bae5e48 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a917f7caf3bcd763620cce934761aa8a8 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a917f7caf3bcd763620cce934761aa8a8">GetMyGUIDUnified</a> (void) const </td></tr>
<tr class="separator:a917f7caf3bcd763620cce934761aa8a8 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a462426e3996a2f1038cac5505ed11fca inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a462426e3996a2f1038cac5505ed11fca">SetRakPeerInterface</a> (<a class="el" href="../../da/d27/class_s_l_net_1_1_rak_peer_interface.xhtml">RakPeerInterface</a> *ptr)</td></tr>
<tr class="separator:a462426e3996a2f1038cac5505ed11fca inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa278807355590c171e787be943dbb520 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#aa278807355590c171e787be943dbb520">SetTCPInterface</a> (<a class="el" href="../../df/dd8/class_s_l_net_1_1_t_c_p_interface.xhtml">TCPInterface</a> *ptr)</td></tr>
<tr class="separator:aa278807355590c171e787be943dbb520 inherit pub_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><h3>Static Public Member Functions</h3></td></tr>
<tr class="memitem:a1dde46e4ce4199ddf10707df8f317f2f"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a1dde46e4ce4199ddf10707df8f317f2f">RemoteSystemCompByGuid</a> (const <a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> &amp;key, const <a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#d1/d2d/struct_s_l_net_1_1_ready_event_1_1_remote_system">RemoteSystem</a> &amp;data)</td></tr>
<tr class="separator:a1dde46e4ce4199ddf10707df8f317f2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a489db7126d488ba04bda51fe4c85d12b"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a489db7126d488ba04bda51fe4c85d12b">ReadyEventNodeComp</a> (const int &amp;key, <a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#d5/d98/struct_s_l_net_1_1_ready_event_1_1_ready_event_node">ReadyEvent::ReadyEventNode</a> *const &amp;data)</td></tr>
<tr class="separator:a489db7126d488ba04bda51fe4c85d12b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><h3>Protected Member Functions</h3></td></tr>
<tr class="memitem:a9e4aa7e7e2bbd066e9615a604cb0acca"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#ga5c8f613a7c294e0b96deccbdabc38f18">PluginReceiveResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a9e4aa7e7e2bbd066e9615a604cb0acca">OnReceive</a> (<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *packet)</td></tr>
<tr class="separator:a9e4aa7e7e2bbd066e9615a604cb0acca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3998f6b91c14c2c6f060cc6fbbb96487"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a3998f6b91c14c2c6f060cc6fbbb96487">OnClosedConnection</a> (const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;systemAddress, <a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> rakNetGUID, <a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#ga4d3ac5ca8821fadad6d22d0267e06803">PI2_LostConnectionReason</a> lostConnectionReason)</td></tr>
<tr class="separator:a3998f6b91c14c2c6f060cc6fbbb96487"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebe72a6c1e27be5bdd0551b275865713"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#aebe72a6c1e27be5bdd0551b275865713">OnRakPeerShutdown</a> (void)</td></tr>
<tr class="memdesc:aebe72a6c1e27be5bdd0551b275865713"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when <a class="el" href="../../d5/dbf/class_s_l_net_1_1_rak_peer.xhtml" title="Main interface for network communications.">RakPeer</a> is shutdown.  <a href="#aebe72a6c1e27be5bdd0551b275865713"></a><br/></td></tr>
<tr class="separator:aebe72a6c1e27be5bdd0551b275865713"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7359206213a9be60e454fca34e84fb35"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a7359206213a9be60e454fca34e84fb35">Clear</a> (void)</td></tr>
<tr class="separator:a7359206213a9be60e454fca34e84fb35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a2dd2c97fcd6444a81ab09192f0d92a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a4a2dd2c97fcd6444a81ab09192f0d92a">SendReadyStateQuery</a> (unsigned eventId, <a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> guid)</td></tr>
<tr class="separator:a4a2dd2c97fcd6444a81ab09192f0d92a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8bb948222d68e75a9b870593a9edcc21"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a8bb948222d68e75a9b870593a9edcc21">SendReadyUpdate</a> (unsigned eventIndex, unsigned systemIndex, bool forceIfNotDefault)</td></tr>
<tr class="separator:a8bb948222d68e75a9b870593a9edcc21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8e55b1a8f0c066d26b267daeaa4c12b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#ae8e55b1a8f0c066d26b267daeaa4c12b">BroadcastReadyUpdate</a> (unsigned eventIndex, bool forceIfNotDefault)</td></tr>
<tr class="separator:ae8e55b1a8f0c066d26b267daeaa4c12b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e3330f0989ea0b3444e3897322bbfee"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a2e3330f0989ea0b3444e3897322bbfee">RemoveFromAllLists</a> (<a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> guid)</td></tr>
<tr class="separator:a2e3330f0989ea0b3444e3897322bbfee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f3ae9ab621884fea9ce591edb642ee8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a7f3ae9ab621884fea9ce591edb642ee8">OnReadyEventQuery</a> (<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *packet)</td></tr>
<tr class="separator:a7f3ae9ab621884fea9ce591edb642ee8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba5a147211b9ef2ea3ae1e4d19bfaed7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#aba5a147211b9ef2ea3ae1e4d19bfaed7">PushCompletionPacket</a> (unsigned eventId)</td></tr>
<tr class="separator:aba5a147211b9ef2ea3ae1e4d19bfaed7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05ea6afb0d98bd398c10742ceb573a20"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a05ea6afb0d98bd398c10742ceb573a20">AddToWaitListInternal</a> (unsigned eventIndex, <a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> guid)</td></tr>
<tr class="separator:a05ea6afb0d98bd398c10742ceb573a20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9946147819e1398393804d8db7c8f0d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#aa9946147819e1398393804d8db7c8f0d">OnReadyEventForceAllSet</a> (<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *packet)</td></tr>
<tr class="separator:aa9946147819e1398393804d8db7c8f0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3dcbc108af9a46c597e0ca0725dd400a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a3dcbc108af9a46c597e0ca0725dd400a">OnReadyEventPacketUpdate</a> (<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *packet)</td></tr>
<tr class="separator:a3dcbc108af9a46c597e0ca0725dd400a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b6ad75b0602bbce1b100c197263357f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a7b6ad75b0602bbce1b100c197263357f">UpdateReadyStatus</a> (unsigned eventIndex)</td></tr>
<tr class="separator:a7b6ad75b0602bbce1b100c197263357f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94ad227c7d04af32364b6ad08e866d4b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a94ad227c7d04af32364b6ad08e866d4b">IsEventCompletedByIndex</a> (unsigned eventIndex) const </td></tr>
<tr class="separator:a94ad227c7d04af32364b6ad08e866d4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ce0b09d6a859b8b945855884fff36fc"><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a8ce0b09d6a859b8b945855884fff36fc">CreateNewEvent</a> (int eventId, bool isReady)</td></tr>
<tr class="separator:a8ce0b09d6a859b8b945855884fff36fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e614fb2c0633116f2dd746f25a52f71"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a6e614fb2c0633116f2dd746f25a52f71">SetEventByIndex</a> (int eventIndex, bool isReady)</td></tr>
<tr class="separator:a6e614fb2c0633116f2dd746f25a52f71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p')"><img src="../../closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#db/d5e/class_s_l_net_1_1_plugin_interface2">SLNet::PluginInterface2</a></td></tr>
<tr class="memitem:aa9c79c0d16ece39114231d680190d39a inherit pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#aa9c79c0d16ece39114231d680190d39a">SendUnified</a> (const <a class="el" href="../../df/d75/class_s_l_net_1_1_bit_stream.xhtml">SLNet::BitStream</a> *bitStream, <a class="el" href="../../d7/d03/_packet_priority_8h.xhtml#a659378374e516180f93640c79f59705c">PacketPriority</a> priority, <a class="el" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7e">PacketReliability</a> reliability, char orderingChannel, const <a class="el" href="../../d3/da8/struct_s_l_net_1_1_address_or_g_u_i_d.xhtml">AddressOrGUID</a> systemIdentifier, bool broadcast)</td></tr>
<tr class="separator:aa9c79c0d16ece39114231d680190d39a inherit pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30f7650d8045852663c46dc72c740043 inherit pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a30f7650d8045852663c46dc72c740043">SendUnified</a> (const char *data, const int length, <a class="el" href="../../d7/d03/_packet_priority_8h.xhtml#a659378374e516180f93640c79f59705c">PacketPriority</a> priority, <a class="el" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7e">PacketReliability</a> reliability, char orderingChannel, const <a class="el" href="../../d3/da8/struct_s_l_net_1_1_address_or_g_u_i_d.xhtml">AddressOrGUID</a> systemIdentifier, bool broadcast)</td></tr>
<tr class="separator:a30f7650d8045852663c46dc72c740043 inherit pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0e4aabc93a77dfb2ec7af08710961b5 inherit pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#ad0e4aabc93a77dfb2ec7af08710961b5">SendListUnified</a> (const char **data, const int *lengths, const int numParameters, <a class="el" href="../../d7/d03/_packet_priority_8h.xhtml#a659378374e516180f93640c79f59705c">PacketPriority</a> priority, <a class="el" href="../../d7/d03/_packet_priority_8h.xhtml#ae41fa01235e99dced384d137fa874a7e">PacketReliability</a> reliability, char orderingChannel, const <a class="el" href="../../d3/da8/struct_s_l_net_1_1_address_or_g_u_i_d.xhtml">AddressOrGUID</a> systemIdentifier, bool broadcast)</td></tr>
<tr class="separator:ad0e4aabc93a77dfb2ec7af08710961b5 inherit pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed235e7933ca7f30448eb9c91cefab63 inherit pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#aed235e7933ca7f30448eb9c91cefab63">AllocatePacketUnified</a> (unsigned dataSize)</td></tr>
<tr class="separator:aed235e7933ca7f30448eb9c91cefab63 inherit pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00bb796b830ec2130b4c11ed13c3e838 inherit pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a00bb796b830ec2130b4c11ed13c3e838">PushBackPacketUnified</a> (<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *packet, bool pushAtHead)</td></tr>
<tr class="separator:a00bb796b830ec2130b4c11ed13c3e838 inherit pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71b375de9093e4116b57bf3780d1615b inherit pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a71b375de9093e4116b57bf3780d1615b">DeallocPacketUnified</a> (<a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *packet)</td></tr>
<tr class="separator:a71b375de9093e4116b57bf3780d1615b inherit pro_methods_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><h3>Protected Attributes</h3></td></tr>
<tr class="memitem:af249d18a3d8693986492875a81a6f81d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml">DataStructures::OrderedList</a><br class="typebreak"/>
&lt; int, <a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#d5/d98/struct_s_l_net_1_1_ready_event_1_1_ready_event_node">ReadyEventNode</a> <br class="typebreak"/>
*, <a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a489db7126d488ba04bda51fe4c85d12b">ReadyEvent::ReadyEventNodeComp</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#af249d18a3d8693986492875a81a6f81d">readyEventNodeList</a></td></tr>
<tr class="separator:af249d18a3d8693986492875a81a6f81d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07c3738a3a5c6a2a9e91f23dbf958317"><td class="memItemLeft" align="right" valign="top">unsigned char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a07c3738a3a5c6a2a9e91f23dbf958317">channel</a></td></tr>
<tr class="separator:a07c3738a3a5c6a2a9e91f23dbf958317"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p')"><img src="../../closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#db/d5e/class_s_l_net_1_1_plugin_interface2">SLNet::PluginInterface2</a></td></tr>
<tr class="memitem:adac8deadf450a4e1d69c11b1db588bec inherit pro_attribs_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../da/d27/class_s_l_net_1_1_rak_peer_interface.xhtml">RakPeerInterface</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#adac8deadf450a4e1d69c11b1db588bec">rakPeerInterface</a></td></tr>
<tr class="separator:adac8deadf450a4e1d69c11b1db588bec inherit pro_attribs_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac298ef92904df807a3248e380e8edf43 inherit pro_attribs_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../df/dd8/class_s_l_net_1_1_t_c_p_interface.xhtml">TCPInterface</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#ac298ef92904df807a3248e380e8edf43">tcpInterface</a></td></tr>
<tr class="separator:ac298ef92904df807a3248e380e8edf43 inherit pro_attribs_group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h4 class="groupheader">Constructor &amp; Destructor Documentation</h4>
<a class="anchor" id="af61f5df2c4511d69ae206cf095622a68"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SLNet::ReadyEvent::ReadyEvent </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="ab345ac9a2b93a5b3519ca8c480e2a1fb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual SLNet::ReadyEvent::~ReadyEvent </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h4 class="groupheader">Member Function Documentation</h4>
<a class="anchor" id="a275d2410466836f6b8813516d74685fe"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::ReadyEvent::AddToWaitList </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>eventId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td>
          <td class="paramname"><em>guid</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Adds a system to wait for to signal an event before considering the event complete and returning ID_READY_EVENT_ALL_SET. As we add systems, if this event was previously set to true with SetEvent, these systems will get ID_READY_EVENT_SET. As these systems disconnect (directly or indirectly through the router) they are removed. </p>
<dl class="section note"><dt>Note</dt><dd>If the event completion process has already started, you cannot add more systems, as this would cause the completion process to fail </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">eventId</td><td>A user-defined number previously passed to SetEvent that has not yet completed </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">guid</td><td>An address to wait for event replies from. Pass UNASSIGNED_SYSTEM_ADDRESS for all currently connected systems. Until all systems in this list have called SetEvent with this ID and true, and have this system in the list, we won't get ID_READY_EVENT_COMPLETE </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True on success, false on unknown eventId (this should be considered an error) </dd></dl>

</div>
</div>
<a class="anchor" id="a05ea6afb0d98bd398c10742ceb573a20"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::ReadyEvent::AddToWaitListInternal </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>eventIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td>
          <td class="paramname"><em>guid</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="ae8e55b1a8f0c066d26b267daeaa4c12b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReadyEvent::BroadcastReadyUpdate </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>eventIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>forceIfNotDefault</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a7359206213a9be60e454fca34e84fb35"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReadyEvent::Clear </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a8ce0b09d6a859b8b945855884fff36fc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned SLNet::ReadyEvent::CreateNewEvent </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>eventId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>isReady</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a384acd813e76ca7a8dbcb071bbbb505c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::ReadyEvent::DeleteEvent </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>eventId</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Deletes an event. We will no longer wait for this event, and any systems that we know have set the event will be forgotten. Call this to clear memory when events are completed and you know you will never need them again. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">eventId</td><td>A user-defined identifier </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True on success. False (failure) on unknown eventId </dd></dl>

</div>
</div>
<a class="anchor" id="a746e2177f3be2ab4c69ca7fa449e8622"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReadyEvent::ForceCompletion </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>eventId</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>When systems can call <a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a6e01579dd142ff74b7196bce2811270d">SetEvent()</a> with isReady==false, it is possible for one system to return true from <a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a0298a5081e8ca04963829444de6e2826">IsEventCompleted()</a> while the other systems return false This can occur if a system <a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a6e01579dd142ff74b7196bce2811270d">SetEvent()</a> with isReady==false while the completion message is still being transmitted. If your game has the situation where some action should be taken on all systems when <a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a0298a5081e8ca04963829444de6e2826">IsEventCompleted()</a> is true for any system, then call <a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a746e2177f3be2ab4c69ca7fa449e8622">ForceCompletion()</a> when the action begins. This will force all systems to return true from <a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a0298a5081e8ca04963829444de6e2826">IsEventCompleted()</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">eventId</td><td>A user-defined identifier to immediately set as completed </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6c1553b33383a15e35ac672f7f468d23"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int SLNet::ReadyEvent::GetEventAtIndex </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the event ID stored at a particular index. EventIDs are stored sorted from least to greatest. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Index into the array, from 0 to <a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#abcef0da487467377b77d67154f57bb7f">GetEventListSize()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The event ID stored at a particular index </dd></dl>

</div>
</div>
<a class="anchor" id="abcef0da487467377b77d67154f57bb7f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned SLNet::ReadyEvent::GetEventListSize </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the total number of events stored in the system. </p>
<dl class="section return"><dt>Returns</dt><dd>The total number of events stored in the system. </dd></dl>

</div>
</div>
<a class="anchor" id="ae9a8364cf00b7d8f23cd24dc0db59e9e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> SLNet::ReadyEvent::GetFromWaitListAtIndex </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>eventId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the system address of a system at a particular index, for this event. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">eventId</td><td>A user-defined identifier </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Index into the array, from 0 to GetWaitListSize() </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The system address of a system at a particular index, for this event. </dd></dl>

</div>
</div>
<a class="anchor" id="a87c0c5353ba4fd722045d83a8f2a4bcd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#ga1d04a0c6284e814a187e5d337ba4760b">ReadyEventSystemStatus</a> SLNet::ReadyEvent::GetReadyStatus </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>eventId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td>
          <td class="paramname"><em>guid</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>For a remote system, find out what their ready status is (waiting, signaled, complete). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">eventId</td><td>A user-defined identifier </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">guid</td><td>Which system we are checking up on </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The status of this system, for this particular event. </dd></dl>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#ga1d04a0c6284e814a187e5d337ba4760b">ReadyEventSystemStatus</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a6bc98e161c058b0d80d46a9868877fbe"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned SLNet::ReadyEvent::GetRemoteWaitListSize </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>eventId</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the total number of systems we are waiting on for this event. Does not include yourself </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">eventId</td><td>A user-defined identifier </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The total number of systems we are waiting on for this event. </dd></dl>

</div>
</div>
<a class="anchor" id="aa30099b01f19c451ab060880793ba633"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::ReadyEvent::HasEvent </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>eventId</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns if this is a known event. Events may be known even if we never ourselves referenced them with SetEvent, because other systems created them via ID_READY_EVENT_SET. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">eventId</td><td>A user-defined identifier </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if we have this event, false otherwise </dd></dl>

</div>
</div>
<a class="anchor" id="a0298a5081e8ca04963829444de6e2826"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::ReadyEvent::IsEventCompleted </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>eventId</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns if the wait list is a subset of the completion list. Call this after all systems you want to wait for have been added with AddToWaitList If you are waiting for a specific number of systems (such as players later connecting), also check GetRemoteWaitListSize(eventId) to be equal to 1 less than the total number of participants. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">eventId</td><td>A user-defined identifier </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True on completion. False (failure) on unknown eventId, or the set is not completed. </dd></dl>

</div>
</div>
<a class="anchor" id="a94ad227c7d04af32364b6ad08e866d4b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::ReadyEvent::IsEventCompletedByIndex </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>eventIndex</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a00954c2c9d4a9fb37333e69db6819c53"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::ReadyEvent::IsEventCompletionProcessing </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>eventId</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns if the event is about to be ready and we are negotiating the final packets. This will usually only be true for a very short time, after which IsEventCompleted should return true. While this is true you cannot add to the wait list, or <a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a6e01579dd142ff74b7196bce2811270d">SetEvent()</a> isReady to false anymore. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">eventId</td><td>A user-defined identifier </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if any other system has completed processing. Will always be true if <a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a0298a5081e8ca04963829444de6e2826">IsEventCompleted()</a> is true </dd></dl>

</div>
</div>
<a class="anchor" id="acbd213ac47e2ecd97858f61edd72cef2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::ReadyEvent::IsEventSet </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>eventId</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns what was passed to <a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a6e01579dd142ff74b7196bce2811270d">SetEvent()</a> </p>
<dl class="section return"><dt>Returns</dt><dd>The value of isReady passed to <a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a6e01579dd142ff74b7196bce2811270d">SetEvent()</a>. Also returns false on unknown event. </dd></dl>

</div>
</div>
<a class="anchor" id="a44015b21ebac500ea8be4903c0cdfc26"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::ReadyEvent::IsInWaitList </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>eventId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td>
          <td class="paramname"><em>guid</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns if a particular system is waiting on a particular event. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">eventId</td><td>A user-defined identifier </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">guid</td><td>The system we are checking up on </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if this system is waiting on this event, false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a3998f6b91c14c2c6f060cc6fbbb96487"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::ReadyEvent::OnClosedConnection </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d8/dbe/struct_s_l_net_1_1_system_address.xhtml">SystemAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>systemAddress</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td>
          <td class="paramname"><em>rakNetGUID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#ga4d3ac5ca8821fadad6d22d0267e06803">PI2_LostConnectionReason</a>&#160;</td>
          <td class="paramname"><em>lostConnectionReason</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Called when a connection is dropped because the user called <a class="el" href="../../d5/dbf/class_s_l_net_1_1_rak_peer.xhtml#adda8200ca715f0d15db7d2e599365408" title="Close the connection to another host (if we initiated the connection it will disconnect, if they did it will kick them out).">RakPeer::CloseConnection()</a> for a particular system </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">systemAddress</td><td>The system whose connection was closed </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rakNetGuid</td><td>The guid of the specified system </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">lostConnectionReason</td><td>How the connection was closed: manually, connection lost, or notification of disconnection </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented from <a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a95cb6fb37ada42840dafdbf6ffe078e4">SLNet::PluginInterface2</a>.</p>

</div>
</div>
<a class="anchor" id="aebe72a6c1e27be5bdd0551b275865713"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SLNet::ReadyEvent::OnRakPeerShutdown </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when <a class="el" href="../../d5/dbf/class_s_l_net_1_1_rak_peer.xhtml" title="Main interface for network communications.">RakPeer</a> is shutdown. </p>

<p>Reimplemented from <a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#aea8a90c4078ecc0db77545e44531b1de">SLNet::PluginInterface2</a>.</p>

</div>
</div>
<a class="anchor" id="aa9946147819e1398393804d8db7c8f0d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReadyEvent::OnReadyEventForceAllSet </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *&#160;</td>
          <td class="paramname"><em>packet</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a3dcbc108af9a46c597e0ca0725dd400a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReadyEvent::OnReadyEventPacketUpdate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *&#160;</td>
          <td class="paramname"><em>packet</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a7f3ae9ab621884fea9ce591edb642ee8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReadyEvent::OnReadyEventQuery </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *&#160;</td>
          <td class="paramname"><em>packet</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a9e4aa7e7e2bbd066e9615a604cb0acca"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#ga5c8f613a7c294e0b96deccbdabc38f18">PluginReceiveResult</a> SLNet::ReadyEvent::OnReceive </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#d8/d23/struct_s_l_net_1_1_packet">Packet</a> *&#160;</td>
          <td class="paramname"><em>packet</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>OnReceive is called for every packet. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">packet</td><td>the packet that is being returned to the user </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True to allow the game and other plugins to get this message, false to absorb it </dd></dl>

<p>Reimplemented from <a class="el" href="../../de/d14/group___p_l_u_g_i_n___i_n_t_e_r_f_a_c_e___g_r_o_u_p.xhtml#a3a401ad0acd5d326d7307e2f4fce20ea">SLNet::PluginInterface2</a>.</p>

</div>
</div>
<a class="anchor" id="aba5a147211b9ef2ea3ae1e4d19bfaed7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReadyEvent::PushCompletionPacket </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>eventId</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a489db7126d488ba04bda51fe4c85d12b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int SLNet::ReadyEvent::ReadyEventNodeComp </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#d5/d98/struct_s_l_net_1_1_ready_event_1_1_ready_event_node">ReadyEvent::ReadyEventNode</a> *const &amp;&#160;</td>
          <td class="paramname"><em>data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a1dde46e4ce4199ddf10707df8f317f2f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int SLNet::ReadyEvent::RemoteSystemCompByGuid </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a> &amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#d1/d2d/struct_s_l_net_1_1_ready_event_1_1_remote_system">RemoteSystem</a> &amp;&#160;</td>
          <td class="paramname"><em>data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a2e3330f0989ea0b3444e3897322bbfee"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReadyEvent::RemoveFromAllLists </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td>
          <td class="paramname"><em>guid</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a257c91155d85d71fb9a23a5cfe6e62c1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::ReadyEvent::RemoveFromWaitList </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>eventId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td>
          <td class="paramname"><em>guid</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Removes systems from the wait list, which should have been previously added with AddToWaitList </p>
<dl class="section note"><dt>Note</dt><dd>Systems that directly or indirectly disconnect from us are automatically removed from the wait list </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">guid</td><td>The system to remove from the wait list. Pass UNASSIGNED_RAKNET_GUID for all currently connected systems. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True on success, false on unknown eventId (this should be considered an error) </dd></dl>

</div>
</div>
<a class="anchor" id="a4a2dd2c97fcd6444a81ab09192f0d92a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReadyEvent::SendReadyStateQuery </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>eventId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>&#160;</td>
          <td class="paramname"><em>guid</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a8bb948222d68e75a9b870593a9edcc21"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReadyEvent::SendReadyUpdate </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>eventIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>systemIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>forceIfNotDefault</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a6e01579dd142ff74b7196bce2811270d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::ReadyEvent::SetEvent </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>eventId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>isReady</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sets or updates the initial ready state for our local system. If eventId is an unknown event the event is created. If eventId was previously used and you want to reuse it, call DeleteEvent first, or else you will keep the same event signals from before Systems previously or later added through <a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a275d2410466836f6b8813516d74685fe">AddToWaitList()</a> with the same <em>eventId</em> when isReady=true will get ID_READY_EVENT_SET Systems previously added through AddToWaitList with the same <em>eventId</em> will get ID_READY_EVENT_UNSET For both ID_READY_EVENT_SET and ID_READY_EVENT_UNSET, eventId is encoded in bytes 1 through 1+sizeof(int) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">eventId</td><td>A user-defined identifier to wait on. This can be a sequence counter, an event identifier, or anything else you want. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">isReady</td><td>True to signal we are ready to proceed with this event, false to unsignal </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>False if event status is ID_READY_EVENT_FORCE_ALL_SET, or if we are setting to a status we are already in (no change). Otherwise true </dd></dl>

</div>
</div>
<a class="anchor" id="a6e614fb2c0633116f2dd746f25a52f71"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool SLNet::ReadyEvent::SetEventByIndex </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>eventIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>isReady</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a90ceb0a8c7aae3bb7ff889889c5e9d37"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReadyEvent::SetSendChannel </td>
          <td>(</td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>newChannel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>This channel will be used for all <a class="el" href="../../d5/dbf/class_s_l_net_1_1_rak_peer.xhtml#a4e1766fd244af7941b327e8751a4e9ee" title="Sends a block of data to the specified system that you are connected to.">RakPeer::Send</a> calls </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">newChannel</td><td>The channel to use for internal <a class="el" href="../../d5/dbf/class_s_l_net_1_1_rak_peer.xhtml#a4e1766fd244af7941b327e8751a4e9ee" title="Sends a block of data to the specified system that you are connected to.">RakPeer::Send</a> calls from this system. Defaults to 0. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7b6ad75b0602bbce1b100c197263357f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SLNet::ReadyEvent::UpdateReadyStatus </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>eventIndex</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h4 class="groupheader">Member Data Documentation</h4>
<a class="anchor" id="a07c3738a3a5c6a2a9e91f23dbf958317"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned char SLNet::ReadyEvent::channel</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d0/d2e/_ready_event_8h_source.xhtml#l00240">240</a> of file <a class="el" href="../../d0/d2e/_ready_event_8h_source.xhtml">ReadyEvent.h</a>.</p>

</div>
</div>
<a class="anchor" id="af249d18a3d8693986492875a81a6f81d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/dfc/class_data_structures_1_1_ordered_list.xhtml">DataStructures::OrderedList</a>&lt;int, <a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#d5/d98/struct_s_l_net_1_1_ready_event_1_1_ready_event_node">ReadyEventNode</a>*, <a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a489db7126d488ba04bda51fe4c85d12b">ReadyEvent::ReadyEventNodeComp</a>&gt; SLNet::ReadyEvent::readyEventNodeList</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="../../d0/d2e/_ready_event_8h_source.xhtml#l00239">239</a> of file <a class="el" href="../../d0/d2e/_ready_event_8h_source.xhtml">ReadyEvent.h</a>.</p>

</div>
</div>

</div>
</div>
<a name="d5/d98/struct_s_l_net_1_1_ready_event_1_1_ready_event_node" id="d5/d98/struct_s_l_net_1_1_ready_event_1_1_ready_event_node"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct SLNet::ReadyEvent::ReadyEventNode</td>
        </tr>
      </table>
</div><div class="memdoc">
<div class="textblock">
<p>Definition at line <a class="el" href="../../d0/d2e/_ready_event_8h_source.xhtml#l00194">194</a> of file <a class="el" href="../../d0/d2e/_ready_event_8h_source.xhtml">ReadyEvent.h</a>.</p>
</div><table class="fieldtable">
<tr><th colspan="3">Class Members</th></tr>
<tr><td class="fieldtype">
<a class="anchor" id="aa32b27837bea68e15c4cc93d857da7f4"></a>int</td>
<td class="fieldname">
eventId</td>
<td class="fielddoc">
</td></tr>
<tr><td class="fieldtype">
<a class="anchor" id="a676256bd38613007f9c634628cd39313"></a><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a5b5b9eb3be9ad636af02da44b718a75f">MessageID</a></td>
<td class="fieldname">
eventStatus</td>
<td class="fielddoc">
</td></tr>
<tr><td class="fieldtype">
<a class="anchor" id="a2c9d1f93c055061d69e36bf57996d357"></a>OrderedList&lt; <a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a>, <br class="typebreak"/>
<a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#d1/d2d/struct_s_l_net_1_1_ready_event_1_1_remote_system">RemoteSystem</a>, <br class="typebreak"/>
<a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a1dde46e4ce4199ddf10707df8f317f2f">RemoteSystemCompByGuid</a> &gt;</td>
<td class="fieldname">
systemList</td>
<td class="fielddoc">
</td></tr>
</table>

</div>
</div>
<a name="d1/d2d/struct_s_l_net_1_1_ready_event_1_1_remote_system" id="d1/d2d/struct_s_l_net_1_1_ready_event_1_1_remote_system"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct SLNet::ReadyEvent::RemoteSystem</td>
        </tr>
      </table>
</div><div class="memdoc">
<div class="textblock">
<p>Definition at line <a class="el" href="../../d0/d2e/_ready_event_8h_source.xhtml#l00186">186</a> of file <a class="el" href="../../d0/d2e/_ready_event_8h_source.xhtml">ReadyEvent.h</a>.</p>
</div><table class="fieldtable">
<tr><th colspan="3">Class Members</th></tr>
<tr><td class="fieldtype">
<a class="anchor" id="a1d9cc8c2f059007dfa4d43563115b901"></a><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a5b5b9eb3be9ad636af02da44b718a75f">MessageID</a></td>
<td class="fieldname">
lastReceivedStatus</td>
<td class="fielddoc">
</td></tr>
<tr><td class="fieldtype">
<a class="anchor" id="acdd2e0104f5b38f18f8ae0310b57b0d0"></a><a class="el" href="../../dd/d30/namespace_s_l_net.xhtml#a5b5b9eb3be9ad636af02da44b718a75f">MessageID</a></td>
<td class="fieldname">
lastSentStatus</td>
<td class="fielddoc">
</td></tr>
<tr><td class="fieldtype">
<a class="anchor" id="a0d63cbf5f232e15f00ad8639073197f7"></a><a class="el" href="../../dd/d3f/struct_s_l_net_1_1_rak_net_g_u_i_d.xhtml">RakNetGUID</a></td>
<td class="fieldname">
rakNetGuid</td>
<td class="fielddoc">
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a class="anchor" id="ga1d04a0c6284e814a187e5d337ba4760b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#ga1d04a0c6284e814a187e5d337ba4760b">SLNet::ReadyEventSystemStatus</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the status of a remote system when querying with <a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#a87c0c5353ba4fd722045d83a8f2a4bcd">ReadyEvent::GetReadyStatus</a> </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="gga1d04a0c6284e814a187e5d337ba4760ba65b805617ce26f98c83f9f01f2b7776e"></a>RES_NOT_WAITING</em>&nbsp;</td><td>
<p>--------&mdash; Normal states ------------&mdash; The remote system is not in the wait list, and we have never gotten a ready or complete message from it. This is the default state for valid events </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga1d04a0c6284e814a187e5d337ba4760ba8cdc766b5ca3ef985b0ce1472e86b04d"></a>RES_WAITING</em>&nbsp;</td><td>
<p>We are waiting for this remote system to call SetEvent(thisEvent,true). </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga1d04a0c6284e814a187e5d337ba4760baf1de8b9e87701bdc1eae68cb167e0908"></a>RES_READY</em>&nbsp;</td><td>
<p>The remote system called SetEvent(thisEvent,true), but it still waiting for other systems before completing the <a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#d6/dad/class_s_l_net_1_1_ready_event" title="Peer to peer synchronized ready and unready events.">ReadyEvent</a>. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga1d04a0c6284e814a187e5d337ba4760bafec669ec341fcfbf449048e9938c6a36"></a>RES_ALL_READY</em>&nbsp;</td><td>
<p>The remote system called SetEvent(thisEvent,true), and is no longer waiting for any other systems. This remote system has completed the <a class="el" href="../../d7/dda/group___r_e_a_d_y___e_v_e_n_t___g_r_o_u_p.xhtml#d6/dad/class_s_l_net_1_1_ready_event" title="Peer to peer synchronized ready and unready events.">ReadyEvent</a> </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="gga1d04a0c6284e814a187e5d337ba4760ba1d9a96d979d6772586ac327d0115cd44"></a>RES_UNKNOWN_EVENT</em>&nbsp;</td><td>
<p>Error code, we couldn't look up the system because the event was unknown. </p>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="../../d0/d2e/_ready_event_8h_source.xhtml#l00041">41</a> of file <a class="el" href="../../d0/d2e/_ready_event_8h_source.xhtml">ReadyEvent.h</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Wed Aug 14 2019 22:09:48 for SLikeNet by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.2 </li>
  </ul>
</div>
</body>
</html>
